function gifmin(gifBuffer,colors) {
    var opts={
        print: console.log,
        printErr: console.log,
        files: [
            {
                "name": "in.gif",
                "buffer": new Uint8Array(gifBuffer)
            }
        ],
        arguments: ["-O3","--colors="+colors,"in.gif","-o","out.gif"]
    };
    var isNode = typeof(exports) !== 'undefined';
    if (!isNode) {
        var Module = {
            'outputDirectory': 'output'
        };
        for (var i in opts) {
            Module[i] = opts[i];
        }
        var outputFilePath = Module['arguments'][Module['arguments'].length - 1];
        Module['arguments'][Module['arguments'].length - 1] = "output/" + outputFilePath;

        Module['preRun'] = function() {
            FS.createFolder('/', Module['outputDirectory'], true, true);
            /* fileData / fileName is deprecated - please use file.name and file.data instead */
            if (Module['fileData']) {
                FS.createDataFile('/', Module['fileName'], Module['fileData'], true, true);
            }
            if (Module['files']) {
                Module['files'].forEach(function(file) {
                    FS.createDataFile('/', file.name, file.buffer, true, true);
                });
            }
            // convert \r into \n for stdout
            var curr_tty_put_char = TTY.default_tty_ops.put_char;
            TTY.default_tty_ops.put_char = function (tty, val) {
                curr_tty_put_char(tty, val === 13 ? 10 : val);
            }
            var curr_tty1_put_char = TTY.default_tty1_ops.put_char;
            TTY.default_tty1_ops.put_char = function (tty, val) {
                curr_tty1_put_char(tty, val === 13 ? 10 : val);
            }
        };
        Module['postRun'] = function() {
            var handle = FS.analyzePath(Module['outputDirectory']);
            var obj=getOutputFiles(handle);
            Module['return'] = Object.keys(obj).length>0?obj['out.gif']:false;
        };
        function getOutputFiles(result) {
            // create buffer for each output file
            var outputFiles = {}
            if (result && result.object && result.object.contents) {
                for (var i in result.object.contents) {
                    if (result.object.contents.hasOwnProperty(i)) {
                        outputFiles[i] = new Uint8Array(result.object.contents[i].contents).buffer;
                    }
                }
            }
            return outputFiles;
        }
    }
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
    var Module;
    if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
    var moduleOverrides = {};
    for (var key in Module) {
        if (Module.hasOwnProperty(key)) {
            moduleOverrides[key] = Module[key];
        }
    }

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
    var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
    var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
    var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
    var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

    if (ENVIRONMENT_IS_NODE) {
        // Expose functionality in the same simple way that the shells work
        // Note that we pollute the global namespace here, otherwise we break in node
        if (!Module['print']) Module['print'] = function print(x) {
            process['stdout'].write(x + '\n');
        };
        if (!Module['printErr']) Module['printErr'] = function printErr(x) {
            process['stderr'].write(x + '\n');
        };

        var nodeFS = require('fs');
        var nodePath = require('path');

        Module['read'] = function read(filename, binary) {
            filename = nodePath['normalize'](filename);
            var ret = nodeFS['readFileSync'](filename);
            // The path is absolute if the normalized version is the same as the resolved.
            if (!ret && filename != nodePath['resolve'](filename)) {
                filename = path.join(__dirname, '..', 'src', filename);
                ret = nodeFS['readFileSync'](filename);
            }
            if (ret && !binary) ret = ret.toString();
            return ret;
        };

        Module['readBinary'] = function readBinary(filename) {
            var ret = Module['read'](filename, true);
            if (!ret.buffer) {
                ret = new Uint8Array(ret);
            }
            assert(ret.buffer);
            return ret;
        };

        Module['load'] = function load(f) {
            globalEval(read(f));
        };

        if (!Module['thisProgram']) {
            if (process['argv'].length > 1) {
                Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
            } else {
                Module['thisProgram'] = 'unknown-program';
            }
        }

        Module['arguments'] = process['argv'].slice(2);

        if (typeof module !== 'undefined') {
            module['exports'] = Module;
        }

        process['on']('uncaughtException', function(ex) {
            // suppress ExitStatus exceptions from showing an error
            if (!(ex instanceof ExitStatus)) {
                throw ex;
            }
        });

        Module['inspect'] = function () { return '[Emscripten Module object]'; };
    }
    else if (ENVIRONMENT_IS_SHELL) {
        if (!Module['print']) Module['print'] = print;
        if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

        if (typeof read != 'undefined') {
            Module['read'] = read;
        } else {
            Module['read'] = function read() { throw 'no read() available (jsc?)' };
        }

        Module['readBinary'] = function readBinary(f) {
            if (typeof readbuffer === 'function') {
                return new Uint8Array(readbuffer(f));
            }
            var data = read(f, 'binary');
            assert(typeof data === 'object');
            return data;
        };

        if (typeof scriptArgs != 'undefined') {
            Module['arguments'] = scriptArgs;
        } else if (typeof arguments != 'undefined') {
            Module['arguments'] = arguments;
        }

    }
    else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
        Module['read'] = function read(url) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            xhr.send(null);
            return xhr.responseText;
        };

        if (typeof arguments != 'undefined') {
            Module['arguments'] = arguments;
        }

        if (typeof console !== 'undefined') {
            if (!Module['print']) Module['print'] = function print(x) {
                console.log(x);
            };
            if (!Module['printErr']) Module['printErr'] = function printErr(x) {
                console.log(x);
            };
        } else {
            // Probably a worker, and without console.log. We can do very little here...
            var TRY_USE_DUMP = false;
            if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
                    dump(x);
                }) : (function(x) {
                    // self.postMessage(x); // enable this if you want stdout to be sent as messages
                }));
        }

        if (ENVIRONMENT_IS_WORKER) {
            Module['load'] = importScripts;
        }

        if (typeof Module['setWindowTitle'] === 'undefined') {
            Module['setWindowTitle'] = function(title) { document.title = title };
        }
    }
    else {
        // Unreachable because SHELL is dependant on the others
        throw 'Unknown runtime environment. Where are we?';
    }

    function globalEval(x) {
        eval.call(null, x);
    }
    if (!Module['load'] && Module['read']) {
        Module['load'] = function load(f) {
            globalEval(Module['read'](f));
        };
    }
    if (!Module['print']) {
        Module['print'] = function(){};
    }
    if (!Module['printErr']) {
        Module['printErr'] = Module['print'];
    }
    if (!Module['arguments']) {
        Module['arguments'] = [];
    }
    if (!Module['thisProgram']) {
        Module['thisProgram'] = './this.program';
    }

// *** Environment setup code ***

// Closure helpers
    Module.print = Module['print'];
    Module.printErr = Module['printErr'];

// Callbacks
    Module['preRun'] = [];
    Module['postRun'] = [];

// Merge back in the overrides
    for (var key in moduleOverrides) {
        if (moduleOverrides.hasOwnProperty(key)) {
            Module[key] = moduleOverrides[key];
        }
    }



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

    var Runtime = {
        setTempRet0: function (value) {
            tempRet0 = value;
        },
        getTempRet0: function () {
            return tempRet0;
        },
        stackSave: function () {
            return STACKTOP;
        },
        stackRestore: function (stackTop) {
            STACKTOP = stackTop;
        },
        getNativeTypeSize: function (type) {
            switch (type) {
                case 'i1': case 'i8': return 1;
                case 'i16': return 2;
                case 'i32': return 4;
                case 'i64': return 8;
                case 'float': return 4;
                case 'double': return 8;
                default: {
                    if (type[type.length-1] === '*') {
                        return Runtime.QUANTUM_SIZE; // A pointer
                    } else if (type[0] === 'i') {
                        var bits = parseInt(type.substr(1));
                        assert(bits % 8 === 0);
                        return bits/8;
                    } else {
                        return 0;
                    }
                }
            }
        },
        getNativeFieldSize: function (type) {
            return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
        },
        STACK_ALIGN: 16,
        prepVararg: function (ptr, type) {
            if (type === 'double' || type === 'i64') {
                // move so the load is aligned
                if (ptr & 7) {
                    assert((ptr & 7) === 4);
                    ptr += 4;
                }
            } else {
                assert((ptr & 3) === 0);
            }
            return ptr;
        },
        getAlignSize: function (type, size, vararg) {
            // we align i64s and doubles on 64-bit boundaries, unlike x86
            if (!vararg && (type == 'i64' || type == 'double')) return 8;
            if (!type) return Math.min(size, 8); // align structures internally to 64 bits
            return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
        },
        dynCall: function (sig, ptr, args) {
            if (args && args.length) {
                if (!args.splice) args = Array.prototype.slice.call(args);
                args.splice(0, 0, ptr);
                return Module['dynCall_' + sig].apply(null, args);
            } else {
                return Module['dynCall_' + sig].call(null, ptr);
            }
        },
        functionPointers: [],
        addFunction: function (func) {
            for (var i = 0; i < Runtime.functionPointers.length; i++) {
                if (!Runtime.functionPointers[i]) {
                    Runtime.functionPointers[i] = func;
                    return 2*(1 + i);
                }
            }
            throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
        },
        removeFunction: function (index) {
            Runtime.functionPointers[(index-2)/2] = null;
        },
        warnOnce: function (text) {
            if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
            if (!Runtime.warnOnce.shown[text]) {
                Runtime.warnOnce.shown[text] = 1;
                Module.printErr(text);
            }
        },
        funcWrappers: {},
        getFuncWrapper: function (func, sig) {
            assert(sig);
            if (!Runtime.funcWrappers[sig]) {
                Runtime.funcWrappers[sig] = {};
            }
            var sigCache = Runtime.funcWrappers[sig];
            if (!sigCache[func]) {
                sigCache[func] = function dynCall_wrapper() {
                    return Runtime.dynCall(sig, func, arguments);
                };
            }
            return sigCache[func];
        },
        getCompilerSetting: function (name) {
            throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
        },
        stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
        staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
        dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
        alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
        makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
        GLOBAL_BASE: 8,
        QUANTUM_SIZE: 4,
        __dummy__: 0
    }



    Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

    var __THREW__ = 0; // Used in checking for thrown exceptions.

    var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
    var EXITSTATUS = 0;

    var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
    var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
    var tempI64, tempI64b;
    var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

    function assert(condition, text) {
        if (!condition) {
            abort('Assertion failed: ' + text);
        }
    }

    var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
    function getCFunc(ident) {
        var func = Module['_' + ident]; // closure exported function
        if (!func) {
            try {
                func = eval('_' + ident); // explicit lookup
            } catch(e) {}
        }
        assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
        return func;
    }

    var cwrap, ccall;
    (function(){
        var JSfuncs = {
            // Helpers for cwrap -- it can't refer to Runtime directly because it might
            // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
            // out what the minified function name is.
            'stackSave': function() {
                Runtime.stackSave()
            },
            'stackRestore': function() {
                Runtime.stackRestore()
            },
            // type conversion from js to c
            'arrayToC' : function(arr) {
                var ret = Runtime.stackAlloc(arr.length);
                writeArrayToMemory(arr, ret);
                return ret;
            },
            'stringToC' : function(str) {
                var ret = 0;
                if (str !== null && str !== undefined && str !== 0) { // null string
                    // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
                    ret = Runtime.stackAlloc((str.length << 2) + 1);
                    writeStringToMemory(str, ret);
                }
                return ret;
            }
        };
        // For fast lookup of conversion functions
        var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

        // C calling interface.
        ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
            var func = getCFunc(ident);
            var cArgs = [];
            var stack = 0;
            if (args) {
                for (var i = 0; i < args.length; i++) {
                    var converter = toC[argTypes[i]];
                    if (converter) {
                        if (stack === 0) stack = Runtime.stackSave();
                        cArgs[i] = converter(args[i]);
                    } else {
                        cArgs[i] = args[i];
                    }
                }
            }
            var ret = func.apply(null, cArgs);
            if (returnType === 'string') ret = Pointer_stringify(ret);
            if (stack !== 0) {
                if (opts && opts.async) {
                    EmterpreterAsync.asyncFinalizers.push(function() {
                        Runtime.stackRestore(stack);
                    });
                    return;
                }
                Runtime.stackRestore(stack);
            }
            return ret;
        }

        var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
        function parseJSFunc(jsfunc) {
            // Match the body and the return value of a javascript function source
            var parsed = jsfunc.toString().match(sourceRegex).slice(1);
            return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
        }
        var JSsource = {};
        for (var fun in JSfuncs) {
            if (JSfuncs.hasOwnProperty(fun)) {
                // Elements of toCsource are arrays of three items:
                // the code, and the return value
                JSsource[fun] = parseJSFunc(JSfuncs[fun]);
            }
        }


        cwrap = function cwrap(ident, returnType, argTypes) {
            argTypes = argTypes || [];
            var cfunc = getCFunc(ident);
            // When the function takes numbers and returns a number, we can just return
            // the original function
            var numericArgs = argTypes.every(function(type){ return type === 'number'});
            var numericRet = (returnType !== 'string');
            if ( numericRet && numericArgs) {
                return cfunc;
            }
            // Creation of the arguments list (["$1","$2",...,"$nargs"])
            var argNames = argTypes.map(function(x,i){return '$'+i});
            var funcstr = "(function(" + argNames.join(',') + ") {";
            var nargs = argTypes.length;
            if (!numericArgs) {
                // Generate the code needed to convert the arguments from javascript
                // values to pointers
                funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
                for (var i = 0; i < nargs; i++) {
                    var arg = argNames[i], type = argTypes[i];
                    if (type === 'number') continue;
                    var convertCode = JSsource[type + 'ToC']; // [code, return]
                    funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
                    funcstr += convertCode.body + ';';
                    funcstr += arg + '=' + convertCode.returnValue + ';';
                }
            }

            // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
            var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
            // Call the function
            funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
            if (!numericRet) { // Return type can only by 'string' or 'number'
                // Convert the result to a string
                var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
                funcstr += 'ret = ' + strgfy + '(ret);';
            }
            if (!numericArgs) {
                // If we had a stack, restore it
                funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
            }
            funcstr += 'return ret})';
            return eval(funcstr);
        };
    })();
    Module["ccall"] = ccall;
    Module["cwrap"] = cwrap;

    function setValue(ptr, value, type, noSafe) {
        type = type || 'i8';
        if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
        switch(type) {
            case 'i1': HEAP8[((ptr)>>0)]=value; break;
            case 'i8': HEAP8[((ptr)>>0)]=value; break;
            case 'i16': HEAP16[((ptr)>>1)]=value; break;
            case 'i32': HEAP32[((ptr)>>2)]=value; break;
            case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
            case 'float': HEAPF32[((ptr)>>2)]=value; break;
            case 'double': HEAPF64[((ptr)>>3)]=value; break;
            default: abort('invalid type for setValue: ' + type);
        }
    }
    Module["setValue"] = setValue;


    function getValue(ptr, type, noSafe) {
        type = type || 'i8';
        if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
        switch(type) {
            case 'i1': return HEAP8[((ptr)>>0)];
            case 'i8': return HEAP8[((ptr)>>0)];
            case 'i16': return HEAP16[((ptr)>>1)];
            case 'i32': return HEAP32[((ptr)>>2)];
            case 'i64': return HEAP32[((ptr)>>2)];
            case 'float': return HEAPF32[((ptr)>>2)];
            case 'double': return HEAPF64[((ptr)>>3)];
            default: abort('invalid type for setValue: ' + type);
        }
        return null;
    }
    Module["getValue"] = getValue;

    var ALLOC_NORMAL = 0; // Tries to use _malloc()
    var ALLOC_STACK = 1; // Lives for the duration of the current function call
    var ALLOC_STATIC = 2; // Cannot be freed
    var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
    var ALLOC_NONE = 4; // Do not allocate
    Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
    Module["ALLOC_STACK"] = ALLOC_STACK;
    Module["ALLOC_STATIC"] = ALLOC_STATIC;
    Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
    Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
    function allocate(slab, types, allocator, ptr) {
        var zeroinit, size;
        if (typeof slab === 'number') {
            zeroinit = true;
            size = slab;
        } else {
            zeroinit = false;
            size = slab.length;
        }

        var singleType = typeof types === 'string' ? types : null;

        var ret;
        if (allocator == ALLOC_NONE) {
            ret = ptr;
        } else {
            ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
        }

        if (zeroinit) {
            var ptr = ret, stop;
            assert((ret & 3) == 0);
            stop = ret + (size & ~3);
            for (; ptr < stop; ptr += 4) {
                HEAP32[((ptr)>>2)]=0;
            }
            stop = ret + size;
            while (ptr < stop) {
                HEAP8[((ptr++)>>0)]=0;
            }
            return ret;
        }

        if (singleType === 'i8') {
            if (slab.subarray || slab.slice) {
                HEAPU8.set(slab, ret);
            } else {
                HEAPU8.set(new Uint8Array(slab), ret);
            }
            return ret;
        }

        var i = 0, type, typeSize, previousType;
        while (i < size) {
            var curr = slab[i];

            if (typeof curr === 'function') {
                curr = Runtime.getFunctionIndex(curr);
            }

            type = singleType || types[i];
            if (type === 0) {
                i++;
                continue;
            }

            if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

            setValue(ret+i, curr, type);

            // no need to look up size unless type changes, so cache it
            if (previousType !== type) {
                typeSize = Runtime.getNativeTypeSize(type);
                previousType = type;
            }
            i += typeSize;
        }

        return ret;
    }
    Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
    function getMemory(size) {
        if (!staticSealed) return Runtime.staticAlloc(size);
        if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
        return _malloc(size);
    }
    Module["getMemory"] = getMemory;

    function Pointer_stringify(ptr, /* optional */ length) {
        if (length === 0 || !ptr) return '';
        // TODO: use TextDecoder
        // Find the length, and check for UTF while doing so
        var hasUtf = 0;
        var t;
        var i = 0;
        while (1) {
            t = HEAPU8[(((ptr)+(i))>>0)];
            hasUtf |= t;
            if (t == 0 && !length) break;
            i++;
            if (length && i == length) break;
        }
        if (!length) length = i;

        var ret = '';

        if (hasUtf < 128) {
            var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
            var curr;
            while (length > 0) {
                curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
                ret = ret ? ret + curr : curr;
                ptr += MAX_CHUNK;
                length -= MAX_CHUNK;
            }
            return ret;
        }
        return Module['UTF8ToString'](ptr);
    }
    Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

    function AsciiToString(ptr) {
        var str = '';
        while (1) {
            var ch = HEAP8[((ptr++)>>0)];
            if (!ch) return str;
            str += String.fromCharCode(ch);
        }
    }
    Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

    function stringToAscii(str, outPtr) {
        return writeAsciiToMemory(str, outPtr, false);
    }
    Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

    function UTF8ArrayToString(u8Array, idx) {
        var u0, u1, u2, u3, u4, u5;

        var str = '';
        while (1) {
            // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
            u0 = u8Array[idx++];
            if (!u0) return str;
            if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
            u1 = u8Array[idx++] & 63;
            if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
            u2 = u8Array[idx++] & 63;
            if ((u0 & 0xF0) == 0xE0) {
                u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
            } else {
                u3 = u8Array[idx++] & 63;
                if ((u0 & 0xF8) == 0xF0) {
                    u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
                } else {
                    u4 = u8Array[idx++] & 63;
                    if ((u0 & 0xFC) == 0xF8) {
                        u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
                    } else {
                        u5 = u8Array[idx++] & 63;
                        u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
                    }
                }
            }
            if (u0 < 0x10000) {
                str += String.fromCharCode(u0);
            } else {
                var ch = u0 - 0x10000;
                str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
            }
        }
    }
    Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

    function UTF8ToString(ptr) {
        return UTF8ArrayToString(HEAPU8,ptr);
    }
    Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

    function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
        if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
            return 0;

        var startIdx = outIdx;
        var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
        for (var i = 0; i < str.length; ++i) {
            // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
            // See http://unicode.org/faq/utf_bom.html#utf16-3
            // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
            var u = str.charCodeAt(i); // possibly a lead surrogate
            if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
            if (u <= 0x7F) {
                if (outIdx >= endIdx) break;
                outU8Array[outIdx++] = u;
            } else if (u <= 0x7FF) {
                if (outIdx + 1 >= endIdx) break;
                outU8Array[outIdx++] = 0xC0 | (u >> 6);
                outU8Array[outIdx++] = 0x80 | (u & 63);
            } else if (u <= 0xFFFF) {
                if (outIdx + 2 >= endIdx) break;
                outU8Array[outIdx++] = 0xE0 | (u >> 12);
                outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
                outU8Array[outIdx++] = 0x80 | (u & 63);
            } else if (u <= 0x1FFFFF) {
                if (outIdx + 3 >= endIdx) break;
                outU8Array[outIdx++] = 0xF0 | (u >> 18);
                outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
                outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
                outU8Array[outIdx++] = 0x80 | (u & 63);
            } else if (u <= 0x3FFFFFF) {
                if (outIdx + 4 >= endIdx) break;
                outU8Array[outIdx++] = 0xF8 | (u >> 24);
                outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
                outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
                outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
                outU8Array[outIdx++] = 0x80 | (u & 63);
            } else {
                if (outIdx + 5 >= endIdx) break;
                outU8Array[outIdx++] = 0xFC | (u >> 30);
                outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
                outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
                outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
                outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
                outU8Array[outIdx++] = 0x80 | (u & 63);
            }
        }
        // Null-terminate the pointer to the buffer.
        outU8Array[outIdx] = 0;
        return outIdx - startIdx;
    }
    Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

    function stringToUTF8(str, outPtr, maxBytesToWrite) {
        return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
    }
    Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

    function lengthBytesUTF8(str) {
        var len = 0;
        for (var i = 0; i < str.length; ++i) {
            // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
            // See http://unicode.org/faq/utf_bom.html#utf16-3
            var u = str.charCodeAt(i); // possibly a lead surrogate
            if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
            if (u <= 0x7F) {
                ++len;
            } else if (u <= 0x7FF) {
                len += 2;
            } else if (u <= 0xFFFF) {
                len += 3;
            } else if (u <= 0x1FFFFF) {
                len += 4;
            } else if (u <= 0x3FFFFFF) {
                len += 5;
            } else {
                len += 6;
            }
        }
        return len;
    }
    Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

    function UTF16ToString(ptr) {
        var i = 0;

        var str = '';
        while (1) {
            var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
            if (codeUnit == 0)
                return str;
            ++i;
            // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
            str += String.fromCharCode(codeUnit);
        }
    }
    Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

    function stringToUTF16(str, outPtr, maxBytesToWrite) {
        // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
        if (maxBytesToWrite === undefined) {
            maxBytesToWrite = 0x7FFFFFFF;
        }
        if (maxBytesToWrite < 2) return 0;
        maxBytesToWrite -= 2; // Null terminator.
        var startPtr = outPtr;
        var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
        for (var i = 0; i < numCharsToWrite; ++i) {
            // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
            var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
            HEAP16[((outPtr)>>1)]=codeUnit;
            outPtr += 2;
        }
        // Null-terminate the pointer to the HEAP.
        HEAP16[((outPtr)>>1)]=0;
        return outPtr - startPtr;
    }
    Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

    function lengthBytesUTF16(str) {
        return str.length*2;
    }
    Module["lengthBytesUTF16"] = lengthBytesUTF16;

    function UTF32ToString(ptr) {
        var i = 0;

        var str = '';
        while (1) {
            var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
            if (utf32 == 0)
                return str;
            ++i;
            // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
            // See http://unicode.org/faq/utf_bom.html#utf16-3
            if (utf32 >= 0x10000) {
                var ch = utf32 - 0x10000;
                str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
            } else {
                str += String.fromCharCode(utf32);
            }
        }
    }
    Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

    function stringToUTF32(str, outPtr, maxBytesToWrite) {
        // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
        if (maxBytesToWrite === undefined) {
            maxBytesToWrite = 0x7FFFFFFF;
        }
        if (maxBytesToWrite < 4) return 0;
        var startPtr = outPtr;
        var endPtr = startPtr + maxBytesToWrite - 4;
        for (var i = 0; i < str.length; ++i) {
            // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
            // See http://unicode.org/faq/utf_bom.html#utf16-3
            var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
            if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
                var trailSurrogate = str.charCodeAt(++i);
                codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
            }
            HEAP32[((outPtr)>>2)]=codeUnit;
            outPtr += 4;
            if (outPtr + 4 > endPtr) break;
        }
        // Null-terminate the pointer to the HEAP.
        HEAP32[((outPtr)>>2)]=0;
        return outPtr - startPtr;
    }
    Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

    function lengthBytesUTF32(str) {
        var len = 0;
        for (var i = 0; i < str.length; ++i) {
            // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
            // See http://unicode.org/faq/utf_bom.html#utf16-3
            var codeUnit = str.charCodeAt(i);
            if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
            len += 4;
        }

        return len;
    }
    Module["lengthBytesUTF32"] = lengthBytesUTF32;

    function demangle(func) {
        var hasLibcxxabi = !!Module['___cxa_demangle'];
        if (hasLibcxxabi) {
            try {
                var buf = _malloc(func.length);
                writeStringToMemory(func.substr(1), buf);
                var status = _malloc(4);
                var ret = Module['___cxa_demangle'](buf, 0, 0, status);
                if (getValue(status, 'i32') === 0 && ret) {
                    return Pointer_stringify(ret);
                }
                // otherwise, libcxxabi failed, we can try ours which may return a partial result
            } catch(e) {
                // failure when using libcxxabi, we can try ours which may return a partial result
            } finally {
                if (buf) _free(buf);
                if (status) _free(status);
                if (ret) _free(ret);
            }
        }
        var i = 3;
        // params, etc.
        var basicTypes = {
            'v': 'void',
            'b': 'bool',
            'c': 'char',
            's': 'short',
            'i': 'int',
            'l': 'long',
            'f': 'float',
            'd': 'double',
            'w': 'wchar_t',
            'a': 'signed char',
            'h': 'unsigned char',
            't': 'unsigned short',
            'j': 'unsigned int',
            'm': 'unsigned long',
            'x': 'long long',
            'y': 'unsigned long long',
            'z': '...'
        };
        var subs = [];
        var first = true;
        function dump(x) {
            //return;
            if (x) Module.print(x);
            Module.print(func);
            var pre = '';
            for (var a = 0; a < i; a++) pre += ' ';
            Module.print (pre + '^');
        }
        function parseNested() {
            i++;
            if (func[i] === 'K') i++; // ignore const
            var parts = [];
            while (func[i] !== 'E') {
                if (func[i] === 'S') { // substitution
                    i++;
                    var next = func.indexOf('_', i);
                    var num = func.substring(i, next) || 0;
                    parts.push(subs[num] || '?');
                    i = next+1;
                    continue;
                }
                if (func[i] === 'C') { // constructor
                    parts.push(parts[parts.length-1]);
                    i += 2;
                    continue;
                }
                var size = parseInt(func.substr(i));
                var pre = size.toString().length;
                if (!size || !pre) { i--; break; } // counter i++ below us
                var curr = func.substr(i + pre, size);
                parts.push(curr);
                subs.push(curr);
                i += pre + size;
            }
            i++; // skip E
            return parts;
        }
        function parse(rawList, limit, allowVoid) { // main parser
            limit = limit || Infinity;
            var ret = '', list = [];
            function flushList() {
                return '(' + list.join(', ') + ')';
            }
            var name;
            if (func[i] === 'N') {
                // namespaced N-E
                name = parseNested().join('::');
                limit--;
                if (limit === 0) return rawList ? [name] : name;
            } else {
                // not namespaced
                if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
                var size = parseInt(func.substr(i));
                if (size) {
                    var pre = size.toString().length;
                    name = func.substr(i + pre, size);
                    i += pre + size;
                }
            }
            first = false;
            if (func[i] === 'I') {
                i++;
                var iList = parse(true);
                var iRet = parse(true, 1, true);
                ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
            } else {
                ret = name;
            }
            paramLoop: while (i < func.length && limit-- > 0) {
                //dump('paramLoop');
                var c = func[i++];
                if (c in basicTypes) {
                    list.push(basicTypes[c]);
                } else {
                    switch (c) {
                        case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
                        case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
                        case 'L': { // literal
                            i++; // skip basic type
                            var end = func.indexOf('E', i);
                            var size = end - i;
                            list.push(func.substr(i, size));
                            i += size + 2; // size + 'EE'
                            break;
                        }
                        case 'A': { // array
                            var size = parseInt(func.substr(i));
                            i += size.toString().length;
                            if (func[i] !== '_') throw '?';
                            i++; // skip _
                            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
                            break;
                        }
                        case 'E': break paramLoop;
                        default: ret += '?' + c; break paramLoop;
                    }
                }
            }
            if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
            if (rawList) {
                if (ret) {
                    list.push(ret + '?');
                }
                return list;
            } else {
                return ret + flushList();
            }
        }
        var parsed = func;
        try {
            // Special-case the entry point, since its name differs from other name mangling.
            if (func == 'Object._main' || func == '_main') {
                return 'main()';
            }
            if (typeof func === 'number') func = Pointer_stringify(func);
            if (func[0] !== '_') return func;
            if (func[1] !== '_') return func; // C function
            if (func[2] !== 'Z') return func;
            switch (func[3]) {
                case 'n': return 'operator new()';
                case 'd': return 'operator delete()';
            }
            parsed = parse();
        } catch(e) {
            parsed += '?';
        }
        if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
            Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
        }
        return parsed;
    }

    function demangleAll(text) {
        return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
    }

    function jsStackTrace() {
        var err = new Error();
        if (!err.stack) {
            // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
            // so try that as a special-case.
            try {
                throw new Error(0);
            } catch(e) {
                err = e;
            }
            if (!err.stack) {
                return '(no stack trace available)';
            }
        }
        return err.stack.toString();
    }

    function stackTrace() {
        return demangleAll(jsStackTrace());
    }
    Module["stackTrace"] = stackTrace;

// Memory management

    var PAGE_SIZE = 4096;

    function alignMemoryPage(x) {
        if (x % 4096 > 0) {
            x += (4096 - (x % 4096));
        }
        return x;
    }

    var HEAP;
    var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

    var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
    var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
    var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


    function abortOnCannotGrowMemory() {
        abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }

    function enlargeMemory() {
        abortOnCannotGrowMemory();
    }


    var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
    var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 116777216;

    var totalMemory = 64*1024;
    while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
        if (totalMemory < 16*1024*1024) {
            totalMemory *= 2;
        } else {
            totalMemory += 16*1024*1024
        }
    }
    if (totalMemory !== TOTAL_MEMORY) {
        TOTAL_MEMORY = totalMemory;
    }

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
    assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
        'JS engine does not provide full typed array support');

    var buffer;



    buffer = new ArrayBuffer(TOTAL_MEMORY);
    HEAP8 = new Int8Array(buffer);
    HEAP16 = new Int16Array(buffer);
    HEAP32 = new Int32Array(buffer);
    HEAPU8 = new Uint8Array(buffer);
    HEAPU16 = new Uint16Array(buffer);
    HEAPU32 = new Uint32Array(buffer);
    HEAPF32 = new Float32Array(buffer);
    HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
    HEAP32[0] = 255;
    assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

    Module['HEAP'] = HEAP;
    Module['buffer'] = buffer;
    Module['HEAP8'] = HEAP8;
    Module['HEAP16'] = HEAP16;
    Module['HEAP32'] = HEAP32;
    Module['HEAPU8'] = HEAPU8;
    Module['HEAPU16'] = HEAPU16;
    Module['HEAPU32'] = HEAPU32;
    Module['HEAPF32'] = HEAPF32;
    Module['HEAPF64'] = HEAPF64;

    function callRuntimeCallbacks(callbacks) {
        while(callbacks.length > 0) {
            var callback = callbacks.shift();
            if (typeof callback == 'function') {
                callback();
                continue;
            }
            var func = callback.func;
            if (typeof func === 'number') {
                if (callback.arg === undefined) {
                    Runtime.dynCall('v', func);
                } else {
                    Runtime.dynCall('vi', func, [callback.arg]);
                }
            } else {
                func(callback.arg === undefined ? null : callback.arg);
            }
        }
    }

    var __ATPRERUN__  = []; // functions called before the runtime is initialized
    var __ATINIT__    = []; // functions called during startup
    var __ATMAIN__    = []; // functions called when main() is to be run
    var __ATEXIT__    = []; // functions called during shutdown
    var __ATPOSTRUN__ = []; // functions called after the runtime has exited

    var runtimeInitialized = false;
    var runtimeExited = false;


    function preRun() {
        // compatibility - merge in anything from Module['preRun'] at this time
        if (Module['preRun']) {
            if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
            while (Module['preRun'].length) {
                addOnPreRun(Module['preRun'].shift());
            }
        }
        callRuntimeCallbacks(__ATPRERUN__);
    }

    function ensureInitRuntime() {
        if (runtimeInitialized) return;
        runtimeInitialized = true;
        callRuntimeCallbacks(__ATINIT__);
    }

    function preMain() {
        callRuntimeCallbacks(__ATMAIN__);
    }

    function exitRuntime() {
        callRuntimeCallbacks(__ATEXIT__);
        runtimeExited = true;
    }

    function postRun() {
        // compatibility - merge in anything from Module['postRun'] at this time
        if (Module['postRun']) {
            if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
            while (Module['postRun'].length) {
                addOnPostRun(Module['postRun'].shift());
            }
        }
        callRuntimeCallbacks(__ATPOSTRUN__);
    }

    function addOnPreRun(cb) {
        __ATPRERUN__.unshift(cb);
    }
    Module["addOnPreRun"] = addOnPreRun;

    function addOnInit(cb) {
        __ATINIT__.unshift(cb);
    }
    Module["addOnInit"] = addOnInit;

    function addOnPreMain(cb) {
        __ATMAIN__.unshift(cb);
    }
    Module["addOnPreMain"] = addOnPreMain;

    function addOnExit(cb) {
        __ATEXIT__.unshift(cb);
    }
    Module["addOnExit"] = addOnExit;

    function addOnPostRun(cb) {
        __ATPOSTRUN__.unshift(cb);
    }
    Module["addOnPostRun"] = addOnPostRun;

// Tools


    function intArrayFromString(stringy, dontAddNull, length /* optional */) {
        var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
        var u8array = new Array(len);
        var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
        if (dontAddNull) u8array.length = numBytesWritten;
        return u8array;
    }
    Module["intArrayFromString"] = intArrayFromString;

    function intArrayToString(array) {
        var ret = [];
        for (var i = 0; i < array.length; i++) {
            var chr = array[i];
            if (chr > 0xFF) {
                chr &= 0xFF;
            }
            ret.push(String.fromCharCode(chr));
        }
        return ret.join('');
    }
    Module["intArrayToString"] = intArrayToString;

    function writeStringToMemory(string, buffer, dontAddNull) {
        var array = intArrayFromString(string, dontAddNull);
        var i = 0;
        while (i < array.length) {
            var chr = array[i];
            HEAP8[(((buffer)+(i))>>0)]=chr;
            i = i + 1;
        }
    }
    Module["writeStringToMemory"] = writeStringToMemory;

    function writeArrayToMemory(array, buffer) {
        for (var i = 0; i < array.length; i++) {
            HEAP8[((buffer++)>>0)]=array[i];
        }
    }
    Module["writeArrayToMemory"] = writeArrayToMemory;

    function writeAsciiToMemory(str, buffer, dontAddNull) {
        for (var i = 0; i < str.length; ++i) {
            HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
        }
        // Null-terminate the pointer to the HEAP.
        if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
    }
    Module["writeAsciiToMemory"] = writeAsciiToMemory;

    function unSign(value, bits, ignore) {
        if (value >= 0) {
            return value;
        }
        return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
            : Math.pow(2, bits)         + value;
    }
    function reSign(value, bits, ignore) {
        if (value <= 0) {
            return value;
        }
        var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
            : Math.pow(2, bits-1);
        if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
            // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
            // TODO: In i64 mode 1, resign the two parts separately and safely
            value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
        }
        return value;
    }


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
    if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
        var ah  = a >>> 16;
        var al = a & 0xffff;
        var bh  = b >>> 16;
        var bl = b & 0xffff;
        return (al*bl + ((ah*bl + al*bh) << 16))|0;
    };
    Math.imul = Math['imul'];


    if (!Math['clz32']) Math['clz32'] = function(x) {
        x = x >>> 0;
        for (var i = 0; i < 32; i++) {
            if (x & (1 << (31 - i))) return i;
        }
        return 32;
    };
    Math.clz32 = Math['clz32']

    var Math_abs = Math.abs;
    var Math_cos = Math.cos;
    var Math_sin = Math.sin;
    var Math_tan = Math.tan;
    var Math_acos = Math.acos;
    var Math_asin = Math.asin;
    var Math_atan = Math.atan;
    var Math_atan2 = Math.atan2;
    var Math_exp = Math.exp;
    var Math_log = Math.log;
    var Math_sqrt = Math.sqrt;
    var Math_ceil = Math.ceil;
    var Math_floor = Math.floor;
    var Math_pow = Math.pow;
    var Math_imul = Math.imul;
    var Math_fround = Math.fround;
    var Math_min = Math.min;
    var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
    var runDependencies = 0;
    var runDependencyWatcher = null;
    var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

    function getUniqueRunDependency(id) {
        return id;
    }

    function addRunDependency(id) {
        runDependencies++;
        if (Module['monitorRunDependencies']) {
            Module['monitorRunDependencies'](runDependencies);
        }
    }
    Module["addRunDependency"] = addRunDependency;

    function removeRunDependency(id) {
        runDependencies--;
        if (Module['monitorRunDependencies']) {
            Module['monitorRunDependencies'](runDependencies);
        }
        if (runDependencies == 0) {
            if (runDependencyWatcher !== null) {
                clearInterval(runDependencyWatcher);
                runDependencyWatcher = null;
            }
            if (dependenciesFulfilled) {
                var callback = dependenciesFulfilled;
                dependenciesFulfilled = null;
                callback(); // can add another dependenciesFulfilled
            }
        }
    }
    Module["removeRunDependency"] = removeRunDependency;

    Module["preloadedImages"] = {}; // maps url to image data
    Module["preloadedAudios"] = {}; // maps url to audio data



    var memoryInitializer = null;



// === Body ===

    var ASM_CONSTS = [];




    STATIC_BASE = 8;

    STATICTOP = STATIC_BASE + 29264;
    /* global initializers */  __ATINIT__.push();


    /* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE);
    /* memory initializer */ allocate([13,2,15,1,14,2,15,0,8,12,5,13,5,15,1,12,1,15,1,14,6,14,2,14,2,14,6,11,6,11,3,12,2,13,6,15,3,9,5,8,2,8,5,9,1,9,4,9,2,8,4,13,1,13,0,11,6,11,6,9,2,11,3,10,1,10,6,9,6,11,7,15,5,5,12,0,9,5,8,5,9,0,10,2,13,4,8,5,14,2,9,2,15,4,8,2,8,0,12,6,12,0,10,5,15,4,9,3,13,0,9,4,15,1,14,1,9,0,9,2,14,6,12,0,15,7,9,2,9,0,15,6,10,3,15,3,13,9,1,15,5,12,3,14,0,15,7,8,5,14,1,11,1,13,6,10,7,13,0,14,5,10,7,11,3,15,6,11,1,12,2,8,4,13,5,10,2,10,6,13,5,13,4,10,5,9,3,8,4,12,1,12,5,11,6,14,3,11,7,11,7,2,11,4,12,7,8,3,15,3,11,4,11,7,10,1,10,2,10,0,11,4,12,0,10,1,8,7,11,1,10,1,15,7,10,2,11,1,9,6,14,2,11,1,14,4,12,2,13,1,9,5,8,7,11,7,10,7,15,4,13,3,10,1,11,13,5,8,0,15,3,11,6,12,7,15,3,15,1,15,4,14,5,13,6,8,1,15,6,13,5,12,2,15,4,9,4,15,3,14,6,14,5,9,3,12,6,11,5,8,2,9,5,12,5,15,1,13,3,14,2,8,0,8,0,12,7,15,5,0,14,1,8,2,8,2,15,2,9,6,12,0,12,7,12,7,13,0,15,6,14,5,11,1,12,5,8,5,8,1,14,0,10,4,12,6,9,6,8,0,9,0,15,4,15,5,13,1,15,5,12,7,10,6,14,4,9,6,15,0,15,7,13,10,4,13,5,13,5,11,5,12,5,9,3,9,4,8,3,9,3,10,6,11,1,15,2,8,5,15,1,13,2,11,6,14,6,8,2,15,3,14,3,13,6,9,6,9,0,10,2,10,7,11,1,15,3,9,3,13,3,10,3,9,4,10,1,4,11,7,10,2,14,4,15,3,15,2,15,7,10,2,14,1,8,0,15,2,8,1,12,2,13,1,8,7,12,6,11,1,10,4,11,2,15,0,13,0,12,7,11,5,12,7,8,6,15,4,12,7,10,6,10,0,10,0,11,4,12,7,10,13,2,14,2,10,7,11,1,11,7,11,7,12,3,11,7,13,4,11,6,12,5,11,6,10,7,13,4,11,3,15,3,14,4,15,3,8,5,10,7,10,6,15,3,9,3,15,1,11,3,9,0,15,1,15,3,15,4,13,5,8,3,15,3,3,9,1,12,4,14,0,11,7,15,1,11,3,14,0,11,5,10,2,10,2,8,6,14,7,11,0,10,7,14,7,15,6,9,6,9,1,12,7,9,4,8,7,13,0,13,6,12,6,8,1,9,1,15,4,12,0,12,4,10,0,13,0,12,13,5,10,6,9,1,13,6,11,0,14,7,11,7,14,5,15,2,13,5,15,4,9,2,13,3,14,7,10,3,10,3,12,3,12,2,8,5,15,3,13,3,11,3,10,4,9,3,15,1,14,4,11,6,10,3,8,4,13,0,10,4,8,5,5,8,3,13,4,14,1,13,7,9,2,14,4,14,4,12,7,10,6,10,5,12,2,11,6,12,7,13,4,11,2,11,3,8,5,15,2,10,1,9,2,12,0,12,0,10,1,12,0,9,7,10,0,15,4,9,0,8,1,14,4,14,4,13,12,2,8,6,10,0,8,5,13,3,8,5,10,3,11,2,15,0,13,3,8,2,15,6,9,1,8,3,14,1,15,5,14,7,8,0,12,6,15,5,8,5,9,4,15,5,8,5,15,4,12,3,9,6,12,3,13,5,11,7,10,1,8,3,4,15,2,11,2,10,6,11,3,14,7,15,0,10,0,14,3,12,4,8,7,9,3,11,0,13,2,12,2,13,5,8,5,8,2,11,4,12,2,10,7,8,6,10,7,12,7,11,0,15,7,8,7,15,0,9,2,12,6,13,0,9,4,9,8,3,12,5,15,5,13,1,8,7,8,3,12,5,9,5,9,6,14,1,12,3,15,7,10,7,8,5,8,5,15,0,13,1,14,7,9,1,14,7,13,2,12,3,8,1,13,3,8,4,12,0,11,3,12,5,11,5,9,3,12,6,14,2,5,13,2,8,6,12,7,10,5,14,4,11,2,11,2,13,2,13,5,10,5,9,0,10,7,13,4,15,2,9,1,9,5,9,6,10,4,12,5,12,4,10,3,14,3,15,1,8,4,12,5,8,5,14,7,11,7,15,5,11,2,13,1,9,10,0,13,6,10,2,15,3,8,1,12,2,14,6,8,5,10,7,13,1,13,1,12,7,9,1,9,2,12,5,12,4,12,3,12,2,9,0,8,1,15,1,10,7,10,6,12,4,11,1,14,2,11,0,14,1,9,2,12,2,8,5,13,5,6,10,7,11,0,9,3,9,5,11,0,8,0,13,2,13,4,13,5,9,4,8,2,8,0,10,0,14,6,9,6,9,4,14,7,9,0,11,7,10,7,11,7,14,4,14,5,15,4,8,4,11,5,14,0,8,1,14,7,14,2,11,7,13,12,3,13,3,14,5,15,6,12,0,15,4,11,5,9,5,9,2,14,1,12,1,13,5,15,4,11,7,12,1,13,2,8,1,12,0,15,6,14,2,14,3,10,1,11,3,11,0,12,1,15,2,11,1,12,4,9,4,10,2,13,6,10,2,2,8,4,8,4,9,0,9,2,15,5,9,6,11,7,14,0,9,2,12,2,8,0,10,1,9,7,8,2,9,1,11,2,11,2,8,1,9,1,11,7,13,6,11,1,11,0,9,2,13,4,14,1,15,2,8,7,15,0,13,6,9,4,13,13,5,13,1,14,0,12,6,9,6,12,0,13,0,11,3,13,6,11,7,12,5,14,6,14,5,15,3,13,6,14,7,15,6,15,5,13,4,14,5,8,2,14,3,14,6,14,5,10,6,10,2,9,5,15,5,11,1,8,5,13,3,11,2,2,8,6,8,0,9,1,15,0,11,4,15,7,8,4,8,1,13,7,11,1,13,5,15,1,15,2,9,0,13,5,12,3,12,2,8,1,10,1,13,5,15,3,9,3,9,2,12,5,14,6,13,1,9,6,9,1,8,4,15,7,10,7,15,14,5,14,3,12,4,10,7,12,7,8,2,12,1,13,2,11,4,13,3,8,5,8,1,10,7,12,6,9,5,8,0,8,7,14,5,13,6,8,4,8,2,12,6,13,5,8,7,8,3,10,3,13,4,12,1,13,4,11,1,14,3,8,1,2,13,6,10,0,9,1,15,0,12,4,11,2,9,0,9,0,13,1,8,0,11,5,9,6,13,2,15,2,12,7,12,6,15,2,14,1,13,1,14,4,11,2,14,1,9,0,15,1,12,5,14,6,13,2,15,3,9,1,15,7,8,1,14,11,7,13,3,15,6,8,4,8,4,14,2,14,6,13,6,11,4,14,4,15,4,14,3,10,2,10,5,9,6,9,3,9,1,11,6,9,4,8,4,15,0,8,4,13,4,9,4,9,5,9,3,10,2,9,5,12,6,8,4,12,0,11,4,4,10,4,13,1,12,7,8,0,13,4,12,2,13,1,14,7,15,3,8,7,12,3,10,4,9,4,11,7,8,2,11,2,10,0,12,1,14,6,14,7,13,7,11,3,10,0,10,4,9,3,13,0,13,7,8,7,9,7,11,2,8,1,14,15,0,11,1,9,6,15,3,10,7,9,1,9,7,10,7,10,1,12,5,8,1,15,7,13,3,12,2,13,2,14,7,14,5,10,4,8,4,11,1,10,3,14,0,14,6,14,5,13,2,8,7,10,7,13,2,14,2,13,2,14,5,11,6,7,11,5,13,1,11,7,8,5,14,4,13,1,14,5,10,2,15,4,13,7,11,7,10,1,8,5,9,4,12,7,10,1,13,7,13,7,11,0,14,5,14,2,14,4,12,4,13,7,13,7,8,2,14,2,13,5,9,5,9,2,8,1,10,12,0,8,2,13,4,12,1,11,1,10,1,10,4,12,2,11,5,8,1,15,3,14,1,13,4,14,2,9,2,12,2,8,4,8,2,12,3,10,6,11,0,11,7,10,1,9,2,10,0,13,1,11,7,10,6,13,1,12,1,12,6,14,7,2,14,4,15,7,14,5,8,4,13,2,10,4,13,0,13,1,11,1,12,7,12,6,13,4,13,4,13,2,12,2,13,1,13,7,10,2,11,2,10,7,15,7,11,5,13,2,8,2,14,4,9,2,14,0,8,1,8,7,10,5,15,6,14,11,7,10,2,11,1,13,0,11,1,15,7,8,1,9,4,13,4,8,4,8,3,10,0,9,0,9,2,9,7,9,6,10,7,13,1,13,7,14,6,11,3,12,2,8,2,12,5,11,5,12,2,10,5,14,4,12,4,13,2,9,1,10,0,2,12,0,13,7,13,2,12,4,8,1,12,4,13,6,11,7,13,7,13,1,9,7,10,2,10,1,9,2,10,1,11,6,9,4,13,2,10,0,10,2,14,0,13,7,10,7,10,0,12,0,9,0,13,2,13,1,9,0,15,2,14,2,13,11,7,8,4,10,2,10,7,12,1,11,7,8,2,13,1,10,0,10,2,13,6,14,0,14,7,13,6,14,5,13,4,15,1,10,2,13,7,13,7,9,4,9,6,13,3,13,3,8,4,13,4,10,6,10,5,12,4,10,7,11,6,9,6,4,14,6,11,7,13,6,10,4,8,4,11,6,8,5,13,7,14,7,14,1,9,0,12,1,9,1,12,4,14,7,10,4,13,7,13,7,11,4,10,1,11,7,13,4,12,1,10,4,12,2,8,2,12,2,10,2,12,1,12,4,12,2,12,8,2,13,2,8,1,13,1,12,1,12,2,12,2,11,1,9,2,11,3,12,4,8,4,12,4,10,6,10,1,13,2,11,2,10,1,12,0,14,2,14,4,9,2,8,1,13,4,8,0,12,4,11,6,12,6,11,7,10,7,11,2,10,7,100,105,97,103,52,53,0,100,105,97,103,111,110,97,108,0,8,8,64,2,16,32,48,56,40,24,8,0,36,52,60,44,28,12,4,20,49,57,41,25,9,1,17,33,61,45,29,13,5,21,37,53,42,26,10,2,18,34,50,58,30,14,6,22,38,54,62,46,11,3,19,35,51,59,43,27,7,23,39,55,63,47,31,15,104,97,108,102,116,111,110,101,0,104,97,108,102,0,116,114,105,104,97,108,102,116,111,110,101,0,116,114,105,104,97,108,102,0,115,113,104,97,108,102,116,111,110,101,0,115,113,104,97,108,102,0,115,113,117,97,114,101,104,97,108,102,116,111,110,101,0,42,110,101,119,95,110,99,111,108,32,60,32,110,101,119,95,99,109,45,62,99,97,112,97,99,105,116,121,0,116,114,121,95,97,115,115,105,103,110,95,116,114,97,110,115,112,97,114,101,110,99,121,0,42,110,101,119,95,110,99,111,108,32,61,61,32,50,53,54,0,112,108,97,110,112,111,115,32,61,61,32,110,112,108,97,110,0,112,108,97,110,95,102,114,111,109,95,99,112,108,97,110,0,85,115,97,103,101,58,32,37,115,32,91,79,80,84,73,79,78,32,124,32,70,73,76,69,32,124,32,70,82,65,77,69,93,46,46,46,10,84,114,121,32,39,37,115,32,45,45,104,101,108,112,39,32,102,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,46,10,0,39,71,105,102,115,105,99,108,101,39,32,109,97,110,105,112,117,108,97,116,101,115,32,71,73,70,32,105,109,97,103,101,115,46,32,73,116,115,32,109,111,115,116,32,99,111,109,109,111,110,32,117,115,101,115,32,105,110,99,108,117,100,101,32,99,111,109,98,105,110,105,110,103,10,115,105,110,103,108,101,32,105,109,97,103,101,115,32,105,110,116,111,32,97,110,105,109,97,116,105,111,110,115,44,32,97,100,100,105,110,103,32,116,114,97,110,115,112,97,114,101,110,99,121,44,32,111,112,116,105,109,105,122,105,110,103,32,97,110,105,109,97,116,105,111,110,115,32,102,111,114,10,115,112,97,99,101,44,32,97,110,100,32,112,114,105,110,116,105,110,103,32,105,110,102,111,114,109,97,116,105,111,110,32,97,98,111,117,116,32,71,73,70,115,46,10,10,85,115,97,103,101,58,32,37,115,32,91,79,80,84,73,79,78,32,124,32,70,73,76,69,32,124,32,70,82,65,77,69,93,46,46,46,10,10,0,77,111,100,101,32,111,112,116,105,111,110,115,58,32,97,116,32,109,111,115,116,32,111,110,101,44,32,98,101,102,111,114,101,32,97,110,121,32,102,105,108,101,110,97,109,101,115,46,10,32,32,45,109,44,32,45,45,109,101,114,103,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,77,101,114,103,101,32,109,111,100,101,58,32,99,111,109,98,105,110,101,32,105,110,112,117,116,115,44,32,119,114,105,116,101,32,115,116,100,111,117,116,46,10,32,32,45,98,44,32,45,45,98,97,116,99,104,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,66,97,116,99,104,32,109,111,100,101,58,32,109,111,100,105,102,121,32,105,110,112,117,116,115,44,32,119,114,105,116,101,32,98,97,99,107,32,116,111,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,115,97,109,101,32,102,105,108,101,110,97,109,101,115,46,10,32,32,45,101,44,32,45,45,101,120,112,108,111,100,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,69,120,112,108,111,100,101,32,109,111,100,101,58,32,119,114,105,116,101,32,78,32,102,105,108,101,115,32,102,111,114,32,101,97,99,104,32,105,110,112,117,116,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,110,101,32,112,101,114,32,102,114,97,109,101,44,32,116,111,32,39,105,110,112,117,116,46,102,114,97,109,101,45,110,117,109,98,101,114,39,46,10,32,32,45,69,44,32,45,45,101,120,112,108,111,100,101,45,98,121,45,110,97,109,101,32,32,32,32,32,32,32,32,32,69,120,112,108,111,100,101,32,109,111,100,101,44,32,98,117,116,32,119,114,105,116,101,32,39,105,110,112,117,116,46,110,97,109,101,39,46,10,0,71,101,110,101,114,97,108,32,111,112,116,105,111,110,115,58,32,65,108,115,111,32,45,45,110,111,45,79,80,84,73,79,78,32,102,111,114,32,105,110,102,111,32,97,110,100,32,118,101,114,98,111,115,101,46,10,32,32,45,73,44,32,45,45,105,110,102,111,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,80,114,105,110,116,32,105,110,102,111,32,97,98,111,117,116,32,105,110,112,117,116,32,71,73,70,115,46,32,84,119,111,32,45,73,39,115,32,109,101,97,110,115,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,110,111,114,109,97,108,32,111,117,116,112,117,116,32,105,115,32,110,111,116,32,115,117,112,112,114,101,115,115,101,100,46,10,32,32,32,32,32,32,45,45,99,111,108,111,114,45,105,110,102,111,44,32,45,45,99,105,110,102,111,32,32,32,32,32,45,45,105,110,102,111,32,112,108,117,115,32,99,111,108,111,114,109,97,112,32,100,101,116,97,105,108,115,46,10,32,32,32,32,32,32,45,45,101,120,116,101,110,115,105,111,110,45,105,110,102,111,44,32,45,45,120,105,110,102,111,32,45,45,105,110,102,111,32,112,108,117,115,32,101,120,116,101,110,115,105,111,110,32,100,101,116,97,105,108,115,46,10,32,32,32,32,32,32,45,45,115,105,122,101,45,105,110,102,111,44,32,45,45,115,105,110,102,111,32,32,32,32,32,32,45,45,105,110,102,111,32,112,108,117,115,32,99,111,109,112,114,101,115,115,105,111,110,32,105,110,102,111,114,109,97,116,105,111,110,46,10,32,32,45,86,44,32,45,45,118,101,114,98,111,115,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,80,114,105,110,116,115,32,112,114,111,103,114,101,115,115,32,105,110,102,111,114,109,97,116,105,111,110,46,0,32,32,45,104,44,32,45,45,104,101,108,112,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,80,114,105,110,116,32,116,104,105,115,32,109,101,115,115,97,103,101,32,97,110,100,32,101,120,105,116,46,10,32,32,32,32,32,32,45,45,118,101,114,115,105,111,110,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,80,114,105,110,116,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,32,97,110,100,32,101,120,105,116,46,10,32,32,45,111,44,32,45,45,111,117,116,112,117,116,32,70,73,76,69,32,32,32,32,32,32,32,32,32,32,32,32,32,87,114,105,116,101,32,111,117,116,112,117,116,32,116,111,32,70,73,76,69,46,10,32,32,45,119,44,32,45,45,110,111,45,119,97,114,110,105,110,103,115,32,32,32,32,32,32,32,32,32,32,32,32,32,68,111,110,39,116,32,114,101,112,111,114,116,32,119,97,114,110,105,110,103,115,46,10,32,32,32,32,32,32,45,45,110,111,45,105,103,110,111,114,101,45,101,114,114,111,114,115,32,32,32,32,32,32,32,32,81,117,105,116,32,111,110,32,118,101,114,121,32,101,114,114,111,110,101,111,117,115,32,105,110,112,117,116,32,71,73,70,115,46,10,32,32,32,32,32,32,45,45,99,111,110,115,101,114,118,101,45,109,101,109,111,114,121,32,32,32,32,32,32,32,32,32,67,111,110,115,101,114,118,101,32,109,101,109,111,114,121,32,97,116,32,116,104,101,32,101,120,112,101,110,115,101,32,111,102,32,115,112,101,101,100,46,10,32,32,32,32,32,32,45,45,109,117,108,116,105,102,105,108,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,117,112,112,111,114,116,32,99,111,110,99,97,116,101,110,97,116,101,100,32,71,73,70,32,102,105,108,101,115,46,10,0,70,114,97,109,101,32,115,101,108,101,99,116,105,111,110,115,58,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,35,110,117,109,44,32,35,110,117,109,49,45,110,117,109,50,44,32,35,110,117,109,49,45,44,32,35,110,97,109,101,10,10,70,114,97,109,101,32,99,104,97,110,103,101,32,111,112,116,105,111,110,115,58,10,32,32,45,45,100,101,108,101,116,101,32,70,82,65,77,69,83,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,68,101,108,101,116,101,32,70,82,65,77,69,83,32,102,114,111,109,32,105,110,112,117,116,46,10,32,32,45,45,105,110,115,101,114,116,45,98,101,102,111,114,101,32,70,82,65,77,69,32,71,73,70,83,32,32,32,32,73,110,115,101,114,116,32,71,73,70,83,32,98,101,102,111,114,101,32,70,82,65,77,69,83,32,105,110,32,105,110,112,117,116,46,10,32,32,45,45,97,112,112,101,110,100,32,71,73,70,83,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,65,112,112,101,110,100,32,71,73,70,83,32,116,111,32,105,110,112,117,116,46,10,32,32,45,45,114,101,112,108,97,99,101,32,70,82,65,77,69,83,32,71,73,70,83,32,32,32,32,32,32,32,32,32,82,101,112,108,97,99,101,32,70,82,65,77,69,83,32,119,105,116,104,32,71,73,70,83,32,105,110,32,105,110,112,117,116,46,10,32,32,45,45,100,111,110,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,68,111,110,101,32,119,105,116,104,32,102,114,97,109,101,32,99,104,97,110,103,101,115,46,10,0,73,109,97,103,101,32,111,112,116,105,111,110,115,58,32,65,108,115,111,32,45,45,110,111,45,79,80,84,73,79,78,32,97,110,100,32,45,45,115,97,109,101,45,79,80,84,73,79,78,46,10,32,32,45,66,44,32,45,45,98,97,99,107,103,114,111,117,110,100,32,67,79,76,32,32,32,32,32,32,32,32,32,32,77,97,107,101,32,67,79,76,32,116,104,101,32,98,97,99,107,103,114,111,117,110,100,32,99,111,108,111,114,46,10,32,32,32,32,32,32,45,45,99,114,111,112,32,88,44,89,43,87,120,72,44,32,45,45,99,114,111,112,32,88,44,89,45,88,50,44,89,50,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,67,114,111,112,32,116,104,101,32,105,109,97,103,101,46,10,32,32,32,32,32,32,45,45,99,114,111,112,45,116,114,97,110,115,112,97,114,101,110,99,121,32,32,32,32,32,32,32,67,114,111,112,32,116,114,97,110,115,112,97,114,101,110,116,32,98,111,114,100,101,114,115,32,111,102,102,32,116,104,101,32,105,109,97,103,101,46,10,32,32,32,32,32,32,45,45,102,108,105,112,45,104,111,114,105,122,111,110,116,97,108,44,32,45,45,102,108,105,112,45,118,101,114,116,105,99,97,108,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,70,108,105,112,32,116,104,101,32,105,109,97,103,101,46,0,32,32,45,105,44,32,45,45,105,110,116,101,114,108,97,99,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,117,114,110,32,111,110,32,105,110,116,101,114,108,97,99,105,110,103,46,10,32,32,45,83,44,32,45,45,108,111,103,105,99,97,108,45,115,99,114,101,101,110,32,87,120,72,32,32,32,32,32,32,83,101,116,32,108,111,103,105,99,97,108,32,115,99,114,101,101,110,32,116,111,32,87,120,72,46,10,32,32,45,112,44,32,45,45,112,111,115,105,116,105,111,110,32,88,44,89,32,32,32,32,32,32,32,32,32,32,32,32,83,101,116,32,102,114,97,109,101,32,112,111,115,105,116,105,111,110,32,116,111,32,40,88,44,89,41,46,10,32,32,32,32,32,32,45,45,114,111,116,97,116,101,45,57,48,44,32,45,45,114,111,116,97,116,101,45,49,56,48,44,32,45,45,114,111,116,97,116,101,45,50,55,48,44,32,45,45,110,111,45,114,111,116,97,116,101,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,82,111,116,97,116,101,32,116,104,101,32,105,109,97,103,101,46,10,32,32,45,116,44,32,45,45,116,114,97,110,115,112,97,114,101,110,116,32,67,79,76,32,32,32,32,32,32,32,32,32,77,97,107,101,32,67,79,76,32,116,114,97,110,115,112,97,114,101,110,116,46,10,0,69,120,116,101,110,115,105,111,110,32,111,112,116,105,111,110,115,58,10,32,32,32,32,32,32,45,45,97,112,112,45,101,120,116,101,110,115,105,111,110,32,78,32,68,32,32,32,32,32,32,32,65,100,100,32,97,110,32,97,112,112,32,101,120,116,101,110,115,105,111,110,32,110,97,109,101,100,32,78,32,119,105,116,104,32,100,97,116,97,32,68,46,10,32,32,45,99,44,32,45,45,99,111,109,109,101,110,116,32,84,69,88,84,32,32,32,32,32,32,32,32,32,32,32,32,65,100,100,32,97,32,99,111,109,109,101,110,116,32,98,101,102,111,114,101,32,116,104,101,32,110,101,120,116,32,102,114,97,109,101,46,10,32,32,32,32,32,32,45,45,101,120,116,101,110,115,105,111,110,32,78,32,68,32,32,32,32,32,32,32,32,32,32,32,65,100,100,32,97,110,32,101,120,116,101,110,115,105,111,110,32,110,117,109,98,101,114,32,78,32,119,105,116,104,32,100,97,116,97,32,68,46,10,32,32,45,110,44,32,45,45,110,97,109,101,32,84,69,88,84,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,101,116,32,110,101,120,116,32,102,114,97,109,101,39,115,32,110,97,109,101,46,10,32,32,32,32,32,32,45,45,110,111,45,99,111,109,109,101,110,116,115,44,32,45,45,110,111,45,110,97,109,101,115,44,32,45,45,110,111,45,101,120,116,101,110,115,105,111,110,115,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,82,101,109,111,118,101,32,99,111,109,109,101,110,116,115,32,40,110,97,109,101,115,44,32,101,120,116,101,110,115,105,111,110,115,41,32,102,114,111,109,32,105,110,112,117,116,46,0,65,110,105,109,97,116,105,111,110,32,111,112,116,105,111,110,115,58,32,65,108,115,111,32,45,45,110,111,45,79,80,84,73,79,78,32,97,110,100,32,45,45,115,97,109,101,45,79,80,84,73,79,78,46,10,32,32,45,100,44,32,45,45,100,101,108,97,121,32,84,73,77,69,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,101,116,32,102,114,97,109,101,32,100,101,108,97,121,32,116,111,32,84,73,77,69,32,40,105,110,32,49,47,49,48,48,115,101,99,41,46,10,32,32,45,68,44,32,45,45,100,105,115,112,111,115,97,108,32,77,69,84,72,79,68,32,32,32,32,32,32,32,32,32,83,101,116,32,102,114,97,109,101,32,100,105,115,112,111,115,97,108,32,116,111,32,77,69,84,72,79,68,46,10,32,32,45,108,44,32,45,45,108,111,111,112,99,111,117,110,116,91,61,78,93,32,32,32,32,32,32,32,32,32,32,32,83,101,116,32,108,111,111,112,32,101,120,116,101,110,115,105,111,110,32,116,111,32,78,32,40,100,101,102,97,117,108,116,32,102,111,114,101,118,101,114,41,46,10,32,32,45,79,44,32,45,45,111,112,116,105,109,105,122,101,91,61,76,69,86,69,76,93,32,32,32,32,32,32,32,32,79,112,116,105,109,105,122,101,32,111,117,116,112,117,116,32,71,73,70,115,46,10,32,32,45,85,44,32,45,45,117,110,111,112,116,105,109,105,122,101,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,110,111,112,116,105,109,105,122,101,32,105,110,112,117,116,32,71,73,70,115,46,0,10,87,104,111,108,101,45,71,73,70,32,111,112,116,105,111,110,115,58,32,65,108,115,111,32,45,45,110,111,45,79,80,84,73,79,78,46,10,32,32,32,32,32,32,45,45,99,97,114,101,102,117,108,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,87,114,105,116,101,32,108,97,114,103,101,114,32,71,73,70,115,32,116,104,97,116,32,97,118,111,105,100,32,98,117,103,115,32,105,110,32,111,116,104,101,114,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,112,114,111,103,114,97,109,115,46,10,32,32,32,32,32,32,45,45,99,104,97,110,103,101,45,99,111,108,111,114,32,67,79,76,49,32,67,79,76,50,32,32,67,104,97,110,103,101,32,67,79,76,49,32,116,111,32,67,79,76,50,32,116,104,114,111,117,103,104,111,117,116,46,10,32,32,45,107,44,32,45,45,99,111,108,111,114,115,32,78,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,82,101,100,117,99,101,32,116,104,101,32,110,117,109,98,101,114,32,111,102,32,99,111,108,111,114,115,32,116,111,32,78,46,10,32,32,32,32,32,32,45,45,99,111,108,111,114,45,109,101,116,104,111,100,32,77,69,84,72,79,68,32,32,32,32,32,83,101,116,32,109,101,116,104,111,100,32,102,111,114,32,99,104,111,111,115,105,110,103,32,114,101,100,117,99,101,100,32,99,111,108,111,114,115,46,10,32,32,45,102,44,32,45,45,100,105,116,104,101,114,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,68,105,116,104,101,114,32,105,109,97,103,101,32,97,102,116,101,114,32,99,104,97,110,103,105,110,103,32,99,111,108,111,114,109,97,112,46,0,32,32,32,32,32,32,45,45,103,97,109,109,97,32,71,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,101,116,32,103,97,109,109,97,32,102,111,114,32,99,111,108,111,114,32,114,101,100,117,99,116,105,111,110,32,91,50,46,50,93,46,0,32,32,32,32,32,32,45,45,114,101,115,105,122,101,32,87,120,72,32,32,32,32,32,32,32,32,32,32,32,32,32,32,82,101,115,105,122,101,32,116,104,101,32,111,117,116,112,117,116,32,71,73,70,32,116,111,32,87,120,72,46,10,32,32,32,32,32,32,45,45,114,101,115,105,122,101,45,119,105,100,116,104,32,87,32,32,32,32,32,32,32,32,32,32,82,101,115,105,122,101,32,116,111,32,119,105,100,116,104,32,87,32,97,110,100,32,112,114,111,112,111,114,116,105,111,110,97,108,32,104,101,105,103,104,116,46,10,32,32,32,32,32,32,45,45,114,101,115,105,122,101,45,104,101,105,103,104,116,32,72,32,32,32,32,32,32,32,32,32,82,101,115,105,122,101,32,116,111,32,104,101,105,103,104,116,32,72,32,97,110,100,32,112,114,111,112,111,114,116,105,111,110,97,108,32,119,105,100,116,104,46,10,32,32,32,32,32,32,45,45,114,101,115,105,122,101,45,102,105,116,32,87,120,72,32,32,32,32,32,32,32,32,32,32,82,101,115,105,122,101,32,105,102,32,110,101,99,101,115,115,97,114,121,32,116,111,32,102,105,116,32,119,105,116,104,105,110,32,87,120,72,46,0,32,32,32,32,32,32,45,45,115,99,97,108,101,32,88,70,65,67,84,79,82,91,120,89,70,65,67,84,79,82,93,32,83,99,97,108,101,32,116,104,101,32,111,117,116,112,117,116,32,71,73,70,32,98,121,32,88,70,65,67,84,79,82,120,89,70,65,67,84,79,82,46,10,32,32,32,32,32,32,45,45,114,101,115,105,122,101,45,109,101,116,104,111,100,32,77,69,84,72,79,68,32,32,32,32,83,101,116,32,114,101,115,105,122,105,110,103,32,109,101,116,104,111,100,46,10,32,32,32,32,32,32,45,45,114,101,115,105,122,101,45,99,111,108,111,114,115,32,78,32,32,32,32,32,32,32,32,32,82,101,115,105,122,101,32,99,97,110,32,97,100,100,32,110,101,119,32,99,111,108,111,114,115,32,117,112,32,116,111,32,78,46,10,32,32,32,32,32,32,45,45,116,114,97,110,115,102,111,114,109,45,99,111,108,111,114,109,97,112,32,67,77,68,32,32,84,114,97,110,115,102,111,114,109,32,101,97,99,104,32,111,117,116,112,117,116,32,99,111,108,111,114,109,97,112,32,98,121,32,115,104,101,108,108,32,67,77,68,46,10,32,32,32,32,32,32,45,45,117,115,101,45,99,111,108,111,114,109,97,112,32,67,77,65,80,32,32,32,32,32,32,32,83,101,116,32,111,117,116,112,117,116,32,71,73,70,39,115,32,99,111,108,111,114,109,97,112,32,116,111,32,67,77,65,80,44,32,119,104,105,99,104,32,99,97,110,10,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,98,101,32,39,119,101,98,39,44,32,39,103,114,97,121,39,44,32,39,98,119,39,44,32,111,114,32,97,32,71,73,70,32,102,105,108,101,46,10,0,82,101,112,111,114,116,32,98,117,103,115,32,116,111,32,60,101,107,111,104,108,101,114,64,103,109,97,105,108,46,99,111,109,62,46,10,84,111,111,32,109,117,99,104,32,105,110,102,111,114,109,97,116,105,111,110,63,32,84,114,121,32,39,37,115,32,45,45,104,101,108,112,32,124,32,109,111,114,101,39,46,10,0,115,0,42,32,37,115,32,37,100,32,105,109,97,103,101,37,115,10,0,32,32,108,111,103,105,99,97,108,32,115,99,114,101,101,110,32,37,100,120,37,100,10,0,32,32,103,108,111,98,97,108,32,99,111,108,111,114,32,116,97,98,108,101,32,91,37,100,93,10,0,32,32,124,0,32,32,98,97,99,107,103,114,111,117,110,100,32,37,100,10,0,32,32,101,110,100,32,99,111,109,109,101,110,116,32,0,32,32,108,111,111,112,32,102,111,114,101,118,101,114,10,0,32,32,108,111,111,112,32,99,111,117,110,116,32,37,117,10,0,32,32,101,120,116,101,110,115,105,111,110,115,32,37,100,10,0,32,32,43,32,105,109,97,103,101,32,35,37,100,32,0,35,37,115,32,0,37,100,120,37,100,0,32,97,116,32,37,100,44,37,100,0,32,105,110,116,101,114,108,97,99,101,100,0,32,116,114,97,110,115,112,97,114,101,110,116,32,37,100,0,32,32,32,32,99,111,109,112,114,101,115,115,101,100,32,115,105,122,101,32,37,117,10,0,32,32,32,32,99,111,109,109,101,110,116,32,0,32,32,32,32,108,111,99,97,108,32,99,111,108,111,114,32,116,97,98,108,101,32,91,37,100,93,10,0,32,32,32,32,124,0,32,32,32,0,32,100,105,115,112,111,115,97,108,32,37,115,0,32,100,101,108,97,121,32,37,100,46,37,48,50,100,115,0,115,117,112,112,111,114,116,46,99,112,112,0,37,115,46,37,115,0,37,115,46,37,48,51,100,0,37,115,46,37,48,42,100,0,102,114,97,109,101,32,115,112,101,99,105,102,105,99,97,116,105,111,110,115,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,35,0,110,111,32,102,114,97,109,101,32,110,97,109,101,100,32,37,60,35,37,115,37,62,0,102,114,97,109,101,32,37,60,35,37,115,37,62,32,111,117,116,32,111,102,32,114,97,110,103,101,44,32,105,109,97,103,101,32,104,97,115,32,37,100,32,102,114,97,109,101,115,0,105,110,118,97,108,105,100,32,100,105,109,101,110,115,105,111,110,115,32,37,60,37,115,37,62,32,40,119,97,110,116,32,87,120,72,41,0,105,110,118,97,108,105,100,32,112,111,115,105,116,105,111,110,32,37,60,37,115,37,62,32,40,119,97,110,116,32,39,88,44,89,39,41,0,105,110,118,97,108,105,100,32,115,99,97,108,101,32,102,97,99,116,111,114,32,37,60,37,115,37,62,32,40,119,97,110,116,32,88,120,89,41,0,105,110,118,97,108,105,100,32,114,101,99,116,97,110,103,108,101,32,37,60,37,115,37,62,32,40,119,97,110,116,32,88,49,44,89,49,45,88,50,44,89,50,32,111,114,32,88,49,44,89,49,43,87,120,72,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,97,98,99,100,101,102,0,105,110,118,97,108,105,100,32,99,111,108,111,114,32,37,60,37,115,37,62,32,40,119,97,110,116,32,35,82,71,66,32,111,114,32,35,82,82,71,71,66,66,41,0,105,110,118,97,108,105,100,32,99,111,108,111,114,32,37,60,37,115,37,62,0,37,60,37,79,37,62,32,116,97,107,101,115,32,116,119,111,32,99,111,108,111,114,32,97,114,103,117,109,101,110,116,115,0,99,97,110,37,44,116,32,117,115,101,32,97,115,32,112,97,108,101,116,116,101,32,40,110,111,32,103,108,111,98,97,108,32,99,111,108,111,114,32,116,97,98,108,101,41,0,116,104,101,114,101,32,119,101,114,101,32,101,114,114,111,114,115,32,114,101,97,100,105,110,103,32,116,104,105,115,32,71,73,70,0,101,109,112,116,121,32,111,117,116,112,117,116,32,71,73,70,32,110,111,116,32,119,114,105,116,116,101,110,0,104,117,103,101,32,71,73,70,44,32,99,111,110,115,101,114,118,105,110,103,32,109,101,109,111,114,121,32,40,112,114,111,99,101,115,115,105,110,103,32,109,97,121,32,116,97,107,101,32,97,32,119,104,105,108,101,41,0,115,114,99,105,45,62,114,101,102,99,111,117,110,116,32,62,32,49,0,109,101,114,103,101,95,102,114,97,109,101,95,105,110,116,101,114,118,97,108,0,103,105,102,115,105,99,108,101,0,105,114,114,101,108,101,118,97,110,116,32,98,97,99,107,103,114,111,117,110,100,32,99,111,108,111,114,10,32,32,40,84,104,101,32,98,97,99,107,103,114,111,117,110,100,32,119,105,108,108,32,97,112,112,101,97,114,32,116,114,97,110,115,112,97,114,101,110,116,32,98,101,99,97,117,115,101,32,32,116,104,101,32,102,105,114,115,116,32,105,109,97,103,101,32,99,111,110,116,97,105,110,115,32,116,114,97,110,115,112,97,114,101,110,99,121,46,41,0,105,114,114,101,108,101,118,97,110,116,32,98,97,99,107,103,114,111,117,110,100,32,99,111,108,111,114,0,105,110,112,117,116,32,105,109,97,103,101,115,32,104,97,118,101,32,99,111,110,102,108,105,99,116,105,110,103,32,98,97,99,107,103,114,111,117,110,100,32,99,111,108,111,114,115,10,32,32,40,84,104,105,115,32,109,101,97,110,115,32,115,111,109,101,32,97,110,105,109,97,116,105,111,110,32,102,114,97,109,101,115,32,109,97,121,32,97,112,112,101,97,114,32,105,110,99,111,114,114,101,99,116,46,41,0,105,110,112,117,116,32,105,109,97,103,101,115,32,104,97,118,101,32,99,111,110,102,108,105,99,116,105,110,103,32,98,97,99,107,103,114,111,117,110,100,32,99,111,108,111,114,115,0,37,115,32,99,111,108,111,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0,37,115,32,99,111,108,111,114,32,110,111,116,32,105,110,32,99,111,108,111,114,109,97,112,0,100,101,115,116,45,62,110,105,109,97,103,101,115,32,62,32,48,0,102,105,120,95,116,111,116,97,108,95,99,114,111,112,0,99,114,111,112,112,105,110,103,32,100,105,109,101,110,115,105,111,110,115,32,100,111,110,37,44,116,32,102,105,116,32,105,109,97,103,101,0,102,49,32,62,61,32,48,32,38,38,32,102,50,32,60,32,102,115,101,116,45,62,99,111,117,110,116,0,109,101,114,103,101,114,95,102,108,97,116,116,101,110,0,37,103,32,37,103,32,37,103,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,0,37,49,120,37,49,120,37,49,120,0,37,50,120,37,50,120,37,50,120,0,109,97,120,105,109,117,109,32,50,53,54,32,99,111,108,111,114,115,32,97,108,108,111,119,101,100,32,105,110,32,99,111,108,111,114,109,97,112,0,102,105,108,101,32,110,111,116,32,105,110,32,99,111,108,111,114,109,97,112,32,102,111,114,109,97,116,0,52,0,53,0,54,0,55,0,32,32,101,120,116,101,110,115,105,111,110,32,37,100,58,32,0,97,112,112,32,39,0,39,37,99,39,32,40,48,120,37,48,50,88,41,0,48,120,37,48,50,88,0,32,97,116,32,101,110,100,0,32,98,101,102,111,114,101,32,35,37,100,0,32,112,97,99,107,101,116,105,122,101,100,0,32,32,32,32,37,48,56,120,58,32,0,37,48,50,120,32,32,32,0,37,48,50,120,37,48,50,120,32,0,32,32,32,32,32,0,92,97,0,92,98,0,92,102,0,92,110,0,92,114,0,92,116,0,92,118,0,92,92,0,92,48,48,48,0,92,37,48,51,111,0,32,37,51,100,58,32,35,37,48,50,88,37,48,50,88,37,48,50,88,0,32,32,32,32,0,37,115,58,37,115,37,115,32,119,97,114,110,105,110,103,58,32,0,37,115,58,37,115,37,115,32,0,37,115,58,37,115,37,115,32,102,97,116,97,108,32,101,114,114,111,114,58,32,0,58,0,37,46,42,115,37,46,42,115,0,120,102,111,114,109,46,99,112,112,0,99,97,110,37,44,116,32,99,114,101,97,116,101,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,33,0,37,115,32,32,62,37,115,0,99,97,110,37,44,116,32,114,117,110,32,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,99,111,109,109,97,110,100,58,32,37,115,0,37,100,32,37,100,32,37,100,10,0,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,101,114,114,111,114,58,32,37,115,0,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,99,111,109,109,97,110,100,32,102,97,105,108,101,100,0,114,0,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,99,111,109,109,97,110,100,32,103,101,110,101,114,97,116,101,100,32,110,111,32,111,117,116,112,117,116,0,60,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,62,0,116,111,111,32,102,101,119,32,99,111,108,111,114,115,32,105,110,32,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,114,101,115,117,108,116,115,0,116,111,111,32,109,97,110,121,32,99,111,108,111,114,115,32,105,110,32,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,114,101,115,117,108,116,115,0,114,111,116,97,116,105,111,110,32,61,61,32,49,32,124,124,32,114,111,116,97,116,105,111,110,32,61,61,32,51,0,114,111,116,97,116,101,95,105,109,97,103,101,0,110,101,119,32,105,109,97,103,101,32,105,115,32,116,111,111,32,108,97,114,103,101,32,40,109,97,120,32,115,105,122,101,32,54,53,53,51,53,120,54,53,53,51,53,41,0,103,102,115,45,62,110,105,109,97,103,101,115,32,62,32,48,0,114,101,115,105,122,101,95,115,116,114,101,97,109,0,119,45,62,105,112,111,115,32,62,61,32,121,105,48,32,38,38,32,119,45,62,105,112,111,115,32,60,32,121,105,49,0,115,99,97,108,101,95,105,109,97,103,101,95,100,97,116,97,95,119,101,105,103,104,116,101,100,0,40,117,110,115,105,103,110,101,100,41,32,103,102,105,45,62,108,101,102,116,32,43,32,103,102,105,45,62,119,105,100,116,104,32,60,61,32,107,99,115,45,62,119,105,100,116,104,0,107,99,115,99,114,101,101,110,95,97,112,112,108,121,0,40,117,110,115,105,103,110,101,100,41,32,103,102,105,45,62,116,111,112,32,43,32,103,102,105,45,62,104,101,105,103,104,116,32,60,61,32,107,99,115,45,62,104,101,105,103,104,116,0,107,99,115,99,114,101,101,110,95,100,105,115,112,111,115,101,0,40,117,110,115,105,103,110,101,100,41,32,103,102,105,45,62,108,101,102,116,32,43,32,103,102,105,45,62,119,105,100,116,104,32,60,61,32,107,115,115,45,62,119,105,100,116,104,0,107,115,115,99,114,101,101,110,95,100,105,115,112,111,115,101,0,40,117,110,115,105,103,110,101,100,41,32,103,102,105,45,62,116,111,112,32,43,32,103,102,105,45,62,104,101,105,103,104,116,32,60,61,32,107,115,115,45,62,104,101,105,103,104,116,0,115,99,116,120,45,62,107,100,51,32,61,61,32,38,115,99,116,120,45,62,103,108,111,98,97,108,95,107,100,51,0,115,99,97,108,101,95,105,109,97,103,101,95,117,112,100,97,116,101,95,103,108,111,98,97,108,95,107,100,51,0,107,115,115,99,114,101,101,110,95,97,112,112,108,121,0,33,107,99,115,45,62,100,97,116,97,32,38,38,32,33,107,99,115,45,62,115,99,114,97,116,99,104,0,107,99,115,99,114,101,101,110,95,105,110,105,116,0,33,107,115,115,45,62,100,97,116,97,32,38,38,32,33,107,115,115,45,62,115,99,114,97,116,99,104,0,107,115,115,99,114,101,101,110,95,105,110,105,116,0,40,117,110,115,105,103,110,101,100,41,32,105,32,60,32,40,117,110,115,105,103,110,101,100,41,32,107,100,51,45,62,110,105,116,101,109,115,0,46,47,107,99,111,108,111,114,46,104,0,107,100,51,95,100,105,115,97,98,108,101,0,107,100,51,45,62,100,105,115,97,98,108,101,100,32,60,32,48,32,124,124,32,107,100,51,45,62,100,105,115,97,98,108,101,100,32,61,61,32,105,0,102,114,97,109,101,32,115,101,108,101,99,116,105,111,110,32,97,110,100,32,102,114,97,109,101,32,99,104,97,110,103,101,115,32,100,111,110,37,44,116,32,109,105,120,0,33,110,101,115,116,101,100,95,109,111,100,101,0,103,105,102,115,105,99,108,101,46,99,112,112,0,115,101,116,95,102,114,97,109,101,95,99,104,97,110,103,101,0,60,115,116,100,105,110,62], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
    /* memory initializer */ allocate([0,37,115,126,37,100,0,101,109,112,116,121,32,102,105,108,101,0,110,111,32,109,111,114,101,32,105,109,97,103,101,115,32,105,110,32,102,105,108,101,0,116,114,97,105,108,105,110,103,32,103,97,114,98,97,103,101,32,105,103,110,111,114,101,100,0,102,105,108,101,32,110,111,116,32,105,110,32,71,73,70,32,102,111,114,109,97,116,0,37,115,58,32,37,60,45,45,109,117,108,116,105,102,105,108,101,37,62,32,105,115,32,117,115,101,102,117,108,32,111,110,108,121,32,105,110,32,109,101,114,103,101,32,109,111,100,101,0,35,115,116,100,105,110,35,0,71,73,70,32,116,111,111,32,99,111,109,112,108,101,120,32,116,111,32,117,110,111,112,116,105,109,105,122,101,10,32,32,40,84,104,101,32,114,101,97,115,111,110,32,119,97,115,32,108,111,99,97,108,32,99,111,108,111,114,32,116,97,98,108,101,115,32,111,114,32,99,111,109,112,108,101,120,32,116,114,97,110,115,112,97,114,101,110,99,121,46,10,32,32,84,114,121,32,114,117,110,110,105,110,103,32,116,104,101,32,71,73,70,32,116,104,114,111,117,103,104,32,37,60,103,105,102,115,105,99,108,101,32,45,45,99,111,108,111,114,115,61,50,53,53,37,62,32,102,105,114,115,116,46,41,0,71,73,70,32,116,111,111,32,99,111,109,112,108,101,120,32,116,111,32,117,110,111,112,116,105,109,105,122,101,0,45,0,105,110,102,105,110,105,116,101,0,102,111,114,101,118,101,114,0,110,111,110,101,0,97,115,105,115,0,98,97,99,107,103,114,111,117,110,100,0,98,103,0,112,114,101,118,105,111,117,115,0,100,105,118,101,114,115,105,116,121,0,98,108,101,110,100,45,100,105,118,101,114,115,105,116,121,0,109,101,100,105,97,110,45,99,117,116,0,107,101,101,112,45,101,109,112,116,121,0,110,111,45,107,101,101,112,45,101,109,112,116,121,0,100,114,111,112,45,101,109,112,116,121,0,110,111,45,100,114,111,112,45,101,109,112,116,121,0,112,111,105,110,116,0,115,97,109,112,108,101,0,109,105,120,0,98,111,120,0,99,97,116,114,111,109,0,108,97,110,99,122,111,115,0,108,97,110,99,122,111,115,50,0,108,97,110,99,122,111,115,51,0,109,105,116,99,104,101,108,108,0,102,97,115,116,0,103,111,111,100,0,100,105,115,112,111,115,97,108,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,55,0,67,79,76,79,82,50,32,109,117,115,116,32,98,101,32,105,110,32,82,71,66,32,102,111,114,109,97,116,32,105,110,32,37,60,45,45,99,104,97,110,103,101,45,99,111,108,111,114,32,67,79,76,79,82,49,32,67,79,76,79,82,50,37,62,0,97,114,103,117,109,101,110,116,32,116,111,32,37,79,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,50,32,97,110,100,32,50,53,54,0,103,114,97,121,0,100,101,102,97,117,108,116,0,112,111,115,116,101,114,105,122,101,0,37,60,37,115,37,62,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,100,105,116,104,101,114,0,115,82,71,66,0,115,114,103,98,0,37,79,32,115,104,111,117,108,100,32,98,101,32,97,32,110,117,109,98,101,114,32,111,114,32,37,60,115,114,103,98,37,62,0,111,110,101,32,111,102,32,87,32,97,110,100,32,72,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,32,105,110,32,37,60,37,115,32,87,120,72,37,62,0,37,115,32,97,114,103,117,109,101,110,116,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,0,37,115,32,88,32,97,110,100,32,89,32,102,97,99,116,111,114,115,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,0,37,115,32,99,97,110,32,98,101,32,97,116,32,109,111,115,116,32,50,53,54,0,76,67,68,70,32,71,105,102,115,105,99,108,101,32,37,115,10,0,49,46,57,48,32,40,87,105,110,100,111,119,115,41,0,67,111,112,121,114,105,103,104,116,32,40,67,41,32,49,57,57,55,45,50,48,49,55,32,69,100,100,105,101,32,75,111,104,108,101,114,10,84,104,105,115,32,105,115,32,102,114,101,101,32,115,111,102,116,119,97,114,101,59,32,115,101,101,32,116,104,101,32,115,111,117,114,99,101,32,102,111,114,32,99,111,112,121,105,110,103,32,99,111,110,100,105,116,105,111,110,115,46,10,84,104,101,114,101,32,105,115,32,78,79,32,119,97,114,114,97,110,116,121,44,32,110,111,116,32,101,118,101,110,32,102,111,114,32,109,101,114,99,104,97,110,116,97,98,105,108,105,116,121,32,111,114,32,102,105,116,110,101,115,115,32,102,111,114,32,97,10,112,97,114,116,105,99,117,108,97,114,32,112,117,114,112,111,115,101,46,0,102,114,97,109,101,0,105,110,112,117,116,0,111,117,116,112,117,116,0,117,110,111,112,116,105,109,105,122,97,116,105,111,110,0,99,111,108,111,114,32,99,104,97,110,103,101,0,117,115,101,108,101,115,115,32,37,115,45,114,101,108,97,116,101,100,32,37,115,32,111,112,116,105,111,110,10,32,32,40,73,116,32,100,105,100,110,37,44,116,32,97,102,102,101,99,116,32,97,110,121,32,37,115,46,41,0,117,115,101,108,101,115,115,32,37,115,45,114,101,108,97,116,101,100,32,37,115,32,111,112,116,105,111,110,0,97,114,103,117,109,101,110,116,32,116,111,32,37,79,32,109,117,115,116,32,98,101,32,97,32,118,97,108,105,100,32,103,101,111,109,101,116,114,121,32,115,112,101,99,105,102,105,99,97,116,105,111,110,0,119,101,98,0,103,114,101,121,0,98,119,0,37,79,32,114,101,113,117,105,114,101,115,32,116,119,111,32,97,114,103,117,109,101,110,116,115,0,98,97,100,32,101,120,116,101,110,115,105,111,110,32,116,121,112,101,58,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,50,53,53,0,108,111,111,112,99,111,117,110,116,0,108,111,103,105,99,97,108,32,115,99,114,101,101,110,0,111,112,116,105,109,105,122,97,116,105,111,110,0,111,117,116,112,117,116,32,102,105,108,101,0,99,111,108,111,114,109,97,112,32,115,105,122,101,0,100,105,116,104,101,114,0,99,111,108,111,114,109,97,112,0,99,111,108,111,114,109,97,112,32,109,101,116,104,111,100,0,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,0,114,101,115,105,122,101,0,109,101,109,111,114,121,32,99,111,110,115,101,114,118,97,116,105,111,110,0,103,97,109,109,97,0,114,101,115,105,122,101,32,109,101,116,104,111,100,0,114,101,115,105,122,101,32,99,111,108,111,114,115,0,114,101,100,117,110,100,97,110,116,32,37,115,32,111,112,116,105,111,110,10,32,32,40,84,104,101,32,37,115,32,111,112,116,105,111,110,32,119,97,115,32,111,118,101,114,114,105,100,100,101,110,32,98,121,32,97,110,111,116,104,101,114,32,37,115,32,111,112,116,105,111,110,10,32,32,98,101,102,111,114,101,32,105,116,32,104,97,100,32,97,110,121,32,101,102,102,101,99,116,46,41,0,114,101,100,117,110,100,97,110,116,32,37,115,32,111,112,116,105,111,110,0,105,110,116,101,114,108,97,99,101,0,100,105,115,112,111,115,97,108,0,100,101,108,97,121,0,116,114,97,110,115,112,97,114,101,110,99,121,0,99,111,109,109,101,110,116,0,110,97,109,101,0,112,111,115,105,116,105,111,110,0,99,114,111,112,0,101,120,116,101,110,115,105,111,110,0,102,108,105,112,0,114,111,116,97,116,105,111,110,0,97,112,112,101,110,100,0,97,112,112,45,101,120,116,101,110,115,105,111,110,0,110,111,45,97,112,112,45,101,120,116,101,110,115,105,111,110,115,0,98,97,116,99,104,0,99,97,114,101,102,117,108,0,99,104,97,110,103,101,45,99,111,108,111,114,0,99,105,110,102,111,0,99,108,105,112,0,99,111,108,111,114,115,0,99,111,108,111,114,45,109,101,116,104,111,100,0,99,111,108,111,114,45,105,110,102,111,0,110,111,45,99,111,109,109,101,110,116,115,0,99,111,110,115,101,114,118,101,45,109,101,109,111,114,121,0,99,114,111,112,45,116,114,97,110,115,112,97,114,101,110,99,121,0,100,101,108,101,116,101,0,100,111,110,101,0,101,120,112,108,111,100,101,0,101,120,112,108,111,100,101,45,98,121,45,110,97,109,101,0,110,111,45,101,120,116,101,110,115,105,111,110,0,110,111,45,101,120,116,101,110,115,105,111,110,115,0,101,120,116,101,110,115,105,111,110,45,105,110,102,111,0,102,108,105,112,45,104,111,114,105,122,111,110,116,97,108,0,102,108,105,112,45,118,101,114,116,105,99,97,108,0,110,111,45,102,108,105,112,0,104,101,108,112,0,105,103,110,111,114,101,45,101,114,114,111,114,115,0,105,110,102,111,0,105,110,115,101,114,116,45,98,101,102,111,114,101,0,108,111,103,105,99,97,108,45,115,99,114,101,101,110,0,109,101,114,103,101,0,109,101,116,104,111,100,0,109,117,108,116,105,102,105,108,101,0,110,101,120,116,102,105,108,101,0,110,111,45,110,97,109,101,115,0,111,112,116,105,109,105,122,101,0,114,101,112,108,97,99,101,0,114,101,115,105,122,101,45,119,105,100,116,104,0,114,101,115,105,122,101,45,104,101,105,103,104,116,0,114,101,115,105,122,0,114,101,115,105,0,114,101,115,0,114,101,115,105,122,101,45,102,105,116,0,114,101,115,105,122,101,45,102,105,116,45,119,105,100,116,104,0,114,101,115,105,122,101,45,102,105,116,45,104,101,105,103,104,116,0,114,101,115,105,122,101,45,102,105,0,114,101,115,105,122,101,45,102,0,114,101,115,105,122,101,45,116,111,117,99,104,0,114,101,115,105,122,101,45,116,111,117,99,104,45,119,105,100,116,104,0,114,101,115,105,122,101,45,116,111,117,99,104,45,104,101,105,103,104,116,0,114,101,115,105,122,101,45,116,111,117,99,0,114,101,115,105,122,101,45,116,111,117,0,114,101,115,105,122,101,45,116,111,0,114,101,115,105,122,101,45,116,0,114,101,115,105,122,101,45,103,101,111,109,101,116,114,121,0,114,101,115,105,122,101,45,109,101,116,104,111,100,0,114,101,115,105,122,101,45,99,111,108,111,114,115,0,114,111,116,97,116,101,45,57,48,0,114,111,116,97,116,101,45,49,56,48,0,114,111,116,97,116,101,45,50,55,48,0,110,111,45,114,111,116,97,116,101,0,115,97,109,101,45,97,112,112,45,101,120,116,101,110,115,105,111,110,115,0,115,97,109,101,45,98,97,99,107,103,114,111,117,110,100,0,115,97,109,101,45,98,103,0,115,97,109,101,45,99,108,105,112,0,115,97,109,101,45,99,111,109,109,101,110,116,115,0,115,97,109,101,45,99,114,111,112,0,115,97,109,101,45,101,120,116,101,110,115,105,111,110,115,0,115,97,109,101,45,105,110,116,101,114,108,97,99,101,0,115,97,109,101,45,108,111,103,105,99,97,108,45,115,99,114,101,101,110,0,115,97,109,101,45,108,111,111,112,99,111,117,110,116,0,115,97,109,101,45,100,105,115,112,111,115,97,108,0,115,97,109,101,45,100,101,108,97,121,0,115,97,109,101,45,110,97,109,101,115,0,115,97,109,101,45,112,111,115,105,116,105,111,110,0,115,97,109,101,45,115,99,114,101,101,110,0,115,97,109,101,45,116,114,97,110,115,112,97,114,101,110,116,0,115,99,97,108,101,0,115,99,97,108,101,45,109,101,116,104,111,100,0,115,99,97,108,101,45,99,111,108,111,114,115,0,115,99,114,101,101,110,0,115,105,110,102,111,0,115,105,122,101,45,105,110,102,111,0,116,114,97,110,115,102,111,114,109,45,99,111,108,111,114,109,97,112,0,116,114,97,110,115,112,97,114,101,110,116,0,117,110,111,112,116,105,109,105,122,101,0,117,115,101,45,99,111,108,111,114,109,97,112,0,118,101,114,98,111,115,101,0,118,101,114,115,105,111,110,0,119,97,114,110,105,110,103,115,0,120,105,110,102,111,0,116,104,114,101,97,100,115,0,109,101,114,103,101,95,97,110,100,95,119,114,105,116,101,95,102,114,97,109,101,115,0,35,115,116,100,111,117,116,35,0,119,98,0,60,115,116,100,111,117,116,62,0,37,115,0,116,114,105,118,105,97,108,32,97,100,97,112,116,105,118,101,32,112,97,108,101,116,116,101,32,40,111,110,108,121,32,37,100,32,99,111,108,111,114,115,32,105,110,32,115,111,117,114,99,101,41,0,99,97,110,39,116,32,104,97,112,112,101,110,0,119,0,60,117,110,107,110,111,119,110,62,0,37,115,58,35,37,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,101,97,100,32,101,114,114,111,114,58,32,0,0,37,115,37,115,0,37,115,37,115,32,40,37,100,32,116,105,109,101,115,41,0,40,112,108,117,115,32,109,111,114,101,32,101,114,114,111,114,115,59,32,105,115,32,116,104,105,115,32,71,73,70,32,99,111,114,114,117,112,116,63,41,0,109,105,115,115,105,110,103,32,37,108,117,32,112,105,120,101,108,0,102,97,116,97,108,32,101,114,114,111,114,58,32,116,111,111,32,109,97,110,121,32,109,105,115,115,105,110,103,32,112,105,120,101,108,115,44,32,103,105,118,105,110,103,32,117,112,0,114,98,0,37,60,45,45,105,110,102,111,37,62,32,115,117,112,112,114,101,115,115,101,115,32,110,111,114,109,97,108,32,111,117,116,112,117,116,44,32,99,97,110,37,44,116,32,117,115,101,32,119,105,116,104,32,97,110,10,32,32,111,117,116,112,117,116,32,109,111,100,101,32,108,105,107,101,32,37,60,45,45,109,101,114,103,101,37,62,32,111,114,32,37,60,45,45,98,97,116,99,104,37,62,46,10,32,32,40,84,114,121,32,37,60,45,73,73,37,62,44,32,119,104,105,99,104,32,100,111,101,115,110,37,44,116,32,115,117,112,112,114,101,115,115,32,110,111,114,109,97,108,32,111,117,116,112,117,116,46,41,0,116,111,111,32,108,97,116,101,32,116,111,32,99,104,97,110,103,101,32,109,111,100,101,115,0,103,105,102,119,114,105,116,101,46,99,112,112,0,71,73,70,56,57,97,0,33,255,11,78,69,84,83,67,65,80,69,50,46,48,3,1,0,71,73,70,56,55,97,0,33,110,111,100,101,32,124,124,32,40,110,111,100,101,32,62,61,32,103,102,99,45,62,110,111,100,101,115,32,38,38,32,110,111,100,101,32,60,32,103,102,99,45,62,110,111,100,101,115,32,43,32,78,79,68,69,83,95,83,73,90,69,41,0,103,102,99,95,108,111,111,107,117,112,0,115,117,102,102,105,120,32,60,32,103,102,99,45,62,99,108,101,97,114,95,99,111,100,101,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,116,109,112,0,47,116,109,112,47,116,37,120,45,37,120,0,114,119,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
    /* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+28719);





    /* no memory initializer */
    var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

    assert(tempDoublePtr % 8 == 0);

    function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

        HEAP8[tempDoublePtr] = HEAP8[ptr];

        HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

        HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

        HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

    }

    function copyTempDouble(ptr) {

        HEAP8[tempDoublePtr] = HEAP8[ptr];

        HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

        HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

        HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

        HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

        HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

        HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

        HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

    }

// {{PRE_LIBRARY}}



    Module["_i64Subtract"] = _i64Subtract;

    function ___assert_fail(condition, filename, line, func) {
        ABORT = true;
        throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }


    Module["_memset"] = _memset;

    var _BDtoILow=true;

    var _ceilf=Math_ceil;


    Module["_bitshift64Shl"] = _bitshift64Shl;

    function _abort() {
        Module['abort']();
    }

    function __pclose() {
        Module['printErr']('missing function: _pclose'); abort(-1);
    }

    function ___lock() {}

    function ___unlock() {}


    Module["_i64Add"] = _i64Add;

    var _fabs=Math_abs;

    var _floor=Math_floor;




    var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};

    var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};

    function ___setErrNo(value) {
        if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
        return value;
    }

    var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
    },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
    },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
    },stream_ops:{open:function (stream) {
        var tty = TTY.ttys[stream.node.rdev];
        if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        stream.tty = tty;
        stream.seekable = false;
    },close:function (stream) {
        // flush any pending line data
        stream.tty.ops.flush(stream.tty);
    },flush:function (stream) {
        stream.tty.ops.flush(stream.tty);
    },read:function (stream, buffer, offset, length, pos /* ignored */) {
        if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
        }
        var bytesRead = 0;
        for (var i = 0; i < length; i++) {
            var result;
            try {
                result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
        }
        if (bytesRead) {
            stream.node.timestamp = Date.now();
        }
        return bytesRead;
    },write:function (stream, buffer, offset, length, pos) {
        if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
        }
        for (var i = 0; i < length; i++) {
            try {
                stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
        }
        if (length) {
            stream.node.timestamp = Date.now();
        }
        return i;
    }},default_tty_ops:{get_char:function (tty) {
        if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
                // we will read data by chunks of BUFSIZE
                var BUFSIZE = 256;
                var buf = new Buffer(BUFSIZE);
                var bytesRead = 0;

                var fd = process.stdin.fd;
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                    fd = fs.openSync('/dev/stdin', 'r');
                    usingDevice = true;
                } catch (e) {}

                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);

                if (usingDevice) { fs.closeSync(fd); }
                if (bytesRead > 0) {
                    result = buf.slice(0, bytesRead).toString('utf-8');
                } else {
                    result = null;
                }

            } else if (typeof window != 'undefined' &&
                typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');  // returns null on cancel
                if (result !== null) {
                    result += '\n';
                }
            } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
                if (result !== null) {
                    result += '\n';
                }
            }
            if (!result) {
                return null;
            }
            tty.input = intArrayFromString(result, true);
        }
        return tty.input.shift();
    },put_char:function (tty, val) {
        if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
        } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
        }
    },flush:function (tty) {
        if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
        }
    }},default_tty1_ops:{put_char:function (tty, val) {
        if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
        } else {
            if (val != 0) tty.output.push(val);
        }
    },flush:function (tty) {
        if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
        }
    }}};

    var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
    },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
            // no supported
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
            MEMFS.ops_table = {
                dir: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek
                    }
                },
                file: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap,
                        msync: MEMFS.stream_ops.msync
                    }
                },
                link: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink
                    },
                    stream: {}
                },
                chrdev: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: FS.chrdev_stream_ops
                }
            };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
            node.node_ops = MEMFS.ops_table.dir.node;
            node.stream_ops = MEMFS.ops_table.dir.stream;
            node.contents = {};
        } else if (FS.isFile(node.mode)) {
            node.node_ops = MEMFS.ops_table.file.node;
            node.stream_ops = MEMFS.ops_table.file.stream;
            node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
            // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
            // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
            // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
            node.contents = null;
        } else if (FS.isLink(node.mode)) {
            node.node_ops = MEMFS.ops_table.link.node;
            node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
            node.node_ops = MEMFS.ops_table.chrdev.node;
            node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
            parent.contents[name] = node;
        }
        return node;
    },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
            var arr = [];
            for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
            return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
    },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
    },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
            node.contents = MEMFS.getFileDataAsRegularArray(node);
            node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }

        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
            var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
            if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
            // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
            // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
            // avoid overshooting the allocation cap by a very large margin.
            var CAPACITY_DOUBLING_MAX = 1024 * 1024;
            newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
            if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
            var oldContents = node.contents;
            node.contents = new Uint8Array(newCapacity); // Allocate new storage.
            if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
            return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
    },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
            node.contents = null; // Fully decommit when requesting a resize to zero.
            node.usedBytes = 0;
            return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
            var oldContents = node.contents;
            node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
            if (oldContents) {
                node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
            }
            node.usedBytes = newSize;
            return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
    },node_ops:{getattr:function (node) {
        var attr = {};
        // device numbers reuse inode numbers.
        attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
        attr.ino = node.id;
        attr.mode = node.mode;
        attr.nlink = 1;
        attr.uid = 0;
        attr.gid = 0;
        attr.rdev = node.rdev;
        if (FS.isDir(node.mode)) {
            attr.size = 4096;
        } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
        } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
        } else {
            attr.size = 0;
        }
        attr.atime = new Date(node.timestamp);
        attr.mtime = new Date(node.timestamp);
        attr.ctime = new Date(node.timestamp);
        // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
        //       but this is not required by the standard.
        attr.blksize = 4096;
        attr.blocks = Math.ceil(attr.size / attr.blksize);
        return attr;
    },setattr:function (node, attr) {
        if (attr.mode !== undefined) {
            node.mode = attr.mode;
        }
        if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
        }
        if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
        }
    },lookup:function (parent, name) {
        throw FS.genericErrors[ERRNO_CODES.ENOENT];
    },mknod:function (parent, name, mode, dev) {
        return MEMFS.createNode(parent, name, mode, dev);
    },rename:function (old_node, new_dir, new_name) {
        // if we're overwriting a directory at new_name, make sure it's empty.
        if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
                new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
                for (var i in new_node.contents) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
                }
            }
        }
        // do the internal rewiring
        delete old_node.parent.contents[old_node.name];
        old_node.name = new_name;
        new_dir.contents[new_name] = old_node;
        old_node.parent = new_dir;
    },unlink:function (parent, name) {
        delete parent.contents[name];
    },rmdir:function (parent, name) {
        var node = FS.lookupNode(parent, name);
        for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        delete parent.contents[name];
    },readdir:function (node) {
        var entries = ['.', '..']
        for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
                continue;
            }
            entries.push(key);
        }
        return entries;
    },symlink:function (parent, newname, oldpath) {
        var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
        node.link = oldpath;
        return node;
    },readlink:function (node) {
        if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return node.link;
    }},stream_ops:{read:function (stream, buffer, offset, length, position) {
        var contents = stream.node.contents;
        if (position >= stream.node.usedBytes) return 0;
        var size = Math.min(stream.node.usedBytes - position, length);
        assert(size >= 0);
        if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
        } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
        }
        return size;
    },write:function (stream, buffer, offset, length, position, canOwn) {
        if (!length) return 0;
        var node = stream.node;
        node.timestamp = Date.now();

        if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
                node.contents = buffer.subarray(offset, offset + length);
                node.usedBytes = length;
                return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
                node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
                node.usedBytes = length;
                return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
                node.contents.set(buffer.subarray(offset, offset + length), position);
                return length;
            }
        }

        // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
        MEMFS.expandFileStorage(node, position+length);
        if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
        else {
            for (var i = 0; i < length; i++) {
                node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
        }
        node.usedBytes = Math.max(node.usedBytes, position+length);
        return length;
    },llseek:function (stream, offset, whence) {
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
                position += stream.node.usedBytes;
            }
        }
        if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return position;
    },allocate:function (stream, offset, length) {
        MEMFS.expandFileStorage(stream.node, offset + length);
        stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
    },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        var ptr;
        var allocated;
        var contents = stream.node.contents;
        // Only make a new copy when MAP_PRIVATE is specified.
        if ( !(flags & 2) &&
            (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
        } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
                if (contents.subarray) {
                    contents = contents.subarray(position, position + length);
                } else {
                    contents = Array.prototype.slice.call(contents, position, position + length);
                }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
        }
        return { ptr: ptr, allocated: allocated };
    },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
        }

        var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
        // should we check if bytesWritten and length are the same?
        return 0;
    }}};

    var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
    },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
    },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
            if (err) return callback(err);

            IDBFS.getRemoteSet(mount, function(err, remote) {
                if (err) return callback(err);

                var src = populate ? remote : local;
                var dst = populate ? local : remote;

                IDBFS.reconcile(src, dst, callback);
            });
        });
    },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
            return callback(null, db);
        }

        var req;
        try {
            req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
            return callback(e);
        }
        req.onupgradeneeded = function(e) {
            var db = e.target.result;
            var transaction = e.target.transaction;

            var fileStore;

            if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
                fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
            } else {
                fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
            }

            if (!fileStore.indexNames.contains('timestamp')) {
                fileStore.createIndex('timestamp', 'timestamp', { unique: false });
            }
        };
        req.onsuccess = function() {
            db = req.result;

            // add to the cache
            IDBFS.dbs[name] = db;
            callback(null, db);
        };
        req.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
        };
    },getLocalSet:function (mount, callback) {
        var entries = {};

        function isRealDir(p) {
            return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
            return function(p) {
                return PATH.join2(root, p);
            }
        };

        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));

        while (check.length) {
            var path = check.pop();
            var stat;

            try {
                stat = FS.stat(path);
            } catch (e) {
                return callback(e);
            }

            if (FS.isDir(stat.mode)) {
                check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
            }

            entries[path] = { timestamp: stat.mtime };
        }

        return callback(null, { type: 'local', entries: entries });
    },getRemoteSet:function (mount, callback) {
        var entries = {};

        IDBFS.getDB(mount.mountpoint, function(err, db) {
            if (err) return callback(err);

            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
                callback(this.error);
                e.preventDefault();
            };

            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');

            index.openKeyCursor().onsuccess = function(event) {
                var cursor = event.target.result;

                if (!cursor) {
                    return callback(null, { type: 'remote', db: db, entries: entries });
                }

                entries[cursor.primaryKey] = { timestamp: cursor.key };

                cursor.continue();
            };
        });
    },loadLocalEntry:function (path, callback) {
        var stat, node;

        try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
        } catch (e) {
            return callback(e);
        }

        if (FS.isDir(stat.mode)) {
            return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
            // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
            // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
            node.contents = MEMFS.getFileDataAsTypedArray(node);
            return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
            return callback(new Error('node type not supported'));
        }
    },storeLocalEntry:function (path, entry, callback) {
        try {
            if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
            } else if (FS.isFile(entry.mode)) {
                FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
            } else {
                return callback(new Error('node type not supported'));
            }

            FS.chmod(path, entry.mode);
            FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
            return callback(e);
        }

        callback(null);
    },removeLocalEntry:function (path, callback) {
        try {
            var lookup = FS.lookupPath(path);
            var stat = FS.stat(path);

            if (FS.isDir(stat.mode)) {
                FS.rmdir(path);
            } else if (FS.isFile(stat.mode)) {
                FS.unlink(path);
            }
        } catch (e) {
            return callback(e);
        }

        callback(null);
    },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
        };
    },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
        };
    },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
        };
    },reconcile:function (src, dst, callback) {
        var total = 0;

        var create = [];
        Object.keys(src.entries).forEach(function (key) {
            var e = src.entries[key];
            var e2 = dst.entries[key];
            if (!e2 || e.timestamp > e2.timestamp) {
                create.push(key);
                total++;
            }
        });

        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
            var e = dst.entries[key];
            var e2 = src.entries[key];
            if (!e2) {
                remove.push(key);
                total++;
            }
        });

        if (!total) {
            return callback(null);
        }

        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

        function done(err) {
            if (err) {
                if (!done.errored) {
                    done.errored = true;
                    return callback(err);
                }
                return;
            }
            if (++completed >= total) {
                return callback(null);
            }
        };

        transaction.onerror = function(e) {
            done(this.error);
            e.preventDefault();
        };

        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
            if (dst.type === 'local') {
                IDBFS.loadRemoteEntry(store, path, function (err, entry) {
                    if (err) return done(err);
                    IDBFS.storeLocalEntry(path, entry, done);
                });
            } else {
                IDBFS.loadLocalEntry(path, function (err, entry) {
                    if (err) return done(err);
                    IDBFS.storeRemoteEntry(store, path, entry, done);
                });
            }
        });

        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
            if (dst.type === 'local') {
                IDBFS.removeLocalEntry(path, done);
            } else {
                IDBFS.removeRemoteEntry(store, path, done);
            }
        });
    }};

    var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
    },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
    },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
    },getMode:function (path) {
        var stat;
        try {
            stat = fs.lstatSync(path);
            if (NODEFS.isWindows) {
                // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
                // propagate write bits to execute bits.
                stat.mode = stat.mode | ((stat.mode & 146) >> 1);
            }
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
    },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
            parts.push(node.name);
            node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
    },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
            return NODEFS.flagsToPermissionStringMap[flags];
        } else {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
    },node_ops:{getattr:function (node) {
        var path = NODEFS.realPath(node);
        var stat;
        try {
            stat = fs.lstatSync(path);
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
        // See http://support.microsoft.com/kb/140365
        if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
        }
        if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
        }
        return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
        };
    },setattr:function (node, attr) {
        var path = NODEFS.realPath(node);
        try {
            if (attr.mode !== undefined) {
                fs.chmodSync(path, attr.mode);
                // update the common node structure mode as well
                node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
                var date = new Date(attr.timestamp);
                fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
                fs.truncateSync(path, attr.size);
            }
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
    },lookup:function (parent, name) {
        var path = PATH.join2(NODEFS.realPath(parent), name);
        var mode = NODEFS.getMode(path);
        return NODEFS.createNode(parent, name, mode);
    },mknod:function (parent, name, mode, dev) {
        var node = NODEFS.createNode(parent, name, mode, dev);
        // create the backing node for this in the fs root as well
        var path = NODEFS.realPath(node);
        try {
            if (FS.isDir(node.mode)) {
                fs.mkdirSync(path, node.mode);
            } else {
                fs.writeFileSync(path, '', { mode: node.mode });
            }
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return node;
    },rename:function (oldNode, newDir, newName) {
        var oldPath = NODEFS.realPath(oldNode);
        var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
        try {
            fs.renameSync(oldPath, newPath);
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
    },unlink:function (parent, name) {
        var path = PATH.join2(NODEFS.realPath(parent), name);
        try {
            fs.unlinkSync(path);
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
    },rmdir:function (parent, name) {
        var path = PATH.join2(NODEFS.realPath(parent), name);
        try {
            fs.rmdirSync(path);
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
    },readdir:function (node) {
        var path = NODEFS.realPath(node);
        try {
            return fs.readdirSync(path);
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
    },symlink:function (parent, newName, oldPath) {
        var newPath = PATH.join2(NODEFS.realPath(parent), newName);
        try {
            fs.symlinkSync(oldPath, newPath);
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
    },readlink:function (node) {
        var path = NODEFS.realPath(node);
        try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
    }},stream_ops:{open:function (stream) {
        var path = NODEFS.realPath(stream.node);
        try {
            if (FS.isFile(stream.node.mode)) {
                stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
    },close:function (stream) {
        try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
                fs.closeSync(stream.nfd);
            }
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
    },read:function (stream, buffer, offset, length, position) {
        if (length === 0) return 0; // node errors on 0 length reads
        // FIXME this is terrible.
        var nbuffer = new Buffer(length);
        var res;
        try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
        } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        if (res > 0) {
            for (var i = 0; i < res; i++) {
                buffer[offset + i] = nbuffer[i];
            }
        }
        return res;
    },write:function (stream, buffer, offset, length, position) {
        // FIXME this is terrible.
        var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
        var res;
        try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
        } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return res;
    },llseek:function (stream, offset, whence) {
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
                try {
                    var stat = fs.fstatSync(stream.nfd);
                    position += stat.size;
                } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                }
            }
        }

        if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }

        return position;
    }}};

    var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
            // return the parent node, creating subdirs as necessary
            var parts = path.split('/');
            var parent = root;
            for (var i = 0; i < parts.length-1; i++) {
                var curr = parts.slice(0, i+1).join('/');
                if (!createdParents[curr]) {
                    createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
                }
                parent = createdParents[curr];
            }
            return parent;
        }
        function base(path) {
            var parts = path.split('/');
            return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
            WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
            WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
            pack['metadata'].files.forEach(function(file) {
                var name = file.filename.substr(1); // remove initial slash
                WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
            });
        });
        return root;
    },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
            node.size = contents.size;
            node.contents = contents;
        } else {
            node.size = 4096;
            node.contents = {};
        }
        if (parent) {
            parent.contents[name] = node;
        }
        return node;
    },node_ops:{getattr:function (node) {
        return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
        };
    },setattr:function (node, attr) {
        if (attr.mode !== undefined) {
            node.mode = attr.mode;
        }
        if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
        }
    },lookup:function (parent, name) {
        throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
    },mknod:function (parent, name, mode, dev) {
        throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    },rename:function (oldNode, newDir, newName) {
        throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    },unlink:function (parent, name) {
        throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    },rmdir:function (parent, name) {
        throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    },readdir:function (node) {
        throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    },symlink:function (parent, newName, oldPath) {
        throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    },readlink:function (node) {
        throw new FS.ErrnoError(ERRNO_CODES.EPERM);
    }},stream_ops:{read:function (stream, buffer, offset, length, position) {
        if (position >= stream.node.size) return 0;
        var chunk = stream.node.contents.slice(position, position + length);
        var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
        buffer.set(new Uint8Array(ab), offset);
        return chunk.size;
    },write:function (stream, buffer, offset, length, position) {
        throw new FS.ErrnoError(ERRNO_CODES.EIO);
    },llseek:function (stream, offset, whence) {
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
                position += stream.node.size;
            }
        }
        if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return position;
    }}};

    var _stdin=allocate(1, "i32*", ALLOC_STATIC);

    var _stdout=allocate(1, "i32*", ALLOC_STATIC);

    var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
    },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};

        if (!path) return { path: '', node: null };

        var defaults = {
            follow_mount: true,
            recurse_count: 0
        };
        for (var key in defaults) {
            if (opts[key] === undefined) {
                opts[key] = defaults[key];
            }
        }

        if (opts.recurse_count > 8) {  // max recursive lookup of 8
            throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }

        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
            return !!p;
        }), false);

        // start at the root
        var current = FS.root;
        var current_path = '/';

        for (var i = 0; i < parts.length; i++) {
            var islast = (i === parts.length-1);
            if (islast && opts.parent) {
                // stop resolving
                break;
            }

            current = FS.lookupNode(current, parts[i]);
            current_path = PATH.join2(current_path, parts[i]);

            // jump to the mount's root node if this is a mountpoint
            if (FS.isMountpoint(current)) {
                if (!islast || (islast && opts.follow_mount)) {
                    current = current.mounted.root;
                }
            }

            // by default, lookupPath will not follow a symlink if it is the final path component.
            // setting opts.follow = true will override this behavior.
            if (!islast || opts.follow) {
                var count = 0;
                while (FS.isLink(current.mode)) {
                    var link = FS.readlink(current_path);
                    current_path = PATH.resolve(PATH.dirname(current_path), link);

                    var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
                    current = lookup.node;

                    if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                        throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
                    }
                }
            }
        }

        return { path: current_path, node: current };
    },getPath:function (node) {
        var path;
        while (true) {
            if (FS.isRoot(node)) {
                var mount = node.mount.mountpoint;
                if (!path) return mount;
                return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
            }
            path = path ? node.name + '/' + path : node.name;
            node = node.parent;
        }
    },hashName:function (parentid, name) {
        var hash = 0;


        for (var i = 0; i < name.length; i++) {
            hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
    },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
    },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
            FS.nameTable[hash] = node.name_next;
        } else {
            var current = FS.nameTable[hash];
            while (current) {
                if (current.name_next === node) {
                    current.name_next = node.name_next;
                    break;
                }
                current = current.name_next;
            }
        }
    },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
            throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
            var nodeName = node.name;
            if (node.parent.id === parent.id && nodeName === name) {
                return node;
            }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
    },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
            FS.FSNode = function(parent, name, mode, rdev) {
                if (!parent) {
                    parent = this;  // root node sets parent to itself
                }
                this.parent = parent;
                this.mount = parent.mount;
                this.mounted = null;
                this.id = FS.nextInode++;
                this.name = name;
                this.mode = mode;
                this.node_ops = {};
                this.stream_ops = {};
                this.rdev = rdev;
            };

            FS.FSNode.prototype = {};

            // compatibility
            var readMode = 292 | 73;
            var writeMode = 146;

            // NOTE we must use Object.defineProperties instead of individual calls to
            // Object.defineProperty in order to make closure compiler happy
            Object.defineProperties(FS.FSNode.prototype, {
                read: {
                    get: function() { return (this.mode & readMode) === readMode; },
                    set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
                },
                write: {
                    get: function() { return (this.mode & writeMode) === writeMode; },
                    set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
                },
                isFolder: {
                    get: function() { return FS.isDir(this.mode); }
                },
                isDevice: {
                    get: function() { return FS.isChrdev(this.mode); }
                }
            });
        }

        var node = new FS.FSNode(parent, name, mode, rdev);

        FS.hashAddNode(node);

        return node;
    },destroyNode:function (node) {
        FS.hashRemoveNode(node);
    },isRoot:function (node) {
        return node === node.parent;
    },isMountpoint:function (node) {
        return !!node.mounted;
    },isFile:function (mode) {
        return (mode & 61440) === 32768;
    },isDir:function (mode) {
        return (mode & 61440) === 16384;
    },isLink:function (mode) {
        return (mode & 61440) === 40960;
    },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
    },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
    },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
    },isSocket:function (mode) {
        return (mode & 49152) === 49152;
    },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
            throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
    },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
            perms += 'w';
        }
        return perms;
    },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
            return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
            return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
            return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
            return ERRNO_CODES.EACCES;
        }
        return 0;
    },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
    },mayCreate:function (dir, name) {
        try {
            var node = FS.lookupNode(dir, name);
            return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
    },mayDelete:function (dir, name, isdir) {
        var node;
        try {
            node = FS.lookupNode(dir, name);
        } catch (e) {
            return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
            return err;
        }
        if (isdir) {
            if (!FS.isDir(node.mode)) {
                return ERRNO_CODES.ENOTDIR;
            }
            if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                return ERRNO_CODES.EBUSY;
            }
        } else {
            if (FS.isDir(node.mode)) {
                return ERRNO_CODES.EISDIR;
            }
        }
        return 0;
    },mayOpen:function (node, flags) {
        if (!node) {
            return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
            return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
            if ((flags & 2097155) !== 0 ||  // opening for write
                (flags & 512)) {
                return ERRNO_CODES.EISDIR;
            }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
    },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
            if (!FS.streams[fd]) {
                return fd;
            }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
    },getStream:function (fd) {
        return FS.streams[fd];
    },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
            FS.FSStream = function(){};
            FS.FSStream.prototype = {};
            // compatibility
            Object.defineProperties(FS.FSStream.prototype, {
                object: {
                    get: function() { return this.node; },
                    set: function(val) { this.node = val; }
                },
                isRead: {
                    get: function() { return (this.flags & 2097155) !== 1; }
                },
                isWrite: {
                    get: function() { return (this.flags & 2097155) !== 0; }
                },
                isAppend: {
                    get: function() { return (this.flags & 1024); }
                }
            });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
            newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
    },closeStream:function (fd) {
        FS.streams[fd] = null;
    },chrdev_stream_ops:{open:function (stream) {
        var device = FS.getDevice(stream.node.rdev);
        // override node's stream ops with the device's
        stream.stream_ops = device.stream_ops;
        // forward the open call
        if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
        }
    },llseek:function () {
        throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
    }},major:function (dev) {
        return ((dev) >> 8);
    },minor:function (dev) {
        return ((dev) & 0xff);
    },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
    },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
    },getDevice:function (dev) {
        return FS.devices[dev];
    },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];

        while (check.length) {
            var m = check.pop();

            mounts.push(m);

            check.push.apply(check, m.mounts);
        }

        return mounts;
    },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
            callback = populate;
            populate = false;
        }

        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;

        function done(err) {
            if (err) {
                if (!done.errored) {
                    done.errored = true;
                    return callback(err);
                }
                return;
            }
            if (++completed >= mounts.length) {
                callback(null);
            }
        };

        // sync all mounts
        mounts.forEach(function (mount) {
            if (!mount.type.syncfs) {
                return done(null);
            }
            mount.type.syncfs(mount, populate, done);
        });
    },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;

        if (root && FS.root) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
            var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

            mountpoint = lookup.path;  // use the absolute path
            node = lookup.node;

            if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
            }

            if (!FS.isDir(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
            }
        }

        var mount = {
            type: type,
            opts: opts,
            mountpoint: mountpoint,
            mounts: []
        };

        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;

        if (root) {
            FS.root = mountRoot;
        } else if (node) {
            // set as a mountpoint
            node.mounted = mount;

            // add the new mount to the current mount's children
            if (node.mount) {
                node.mount.mounts.push(mount);
            }
        }

        return mountRoot;
    },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

        if (!FS.isMountpoint(lookup.node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }

        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);

        Object.keys(FS.nameTable).forEach(function (hash) {
            var current = FS.nameTable[hash];

            while (current) {
                var next = current.name_next;

                if (mounts.indexOf(current.mount) !== -1) {
                    FS.destroyNode(current);
                }

                current = next;
            }
        });

        // no longer a mountpoint
        node.mounted = null;

        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
    },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
    },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
    },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
    },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
    },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
            dev = mode;
            mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
    },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
    },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
            lookup = FS.lookupPath(old_path, { parent: true });
            old_dir = lookup.node;
            lookup = FS.lookupPath(new_path, { parent: true });
            new_dir = lookup.node;
        } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
            throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
            new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
            // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
            return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
            FS.mayDelete(new_dir, new_name, isdir) :
            FS.mayCreate(new_dir, new_name);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
            err = FS.nodePermissions(old_dir, 'w');
            if (err) {
                throw new FS.ErrnoError(err);
            }
        }
        try {
            if (FS.trackingDelegate['willMovePath']) {
                FS.trackingDelegate['willMovePath'](old_path, new_path);
            }
        } catch(e) {
            console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
            old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
            throw e;
        } finally {
            // add the node back to the hash (in case node_ops.rename
            // changed its name)
            FS.hashAddNode(old_node);
        }
        try {
            if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
            console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
    },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
            if (FS.trackingDelegate['willDeletePath']) {
                FS.trackingDelegate['willDeletePath'](path);
            }
        } catch(e) {
            console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
            if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
            console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
    },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
    },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
            // POSIX says unlink should set EPERM, not EISDIR
            if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
            throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
            if (FS.trackingDelegate['willDeletePath']) {
                FS.trackingDelegate['willDeletePath'](path);
            }
        } catch(e) {
            console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
            if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
            console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
    },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
    },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
    },lstat:function (path) {
        return FS.stat(path, true);
    },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            node = lookup.node;
        } else {
            node = path;
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
            mode: (mode & 4095) | (node.mode & ~4095),
            timestamp: Date.now()
        });
    },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
    },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
    },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
            var lookup = FS.lookupPath(path, { follow: !dontFollow });
            node = lookup.node;
        } else {
            node = path;
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
            timestamp: Date.now()
            // we ignore the uid / gid for now
        });
    },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
    },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
    },truncate:function (path, len) {
        if (len < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
            var lookup = FS.lookupPath(path, { follow: true });
            node = lookup.node;
        } else {
            node = path;
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
            throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
            size: len,
            timestamp: Date.now()
        });
    },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
    },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
            timestamp: Math.max(atime, mtime)
        });
    },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
            mode = (mode & 4095) | 32768;
        } else {
            mode = 0;
        }
        var node;
        if (typeof path === 'object') {
            node = path;
        } else {
            path = PATH.normalize(path);
            try {
                var lookup = FS.lookupPath(path, {
                    follow: !(flags & 131072)
                });
                node = lookup.node;
            } catch (e) {
                // ignore
            }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
            if (node) {
                // if O_CREAT and O_EXCL are set, error out if the node already exists
                if ((flags & 128)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
                }
            } else {
                // node doesn't exist, try to create it
                node = FS.mknod(path, mode, 0);
                created = true;
            }
        }
        if (!node) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
            flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
            var err = FS.mayOpen(node, flags);
            if (err) {
                throw new FS.ErrnoError(err);
            }
        }
        // do truncation if necessary
        if ((flags & 512)) {
            FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);

        // register the stream with the filesystem
        var stream = FS.createStream({
            node: node,
            path: FS.getPath(node),  // we want the absolute path to the node
            flags: flags,
            seekable: true,
            position: 0,
            stream_ops: node.stream_ops,
            // used by the file family libc calls (fopen, fwrite, ferror, etc.)
            ungotten: [],
            error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
            if (!FS.readFiles) FS.readFiles = {};
            if (!(path in FS.readFiles)) {
                FS.readFiles[path] = 1;
                Module['printErr']('read file: ' + path);
            }
        }
        try {
            if (FS.trackingDelegate['onOpenFile']) {
                var trackingFlags = 0;
                if ((flags & 2097155) !== 1) {
                    trackingFlags |= FS.tracking.openFlags.READ;
                }
                if ((flags & 2097155) !== 0) {
                    trackingFlags |= FS.tracking.openFlags.WRITE;
                }
                FS.trackingDelegate['onOpenFile'](path, trackingFlags);
            }
        } catch(e) {
            console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
    },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
            if (stream.stream_ops.close) {
                stream.stream_ops.close(stream);
            }
        } catch (e) {
            throw e;
        } finally {
            FS.closeStream(stream.fd);
        }
    },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
    },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
            position = stream.position;
            seeking = false;
        } else if (!stream.seekable) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
    },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
            // seek to the end before writing in append mode
            FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
            position = stream.position;
            seeking = false;
        } else if (!stream.seekable) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
            if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
            console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
    },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
    },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
    },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
            return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
    },munmap:function (stream) {
        return 0;
    },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
    },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
            throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
            ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
            ret = buf;
        }
        FS.close(stream);
        return ret;
    },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
            throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
            var buf = new Uint8Array(lengthBytesUTF8(data)+1);
            var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
            FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
            FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
    },cwd:function () {
        return FS.currentPath;
    },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
            throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
    },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
    },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
            read: function() { return 0; },
            write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
            // for modern web browsers
            var randomBuffer = new Uint8Array(1);
            random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
            // for nodejs
            random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
            // default for ES5 platforms
            random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
    },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
            mount: function() {
                var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
                node.node_ops = {
                    lookup: function(parent, name) {
                        var fd = +name;
                        var stream = FS.getStream(fd);
                        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                        var ret = {
                            parent: null,
                            mount: { mountpoint: 'fake' },
                            node_ops: { readlink: function() { return stream.path } }
                        };
                        ret.parent = ret; // make it look like a simple root node
                        return ret;
                    }
                };
                return node;
            }
        }, {}, '/proc/self/fd');
    },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops

        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
            FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
            FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
            FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
            FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
            FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
            FS.symlink('/dev/tty1', '/dev/stderr');
        }

        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');

        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');

        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
    },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
            //Module.printErr(stackTrace()); // useful for debugging
            this.node = node;
            this.setErrno = function(errno) {
                this.errno = errno;
                for (var key in ERRNO_CODES) {
                    if (ERRNO_CODES[key] === errno) {
                        this.code = key;
                        break;
                    }
                }
            };
            this.setErrno(errno);
            this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
            FS.genericErrors[code] = new FS.ErrnoError(code);
            FS.genericErrors[code].stack = '<generic error, no stack>';
        });
    },staticInit:function () {
        FS.ensureErrnoError();

        FS.nameTable = new Array(4096);

        FS.mount(MEMFS, {}, '/');

        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();

        FS.filesystems = {
            'MEMFS': MEMFS,
            'IDBFS': IDBFS,
            'NODEFS': NODEFS,
            'WORKERFS': WORKERFS,
        };
    },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;

        FS.ensureErrnoError();

        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];

        FS.createStandardStreams();
    },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
            var stream = FS.streams[i];
            if (!stream) {
                continue;
            }
            FS.close(stream);
        }
    },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
    },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
    },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
    },standardizePath:function (path) {
        return PATH.normalize(path);
    },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
            return ret.object;
        } else {
            ___setErrNo(ret.error);
            return null;
        }
    },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
            var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
            path = lookup.path;
        } catch (e) {
        }
        var ret = {
            isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
            parentExists: false, parentPath: null, parentObject: null
        };
        try {
            var lookup = FS.lookupPath(path, { parent: true });
            ret.parentExists = true;
            ret.parentPath = lookup.path;
            ret.parentObject = lookup.node;
            ret.name = PATH.basename(path);
            lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
            ret.exists = true;
            ret.path = lookup.path;
            ret.object = lookup.node;
            ret.name = lookup.node.name;
            ret.isRoot = lookup.path === '/';
        } catch (e) {
            ret.error = e.errno;
        };
        return ret;
    },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
    },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
            var part = parts.pop();
            if (!part) continue;
            var current = PATH.join2(parent, part);
            try {
                FS.mkdir(current);
            } catch (e) {
                // ignore EEXIST
            }
            parent = current;
        }
        return current;
    },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
    },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
            if (typeof data === 'string') {
                var arr = new Array(data.length);
                for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
                data = arr;
            }
            // make sure we can write to the file
            FS.chmod(node, mode | 146);
            var stream = FS.open(node, 'w');
            FS.write(stream, data, 0, data.length, 0, canOwn);
            FS.close(stream);
            FS.chmod(node, mode);
        }
        return node;
    },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
            open: function(stream) {
                stream.seekable = false;
            },
            close: function(stream) {
                // flush any pending line data
                if (output && output.buffer && output.buffer.length) {
                    output(10);
                }
            },
            read: function(stream, buffer, offset, length, pos /* ignored */) {
                var bytesRead = 0;
                for (var i = 0; i < length; i++) {
                    var result;
                    try {
                        result = input();
                    } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO);
                    }
                    if (result === undefined && bytesRead === 0) {
                        throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
                    }
                    if (result === null || result === undefined) break;
                    bytesRead++;
                    buffer[offset+i] = result;
                }
                if (bytesRead) {
                    stream.node.timestamp = Date.now();
                }
                return bytesRead;
            },
            write: function(stream, buffer, offset, length, pos) {
                for (var i = 0; i < length; i++) {
                    try {
                        output(buffer[offset+i]);
                    } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO);
                    }
                }
                if (length) {
                    stream.node.timestamp = Date.now();
                }
                return i;
            }
        });
        return FS.mkdev(path, mode, dev);
    },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
    },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
            throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
            // Command-line.
            try {
                // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
                //          read() will try to parse UTF8.
                obj.contents = intArrayFromString(Module['read'](obj.url), true);
                obj.usedBytes = obj.contents.length;
            } catch (e) {
                success = false;
            }
        } else {
            throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
    },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
                return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = (idx / this.chunkSize)|0;
            return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes

            if (!hasByteServing) chunkSize = datalength;

            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");

                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);

                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                    xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }

                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                    return new Uint8Array(xhr.response || []);
                } else {
                    return intArrayFromString(xhr.responseText || '', true);
                }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                    lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
            });

            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
            if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
            var lazyArray = new LazyUint8Array();
            Object.defineProperty(lazyArray, "length", {
                get: function() {
                    if(!this.lengthKnown) {
                        this.cacheLength();
                    }
                    return this._length;
                }
            });
            Object.defineProperty(lazyArray, "chunkSize", {
                get: function() {
                    if(!this.lengthKnown) {
                        this.cacheLength();
                    }
                    return this._chunkSize;
                }
            });

            var properties = { isDevice: false, contents: lazyArray };
        } else {
            var properties = { isDevice: false, url: url };
        }

        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
            node.contents = properties.contents;
        } else if (properties.url) {
            node.contents = null;
            node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
            var fn = node.stream_ops[key];
            stream_ops[key] = function forceLoadLazyFile() {
                if (!FS.forceLoadFile(node)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO);
                }
                return fn.apply(null, arguments);
            };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
            if (!FS.forceLoadFile(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            var contents = stream.node.contents;
            if (position >= contents.length)
                return 0;
            var size = Math.min(contents.length - position, length);
            assert(size >= 0);
            if (contents.slice) { // normal array
                for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents[position + i];
                }
            } else {
                for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
                    buffer[offset + i] = contents.get(position + i);
                }
            }
            return size;
        };
        node.stream_ops = stream_ops;
        return node;
    },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
            function finish(byteArray) {
                if (preFinish) preFinish();
                if (!dontCreateFile) {
                    FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
                }
                if (onload) onload();
                removeRunDependency(dep);
            }
            var handled = false;
            Module['preloadPlugins'].forEach(function(plugin) {
                if (handled) return;
                if (plugin['canHandle'](fullname)) {
                    plugin['handle'](byteArray, fullname, finish, function() {
                        if (onerror) onerror();
                        removeRunDependency(dep);
                    });
                    handled = true;
                }
            });
            if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
            Browser.asyncLoad(url, function(byteArray) {
                processData(byteArray);
            }, onerror);
        } else {
            processData(url);
        }
    },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
    },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
    },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
            return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
            console.log('creating db');
            var db = openRequest.result;
            db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
                if (fail == 0) onload(); else onerror();
            }
            paths.forEach(function(path) {
                var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
                putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
            });
            transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
    },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
            return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            try {
                var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
            } catch(e) {
                onerror(e);
                return;
            }
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0, fail = 0, total = paths.length;
            function finish() {
                if (fail == 0) onload(); else onerror();
            }
            paths.forEach(function(path) {
                var getRequest = files.get(path);
                getRequest.onsuccess = function getRequest_onsuccess() {
                    if (FS.analyzePath(path).exists) {
                        FS.unlink(path);
                    }
                    FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                    ok++;
                    if (ok + fail == total) finish();
                };
                getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
            });
            transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
    }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
    },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === '.') {
                parts.splice(i, 1);
            } else if (last === '..') {
                parts.splice(i, 1);
                up++;
            } else if (up) {
                parts.splice(i, 1);
                up--;
            }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
            for (; up--; up) {
                parts.unshift('..');
            }
        }
        return parts;
    },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
            return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
            path = '.';
        }
        if (path && trailingSlash) {
            path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
    },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
            // No dirname whatsoever
            return '.';
        }
        if (dir) {
            // It has a dirname, strip trailing slash
            dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
    },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
    },extname:function (path) {
        return PATH.splitPath(path)[3];
    },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
    },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
    },resolve:function () {
        var resolvedPath = '',
            resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = (i >= 0) ? arguments[i] : FS.cwd();
            // Skip empty and invalid entries
            if (typeof path !== 'string') {
                throw new TypeError('Arguments to path.resolve must be strings');
            } else if (!path) {
                return ''; // an invalid portion invalidates the whole thing
            }
            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
            return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
    },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
                if (arr[start] !== '') break;
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
                if (arr[end] !== '') break;
            }
            if (start > end) return [];
            return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
            }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
    }};


    function _emscripten_set_main_loop_timing(mode, value) {
        Browser.mainLoop.timingMode = mode;
        Browser.mainLoop.timingValue = value;

        if (!Browser.mainLoop.func) {
            return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
        }

        if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
            Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
                setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
            };
            Browser.mainLoop.method = 'timeout';
        } else if (mode == 1 /*EM_TIMING_RAF*/) {
            Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
                Browser.requestAnimationFrame(Browser.mainLoop.runner);
            };
            Browser.mainLoop.method = 'rAF';
        } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
            if (!window['setImmediate']) {
                // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
                var setImmediates = [];
                var emscriptenMainLoopMessageId = '__emcc';
                function Browser_setImmediate_messageHandler(event) {
                    if (event.source === window && event.data === emscriptenMainLoopMessageId) {
                        event.stopPropagation();
                        setImmediates.shift()();
                    }
                }
                window.addEventListener("message", Browser_setImmediate_messageHandler, true);
                window['setImmediate'] = function Browser_emulated_setImmediate(func) {
                    setImmediates.push(func);
                    window.postMessage(emscriptenMainLoopMessageId, "*");
                }
            }
            Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
                window['setImmediate'](Browser.mainLoop.runner);
            };
            Browser.mainLoop.method = 'immediate';
        }
        return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
        Module['noExitRuntime'] = true;

        assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');

        Browser.mainLoop.func = func;
        Browser.mainLoop.arg = arg;

        var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;

        Browser.mainLoop.runner = function Browser_mainLoop_runner() {
            if (ABORT) return;
            if (Browser.mainLoop.queue.length > 0) {
                var start = Date.now();
                var blocker = Browser.mainLoop.queue.shift();
                blocker.func(blocker.arg);
                if (Browser.mainLoop.remainingBlockers) {
                    var remaining = Browser.mainLoop.remainingBlockers;
                    var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
                    if (blocker.counted) {
                        Browser.mainLoop.remainingBlockers = next;
                    } else {
                        // not counted, but move the progress along a tiny bit
                        next = next + 0.5; // do not steal all the next one's progress
                        Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
                    }
                }
                console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
                Browser.mainLoop.updateStatus();
                setTimeout(Browser.mainLoop.runner, 0);
                return;
            }

            // catch pauses from non-main loop sources
            if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;

            // Implement very basic swap interval control
            Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
            if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
                // Not the scheduled time to render this frame - skip.
                Browser.mainLoop.scheduler();
                return;
            }

            // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
            // VBO double-buffering and reduce GPU stalls.

            if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
                Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
                Browser.mainLoop.method = ''; // just warn once per call to set main loop
            }

            Browser.mainLoop.runIter(function() {
                if (typeof arg !== 'undefined') {
                    Runtime.dynCall('vi', func, [arg]);
                } else {
                    Runtime.dynCall('v', func);
                }
            });

            // catch pauses from the main loop itself
            if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;

            // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
            // to queue the newest produced audio samples.
            // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
            //       do not need to be hardcoded into this function, but can be more generic.
            if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();

            Browser.mainLoop.scheduler();
        }

        if (!noSetTiming) {
            if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
            else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)

            Browser.mainLoop.scheduler();
        }

        if (simulateInfiniteLoop) {
            throw 'SimulateInfiniteLoop';
        }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
        Browser.mainLoop.scheduler = null;
        Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
    },resume:function () {
        Browser.mainLoop.currentlyRunningMainloop++;
        var timingMode = Browser.mainLoop.timingMode;
        var timingValue = Browser.mainLoop.timingValue;
        var func = Browser.mainLoop.func;
        Browser.mainLoop.func = null;
        _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
        _emscripten_set_main_loop_timing(timingMode, timingValue);
        Browser.mainLoop.scheduler();
    },updateStatus:function () {
        if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
                if (remaining < expected) {
                    Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
                } else {
                    Module['setStatus'](message);
                }
            } else {
                Module['setStatus']('');
            }
        }
    },runIter:function (func) {
        if (ABORT) return;
        if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
                return; // |return false| skips a frame
            }
        }
        try {
            func();
        } catch (e) {
            if (e instanceof ExitStatus) {
                return;
            } else {
                if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
                throw e;
            }
        }
        if (Module['postMainLoop']) Module['postMainLoop']();
    }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers

        if (Browser.initted) return;
        Browser.initted = true;

        try {
            new Blob();
            Browser.hasBlobConstructor = true;
        } catch(e) {
            Browser.hasBlobConstructor = false;
            console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
            console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
            Module.noImageDecoding = true;
        }

        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).

        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
            return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
            var b = null;
            if (Browser.hasBlobConstructor) {
                try {
                    b = new Blob([byteArray], { type: Browser.getMimetype(name) });
                    if (b.size !== byteArray.length) { // Safari bug #118630
                        // Safari's Blob can only take an ArrayBuffer
                        b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
                    }
                } catch(e) {
                    Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
                }
            }
            if (!b) {
                var bb = new Browser.BlobBuilder();
                bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
                b = bb.getBlob();
            }
            var url = Browser.URLObject.createObjectURL(b);
            var img = new Image();
            img.onload = function img_onload() {
                assert(img.complete, 'Image ' + name + ' could not be decoded');
                var canvas = document.createElement('canvas');
                canvas.width = img.width;
                canvas.height = img.height;
                var ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0);
                Module["preloadedImages"][name] = canvas;
                Browser.URLObject.revokeObjectURL(url);
                if (onload) onload(byteArray);
            };
            img.onerror = function img_onerror(event) {
                console.log('Image ' + url + ' could not be decoded');
                if (onerror) onerror();
            };
            img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);

        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
            return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
            var done = false;
            function finish(audio) {
                if (done) return;
                done = true;
                Module["preloadedAudios"][name] = audio;
                if (onload) onload(byteArray);
            }
            function fail() {
                if (done) return;
                done = true;
                Module["preloadedAudios"][name] = new Audio(); // empty shim
                if (onerror) onerror();
            }
            if (Browser.hasBlobConstructor) {
                try {
                    var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
                } catch(e) {
                    return fail();
                }
                var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
                var audio = new Audio();
                audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
                audio.onerror = function audio_onerror(event) {
                    if (done) return;
                    console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
                    function encode64(data) {
                        var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                        var PAD = '=';
                        var ret = '';
                        var leftchar = 0;
                        var leftbits = 0;
                        for (var i = 0; i < data.length; i++) {
                            leftchar = (leftchar << 8) | data[i];
                            leftbits += 8;
                            while (leftbits >= 6) {
                                var curr = (leftchar >> (leftbits-6)) & 0x3f;
                                leftbits -= 6;
                                ret += BASE[curr];
                            }
                        }
                        if (leftbits == 2) {
                            ret += BASE[(leftchar&3) << 4];
                            ret += PAD + PAD;
                        } else if (leftbits == 4) {
                            ret += BASE[(leftchar&0xf) << 2];
                            ret += PAD;
                        }
                        return ret;
                    }
                    audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
                    finish(audio); // we don't wait for confirmation this worked - but it's worth trying
                };
                audio.src = url;
                // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
                Browser.safeSetTimeout(function() {
                    finish(audio); // try to use it even though it is not necessarily ready to play
                }, 10000);
            } else {
                return fail();
            }
        };
        Module['preloadPlugins'].push(audioPlugin);

        // Canvas event setup

        var canvas = Module['canvas'];
        function pointerLockChange() {
            Browser.pointerLock = document['pointerLockElement'] === canvas ||
                document['mozPointerLockElement'] === canvas ||
                document['webkitPointerLockElement'] === canvas ||
                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
            // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
            // Module['forcedAspectRatio'] = 4 / 3;

            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                canvas['mozRequestPointerLock'] ||
                canvas['webkitRequestPointerLock'] ||
                canvas['msRequestPointerLock'] ||
                function(){};
            canvas.exitPointerLock = document['exitPointerLock'] ||
                document['mozExitPointerLock'] ||
                document['webkitExitPointerLock'] ||
                document['msExitPointerLock'] ||
                function(){}; // no-op if function does not exist
            canvas.exitPointerLock = canvas.exitPointerLock.bind(document);


            document.addEventListener('pointerlockchange', pointerLockChange, false);
            document.addEventListener('mozpointerlockchange', pointerLockChange, false);
            document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
            document.addEventListener('mspointerlockchange', pointerLockChange, false);

            if (Module['elementPointerLock']) {
                canvas.addEventListener("click", function(ev) {
                    if (!Browser.pointerLock && canvas.requestPointerLock) {
                        canvas.requestPointerLock();
                        ev.preventDefault();
                    }
                }, false);
            }
        }
    },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.

        var ctx;
        var contextHandle;
        if (useWebGL) {
            // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
            var contextAttributes = {
                antialias: false,
                alpha: false
            };

            if (webGLContextAttributes) {
                for (var attribute in webGLContextAttributes) {
                    contextAttributes[attribute] = webGLContextAttributes[attribute];
                }
            }

            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
                ctx = GL.getContext(contextHandle).GLctx;
            }
            // Set the background of the WebGL canvas to black
            canvas.style.backgroundColor = "black";
        } else {
            ctx = canvas.getContext('2d');
        }

        if (!ctx) return null;

        if (setInModule) {
            if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');

            Module.ctx = ctx;
            if (useWebGL) GL.makeContextCurrent(contextHandle);
            Module.useWebGL = useWebGL;
            Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
            Browser.init();
        }
        return ctx;
    },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;

        var canvas = Module['canvas'];
        function fullScreenChange() {
            Browser.isFullScreen = false;
            var canvasContainer = canvas.parentNode;
            if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
                document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
                document['fullScreenElement'] || document['fullscreenElement'] ||
                document['msFullScreenElement'] || document['msFullscreenElement'] ||
                document['webkitCurrentFullScreenElement']) === canvasContainer) {
                canvas.cancelFullScreen = document['cancelFullScreen'] ||
                    document['mozCancelFullScreen'] ||
                    document['webkitCancelFullScreen'] ||
                    document['msExitFullscreen'] ||
                    document['exitFullscreen'] ||
                    function() {};
                canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
                if (Browser.lockPointer) canvas.requestPointerLock();
                Browser.isFullScreen = true;
                if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
            } else {

                // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
                canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
                canvasContainer.parentNode.removeChild(canvasContainer);

                if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
            }
            if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
            Browser.updateCanvasDimensions(canvas);
        }

        if (!Browser.fullScreenHandlersInstalled) {
            Browser.fullScreenHandlersInstalled = true;
            document.addEventListener('fullscreenchange', fullScreenChange, false);
            document.addEventListener('mozfullscreenchange', fullScreenChange, false);
            document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
            document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }

        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);

        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
            canvasContainer['mozRequestFullScreen'] ||
            canvasContainer['msRequestFullscreen'] ||
            (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);

        if (vrDevice) {
            canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
            canvasContainer.requestFullScreen();
        }
    },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
            Browser.nextRAF = now + 1000/60;
        } else {
            while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
                Browser.nextRAF += 1000/60;
            }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
    },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
            Browser.fakeRequestAnimationFrame(func);
        } else {
            if (!window.requestAnimationFrame) {
                window.requestAnimationFrame = window['requestAnimationFrame'] ||
                    window['mozRequestAnimationFrame'] ||
                    window['webkitRequestAnimationFrame'] ||
                    window['msRequestAnimationFrame'] ||
                    window['oRequestAnimationFrame'] ||
                    Browser.fakeRequestAnimationFrame;
            }
            window.requestAnimationFrame(func);
        }
    },safeCallback:function (func) {
        return function() {
            if (!ABORT) return func.apply(null, arguments);
        };
    },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
    },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
            var callbacks = Browser.queuedAsyncCallbacks;
            Browser.queuedAsyncCallbacks = [];
            callbacks.forEach(function(func) {
                func();
            });
        }
    },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
                func();
            } else {
                Browser.queuedAsyncCallbacks.push(func);
            }
        });
    },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
                func();
            } else {
                Browser.queuedAsyncCallbacks.push(func);
            }
        }, timeout);
    },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
                func();
            } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
    },getMimetype:function (name) {
        return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
    },getUserMedia:function (func) {
        if(!window.getUserMedia) {
            window.getUserMedia = navigator['getUserMedia'] ||
                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
    },getMovementX:function (event) {
        return event['movementX'] ||
            event['mozMovementX'] ||
            event['webkitMovementX'] ||
            0;
    },getMovementY:function (event) {
        return event['movementY'] ||
            event['mozMovementY'] ||
            event['webkitMovementY'] ||
            0;
    },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
            case 'DOMMouseScroll':
                delta = event.detail;
                break;
            case 'mousewheel':
                delta = event.wheelDelta;
                break;
            case 'wheel':
                delta = event['deltaY'];
                break;
            default:
                throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
    },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
            // When the pointer is locked, calculate the coordinates
            // based on the movement of the mouse.
            // Workaround for Firefox bug 764498
            if (event.type != 'mousemove' &&
                ('mozMovementX' in event)) {
                Browser.mouseMovementX = Browser.mouseMovementY = 0;
            } else {
                Browser.mouseMovementX = Browser.getMovementX(event);
                Browser.mouseMovementY = Browser.getMovementY(event);
            }

            // check if SDL is available
            if (typeof SDL != "undefined") {
                Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
                Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
            } else {
                // just add the mouse delta to the current absolut mouse position
                // FIXME: ideally this should be clamped against the canvas size and zero
                Browser.mouseX += Browser.mouseMovementX;
                Browser.mouseY += Browser.mouseMovementY;
            }
        } else {
            // Otherwise, calculate the movement based on the changes
            // in the coordinates.
            var rect = Module["canvas"].getBoundingClientRect();
            var cw = Module["canvas"].width;
            var ch = Module["canvas"].height;

            // Neither .scrollX or .pageXOffset are defined in a spec, but
            // we prefer .scrollX because it is currently in a spec draft.
            // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
            var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
            var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);

            if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
                var touch = event.touch;
                if (touch === undefined) {
                    return; // the "touch" property is only defined in SDL

                }
                var adjustedX = touch.pageX - (scrollX + rect.left);
                var adjustedY = touch.pageY - (scrollY + rect.top);

                adjustedX = adjustedX * (cw / rect.width);
                adjustedY = adjustedY * (ch / rect.height);

                var coords = { x: adjustedX, y: adjustedY };

                if (event.type === 'touchstart') {
                    Browser.lastTouches[touch.identifier] = coords;
                    Browser.touches[touch.identifier] = coords;
                } else if (event.type === 'touchend' || event.type === 'touchmove') {
                    var last = Browser.touches[touch.identifier];
                    if (!last) last = coords;
                    Browser.lastTouches[touch.identifier] = last;
                    Browser.touches[touch.identifier] = coords;
                }
                return;
            }

            var x = event.pageX - (scrollX + rect.left);
            var y = event.pageY - (scrollY + rect.top);

            // the canvas might be CSS-scaled compared to its backbuffer;
            // SDL-using content will want mouse coordinates in terms
            // of backbuffer units.
            x = x * (cw / rect.width);
            y = y * (ch / rect.height);

            Browser.mouseMovementX = x - Browser.mouseX;
            Browser.mouseMovementY = y - Browser.mouseY;
            Browser.mouseX = x;
            Browser.mouseY = y;
        }
    },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
            if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
                onload(xhr.response);
            } else {
                onerror();
            }
        };
        xhr.onerror = onerror;
        xhr.send(null);
    },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
            assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
            onload(new Uint8Array(arrayBuffer));
            if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
            if (onerror) {
                onerror();
            } else {
                throw 'Loading data file "' + url + '" failed.';
            }
        });
        if (!noRunDep) addRunDependency('al ' + url);
    },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
            listener(canvas.width, canvas.height);
        });
    },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
    },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
            var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
            flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
            HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
    },setWindowedCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
            var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
            flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
            HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
    },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
            canvas.widthNative = wNative;
            canvas.heightNative = hNative;
        } else {
            wNative = canvas.widthNative;
            hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
            if (w/h < Module['forcedAspectRatio']) {
                w = Math.round(h * Module['forcedAspectRatio']);
            } else {
                h = Math.round(w / Module['forcedAspectRatio']);
            }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
            document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
            document['fullScreenElement'] || document['fullscreenElement'] ||
            document['msFullScreenElement'] || document['msFullscreenElement'] ||
            document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
            var factor = Math.min(screen.width / w, screen.height / h);
            w = Math.round(w * factor);
            h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
            if (canvas.width  != w) canvas.width  = w;
            if (canvas.height != h) canvas.height = h;
            if (typeof canvas.style != 'undefined') {
                canvas.style.removeProperty( "width");
                canvas.style.removeProperty("height");
            }
        } else {
            if (canvas.width  != wNative) canvas.width  = wNative;
            if (canvas.height != hNative) canvas.height = hNative;
            if (typeof canvas.style != 'undefined') {
                if (w != wNative || h != hNative) {
                    canvas.style.setProperty( "width", w + "px", "important");
                    canvas.style.setProperty("height", h + "px", "important");
                } else {
                    canvas.style.removeProperty( "width");
                    canvas.style.removeProperty("height");
                }
            }
        }
    },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
    }};


    function __exit(status) {
        // void _exit(int status);
        // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
        Module['exit'](status);
    }function _exit(status) {
        __exit(status);
    }


    var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
            // relative path
            var dir;
            if (dirfd === -100) {
                dir = FS.cwd();
            } else {
                var dirstream = FS.getStream(dirfd);
                if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                dir = dirstream.path;
            }
            path = PATH.join2(dir, path);
        }
        return path;
    },doStat:function (func, path, buf) {
        try {
            var stat = func(path);
        } catch (e) {
            if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
                // an error occurred while trying to look up the path; we should just report ENOTDIR
                return -ERRNO_CODES.ENOTDIR;
            }
            throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
    },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
    },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
    },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
            case 32768:
            case 8192:
            case 24576:
            case 4096:
            case 49152:
                break;
            default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
    },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
    },doAccess:function (path, amode) {
        if (amode & ~7) {
            // need a valid mode
            return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
            return -ERRNO_CODES.EACCES;
        }
        return 0;
    },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
    },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[(((iov)+(i*8))>>2)];
            var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
            var curr = FS.read(stream, HEAP8,ptr, len, offset);
            if (curr < 0) return -1;
            ret += curr;
            if (curr < len) break; // nothing more to read
        }
        return ret;
    },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[(((iov)+(i*8))>>2)];
            var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
            var curr = FS.write(stream, HEAP8,ptr, len, offset);
            if (curr < 0) return -1;
            ret += curr;
        }
        return ret;
    },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
    },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
    },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
    },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
    },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
    },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
    },getZero:function () {
        assert(SYSCALLS.get() === 0);
    }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
        try {
            // close
            var stream = SYSCALLS.getStreamFromFD();
            FS.close(stream);
            return 0;
        } catch (e) {
            if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
            return -e.errno;
        }
    }

    var _sin=Math_sin;

    function _sysconf(name) {
        // long sysconf(int name);
        // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
        switch(name) {
            case 30: return PAGE_SIZE;
            case 85: return totalMemory / PAGE_SIZE;
            case 132:
            case 133:
            case 12:
            case 137:
            case 138:
            case 15:
            case 235:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 149:
            case 13:
            case 10:
            case 236:
            case 153:
            case 9:
            case 21:
            case 22:
            case 159:
            case 154:
            case 14:
            case 77:
            case 78:
            case 139:
            case 80:
            case 81:
            case 82:
            case 68:
            case 67:
            case 164:
            case 11:
            case 29:
            case 47:
            case 48:
            case 95:
            case 52:
            case 51:
            case 46:
                return 200809;
            case 79:
                return 0;
            case 27:
            case 246:
            case 127:
            case 128:
            case 23:
            case 24:
            case 160:
            case 161:
            case 181:
            case 182:
            case 242:
            case 183:
            case 184:
            case 243:
            case 244:
            case 245:
            case 165:
            case 178:
            case 179:
            case 49:
            case 50:
            case 168:
            case 169:
            case 175:
            case 170:
            case 171:
            case 172:
            case 97:
            case 76:
            case 32:
            case 173:
            case 35:
                return -1;
            case 176:
            case 177:
            case 7:
            case 155:
            case 8:
            case 157:
            case 125:
            case 126:
            case 92:
            case 93:
            case 129:
            case 130:
            case 131:
            case 94:
            case 91:
                return 1;
            case 74:
            case 60:
            case 69:
            case 70:
            case 4:
                return 1024;
            case 31:
            case 42:
            case 72:
                return 32;
            case 87:
            case 26:
            case 33:
                return 2147483647;
            case 34:
            case 1:
                return 47839;
            case 38:
            case 36:
                return 99;
            case 43:
            case 37:
                return 2048;
            case 0: return 2097152;
            case 3: return 65536;
            case 28: return 32768;
            case 44: return 32767;
            case 75: return 16384;
            case 39: return 1000;
            case 89: return 700;
            case 71: return 256;
            case 40: return 255;
            case 2: return 100;
            case 180: return 64;
            case 25: return 20;
            case 5: return 16;
            case 6: return 6;
            case 73: return 4;
            case 84: {
                if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
                return 1;
            }
        }
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
    }


    Module["_bitshift64Lshr"] = _bitshift64Lshr;

    function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
        try {
            // access
            var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
            return SYSCALLS.doAccess(path, amode);
        } catch (e) {
            if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
            return -e.errno;
        }
    }

    var _BDtoIHigh=true;

    function _pthread_cleanup_push(routine, arg) {
        __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
        _pthread_cleanup_push.level = __ATEXIT__.length;
    }

    function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
        try {
            // unlink
            var path = SYSCALLS.getStr();
            FS.unlink(path);
            return 0;
        } catch (e) {
            if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
            return -e.errno;
        }
    }





    var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
        // WARNING: Arbitrary limit!
        var MAX_ENV_VALUES = 64;
        var TOTAL_ENV_SIZE = 1024;

        // Statically allocate memory for the environment.
        var poolPtr;
        var envPtr;
        if (!___buildEnvironment.called) {
            ___buildEnvironment.called = true;
            // Set default values. Use string keys for Closure Compiler compatibility.
            ENV['USER'] = ENV['LOGNAME'] = 'web_user';
            ENV['PATH'] = '/';
            ENV['PWD'] = '/';
            ENV['HOME'] = '/home/web_user';
            ENV['LANG'] = 'C';
            ENV['_'] = Module['thisProgram'];
            // Allocate memory.
            poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
            envPtr = allocate(MAX_ENV_VALUES * 4,
                'i8*', ALLOC_STATIC);
            HEAP32[((envPtr)>>2)]=poolPtr;
            HEAP32[((_environ)>>2)]=envPtr;
        } else {
            envPtr = HEAP32[((_environ)>>2)];
            poolPtr = HEAP32[((envPtr)>>2)];
        }

        // Collect key=value lines.
        var strings = [];
        var totalSize = 0;
        for (var key in env) {
            if (typeof env[key] === 'string') {
                var line = key + '=' + env[key];
                strings.push(line);
                totalSize += line.length;
            }
        }
        if (totalSize > TOTAL_ENV_SIZE) {
            throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
        }

        // Make new.
        var ptrSize = 4;
        for (var i = 0; i < strings.length; i++) {
            var line = strings[i];
            writeAsciiToMemory(line, poolPtr);
            HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
            poolPtr += line.length + 1;
        }
        HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
        // char *getenv(const char *name);
        // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
        if (name === 0) return 0;
        name = Pointer_stringify(name);
        if (!ENV.hasOwnProperty(name)) return 0;

        if (_getenv.ret) _free(_getenv.ret);
        _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
        return _getenv.ret;
    }

    function _pthread_cleanup_pop() {
        assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
        __ATEXIT__.pop();
        _pthread_cleanup_push.level = __ATEXIT__.length;
    }

    var _ceil=Math_ceil;

    function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
        try {
            // open
            var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
            var stream = FS.open(pathname, flags, mode);
            return stream.fd;
        } catch (e) {
            if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
            return -e.errno;
        }
    }


    function _emscripten_memcpy_big(dest, src, num) {
        HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
        return dest;
    }
    Module["_memcpy"] = _memcpy;

    function __popen() {
        Module['printErr']('missing function: _popen'); abort(-1);
    }

    var _llvm_pow_f64=Math_pow;

    function _sbrk(bytes) {
        // Implement a Linux-like 'memory area' for our 'process'.
        // Changes the size of the memory area by |bytes|; returns the
        // address of the previous top ('break') of the memory area
        // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
        var self = _sbrk;
        if (!self.called) {
            DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
            self.called = true;
            assert(Runtime.dynamicAlloc);
            self.alloc = Runtime.dynamicAlloc;
            Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
        }
        var ret = DYNAMICTOP;
        if (bytes != 0) {
            var success = self.alloc(bytes);
            if (!success) return -1 >>> 0; // sbrk failure code
        }
        return ret;  // Previous break location.
    }


    Module["_memmove"] = _memmove;

    var _BItoD=true;

    function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
        try {
            // ioctl
            var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
            switch (op) {
                case 21505: {
                    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
                    return 0;
                }
                case 21506: {
                    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
                    return 0; // no-op, not actually adjusting terminal settings
                }
                case 21519: {
                    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
                    var argp = SYSCALLS.get();
                    HEAP32[((argp)>>2)]=0;
                    return 0;
                }
                case 21520: {
                    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
                    return -ERRNO_CODES.EINVAL; // not supported
                }
                case 21531: {
                    var argp = SYSCALLS.get();
                    return FS.ioctl(stream, op, argp);
                }
                default: abort('bad ioctl syscall ' + op);
            }
        } catch (e) {
            if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
            return -e.errno;
        }
    }

    var _atan2=Math_atan2;

    function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
        try {
            // fcntl64
            var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
            switch (cmd) {
                case 0: {
                    var arg = SYSCALLS.get();
                    if (arg < 0) {
                        return -ERRNO_CODES.EINVAL;
                    }
                    var newStream;
                    newStream = FS.open(stream.path, stream.flags, 0, arg);
                    return newStream.fd;
                }
                case 1:
                case 2:
                    return 0;  // FD_CLOEXEC makes no sense for a single process.
                case 3:
                    return stream.flags;
                case 4: {
                    var arg = SYSCALLS.get();
                    stream.flags |= arg;
                    return 0;
                }
                case 12:
                case 12: {
                    var arg = SYSCALLS.get();
                    var offset = 0;
                    // We're always unlocked.
                    HEAP16[(((arg)+(offset))>>1)]=2;
                    return 0;
                }
                case 13:
                case 14:
                case 13:
                case 14:
                    return 0; // Pretend that the locking is successful.
                case 16:
                case 8:
                    return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
                case 9:
                    // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
                    ___setErrNo(ERRNO_CODES.EINVAL);
                    return -1;
                default: {
                    return -ERRNO_CODES.EINVAL;
                }
            }
        } catch (e) {
            if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
            return -e.errno;
        }
    }

    function ___syscall265(which, varargs) {SYSCALLS.varargs = varargs;
        try {
            // clock_nanosleep
            return 0;
        } catch (e) {
            if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
            return -e.errno;
        }
    }

    function _time(ptr) {
        var ret = (Date.now()/1000)|0;
        if (ptr) {
            HEAP32[((ptr)>>2)]=ret;
        }
        return ret;
    }

    function _pthread_self() {
        //FIXME: assumes only a single thread
        return 0;
    }

    function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
        try {
            // llseek
            var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
            var offset = offset_low;
            assert(offset_high === 0);
            FS.llseek(stream, offset, whence);
            HEAP32[((result)>>2)]=stream.position;
            if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
            return 0;
        } catch (e) {
            if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
            return -e.errno;
        }
    }

    function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
        try {
            // writev
            var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
            return SYSCALLS.doWritev(stream, iov, iovcnt);
        } catch (e) {
            if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
            return -e.errno;
        }
    }

    function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
        try {
            // rmdir
            var path = SYSCALLS.getStr();
            FS.rmdir(path);
            return 0;
        } catch (e) {
            if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
            return -e.errno;
        }
    }

    function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
        try {
            // readv
            var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
            return SYSCALLS.doReadv(stream, iov, iovcnt);
        } catch (e) {
            if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
            return -e.errno;
        }
    }
    Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
    Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
    Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
    Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
    Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
    Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
    Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
    FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
    __ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
    if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
    ___buildEnvironment(ENV);
    STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

    staticSealed = true; // seal the static portion of memory

    STACK_MAX = STACK_BASE + TOTAL_STACK;

    DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

    assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

    var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


    function invoke_iiii(index,a1,a2,a3) {
        try {
            return Module["dynCall_iiii"](index,a1,a2,a3);
        } catch(e) {
            if (typeof e !== 'number' && e !== 'longjmp') throw e;
            asm["setThrew"](1, 0);
        }
    }

    function invoke_vi(index,a1) {
        try {
            Module["dynCall_vi"](index,a1);
        } catch(e) {
            if (typeof e !== 'number' && e !== 'longjmp') throw e;
            asm["setThrew"](1, 0);
        }
    }

    function invoke_dd(index,a1) {
        try {
            return Module["dynCall_dd"](index,a1);
        } catch(e) {
            if (typeof e !== 'number' && e !== 'longjmp') throw e;
            asm["setThrew"](1, 0);
        }
    }

    function invoke_vii(index,a1,a2) {
        try {
            Module["dynCall_vii"](index,a1,a2);
        } catch(e) {
            if (typeof e !== 'number' && e !== 'longjmp') throw e;
            asm["setThrew"](1, 0);
        }
    }

    function invoke_ii(index,a1) {
        try {
            return Module["dynCall_ii"](index,a1);
        } catch(e) {
            if (typeof e !== 'number' && e !== 'longjmp') throw e;
            asm["setThrew"](1, 0);
        }
    }

    function invoke_viii(index,a1,a2,a3) {
        try {
            Module["dynCall_viii"](index,a1,a2,a3);
        } catch(e) {
            if (typeof e !== 'number' && e !== 'longjmp') throw e;
            asm["setThrew"](1, 0);
        }
    }

    function invoke_iiiii(index,a1,a2,a3,a4) {
        try {
            return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
        } catch(e) {
            if (typeof e !== 'number' && e !== 'longjmp') throw e;
            asm["setThrew"](1, 0);
        }
    }

    function invoke_iii(index,a1,a2) {
        try {
            return Module["dynCall_iii"](index,a1,a2);
        } catch(e) {
            if (typeof e !== 'number' && e !== 'longjmp') throw e;
            asm["setThrew"](1, 0);
        }
    }

    function invoke_viiii(index,a1,a2,a3,a4) {
        try {
            Module["dynCall_viiii"](index,a1,a2,a3,a4);
        } catch(e) {
            if (typeof e !== 'number' && e !== 'longjmp') throw e;
            asm["setThrew"](1, 0);
        }
    }

    Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

    Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_dd": invoke_dd, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_sin": _sin, "_llvm_pow_f64": _llvm_pow_f64, "___syscall265": ___syscall265, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall6": ___syscall6, "___syscall40": ___syscall40, "__pclose": __pclose, "_atan2": _atan2, "___setErrNo": ___setErrNo, "___assert_fail": ___assert_fail, "_floor": _floor, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_ceilf": _ceilf, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__exit": __exit, "_ceil": _ceil, "___syscall221": ___syscall221, "___buildEnvironment": ___buildEnvironment, "__popen": __popen, "_pthread_self": _pthread_self, "_getenv": _getenv, "___syscall33": ___syscall33, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___syscall10": ___syscall10, "_sysconf": _sysconf, "___lock": ___lock, "_abort": _abort, "___syscall5": ___syscall5, "_time": _time, "_sbrk": _sbrk, "___syscall140": ___syscall140, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
    var asm = (function(global, env, buffer) {
        'use asm';


        var HEAP8 = new global.Int8Array(buffer);
        var HEAP16 = new global.Int16Array(buffer);
        var HEAP32 = new global.Int32Array(buffer);
        var HEAPU8 = new global.Uint8Array(buffer);
        var HEAPU16 = new global.Uint16Array(buffer);
        var HEAPU32 = new global.Uint32Array(buffer);
        var HEAPF32 = new global.Float32Array(buffer);
        var HEAPF64 = new global.Float64Array(buffer);


        var STACKTOP=env.STACKTOP|0;
        var STACK_MAX=env.STACK_MAX|0;
        var tempDoublePtr=env.tempDoublePtr|0;
        var ABORT=env.ABORT|0;
        var cttz_i8=env.cttz_i8|0;

        var __THREW__ = 0;
        var threwValue = 0;
        var setjmpId = 0;
        var undef = 0;
        var nan = global.NaN, inf = global.Infinity;
        var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

        var tempRet0 = 0;
        var tempRet1 = 0;
        var tempRet2 = 0;
        var tempRet3 = 0;
        var tempRet4 = 0;
        var tempRet5 = 0;
        var tempRet6 = 0;
        var tempRet7 = 0;
        var tempRet8 = 0;
        var tempRet9 = 0;
        var Math_floor=global.Math.floor;
        var Math_abs=global.Math.abs;
        var Math_sqrt=global.Math.sqrt;
        var Math_pow=global.Math.pow;
        var Math_cos=global.Math.cos;
        var Math_sin=global.Math.sin;
        var Math_tan=global.Math.tan;
        var Math_acos=global.Math.acos;
        var Math_asin=global.Math.asin;
        var Math_atan=global.Math.atan;
        var Math_atan2=global.Math.atan2;
        var Math_exp=global.Math.exp;
        var Math_log=global.Math.log;
        var Math_ceil=global.Math.ceil;
        var Math_imul=global.Math.imul;
        var Math_min=global.Math.min;
        var Math_clz32=global.Math.clz32;
        var abort=env.abort;
        var assert=env.assert;
        var invoke_iiii=env.invoke_iiii;
        var invoke_vi=env.invoke_vi;
        var invoke_dd=env.invoke_dd;
        var invoke_vii=env.invoke_vii;
        var invoke_ii=env.invoke_ii;
        var invoke_viii=env.invoke_viii;
        var invoke_iiiii=env.invoke_iiiii;
        var invoke_iii=env.invoke_iii;
        var invoke_viiii=env.invoke_viiii;
        var _fabs=env._fabs;
        var _pthread_cleanup_pop=env._pthread_cleanup_pop;
        var _sin=env._sin;
        var _llvm_pow_f64=env._llvm_pow_f64;
        var ___syscall265=env.___syscall265;
        var _pthread_cleanup_push=env._pthread_cleanup_push;
        var ___syscall6=env.___syscall6;
        var ___syscall40=env.___syscall40;
        var __pclose=env.__pclose;
        var _atan2=env._atan2;
        var ___setErrNo=env.___setErrNo;
        var ___assert_fail=env.___assert_fail;
        var _floor=env._floor;
        var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
        var _ceilf=env._ceilf;
        var _emscripten_memcpy_big=env._emscripten_memcpy_big;
        var __exit=env.__exit;
        var _ceil=env._ceil;
        var ___syscall221=env.___syscall221;
        var ___buildEnvironment=env.___buildEnvironment;
        var __popen=env.__popen;
        var _pthread_self=env._pthread_self;
        var _getenv=env._getenv;
        var ___syscall33=env.___syscall33;
        var ___syscall54=env.___syscall54;
        var ___unlock=env.___unlock;
        var _emscripten_set_main_loop=env._emscripten_set_main_loop;
        var ___syscall10=env.___syscall10;
        var _sysconf=env._sysconf;
        var ___lock=env.___lock;
        var _abort=env._abort;
        var ___syscall5=env.___syscall5;
        var _time=env._time;
        var _sbrk=env._sbrk;
        var ___syscall140=env.___syscall140;
        var _exit=env._exit;
        var ___syscall145=env.___syscall145;
        var ___syscall146=env.___syscall146;
        var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
        function stackAlloc(size) {
            size = size|0;
            var ret = 0;
            ret = STACKTOP;
            STACKTOP = (STACKTOP + size)|0;
            STACKTOP = (STACKTOP + 15)&-16;

            return ret|0;
        }
        function stackSave() {
            return STACKTOP|0;
        }
        function stackRestore(top) {
            top = top|0;
            STACKTOP = top;
        }
        function establishStackSpace(stackBase, stackMax) {
            stackBase = stackBase|0;
            stackMax = stackMax|0;
            STACKTOP = stackBase;
            STACK_MAX = stackMax;
        }

        function setThrew(threw, value) {
            threw = threw|0;
            value = value|0;
            if ((__THREW__|0) == 0) {
                __THREW__ = threw;
                threwValue = value;
            }
        }
        function copyTempFloat(ptr) {
            ptr = ptr|0;
            HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
            HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
            HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
            HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
        }
        function copyTempDouble(ptr) {
            ptr = ptr|0;
            HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
            HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
            HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
            HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
            HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
            HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
            HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
            HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
        }

        function setTempRet0(value) {
            value = value|0;
            tempRet0 = value;
        }
        function getTempRet0() {
            return tempRet0|0;
        }

        function _Clp_NewParser($argc,$argv,$nopt,$opt) {
            $argc = $argc|0;
            $argv = $argv|0;
            $nopt = $nopt|0;
            $opt = $opt|0;
            var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_malloc(64)|0);
            $1 = (_malloc(184)|0);
            $2 = ($nopt*12)|0;
            $3 = (_malloc($2)|0);
            $4 = ($1|0)!=(0|0);
            if ($4) {
                $5 = (_malloc(128)|0);
                $6 = ((($1)) + 16|0);
                HEAP32[$6>>2] = $5;
                $7 = ($0|0)!=(0|0);
                $or$cond = $7 & $4;
                $8 = ($3|0)!=(0|0);
                $or$cond3 = $or$cond & $8;
                if ($or$cond3) {
                    $9 = ((($1)) + 16|0);
                    $10 = HEAP32[$9>>2]|0;
                    $11 = ($10|0)==(0|0);
                    if (!($11)) {
                        HEAP32[$0>>2] = (332);
                        $12 = ((($0)) + 4|0);
                        HEAP32[$12>>2] = 0;
                        $13 = ((($0)) + 8|0);
                        HEAP32[$13>>2] = 0;
                        $14 = ((($0)) + 12|0);
                        HEAP32[$14>>2] = 0;
                        $15 = ((($0)) + 56|0);
                        HEAP32[$15>>2] = 0;
                        $16 = ((($0)) + 60|0);
                        HEAP32[$16>>2] = $1;
                        HEAP32[$1>>2] = $opt;
                        $17 = ((($1)) + 8|0);
                        HEAP32[$17>>2] = $nopt;
                        $18 = ((($1)) + 4|0);
                        HEAP32[$18>>2] = $3;
                        $19 = ((($1)) + 12|0);
                        HEAP32[$19>>2] = 0;
                        $20 = ((($1)) + 144|0);
                        HEAP32[$20>>2] = 0;
                        $21 = ($argc|0)>(0);
                        if ($21) {
                            $22 = HEAP32[$argv>>2]|0;
                            $23 = (_strrchr($22,47)|0);
                            $24 = ($23|0)==(0|0);
                            $25 = ((($23)) + 1|0);
                            $$ = $24 ? $22 : $25;
                            $26 = ((($1)) + 140|0);
                            HEAP32[$26>>2] = $$;
                        } else {
                            $27 = ((($1)) + 140|0);
                            HEAP32[$27>>2] = 0;
                        }
                        $28 = (($argc) + -1)|0;
                        $29 = ((($argv)) + 4|0);
                        _Clp_SetArguments($0,$28,$29);
                        $30 = (_getenv((5500|0))|0);
                        $31 = ($30|0)==(0|0);
                        if ($31) {
                            $39 = 0;
                        } else {
                            $32 = (_strstr($30,5505)|0);
                            $33 = ($32|0)==(0|0);
                            if ($33) {
                                $34 = (_strstr($30,5511)|0);
                                $35 = ($34|0)==(0|0);
                                if ($35) {
                                    $36 = (_strstr($30,5516)|0);
                                    $37 = ($36|0)!=(0|0);
                                    $39 = $37;
                                } else {
                                    $39 = 1;
                                }
                            } else {
                                $39 = 1;
                            }
                        }
                        $38 = $39&1;
                        $40 = ((($1)) + 124|0);
                        HEAP32[$40>>2] = $38;
                        $41 = ((($1)) + 32|0);
                        HEAP32[$41>>2] = 45;
                        $42 = ((($1)) + 36|0);
                        HEAP32[$42>>2] = 1;
                        $43 = ((($1)) + 112|0);
                        HEAP32[$43>>2] = 1;
                        $44 = ((($1)) + 120|0);
                        HEAP32[$44>>2] = 0;
                        $45 = ((($1)) + 116|0);
                        HEAP32[$45>>2] = 0;
                        $46 = ((($1)) + 20|0);
                        HEAP32[$46>>2] = 0;
                        (_Clp_AddType($0,1,0,1,0)|0);
                        (_Clp_AddType($0,2,1,1,0)|0);
                        (_Clp_AddType($0,4,0,2,0)|0);
                        (_Clp_AddType($0,5,0,2,(1))|0);
                        (_Clp_AddType($0,6,0,2,(2))|0);
                        (_Clp_AddType($0,7,0,2,(3))|0);
                        (_Clp_AddType($0,3,0,3,0)|0);
                        (_Clp_AddType($0,8,0,4,0)|0);
                        (_Clp_SetOptions($0,$nopt,$opt)|0);
                        $$0 = $0;
                        return ($$0|0);
                    }
                }
                $49 = ((($1)) + 16|0);
                $50 = HEAP32[$49>>2]|0;
                $51 = ($50|0)==(0|0);
                if (!($51)) {
                    _free($50);
                }
                _free($1);
                if ($7) {
                    $53 = $8;
                    label = 16;
                } else {
                    $52 = $8;
                    label = 17;
                }
            } else {
                $47 = ($0|0)==(0|0);
                $48 = ($3|0)!=(0|0);
                if ($47) {
                    $52 = $48;
                    label = 17;
                } else {
                    $53 = $48;
                    label = 16;
                }
            }
            if ((label|0) == 16) {
                _free($0);
                if (!($53)) {
                    $$0 = 0;
                    return ($$0|0);
                }
            }
            else if ((label|0) == 17) {
                if (!($52)) {
                    $$0 = 0;
                    return ($$0|0);
                }
            }
            _free($3);
            $$0 = 0;
            return ($$0|0);
        }
        function _Clp_SetArguments($clp,$argc,$argv) {
            $clp = $clp|0;
            $argc = $argc|0;
            $argv = $argv|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = (($argc) + 1)|0;
            $3 = ((($1)) + 28|0);
            HEAP32[$3>>2] = $2;
            $4 = ((($argv)) + -4|0);
            $5 = ((($1)) + 24|0);
            HEAP32[$5>>2] = $4;
            $6 = ((($1)) + 156|0);
            HEAP8[$6>>0] = 0;
            $7 = ((($1)) + 157|0);
            HEAP8[$7>>0] = 0;
            $8 = ((($1)) + 148|0);
            HEAP32[$8>>2] = 1;
            $9 = ((($1)) + 152|0);
            HEAP32[$9>>2] = -1;
            return;
        }
        function _Clp_AddType($clp,$val_type,$flags,$parser,$user_data) {
            $clp = $clp|0;
            $val_type = $val_type|0;
            $flags = $flags|0;
            $parser = $parser|0;
            $user_data = $user_data|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($val_type|0)>(0);
            $3 = ($parser|0)!=(0|0);
            $or$cond = $2 & $3;
            if (!($or$cond)) {
                $$0 = -1;
                return ($$0|0);
            }
            $4 = (__Z18val_type_binsearchP12Clp_Internali($1,$val_type)|0);
            $5 = ((($1)) + 20|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = ($4|0)==($6|0);
            if ($7) {
                label = 4;
            } else {
                $8 = ((($1)) + 16|0);
                $9 = HEAP32[$8>>2]|0;
                $10 = (($9) + ($4<<4)|0);
                $11 = HEAP32[$10>>2]|0;
                $12 = ($11|0)==($val_type|0);
                if (!($12)) {
                    label = 4;
                }
            }
            if ((label|0) == 4) {
                $13 = HEAP32[$5>>2]|0;
                $14 = ($13|0)!=(0);
                $15 = $13 & 7;
                $16 = ($15|0)==(0);
                $or$cond3 = $14 & $16;
                do {
                    if ($or$cond3) {
                        $17 = ((($1)) + 16|0);
                        $18 = HEAP32[$17>>2]|0;
                        $19 = $13 << 4;
                        $20 = (($19) + 128)|0;
                        $21 = (_realloc($18,$20)|0);
                        $22 = ($21|0)==(0|0);
                        if ($22) {
                            $$0 = -1;
                            return ($$0|0);
                        } else {
                            HEAP32[$17>>2] = $21;
                            break;
                        }
                    }
                } while(0);
                $23 = (($4) + 1)|0;
                $24 = ((($1)) + 16|0);
                $25 = HEAP32[$24>>2]|0;
                $26 = (($25) + ($23<<4)|0);
                $27 = (($25) + ($4<<4)|0);
                $28 = HEAP32[$5>>2]|0;
                $29 = (($28) - ($4))|0;
                $30 = $29 << 4;
                _memmove(($26|0),($27|0),($30|0))|0;
                $31 = HEAP32[$5>>2]|0;
                $32 = (($31) + 1)|0;
                HEAP32[$5>>2] = $32;
                $33 = HEAP32[$24>>2]|0;
                $34 = (((($33) + ($4<<4)|0)) + 4|0);
                HEAP32[$34>>2] = 0;
            }
            $35 = ((($1)) + 16|0);
            $36 = HEAP32[$35>>2]|0;
            $37 = (((($36) + ($4<<4)|0)) + 4|0);
            $38 = HEAP32[$37>>2]|0;
            $39 = ($38|0)==(5|0);
            if ($39) {
                $40 = (((($36) + ($4<<4)|0)) + 12|0);
                $41 = HEAP32[$40>>2]|0;
                $42 = HEAP32[$41>>2]|0;
                _free($42);
                $43 = ((($41)) + 4|0);
                $44 = HEAP32[$43>>2]|0;
                _free($44);
                _free($41);
            }
            $45 = HEAP32[$35>>2]|0;
            $46 = (($45) + ($4<<4)|0);
            HEAP32[$46>>2] = $val_type;
            $47 = HEAP32[$35>>2]|0;
            $48 = (((($47) + ($4<<4)|0)) + 4|0);
            HEAP32[$48>>2] = $parser;
            $49 = HEAP32[$35>>2]|0;
            $50 = (((($49) + ($4<<4)|0)) + 8|0);
            HEAP32[$50>>2] = $flags;
            $51 = HEAP32[$35>>2]|0;
            $52 = (((($51) + ($4<<4)|0)) + 12|0);
            HEAP32[$52>>2] = $user_data;
            $$0 = 0;
            return ($$0|0);
        }
        function __Z12parse_stringP10Clp_ParserPKciPv($clp,$arg,$complain,$user_data) {
            $clp = $clp|0;
            $arg = $arg|0;
            $complain = $complain|0;
            $user_data = $user_data|0;
            var $0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 16|0);
            HEAP32[$0>>2] = $arg;
            return 1;
        }
        function __Z9parse_intP10Clp_ParserPKciPv($clp,$arg,$complain,$user_data) {
            $clp = $clp|0;
            $arg = $arg|0;
            $complain = $complain|0;
            $user_data = $user_data|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $val = sp + 4|0;
            $0 = $user_data;
            $1 = HEAP8[$arg>>0]|0;
            $2 = ($1<<24>>24)==(0);
            do {
                if ($2) {
                    label = 5;
                } else {
                    $3 = $1&255;
                    $4 = (_isspace($3)|0);
                    $5 = ($4|0)==(0);
                    if ($5) {
                        $6 = $0 & 1;
                        $7 = ($6|0)==(0);
                        if ($7) {
                            $12 = (_strtol($arg,$val,0)|0);
                            $13 = ((($clp)) + 16|0);
                            HEAP32[$13>>2] = $12;
                            break;
                        }
                        $8 = HEAP8[$arg>>0]|0;
                        $9 = ($8<<24>>24)==(45);
                        if ($9) {
                            label = 5;
                        } else {
                            $10 = (_strtoul($arg,$val,0)|0);
                            $11 = ((($clp)) + 16|0);
                            HEAP32[$11>>2] = $10;
                        }
                    } else {
                        label = 5;
                    }
                }
            } while(0);
            if ((label|0) == 5) {
                HEAP32[$val>>2] = $arg;
            }
            $14 = HEAP8[$arg>>0]|0;
            $15 = ($14<<24>>24)==(0);
            if (!($15)) {
                $16 = HEAP32[$val>>2]|0;
                $17 = HEAP8[$16>>0]|0;
                $18 = ($17<<24>>24)==(0);
                if ($18) {
                    $$0 = 1;
                    STACKTOP = sp;return ($$0|0);
                }
            }
            $19 = ($complain|0)==(0);
            if ($19) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $20 = $0 & 1;
            $21 = ($20|0)!=(0);
            $22 = $21 ? 6281 : 6330;
            HEAP32[$vararg_buffer>>2] = $arg;
            (_Clp_OptionError($clp,$22,$vararg_buffer)|0);
            $$0 = 0;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z10parse_boolP10Clp_ParserPKciPv($clp,$arg,$complain,$user_data) {
            $clp = $clp|0;
            $arg = $arg|0;
            $complain = $complain|0;
            $user_data = $user_data|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, $lcarg = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $lcarg = sp + 4|0;
            $0 = (_strlen($arg)|0);
            $1 = ($0>>>0)>(5);
            do {
                if (!($1)) {
                    $2 = (_strchr($arg,61)|0);
                    $3 = ($2|0)==(0|0);
                    if ($3) {
                        $4 = HEAP8[$arg>>0]|0;
                        $5 = ($4<<24>>24)==(0);
                        if ($5) {
                            $i$0$lcssa = 0;
                        } else {
                            $7 = $4;$i$01 = 0;
                            while(1) {
                                $6 = $7&255;
                                $8 = (_tolower($6)|0);
                                $9 = $8&255;
                                $10 = (($lcarg) + ($i$01)|0);
                                HEAP8[$10>>0] = $9;
                                $11 = (($i$01) + 1)|0;
                                $12 = (($arg) + ($11)|0);
                                $13 = HEAP8[$12>>0]|0;
                                $14 = ($13<<24>>24)==(0);
                                if ($14) {
                                    $i$0$lcssa = $11;
                                    break;
                                } else {
                                    $7 = $13;$i$01 = $11;
                                }
                            }
                        }
                        $15 = (($lcarg) + ($i$0$lcssa)|0);
                        HEAP8[$15>>0] = 0;
                        $16 = (__Z6argcmpPKcS0_ii(6409,$lcarg,1,0)|0);
                        $17 = ($16|0)>(0);
                        if (!($17)) {
                            $18 = (__Z6argcmpPKcS0_ii(6413,$lcarg,1,0)|0);
                            $19 = ($18|0)>(0);
                            if (!($19)) {
                                $20 = (__Z6argcmpPKcS0_ii(6418,$lcarg,1,0)|0);
                                $21 = ($20|0)>(0);
                                if (!($21)) {
                                    $23 = (__Z6argcmpPKcS0_ii(6420,$lcarg,1,0)|0);
                                    $24 = ($23|0)>(0);
                                    if (!($24)) {
                                        $25 = (__Z6argcmpPKcS0_ii(6423,$lcarg,1,0)|0);
                                        $26 = ($25|0)>(0);
                                        if (!($26)) {
                                            $27 = (__Z6argcmpPKcS0_ii(6418,$lcarg,1,0)|0);
                                            $28 = ($27|0)>(0);
                                            if (!($28)) {
                                                break;
                                            }
                                        }
                                    }
                                    $29 = ((($clp)) + 16|0);
                                    HEAP32[$29>>2] = 0;
                                    $$0 = 1;
                                    STACKTOP = sp;return ($$0|0);
                                }
                            }
                        }
                        $22 = ((($clp)) + 16|0);
                        HEAP32[$22>>2] = 1;
                        $$0 = 1;
                        STACKTOP = sp;return ($$0|0);
                    }
                }
            } while(0);
            $30 = ($complain|0)==(0);
            if ($30) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            HEAP32[$vararg_buffer>>2] = $arg;
            (_Clp_OptionError($clp,6429,$vararg_buffer)|0);
            $$0 = 0;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z12parse_doubleP10Clp_ParserPKciPv($clp,$arg,$complain,$user_data) {
            $clp = $clp|0;
            $arg = $arg|0;
            $complain = $complain|0;
            $user_data = $user_data|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $val = sp + 4|0;
            $0 = HEAP8[$arg>>0]|0;
            $1 = ($0<<24>>24)==(0);
            if ($1) {
                label = 3;
            } else {
                $2 = $0&255;
                $3 = (_isspace($2)|0);
                $4 = ($3|0)==(0);
                if ($4) {
                    $5 = (+_strtod($arg,$val));
                    $6 = ((($clp)) + 16|0);
                    HEAPF64[$6>>3] = $5;
                } else {
                    label = 3;
                }
            }
            if ((label|0) == 3) {
                HEAP32[$val>>2] = $arg;
            }
            $7 = HEAP8[$arg>>0]|0;
            $8 = ($7<<24>>24)==(0);
            if (!($8)) {
                $9 = HEAP32[$val>>2]|0;
                $10 = HEAP8[$9>>0]|0;
                $11 = ($10<<24>>24)==(0);
                if ($11) {
                    $$0 = 1;
                    STACKTOP = sp;return ($$0|0);
                }
            }
            $12 = ($complain|0)==(0);
            if ($12) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            HEAP32[$vararg_buffer>>2] = $arg;
            (_Clp_OptionError($clp,6368,$vararg_buffer)|0);
            $$0 = 0;
            STACKTOP = sp;return ($$0|0);
        }
        function _Clp_SetOptions($clp,$nopt,$opt) {
            $clp = $clp|0;
            $nopt = $nopt|0;
            $opt = $opt|0;
            var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
            var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
            var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
            var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
            var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
            var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$03 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 8|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($3|0)<($nopt|0);
            do {
                if ($4) {
                    $5 = ($nopt*12)|0;
                    $6 = (_malloc($5)|0);
                    $7 = ($6|0)==(0|0);
                    if ($7) {
                        $$0 = -1;
                        STACKTOP = sp;return ($$0|0);
                    } else {
                        $8 = ((($1)) + 4|0);
                        $9 = HEAP32[$8>>2]|0;
                        _free($9);
                        HEAP32[$8>>2] = $6;
                        break;
                    }
                }
            } while(0);
            HEAP32[$1>>2] = $opt;
            HEAP32[$2>>2] = $nopt;
            $10 = HEAP32[392>>2]|0;
            $11 = (($10) + 1)|0;
            HEAP32[392>>2] = $11;
            $12 = ((($1)) + 12|0);
            HEAP32[$12>>2] = $11;
            $13 = ((($1)) + 4|0);
            $14 = HEAP32[$13>>2]|0;
            $15 = ((($1)) + 152|0);
            HEAP32[$15>>2] = -1;
            $16 = ($nopt|0)>(0);
            if ($16) {
                $17 = ((($1)) + 124|0);
                $i$03 = 0;
                while(1) {
                    $18 = (($14) + (($i$03*12)|0)|0);
                    ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
                    $19 = (((($opt) + (($i$03*20)|0)|0)) + 8|0);
                    $20 = HEAP32[$19>>2]|0;
                    $21 = ($20|0)<(0);
                    do {
                        if ($21) {
                            HEAP32[$vararg_buffer>>2] = $i$03;
                            (_Clp_OptionError($clp,5521,$vararg_buffer)|0);
                            $22 = HEAP16[$18>>1]|0;
                            $23 = $22 & -52;
                            HEAP16[$18>>1] = $23;
                        } else {
                            $24 = (($opt) + (($i$03*20)|0)|0);
                            $25 = HEAP32[$24>>2]|0;
                            $26 = ($25|0)==(0|0);
                            if ($26) {
                                $30 = 0;
                            } else {
                                $27 = HEAP8[$25>>0]|0;
                                $28 = ($27<<24>>24)!=(0);
                                $30 = $28;
                            }
                            $29 = $30&1;
                            $31 = HEAP16[$18>>1]|0;
                            $32 = $31 & -2;
                            $33 = $32 | $29;
                            HEAP16[$18>>1] = $33;
                            $34 = (((($opt) + (($i$03*20)|0)|0)) + 4|0);
                            $35 = HEAP32[$34>>2]|0;
                            $36 = ($35|0)>(0);
                            if ($36) {
                                $37 = HEAP32[$17>>2]|0;
                                $38 = ($37|0)!=(0);
                                $39 = $38 ? 1114112 : 256;
                                $40 = ($35|0)<($39|0);
                                $42 = $40;
                            } else {
                                $42 = 0;
                            }
                            $41 = $42&1;
                            $43 = HEAP16[$18>>1]|0;
                            $44 = ($41 << 1)&65535;
                            $45 = $43 & -19;
                            $46 = $44 | $45;
                            $47 = $46 | 16;
                            HEAP16[$18>>1] = $47;
                            $48 = (((($opt) + (($i$03*20)|0)|0)) + 16|0);
                            $49 = HEAP32[$48>>2]|0;
                            $50 = $49 << 3;
                            $51 = $50&65535;
                            $52 = $51 & 32;
                            $53 = $47 & -33;
                            $54 = $53 | $52;
                            HEAP16[$18>>1] = $54;
                            $55 = HEAP32[$48>>2]|0;
                            $56 = $55&65535;
                            $57 = ($56 << 2)&65535;
                            $58 = $57 & 4;
                            $59 = $54 & -5;
                            $60 = $59 | $58;
                            HEAP16[$18>>1] = $60;
                            $61 = HEAP32[$48>>2]|0;
                            $62 = $61 << 2;
                            $63 = $62&65535;
                            $64 = $63 & 8;
                            $65 = $60 & -9;
                            $66 = $65 | $64;
                            HEAP16[$18>>1] = $66;
                            $67 = HEAP32[$48>>2]|0;
                            $68 = $67 << 2;
                            $69 = $68&65535;
                            $70 = $69 & 64;
                            $71 = $66 & -65;
                            $72 = $71 | $70;
                            HEAP16[$18>>1] = $72;
                            $73 = (((($14) + (($i$03*12)|0)|0)) + 2|0);
                            HEAP8[$73>>0] = 0;
                            $74 = (((($opt) + (($i$03*20)|0)|0)) + 12|0);
                            $75 = HEAP32[$74>>2]|0;
                            $76 = ($75|0)<(1);
                            if ($76) {
                                $77 = HEAP16[$18>>1]|0;
                                $78 = $77 & -13;
                                HEAP16[$18>>1] = $78;
                                $$pr = HEAP32[$74>>2]|0;
                                $79 = ($$pr|0)>(0);
                                if ($79) {
                                    label = 14;
                                }
                            } else {
                                label = 14;
                            }
                            if ((label|0) == 14) {
                                label = 0;
                                $80 = HEAP16[$18>>1]|0;
                                $81 = $80 & 8;
                                $82 = ($81<<16>>16)==(0);
                                if ($82) {
                                    $83 = $80 | 4;
                                    HEAP16[$18>>1] = $83;
                                }
                            }
                            $84 = HEAP16[$18>>1]|0;
                            $85 = $84 & 1;
                            $86 = ($85<<16>>16)==(0);
                            if (!($86)) {
                                $87 = HEAP32[$24>>2]|0;
                                $88 = (_strncmp($87,5574,3)|0);
                                $89 = ($88|0)==(0);
                                if ($89) {
                                    $90 = $84 & -49;
                                    $91 = $90 | 32;
                                    HEAP16[$18>>1] = $91;
                                    HEAP8[$73>>0] = 3;
                                    $92 = HEAP32[$24>>2]|0;
                                    $93 = ((($92)) + 3|0);
                                    $94 = (_strncmp($93,5574,3)|0);
                                    $95 = ($94|0)==(0);
                                    if (!($95)) {
                                        break;
                                    }
                                    HEAP32[$vararg_buffer1>>2] = $i$03;
                                    (_Clp_OptionError($clp,5578,$vararg_buffer1)|0);
                                    break;
                                }
                            }
                            $96 = HEAP32[$48>>2]|0;
                            $97 = $96 & 8;
                            $98 = ($97|0)==(0);
                            if (!($98)) {
                                $99 = HEAP16[$18>>1]|0;
                                $100 = $99 & -49;
                                $101 = $100 | 32;
                                HEAP16[$18>>1] = $101;
                            }
                        }
                    } while(0);
                    $102 = (($i$03) + 1)|0;
                    $exitcond = ($102|0)==($nopt|0);
                    if ($exitcond) {
                        break;
                    } else {
                        $i$03 = $102;
                    }
                }
            }
            __Z13calculate_lmmP10Clp_ParserPK10Clp_OptionP16Clp_InternOptioni($clp,$opt,$14,$nopt);
            $$0 = 0;
            STACKTOP = sp;return ($$0|0);
        }
        function _Clp_DeleteParser($clp) {
            $clp = $clp|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
            var $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($clp|0)==(0|0);
            if ($0) {
                return;
            }
            $1 = ((($clp)) + 60|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($2)) + 20|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)>(0);
            $6 = ((($2)) + 16|0);
            if ($5) {
                $i$01 = 0;
                while(1) {
                    $7 = HEAP32[$6>>2]|0;
                    $8 = (((($7) + ($i$01<<4)|0)) + 4|0);
                    $9 = HEAP32[$8>>2]|0;
                    $10 = ($9|0)==(5|0);
                    if ($10) {
                        $11 = (((($7) + ($i$01<<4)|0)) + 12|0);
                        $12 = HEAP32[$11>>2]|0;
                        $13 = HEAP32[$12>>2]|0;
                        _free($13);
                        $14 = ((($12)) + 4|0);
                        $15 = HEAP32[$14>>2]|0;
                        _free($15);
                        _free($12);
                    }
                    $16 = (($i$01) + 1)|0;
                    $17 = HEAP32[$3>>2]|0;
                    $18 = ($16|0)<($17|0);
                    if ($18) {
                        $i$01 = $16;
                    } else {
                        break;
                    }
                }
            }
            $19 = HEAP32[$6>>2]|0;
            _free($19);
            $20 = ((($2)) + 4|0);
            $21 = HEAP32[$20>>2]|0;
            _free($21);
            _free($2);
            _free($clp);
            return;
        }
        function __Z17parse_string_listP10Clp_ParserPKciPv($clp,$arg,$complain,$user_data) {
            $clp = $clp|0;
            $arg = $arg|0;
            $complain = $complain|0;
            $user_data = $user_data|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ambiguous = 0, $ambiguous_values = 0, $idx$01 = 0, $vararg_buffer = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $vararg_buffer = sp;
            $ambiguous = sp + 24|0;
            $ambiguous_values = sp + 4|0;
            HEAP32[$ambiguous>>2] = 0;
            $0 = ((($user_data)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = HEAP32[$user_data>>2]|0;
            $3 = ((($user_data)) + 4|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = (__Z15find_prefix_optP10Clp_ParserPKciPK10Clp_OptionPK16Clp_InternOptionPiS9_(0,$arg,$1,$2,$4,$ambiguous,$ambiguous_values)|0);
            $6 = ($5|0)>(-1);
            if ($6) {
                $7 = HEAP32[$user_data>>2]|0;
                $8 = (((($7) + (($5*20)|0)|0)) + 8|0);
                $9 = HEAP32[$8>>2]|0;
                $10 = ((($clp)) + 16|0);
                HEAP32[$10>>2] = $9;
                $$0 = 1;
                STACKTOP = sp;return ($$0|0);
            }
            $11 = ((($user_data)) + 12|0);
            $12 = HEAP8[$11>>0]|0;
            $13 = ($12<<24>>24)==(0);
            if (!($13)) {
                $14 = ((($user_data)) + 13|0);
                $15 = HEAP8[$14>>0]|0;
                $16 = ($15<<24>>24)!=(0);
                $17 = $16 ? (2) : 0;
                $18 = (__Z9parse_intP10Clp_ParserPKciPv($clp,$arg,0,$17)|0);
                $19 = ($18|0)==(0);
                if (!($19)) {
                    $$0 = 1;
                    STACKTOP = sp;return ($$0|0);
                }
            }
            $20 = ($complain|0)==(0);
            if ($20) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $21 = HEAP32[$ambiguous>>2]|0;
            $22 = ($21|0)!=(0);
            $23 = $22 ? 6499 : 6509;
            if (!($22)) {
                $24 = ((($user_data)) + 16|0);
                $25 = HEAP32[$24>>2]|0;
                HEAP32[$ambiguous>>2] = $25;
                $26 = ($25|0)>(0);
                if ($26) {
                    $27 = HEAP32[$ambiguous>>2]|0;
                    $idx$01 = 0;
                    while(1) {
                        $28 = (($ambiguous_values) + ($idx$01<<2)|0);
                        HEAP32[$28>>2] = $idx$01;
                        $29 = (($idx$01) + 1)|0;
                        $30 = ($29|0)<($27|0);
                        if ($30) {
                            $idx$01 = $29;
                        } else {
                            break;
                        }
                    }
                }
            }
            $31 = HEAP32[$ambiguous>>2]|0;
            $32 = HEAP32[$user_data>>2]|0;
            $33 = HEAP32[$3>>2]|0;
            HEAP32[$vararg_buffer>>2] = $23;
            __Z15ambiguity_errorP10Clp_ParseriPiPK10Clp_OptionPK16Clp_InternOptionPKcS9_z($clp,$31,$ambiguous_values,$32,$33,23987,6517,$vararg_buffer);
            $$0 = 0;
            STACKTOP = sp;return ($$0|0);
        }
        function _Clp_SetErrorHandler($clp,$errh) {
            $clp = $clp|0;
            $errh = $errh|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 144|0);
            $3 = HEAP32[$2>>2]|0;
            HEAP32[$2>>2] = $errh;
            return ($3|0);
        }
        function __Z13calculate_lmmP10Clp_ParserPK10Clp_OptionP16Clp_InternOptioni($clp,$opt,$iopt,$nopt) {
            $clp = $clp|0;
            $opt = $opt|0;
            $iopt = $iopt|0;
            $nopt = $nopt|0;
            var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $i$02 = 0, $j$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($nopt|0)>(0);
            if ($0) {
                $i$02 = 0;
            } else {
                return;
            }
            while(1) {
                $1 = (($iopt) + (($i$02*12)|0)|0);
                $2 = (((($iopt) + (($i$02*12)|0)|0)) + 8|0);
                HEAP32[$2>>2] = 1;
                $3 = (((($iopt) + (($i$02*12)|0)|0)) + 4|0);
                HEAP32[$3>>2] = 1;
                $4 = HEAP16[$1>>1]|0;
                $5 = $4 & -385;
                HEAP16[$1>>1] = $5;
                $6 = (($opt) + (($i$02*20)|0)|0);
                $j$01 = 0;
                while(1) {
                    $7 = (($opt) + (($j$01*20)|0)|0);
                    $8 = (($iopt) + (($j$01*12)|0)|0);
                    __Z15compare_optionsP10Clp_ParserPK10Clp_OptionP16Clp_InternOptionS3_S5_($clp,$6,$1,$7,$8);
                    $9 = (($j$01) + 1)|0;
                    $exitcond = ($9|0)==($nopt|0);
                    if ($exitcond) {
                        break;
                    } else {
                        $j$01 = $9;
                    }
                }
                $10 = (($i$02) + 1)|0;
                $exitcond6 = ($10|0)==($nopt|0);
                if ($exitcond6) {
                    break;
                } else {
                    $i$02 = $10;
                }
            }
            return;
        }
        function _Clp_OptionChar($clp,$c) {
            $clp = $clp|0;
            $c = $c|0;
            var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
            var $i$01 = 0, $oclass$1$lcssa = 0, $oclass$1$ph$ph = 0, $oclass$12 = 0, $oclass$2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 112|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($3|0)>(0);
            if (!($4)) {
                $oclass$1$lcssa = 0;
                return ($oclass$1$lcssa|0);
            }
            $5 = ((($1)) + 32|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = ($6|0)==(0);
            if ($7) {
                $8 = ((($1)) + 36|0);
                $9 = HEAP32[$8>>2]|0;
                $oclass$1$ph$ph = $9;
            } else {
                $oclass$1$ph$ph = 0;
            }
            $$pr = HEAP32[$2>>2]|0;
            $10 = ($$pr|0)>(0);
            if (!($10)) {
                $oclass$1$lcssa = $oclass$1$ph$ph;
                return ($oclass$1$lcssa|0);
            }
            $11 = HEAP32[$2>>2]|0;
            $i$01 = 0;$oclass$12 = $oclass$1$ph$ph;
            while(1) {
                $12 = (((($1)) + 32|0) + ($i$01<<3)|0);
                $13 = HEAP32[$12>>2]|0;
                $14 = ($13|0)==($c|0);
                if ($14) {
                    $15 = (((((($1)) + 32|0) + ($i$01<<3)|0)) + 4|0);
                    $16 = HEAP32[$15>>2]|0;
                    $oclass$2 = $16;
                } else {
                    $oclass$2 = $oclass$12;
                }
                $17 = (($i$01) + 1)|0;
                $18 = ($17|0)<($11|0);
                if ($18) {
                    $i$01 = $17;$oclass$12 = $oclass$2;
                } else {
                    $oclass$1$lcssa = $oclass$2;
                    break;
                }
            }
            return ($oclass$1$lcssa|0);
        }
        function _Clp_SetOptionChar($clp,$c,$type) {
            $clp = $clp|0;
            $c = $c|0;
            $type = $type|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$0$lcssa31 = 0, $i$022 = 0, $i$120 = 0, $long1neg$0$lcssa = 0, $long1neg$019 = 0, $long1neg$1 = 0, $long1pos$0$lcssa = 0, $long1pos$018 = 0, $long1pos$1 = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Clp_OptionChar($clp,$c)|0);
            $1 = ((($clp)) + 60|0);
            $2 = HEAP32[$1>>2]|0;
            switch ($type|0) {
                case 0: case 1: case 2: case 3: case 4: case 8: case 12: case 16:  {
                break;
            }
                default: {
                    $$0 = -1;
                    return ($$0|0);
                }
            }
            $3 = ($c|0)<(0);
            if ($3) {
                $$0 = -1;
                return ($$0|0);
            }
            $4 = ((($2)) + 124|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = ($5|0)!=(0);
            $7 = $6 ? 1114112 : 256;
            $8 = ($7|0)>($c|0);
            if (!($8)) {
                $$0 = -1;
                return ($$0|0);
            }
            $9 = ($c|0)==(0);
            if ($9) {
                $10 = ((($2)) + 112|0);
                HEAP32[$10>>2] = 0;
            }
            $11 = ((($2)) + 112|0);
            $12 = HEAP32[$11>>2]|0;
            $13 = ($12|0)>(0);
            if ($13) {
                $i$022 = 0;
                while(1) {
                    $14 = (((($2)) + 32|0) + ($i$022<<3)|0);
                    $15 = HEAP32[$14>>2]|0;
                    $16 = ($15|0)==($c|0);
                    if ($16) {
                        $i$0$lcssa = $i$022;
                        break;
                    }
                    $17 = (($i$022) + 1)|0;
                    $18 = HEAP32[$11>>2]|0;
                    $19 = ($17|0)<($18|0);
                    if ($19) {
                        $i$022 = $17;
                    } else {
                        $i$0$lcssa = $17;
                        break;
                    }
                }
                $20 = ($i$0$lcssa|0)==(10);
                if ($20) {
                    $$0 = -1;
                    return ($$0|0);
                } else {
                    $i$0$lcssa31 = $i$0$lcssa;
                }
            } else {
                $i$0$lcssa31 = 0;
            }
            $21 = (((($2)) + 32|0) + ($i$0$lcssa31<<3)|0);
            HEAP32[$21>>2] = $c;
            $22 = (((((($2)) + 32|0) + ($i$0$lcssa31<<3)|0)) + 4|0);
            HEAP32[$22>>2] = $type;
            $23 = HEAP32[$11>>2]|0;
            $24 = ($23|0)==($i$0$lcssa31|0);
            if ($24) {
                $25 = (($i$0$lcssa31) + 1)|0;
                HEAP32[$11>>2] = $25;
                $26 = $25;
            } else {
                $26 = $23;
            }
            $27 = ($26|0)>(0);
            if ($27) {
                $28 = HEAP32[$11>>2]|0;
                $i$120 = 0;$long1neg$019 = 0;$long1pos$018 = 0;
                while(1) {
                    $29 = (((((($2)) + 32|0) + ($i$120<<3)|0)) + 4|0);
                    $30 = HEAP32[$29>>2]|0;
                    $31 = $30 & 3;
                    $32 = ($31|0)!=(3);
                    $long1pos$1 = $32 ? $long1pos$018 : 1;
                    $33 = $30 & 12;
                    $34 = ($33|0)!=(12);
                    $long1neg$1 = $34 ? $long1neg$019 : 1;
                    $35 = (($i$120) + 1)|0;
                    $36 = ($35|0)<($28|0);
                    if ($36) {
                        $i$120 = $35;$long1neg$019 = $long1neg$1;$long1pos$018 = $long1pos$1;
                    } else {
                        $long1neg$0$lcssa = $long1neg$1;$long1pos$0$lcssa = $long1pos$1;
                        break;
                    }
                }
            } else {
                $long1neg$0$lcssa = 0;$long1pos$0$lcssa = 0;
            }
            $37 = ((($2)) + 116|0);
            $38 = HEAP32[$37>>2]|0;
            $39 = ($long1pos$0$lcssa|0)==($38|0);
            if ($39) {
                $40 = ((($2)) + 120|0);
                $41 = HEAP32[$40>>2]|0;
                $42 = ($long1neg$0$lcssa|0)==($41|0);
                if ($42) {
                    $$0 = $0;
                    return ($$0|0);
                }
            }
            HEAP32[$37>>2] = $long1pos$0$lcssa;
            $43 = ((($2)) + 120|0);
            HEAP32[$43>>2] = $long1neg$0$lcssa;
            $44 = HEAP32[$2>>2]|0;
            $45 = ((($2)) + 4|0);
            $46 = HEAP32[$45>>2]|0;
            $47 = ((($2)) + 8|0);
            $48 = HEAP32[$47>>2]|0;
            __Z13calculate_lmmP10Clp_ParserPK10Clp_OptionP16Clp_InternOptioni($clp,$44,$46,$48);
            $$0 = $0;
            return ($$0|0);
        }
        function _Clp_OptionError($clp,$format,$varargs) {
            $clp = $clp|0;
            $format = $format|0;
            $varargs = $varargs|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $bs = 0, $val = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 288|0;
            $bs = sp + 16|0;
            $val = sp;
            HEAP32[$val>>2] = $varargs;
            __Z17build_string_initP15Clp_BuildStringP10Clp_Parser($bs,$clp);
            __Z13Clp_vbsprintfP10Clp_ParserP15Clp_BuildStringPKcPi($clp,$bs,$format,$val);
            __Z19append_build_stringP15Clp_BuildStringPKci($bs,5824,1);
            __Z8do_errorP10Clp_ParserP15Clp_BuildString($clp,$bs);
            __Z20build_string_cleanupP15Clp_BuildString($bs);
            $0 = ((($bs)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = HEAP32[$bs>>2]|0;
            $3 = $1;
            $4 = $2;
            $5 = (($3) - ($4))|0;
            STACKTOP = sp;return ($5|0);
        }
        function _Clp_SetOptionProcessing($clp,$on) {
            $clp = $clp|0;
            $on = $on|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 148|0);
            $3 = HEAP32[$2>>2]|0;
            HEAP32[$2>>2] = $on;
            return ($3|0);
        }
        function __Z18val_type_binsearchP12Clp_Internali($cli,$val_type) {
            $cli = $cli|0;
            $val_type = $val_type|0;
            var $$0 = 0, $$l$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$01 = 0, $r$0$ = 0, $r$02 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            $0 = ((($cli)) + 20|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0);
            if ($2) {
                $$0 = 0;
                return ($$0|0);
            }
            $3 = ((($cli)) + 16|0);
            $4 = HEAP32[$3>>2]|0;
            $l$01 = 0;$r$02 = $1;
            while(1) {
                $5 = (($r$02) - ($l$01))|0;
                $6 = $5 >>> 1;
                $7 = (($6) + ($l$01))|0;
                $8 = (($4) + ($7<<4)|0);
                $9 = HEAP32[$8>>2]|0;
                $10 = ($9|0)==($val_type|0);
                if ($10) {
                    $$0 = $7;
                    label = 5;
                    break;
                }
                $11 = ($9|0)<($val_type|0);
                $12 = (($7) + 1)|0;
                $$l$0 = $11 ? $12 : $l$01;
                $r$0$ = $11 ? $r$02 : $7;
                $13 = ($r$0$>>>0)>($$l$0>>>0);
                if ($13) {
                    $l$01 = $$l$0;$r$02 = $r$0$;
                } else {
                    $$0 = $$l$0;
                    label = 5;
                    break;
                }
            }
            if ((label|0) == 5) {
                return ($$0|0);
            }
            return (0)|0;
        }
        function _Clp_AddStringListType($clp,$val_type,$flags,$varargs) {
            $clp = $clp|0;
            $val_type = $val_type|0;
            $flags = $flags|0;
            $varargs = $varargs|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0;
            var $arglist_current2 = 0, $arglist_current5 = 0, $arglist_next = 0, $arglist_next3 = 0, $arglist_next6 = 0, $expanded = 0, $expanded10 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded16 = 0, $expanded17 = 0, $expanded19 = 0, $expanded20 = 0, $expanded21 = 0, $expanded3 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded9 = 0;
            var $items$0$lcssa = 0, $items$04 = 0, $items$1 = 0, $items$2 = 0, $itemscap$0$lcssa = 0, $itemscap$05 = 0, $itemscap$1 = 0, $nitems$0$lcssa = 0, $nitems$06 = 0, $val = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $val = sp;
            $0 = (_malloc(100)|0);
            HEAP32[$val>>2] = $varargs;
            $1 = ($0|0)==(0|0);
            L1: do {
                if ($1) {
                    $items$2 = $0;
                } else {
                    $arglist_current = HEAP32[$val>>2]|0;
                    $2 = $arglist_current;
                    $3 = ((0) + 4|0);
                    $expanded3 = $3;
                    $expanded = (($expanded3) - 1)|0;
                    $4 = (($2) + ($expanded))|0;
                    $5 = ((0) + 4|0);
                    $expanded7 = $5;
                    $expanded6 = (($expanded7) - 1)|0;
                    $expanded5 = $expanded6 ^ -1;
                    $6 = $4 & $expanded5;
                    $7 = $6;
                    $8 = HEAP32[$7>>2]|0;
                    $arglist_next = ((($7)) + 4|0);
                    HEAP32[$val>>2] = $arglist_next;
                    $9 = ($8|0)==(0|0);
                    if ($9) {
                        $items$0$lcssa = $0;$itemscap$0$lcssa = 5;$nitems$0$lcssa = 0;
                    } else {
                        $23 = $8;$items$04 = $0;$itemscap$05 = 5;$nitems$06 = 0;
                        while(1) {
                            $arglist_current2 = HEAP32[$val>>2]|0;
                            $10 = $arglist_current2;
                            $11 = ((0) + 4|0);
                            $expanded10 = $11;
                            $expanded9 = (($expanded10) - 1)|0;
                            $12 = (($10) + ($expanded9))|0;
                            $13 = ((0) + 4|0);
                            $expanded14 = $13;
                            $expanded13 = (($expanded14) - 1)|0;
                            $expanded12 = $expanded13 ^ -1;
                            $14 = $12 & $expanded12;
                            $15 = $14;
                            $16 = HEAP32[$15>>2]|0;
                            $arglist_next3 = ((($15)) + 4|0);
                            HEAP32[$val>>2] = $arglist_next3;
                            $17 = ($nitems$06|0)<($itemscap$05|0);
                            if ($17) {
                                $items$1 = $items$04;$itemscap$1 = $itemscap$05;
                            } else {
                                $18 = ($itemscap$05*40)|0;
                                $19 = (_realloc($items$04,$18)|0);
                                $20 = ($19|0)==(0|0);
                                if ($20) {
                                    $items$2 = $items$04;
                                    break L1;
                                }
                                $21 = $itemscap$05 << 1;
                                $items$1 = $19;$itemscap$1 = $21;
                            }
                            $22 = (($items$1) + (($nitems$06*20)|0)|0);
                            HEAP32[$22>>2] = $23;
                            $24 = (((($items$1) + (($nitems$06*20)|0)|0)) + 8|0);
                            HEAP32[$24>>2] = $16;
                            $25 = (((($items$1) + (($nitems$06*20)|0)|0)) + 16|0);
                            HEAP32[$25>>2] = 0;
                            $26 = (($nitems$06) + 1)|0;
                            $arglist_current5 = HEAP32[$val>>2]|0;
                            $27 = $arglist_current5;
                            $28 = ((0) + 4|0);
                            $expanded17 = $28;
                            $expanded16 = (($expanded17) - 1)|0;
                            $29 = (($27) + ($expanded16))|0;
                            $30 = ((0) + 4|0);
                            $expanded21 = $30;
                            $expanded20 = (($expanded21) - 1)|0;
                            $expanded19 = $expanded20 ^ -1;
                            $31 = $29 & $expanded19;
                            $32 = $31;
                            $33 = HEAP32[$32>>2]|0;
                            $arglist_next6 = ((($32)) + 4|0);
                            HEAP32[$val>>2] = $arglist_next6;
                            $34 = ($33|0)==(0|0);
                            if ($34) {
                                $items$0$lcssa = $items$1;$itemscap$0$lcssa = $itemscap$1;$nitems$0$lcssa = $26;
                                break;
                            } else {
                                $23 = $33;$items$04 = $items$1;$itemscap$05 = $itemscap$1;$nitems$06 = $26;
                            }
                        }
                    }
                    $35 = (__Z18finish_string_listP10Clp_ParseriiP10Clp_Optionii($clp,$val_type,$flags,$items$0$lcssa,$nitems$0$lcssa,$itemscap$0$lcssa)|0);
                    $36 = ($35|0)>(-1);
                    if ($36) {
                        $$0 = 0;
                        STACKTOP = sp;return ($$0|0);
                    } else {
                        $items$2 = $items$0$lcssa;
                    }
                }
            } while(0);
            $37 = ($items$2|0)==(0|0);
            if ($37) {
                $$0 = -1;
                STACKTOP = sp;return ($$0|0);
            }
            _free($items$2);
            $$0 = -1;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z18finish_string_listP10Clp_ParseriiP10Clp_Optionii($clp,$val_type,$flags,$items,$nitems,$itemscap) {
            $clp = $clp|0;
            $val_type = $val_type|0;
            $flags = $flags|0;
            $items = $items|0;
            $nitems = $nitems|0;
            $itemscap = $itemscap|0;
            var $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0, $or$cond = 0, $or$cond2 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            $0 = (_malloc(20)|0);
            $1 = ($nitems*12)|0;
            $2 = (_malloc($1)|0);
            $3 = ($0|0)!=(0|0);
            $4 = ($2|0)!=(0|0);
            $or$cond = $3 & $4;
            if ($or$cond) {
                HEAP32[$0>>2] = $items;
                $5 = ((($0)) + 4|0);
                HEAP32[$5>>2] = $2;
                $6 = ((($0)) + 8|0);
                HEAP32[$6>>2] = $nitems;
                $7 = $flags & 1;
                $8 = $7&255;
                $9 = ((($0)) + 12|0);
                HEAP8[$9>>0] = $8;
                $10 = $flags >>> 1;
                $$lobit = $10 & 1;
                $11 = $$lobit&255;
                $12 = ((($0)) + 13|0);
                HEAP8[$12>>0] = $11;
                $13 = ($nitems|0)<(4);
                $14 = ($nitems|0)<($itemscap|0);
                $or$cond2 = $13 & $14;
                if ($or$cond2) {
                    $15 = HEAP8[$9>>0]|0;
                    $16 = ($15<<24>>24)==(0);
                    if ($16) {
                        label = 5;
                    } else {
                        $17 = (($items) + (($nitems*20)|0)|0);
                        HEAP32[$17>>2] = 6537;
                        $18 = (($nitems) + 1)|0;
                        $19 = ((($0)) + 16|0);
                        HEAP32[$19>>2] = $18;
                        label = 8;
                    }
                } else {
                    label = 5;
                }
                do {
                    if ((label|0) == 5) {
                        $20 = ($nitems|0)>(5);
                        $21 = ((($0)) + 16|0);
                        if ($20) {
                            HEAP32[$21>>2] = 5;
                            $i$03 = 0;
                            label = 9;
                            break;
                        } else {
                            HEAP32[$21>>2] = $nitems;
                            label = 8;
                            break;
                        }
                    }
                } while(0);
                if ((label|0) == 8) {
                    $22 = ($nitems|0)>(0);
                    if ($22) {
                        $i$03 = 0;
                        label = 9;
                    }
                }
                if ((label|0) == 9) {
                    while(1) {
                        label = 0;
                        $23 = (($2) + (($i$03*12)|0)|0);
                        $24 = HEAP16[$23>>1]|0;
                        $25 = $24 & -82;
                        $26 = $25 | 17;
                        HEAP16[$23>>1] = $26;
                        $27 = (((($2) + (($i$03*12)|0)|0)) + 2|0);
                        HEAP8[$27>>0] = 0;
                        $28 = HEAP16[$23>>1]|0;
                        $29 = $28 & -35;
                        HEAP16[$23>>1] = $29;
                        $30 = (($i$03) + 1)|0;
                        $exitcond = ($30|0)==($nitems|0);
                        if ($exitcond) {
                            break;
                        } else {
                            $i$03 = $30;
                            label = 9;
                        }
                    }
                }
                __Z13calculate_lmmP10Clp_ParserPK10Clp_OptionP16Clp_InternOptioni($clp,$items,$2,$nitems);
                $31 = (_Clp_AddType($clp,$val_type,0,5,$0)|0);
                $32 = ($31|0)>(-1);
                if ($32) {
                    $$0 = 0;
                    return ($$0|0);
                }
            }
            if ($3) {
                _free($0);
            }
            if (!($4)) {
                $$0 = -1;
                return ($$0|0);
            }
            _free($2);
            $$0 = -1;
            return ($$0|0);
        }
        function _Clp_ProgramName($clp) {
            $clp = $clp|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 140|0);
            $3 = HEAP32[$2>>2]|0;
            return ($3|0);
        }
        function _Clp_SaveParser($clp,$state) {
            $clp = $clp|0;
            $state = $state|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 24|0);
            $3 = HEAP32[$2>>2]|0;
            HEAP32[$state>>2] = $3;
            $4 = ((($1)) + 28|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = ((($state)) + 4|0);
            HEAP32[$6>>2] = $5;
            $7 = ((($state)) + 8|0);
            $8 = ((($1)) + 128|0);
            ;HEAP8[$7>>0]=HEAP8[$8>>0]|0;HEAP8[$7+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[$8+3>>0]|0;HEAP8[$7+4>>0]=HEAP8[$8+4>>0]|0;
            $9 = ((($1)) + 136|0);
            $10 = HEAP32[$9>>2]|0;
            $11 = ((($state)) + 16|0);
            HEAP32[$11>>2] = $10;
            $12 = ((($1)) + 148|0);
            $13 = HEAP32[$12>>2]|0;
            $14 = ((($state)) + 20|0);
            HEAP32[$14>>2] = $13;
            $15 = ((($1)) + 12|0);
            $16 = HEAP32[$15>>2]|0;
            $17 = ((($state)) + 24|0);
            HEAP32[$17>>2] = $16;
            $18 = ((($1)) + 152|0);
            $19 = HEAP32[$18>>2]|0;
            $20 = ((($state)) + 28|0);
            HEAP32[$20>>2] = $19;
            $21 = ((($1)) + 156|0);
            $22 = HEAP8[$21>>0]|0;
            $23 = ((($state)) + 32|0);
            HEAP8[$23>>0] = $22;
            $24 = ((($1)) + 157|0);
            $25 = HEAP8[$24>>0]|0;
            $26 = ((($state)) + 33|0);
            HEAP8[$26>>0] = $25;
            $27 = ((($1)) + 159|0);
            $28 = HEAP8[$27>>0]|0;
            $29 = ((($state)) + 34|0);
            HEAP8[$29>>0] = $28;
            $30 = ((($1)) + 160|0);
            $31 = HEAP8[$30>>0]|0;
            $32 = ((($state)) + 35|0);
            HEAP8[$32>>0] = $31;
            return;
        }
        function _Clp_RestoreParser($clp,$state) {
            $clp = $clp|0;
            $state = $state|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = HEAP32[$state>>2]|0;
            $3 = ((($1)) + 24|0);
            HEAP32[$3>>2] = $2;
            $4 = ((($state)) + 4|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = ((($1)) + 28|0);
            HEAP32[$6>>2] = $5;
            $7 = ((($1)) + 128|0);
            $8 = ((($state)) + 8|0);
            ;HEAP8[$7>>0]=HEAP8[$8>>0]|0;HEAP8[$7+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[$8+3>>0]|0;HEAP8[$7+4>>0]=HEAP8[$8+4>>0]|0;
            $9 = ((($state)) + 16|0);
            $10 = HEAP32[$9>>2]|0;
            $11 = ((($1)) + 136|0);
            HEAP32[$11>>2] = $10;
            $12 = ((($state)) + 20|0);
            $13 = HEAP32[$12>>2]|0;
            $14 = ((($1)) + 148|0);
            HEAP32[$14>>2] = $13;
            $15 = ((($state)) + 32|0);
            $16 = HEAP8[$15>>0]|0;
            $17 = ((($1)) + 156|0);
            HEAP8[$17>>0] = $16;
            $18 = ((($state)) + 33|0);
            $19 = HEAP8[$18>>0]|0;
            $20 = ((($1)) + 157|0);
            HEAP8[$20>>0] = $19;
            $21 = ((($state)) + 34|0);
            $22 = HEAP8[$21>>0]|0;
            $23 = ((($1)) + 159|0);
            HEAP8[$23>>0] = $22;
            $24 = ((($state)) + 35|0);
            $25 = HEAP8[$24>>0]|0;
            $26 = ((($1)) + 160|0);
            HEAP8[$26>>0] = $25;
            $27 = ((($1)) + 12|0);
            $28 = HEAP32[$27>>2]|0;
            $29 = ((($state)) + 24|0);
            $30 = HEAP32[$29>>2]|0;
            $31 = ($28|0)==($30|0);
            if ($31) {
                $32 = ((($state)) + 28|0);
                $33 = HEAP32[$32>>2]|0;
                $34 = ((($1)) + 152|0);
                HEAP32[$34>>2] = $33;
                return;
            } else {
                $35 = ((($1)) + 152|0);
                HEAP32[$35>>2] = -1;
                return;
            }
        }
        function _Clp_Next($clp) {
            $clp = $clp|0;
            var $$ = 0, $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
            var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
            var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
            var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
            var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
            var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
            var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
            var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $clpsave = 0, $not$ = 0, $not$4 = 0, $not$45 = 0, $optno$0 = 0, $optno$13 = 0, $phitmp = 0;
            var $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 80|0;
            $vararg_buffer14 = sp + 40|0;
            $vararg_buffer12 = sp + 32|0;
            $vararg_buffer10 = sp + 24|0;
            $vararg_buffer6 = sp + 16|0;
            $vararg_buffer2 = sp + 8|0;
            $vararg_buffer = sp;
            $clpsave = sp + 44|0;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 152|0);
            HEAP32[$2>>2] = -1;
            $3 = ((($1)) + 164|0);
            HEAP32[$3>>2] = 0;
            $4 = ((($1)) + 148|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = ($5|0)!=(0);
            $7 = $6 ? 0 : 2;
            $8 = (__Z13next_argumentP10Clp_Parseri($clp,$7)|0);
            $9 = ($8|0)==(0);
            if ($9) {
                $10 = ((($clp)) + 12|0);
                $11 = HEAP32[$10>>2]|0;
                $12 = ((($clp)) + 16|0);
                HEAP32[$12>>2] = $11;
                $13 = ((($clp)) + 8|0);
                $14 = HEAP32[$13>>2]|0;
                $not$ = ($14|0)==(0);
                $15 = $not$ << 31 >> 31;
                $16 = $not$&1;
                $17 = (312 + (($16*20)|0)|0);
                HEAP32[$clp>>2] = $17;
                $$0 = $15;
                STACKTOP = sp;return ($$0|0);
            }
            $18 = ((($1)) + 157|0);
            $19 = HEAP8[$18>>0]|0;
            $20 = $19&255;
            $21 = ((($clp)) + 4|0);
            HEAP32[$21>>2] = $20;
            $22 = ((($1)) + 156|0);
            $23 = HEAP8[$22>>0]|0;
            $24 = ($23<<24>>24)==(0);
            $25 = ((($1)) + 136|0);
            $26 = HEAP32[$25>>2]|0;
            if ($24) {
                $28 = (__Z9find_longP10Clp_ParserPKc($clp,$26)|0);
                $optno$0 = $28;
            } else {
                $27 = (__Z10find_shortP10Clp_ParserPKc($clp,$26)|0);
                $optno$0 = $27;
            }
            $29 = ($optno$0|0)<(0);
            if ($29) {
                $30 = ((($1)) + 158|0);
                $31 = HEAP8[$30>>0]|0;
                $32 = ($31<<24>>24)==(0);
                if (!($32)) {
                    __Z24switch_to_short_argumentP10Clp_Parser($clp);
                    $33 = HEAP32[$25>>2]|0;
                    $34 = (__Z10find_shortP10Clp_ParserPKc($clp,$33)|0);
                    $35 = ($34|0)<(0);
                    if (!($35)) {
                        $optno$13 = $34;
                        label = 9;
                    }
                }
            } else {
                $optno$13 = $optno$0;
                label = 9;
            }
            do {
                if ((label|0) == 9) {
                    $36 = HEAP32[$21>>2]|0;
                    $37 = ($36|0)==(0);
                    if (!($37)) {
                        $38 = ((($1)) + 4|0);
                        $39 = HEAP32[$38>>2]|0;
                        $40 = (($39) + (($optno$13*12)|0)|0);
                        $41 = HEAP16[$40>>1]|0;
                        $42 = $41 & 32;
                        $43 = ($42<<16>>16)==(0);
                        if ($43) {
                            break;
                        }
                    }
                    HEAP32[$2>>2] = $optno$13;
                    $67 = HEAP8[$22>>0]|0;
                    $68 = ((($1)) + 159|0);
                    HEAP8[$68>>0] = $67;
                    $69 = HEAP32[$21>>2]|0;
                    $70 = ($69|0)==(0);
                    if ($70) {
                        $74 = 0;
                    } else {
                        $71 = HEAP8[$18>>0]|0;
                        $72 = ($71<<24>>24)==(0);
                        $phitmp = $72&1;
                        $74 = $phitmp;
                    }
                    $73 = ((($1)) + 160|0);
                    HEAP8[$73>>0] = $74;
                    $75 = HEAP32[$21>>2]|0;
                    $76 = ($75|0)==(0);
                    if ($76) {
                        $77 = ((($1)) + 4|0);
                        $78 = HEAP32[$77>>2]|0;
                        $79 = (($78) + (($optno$13*12)|0)|0);
                        $80 = HEAP16[$79>>1]|0;
                        $81 = $80 & 4;
                        $82 = $80 & 12;
                        $83 = ($82<<16>>16)==(0);
                        if (!($83)) {
                            $92 = HEAP32[$1>>2]|0;
                            $93 = (($92) + (($optno$13*20)|0)|0);
                            $94 = (((($92) + (($optno$13*20)|0)|0)) + 12|0);
                            $95 = HEAP32[$94>>2]|0;
                            $96 = ($95|0)<(1);
                            if ($96) {
                                HEAP32[$clp>>2] = (372);
                                $$0 = -3;
                                STACKTOP = sp;return ($$0|0);
                            }
                            $97 = (__Z18val_type_binsearchP12Clp_Internali($1,$95)|0);
                            $98 = ((($1)) + 20|0);
                            $99 = HEAP32[$98>>2]|0;
                            $100 = ($97|0)==($99|0);
                            if (!($100)) {
                                $101 = ((($1)) + 16|0);
                                $102 = HEAP32[$101>>2]|0;
                                $103 = (($102) + ($97<<4)|0);
                                $104 = HEAP32[$103>>2]|0;
                                $105 = ($104|0)==($95|0);
                                if ($105) {
                                    $106 = ((($clp)) + 8|0);
                                    $107 = HEAP32[$106>>2]|0;
                                    $108 = ($81<<16>>16)!=(0);
                                    $not$4 = ($107|0)!=(0);
                                    $$ = $108 | $not$4;
                                    $$lobit = ($81&65535) >>> 2;
                                    $109 = $$lobit&65535;
                                    $not$45 = $not$4&1;
                                    $110 = $not$45 | $109;
                                    _Clp_SaveParser($clp,$clpsave);
                                    $111 = HEAP32[$77>>2]|0;
                                    $112 = (($111) + (($optno$13*12)|0)|0);
                                    $113 = HEAP16[$112>>1]|0;
                                    $114 = $113 & 4;
                                    $115 = ($114<<16>>16)==(0);
                                    if ($115) {
                                        label = 39;
                                    } else {
                                        $116 = HEAP32[$106>>2]|0;
                                        $117 = ($116|0)==(0);
                                        if ($117) {
                                            $118 = HEAP32[$101>>2]|0;
                                            $119 = (((($118) + ($97<<4)|0)) + 8|0);
                                            $120 = HEAP32[$119>>2]|0;
                                            $121 = $120 & 1;
                                            $122 = (2 - ($121))|0;
                                            (__Z13next_argumentP10Clp_Parseri($clp,$122)|0);
                                            $123 = HEAP32[$106>>2]|0;
                                            $124 = ($123|0)==(0);
                                            if ($124) {
                                                $125 = HEAP32[$25>>2]|0;
                                                $126 = ($125|0)==(0|0);
                                                _Clp_RestoreParser($clp,$clpsave);
                                                if ($126) {
                                                    (_Clp_OptionError($clp,5796,$vararg_buffer14)|0);
                                                } else {
                                                    (_Clp_OptionError($clp,5758,$vararg_buffer12)|0);
                                                }
                                                HEAP32[$clp>>2] = (352);
                                                $$0 = -2;
                                                STACKTOP = sp;return ($$0|0);
                                            }
                                        } else {
                                            label = 39;
                                        }
                                    }
                                    if ((label|0) == 39) {
                                        $127 = HEAP8[$22>>0]|0;
                                        $128 = ($127<<24>>24)==(0);
                                        if (!($128)) {
                                            $129 = HEAP32[$106>>2]|0;
                                            $130 = ($129|0)==(0);
                                            if ($130) {
                                                $131 = HEAP32[$25>>2]|0;
                                                $132 = (__Z16clp_utf8_charlenPK12Clp_InternalPKc($1,$131)|0);
                                                $133 = HEAP32[$25>>2]|0;
                                                $134 = (($133) + ($132)|0);
                                                $135 = HEAP8[$134>>0]|0;
                                                $136 = ($135<<24>>24)==(0);
                                                if (!($136)) {
                                                    (__Z13next_argumentP10Clp_Parseri($clp,1)|0);
                                                }
                                            }
                                        }
                                    }
                                    HEAP32[$clp>>2] = $93;
                                    $137 = HEAP32[$106>>2]|0;
                                    $138 = ($137|0)==(0);
                                    do {
                                        if (!($138)) {
                                            $139 = HEAP32[$101>>2]|0;
                                            $140 = (((($139) + ($97<<4)|0)) + 4|0);
                                            $141 = HEAP32[$140>>2]|0;
                                            $142 = ((($clp)) + 12|0);
                                            $143 = HEAP32[$142>>2]|0;
                                            $144 = (((($139) + ($97<<4)|0)) + 12|0);
                                            $145 = HEAP32[$144>>2]|0;
                                            $146 = (FUNCTION_TABLE_iiiii[$141 & 15]($clp,$143,$110,$145)|0);
                                            $147 = ($146|0)<(1);
                                            if ($147) {
                                                HEAP32[$106>>2] = 0;
                                                if (!($$)) {
                                                    _Clp_RestoreParser($clp,$clpsave);
                                                    HEAP32[$clp>>2] = $93;
                                                    break;
                                                }
                                                HEAP32[$clp>>2] = (352);
                                                $$0 = -2;
                                                STACKTOP = sp;return ($$0|0);
                                            }
                                        }
                                    } while(0);
                                    $148 = (((($92) + (($optno$13*20)|0)|0)) + 8|0);
                                    $149 = HEAP32[$148>>2]|0;
                                    $$0 = $149;
                                    STACKTOP = sp;return ($$0|0);
                                }
                            }
                            HEAP32[$clp>>2] = (372);
                            $$0 = -3;
                            STACKTOP = sp;return ($$0|0);
                        }
                    }
                    $84 = ((($clp)) + 8|0);
                    $85 = HEAP32[$84>>2]|0;
                    $86 = ($85|0)==(0);
                    if ($86) {
                        $87 = HEAP32[$1>>2]|0;
                        $88 = (($87) + (($optno$13*20)|0)|0);
                        HEAP32[$clp>>2] = $88;
                        $89 = HEAP32[$1>>2]|0;
                        $90 = (((($89) + (($optno$13*20)|0)|0)) + 8|0);
                        $91 = HEAP32[$90>>2]|0;
                        $$0 = $91;
                        STACKTOP = sp;return ($$0|0);
                    } else {
                        (_Clp_OptionError($clp,5727,$vararg_buffer10)|0);
                        HEAP32[$clp>>2] = (352);
                        $$0 = -2;
                        STACKTOP = sp;return ($$0|0);
                    }
                }
            } while(0);
            $44 = ((($1)) + 24|0);
            $45 = HEAP32[$44>>2]|0;
            $46 = HEAP32[$45>>2]|0;
            $47 = (_strcmp($46,5637)|0);
            $48 = ($47|0)==(0);
            if ($48) {
                (_Clp_SetOptionProcessing($clp,0)|0);
                $49 = (_Clp_Next($clp)|0);
                $$0 = $49;
                STACKTOP = sp;return ($$0|0);
            }
            $50 = HEAP32[$3>>2]|0;
            $51 = ($50|0)==(0);
            do {
                if ($51) {
                    $58 = HEAP8[$22>>0]|0;
                    $59 = ($58<<24>>24)==(0);
                    if (!($59)) {
                        $60 = ((($1)) + 158|0);
                        $61 = HEAP8[$60>>0]|0;
                        $62 = ($61<<24>>24)==(0);
                        if ($62) {
                            $63 = ((($1)) + 128|0);
                            $64 = HEAP32[$25>>2]|0;
                            HEAP32[$vararg_buffer2>>2] = $63;
                            $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
                            HEAP32[$vararg_ptr5>>2] = $64;
                            (_Clp_OptionError($clp,5669,$vararg_buffer2)|0);
                            break;
                        }
                    }
                    $65 = ((($1)) + 128|0);
                    $66 = HEAP32[$25>>2]|0;
                    HEAP32[$vararg_buffer6>>2] = $65;
                    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
                    HEAP32[$vararg_ptr9>>2] = $66;
                    (_Clp_OptionError($clp,5698,$vararg_buffer6)|0);
                } else {
                    $52 = ((($1)) + 168|0);
                    $53 = HEAP32[$1>>2]|0;
                    $54 = ((($1)) + 4|0);
                    $55 = HEAP32[$54>>2]|0;
                    $56 = ((($1)) + 128|0);
                    $57 = HEAP32[$25>>2]|0;
                    HEAP32[$vararg_buffer>>2] = $56;
                    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                    HEAP32[$vararg_ptr1>>2] = $57;
                    __Z15ambiguity_errorP10Clp_ParseriPiPK10Clp_OptionPK16Clp_InternOptionPKcS9_z($clp,$50,$52,$53,$55,$56,5640,$vararg_buffer);
                }
            } while(0);
            HEAP32[$clp>>2] = (352);
            $$0 = -2;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z13next_argumentP10Clp_Parseri($clp,$want_argument) {
            $clp = $clp|0;
            $want_argument = $want_argument|0;
            var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ocharskip = 0, $oclass$1 = 0, $or$cond = 0, $storemerge = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ocharskip = sp;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($clp)) + 8|0);
            HEAP32[$2>>2] = 0;
            $3 = ((($clp)) + 12|0);
            HEAP32[$3>>2] = 0;
            $4 = ((($1)) + 158|0);
            HEAP8[$4>>0] = 0;
            $5 = ((($1)) + 156|0);
            $6 = HEAP8[$5>>0]|0;
            $7 = ($6<<24>>24)==(0);
            do {
                if (!($7)) {
                    $8 = ((($1)) + 136|0);
                    $9 = HEAP32[$8>>2]|0;
                    $10 = (__Z16clp_utf8_charlenPK12Clp_InternalPKc($1,$9)|0);
                    $11 = HEAP32[$8>>2]|0;
                    $12 = (($11) + ($10)|0);
                    HEAP32[$8>>2] = $12;
                    $13 = HEAP8[$12>>0]|0;
                    $14 = ($13<<24>>24)==(0);
                    if ($14) {
                        HEAP8[$5>>0] = 0;
                        break;
                    }
                    $15 = ($want_argument|0)>(0);
                    if ($15) {
                        HEAP32[$2>>2] = 1;
                        $16 = HEAP32[$8>>2]|0;
                        $17 = HEAP8[$16>>0]|0;
                        $18 = ($17<<24>>24)==(61);
                        $19 = ((($16)) + 1|0);
                        $storemerge = $18 ? $19 : $16;
                        HEAP32[$3>>2] = $storemerge;
                        HEAP8[$5>>0] = 0;
                        $$0 = 0;
                        STACKTOP = sp;return ($$0|0);
                    } else {
                        $$pr = HEAP8[$5>>0]|0;
                        $20 = ($$pr<<24>>24)==(0);
                        if ($20) {
                            break;
                        } else {
                            $$0 = 1;
                        }
                        STACKTOP = sp;return ($$0|0);
                    }
                }
            } while(0);
            $21 = ((($1)) + 157|0);
            HEAP8[$21>>0] = 0;
            $22 = ((($1)) + 136|0);
            HEAP32[$22>>2] = 0;
            $23 = ((($1)) + 28|0);
            $24 = HEAP32[$23>>2]|0;
            $25 = ($24|0)<(2);
            if ($25) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $26 = (($24) + -1)|0;
            HEAP32[$23>>2] = $26;
            $27 = ((($1)) + 24|0);
            $28 = HEAP32[$27>>2]|0;
            $29 = ((($28)) + 4|0);
            HEAP32[$27>>2] = $29;
            $30 = HEAP32[$29>>2]|0;
            $31 = ($want_argument|0)>(1);
            L15: do {
                if (!($31)) {
                    $32 = HEAP8[$30>>0]|0;
                    $33 = ($32<<24>>24)==(45);
                    if ($33) {
                        $34 = ((($30)) + 1|0);
                        $35 = HEAP8[$34>>0]|0;
                        $36 = ($35<<24>>24)==(45);
                        if ($36) {
                            HEAP32[$ocharskip>>2] = 2;
                        } else {
                            label = 12;
                        }
                    } else {
                        label = 12;
                    }
                    L20: do {
                        if ((label|0) == 12) {
                            $37 = (__Z10get_oclassP10Clp_ParserPKcPi($clp,$30,$ocharskip)|0);
                            $38 = $37 & 5;
                            $39 = ($38|0)==(0);
                            $40 = $37 & 10;
                            $41 = ($40|0)==(0);
                            $or$cond = $39 | $41;
                            if ($or$cond) {
                                $oclass$1 = $37;
                            } else {
                                $42 = $37 & -6;
                                $43 = HEAP32[$ocharskip>>2]|0;
                                $44 = (($30) + ($43)|0);
                                $45 = HEAP8[$44>>0]|0;
                                $46 = ($45<<24>>24)==(0);
                                if ($46) {
                                    $oclass$1 = $42;
                                } else {
                                    HEAP8[$4>>0] = 1;
                                    $oclass$1 = $42;
                                }
                            }
                            switch ($oclass$1|0) {
                                case 0:  {
                                    break L15;
                                    break;
                                }
                                case 32:  {
                                    break L20;
                                    break;
                                }
                                case 1:  {
                                    HEAP8[$5>>0] = 1;
                                    break;
                                }
                                case 4:  {
                                    HEAP8[$5>>0] = 1;
                                    HEAP8[$21>>0] = 1;
                                    break;
                                }
                                case 2:  {
                                    break;
                                }
                                case 8:  {
                                    HEAP8[$21>>0] = 1;
                                    break;
                                }
                                case 16:  {
                                    $51 = ($want_argument|0)>(0);
                                    if ($51) {
                                        break L15;
                                    }
                                    __Z15set_option_textP12Clp_InternalPKci($1,$30,0);
                                    $$0 = 1;
                                    STACKTOP = sp;return ($$0|0);
                                    break;
                                }
                                default: {
                                    ___assert_fail((6549|0),(5629|0),1694,(6551|0));
                                    // unreachable;
                                }
                            }
                            $47 = HEAP32[$ocharskip>>2]|0;
                            $48 = (($30) + ($47)|0);
                            $49 = HEAP8[$48>>0]|0;
                            $50 = ($49<<24>>24)==(0);
                            if ($50) {
                                break L15;
                            }
                            __Z15set_option_textP12Clp_InternalPKci($1,$30,$47);
                            $$0 = 1;
                            STACKTOP = sp;return ($$0|0);
                        }
                    } while(0);
                    $52 = HEAP32[$ocharskip>>2]|0;
                    __Z15set_option_textP12Clp_InternalPKci($1,$30,$52);
                    $$0 = 1;
                    STACKTOP = sp;return ($$0|0);
                }
            } while(0);
            HEAP8[$5>>0] = 0;
            HEAP32[$2>>2] = 1;
            HEAP32[$3>>2] = $30;
            $$0 = 0;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z10find_shortP10Clp_ParserPKc($clp,$text) {
            $clp = $clp|0;
            $text = $text|0;
            var $$0 = 0, $$lcssa = 0, $$lcssa21 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $i$06 = 0, $i$06$lcssa = 0;
            var $not$ = 0, $not$2 = 0, $or$cond = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($1)) + 4|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ((($1)) + 124|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = ($6|0)==(0);
            if ($7) {
                $9 = HEAP8[$text>>0]|0;
                $10 = $9&255;
                $c$0 = $10;
            } else {
                $8 = (__Z11decode_utf8PKcPS0_($text,0)|0);
                $c$0 = $8;
            }
            $11 = ((($1)) + 8|0);
            $12 = HEAP32[$11>>2]|0;
            $13 = ($12|0)>(0);
            if (!($13)) {
                $$0 = -1;
                return ($$0|0);
            }
            $14 = ((($clp)) + 4|0);
            $i$06 = 0;
            while(1) {
                $15 = (($4) + (($i$06*12)|0)|0);
                $16 = HEAP16[$15>>1]|0;
                $17 = $16 & 2;
                $18 = ($17<<16>>16)==(0);
                if (!($18)) {
                    $19 = (((($2) + (($i$06*20)|0)|0)) + 4|0);
                    $20 = HEAP32[$19>>2]|0;
                    $21 = ($20|0)==($c$0|0);
                    if ($21) {
                        $22 = HEAP32[$14>>2]|0;
                        $23 = ($22|0)!=(0);
                        $24 = $16 & 32;
                        $25 = ($24<<16>>16)==(0);
                        $or$cond = $25 & $23;
                        if (!($or$cond)) {
                            $$lcssa = $16;$$lcssa21 = $22;$i$06$lcssa = $i$06;
                            break;
                        }
                    }
                }
                $30 = (($i$06) + 1)|0;
                $31 = HEAP32[$11>>2]|0;
                $32 = ($30|0)<($31|0);
                if ($32) {
                    $i$06 = $30;
                } else {
                    $$0 = -1;
                    label = 11;
                    break;
                }
            }
            if ((label|0) == 11) {
                return ($$0|0);
            }
            $not$ = ($$lcssa21|0)!=(0);
            $26 = ($$lcssa&65535) >>> 4;
            $$lobit = $26 & 1;
            $27 = $$lobit ^ 1;
            $28 = $27&65535;
            $not$2 = $not$&1;
            $29 = $not$2 | $28;
            HEAP32[$14>>2] = $29;
            $$0 = $i$06$lcssa;
            return ($$0|0);
        }
        function __Z9find_longP10Clp_ParserPKc($clp,$arg) {
            $clp = $clp|0;
            $arg = $arg|0;
            var $$ = 0, $$0 = 0, $$03 = 0, $$1 = 0, $$in = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
            var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
            var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
            var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$06 = 0;
            var $lmm$0 = 0, $optno$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($1)) + 8|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ((($1)) + 4|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = ((($1)) + 164|0);
            $8 = ((($1)) + 168|0);
            $9 = (__Z15find_prefix_optP10Clp_ParserPKciPK10Clp_OptionPK16Clp_InternOptionPiS9_($clp,$arg,$4,$2,$6,$7,$8)|0);
            $10 = ($9|0)>(-1);
            L1: do {
                if ($10) {
                    $$1 = $arg;$optno$0 = $9;
                } else {
                    $11 = HEAP32[$7>>2]|0;
                    $12 = ((($clp)) + 4|0);
                    $$03 = $arg;
                    while(1) {
                        $13 = HEAP8[$$03>>0]|0;
                        $14 = ($13<<24>>24)==(110);
                        if (!($14)) {
                            break;
                        }
                        $15 = ((($$03)) + 1|0);
                        $16 = HEAP8[$15>>0]|0;
                        $17 = ($16<<24>>24)==(111);
                        if (!($17)) {
                            break;
                        }
                        $18 = ((($$03)) + 2|0);
                        $19 = HEAP8[$18>>0]|0;
                        $20 = ($19<<24>>24)==(45);
                        if (!($20)) {
                            break;
                        }
                        $21 = ((($$03)) + 3|0);
                        $22 = HEAP32[$12>>2]|0;
                        $23 = ($22|0)==(0);
                        $24 = $23&1;
                        HEAP32[$12>>2] = $24;
                        $25 = HEAP32[$3>>2]|0;
                        $26 = HEAP32[$5>>2]|0;
                        $27 = (__Z15find_prefix_optP10Clp_ParserPKciPK10Clp_OptionPK16Clp_InternOptionPiS9_($clp,$21,$25,$2,$26,$7,$8)|0);
                        $28 = ($27|0)>(-1);
                        if ($28) {
                            $$1 = $21;$optno$0 = $27;
                            break L1;
                        } else {
                            $$03 = $21;
                        }
                    }
                    $29 = HEAP32[$7>>2]|0;
                    $30 = ($29|0)>(4);
                    $$ = $30 ? 4 : $29;
                    $31 = ($11|0)<($$|0);
                    if (!($31)) {
                        $$0 = -1;
                        return ($$0|0);
                    }
                    $32 = ($29|0)<(4);
                    $33 = $32 ? $29 : 4;
                    $i$06 = $11;
                    while(1) {
                        $34 = (((($1)) + 168|0) + ($i$06<<2)|0);
                        $35 = HEAP32[$34>>2]|0;
                        $36 = $35 ^ -1;
                        HEAP32[$34>>2] = $36;
                        $37 = (($i$06) + 1)|0;
                        $exitcond = ($37|0)==($33|0);
                        if ($exitcond) {
                            $$0 = -1;
                            break;
                        } else {
                            $i$06 = $37;
                        }
                    }
                    return ($$0|0);
                }
            } while(0);
            $38 = HEAP32[$5>>2]|0;
            $39 = ((($clp)) + 4|0);
            $40 = HEAP32[$39>>2]|0;
            $41 = ($40|0)==(0);
            $42 = (((($38) + (($optno$0*12)|0)|0)) + 8|0);
            $43 = (((($38) + (($optno$0*12)|0)|0)) + 4|0);
            $$in = $41 ? $43 : $42;
            $44 = HEAP32[$$in>>2]|0;
            $45 = ((($1)) + 158|0);
            $46 = HEAP8[$45>>0]|0;
            $47 = ($46<<24>>24)==(0);
            if ($47) {
                $lmm$0 = $44;
            } else {
                $48 = ($40|0)!=(0);
                $49 = (($38) + (($optno$0*12)|0)|0);
                $50 = HEAP16[$49>>1]|0;
                $51 = $48 ? 256 : 128;
                $52 = $50 & $51;
                $53 = ($52<<16>>16)==(0);
                if ($53) {
                    $lmm$0 = $44;
                } else {
                    $54 = (__Z16clp_utf8_charlenPK12Clp_InternalPKc($1,$$1)|0);
                    $55 = ($54|0)>=($44|0);
                    $56 = (($54) + 1)|0;
                    $57 = $55 ? $56 : $44;
                    $lmm$0 = $57;
                }
            }
            $58 = (($2) + (($optno$0*20)|0)|0);
            $59 = HEAP32[$58>>2]|0;
            $60 = (((($38) + (($optno$0*12)|0)|0)) + 2|0);
            $61 = HEAP8[$60>>0]|0;
            $62 = $61&255;
            $63 = (($59) + ($62)|0);
            $64 = (__Z6argcmpPKcS0_ii($63,$$1,$lmm$0,1)|0);
            $65 = ($64|0)>(0);
            if (!($65)) {
                ___assert_fail((6618|0),(5629|0),1768,(6626|0));
                // unreachable;
            }
            $66 = (($$1) + ($64)|0);
            $67 = HEAP8[$66>>0]|0;
            $68 = ($67<<24>>24)==(61);
            if (!($68)) {
                $$0 = $optno$0;
                return ($$0|0);
            }
            $69 = ((($clp)) + 8|0);
            HEAP32[$69>>2] = 1;
            $$sum = (($64) + 1)|0;
            $70 = (($$1) + ($$sum)|0);
            $71 = ((($clp)) + 12|0);
            HEAP32[$71>>2] = $70;
            $$0 = $optno$0;
            return ($$0|0);
        }
        function __Z24switch_to_short_argumentP10Clp_Parser($clp) {
            $clp = $clp|0;
            var $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ocharskip = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ocharskip = sp;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 24|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = HEAP32[$3>>2]|0;
            $5 = (__Z10get_oclassP10Clp_ParserPKcPi($clp,$4,$ocharskip)|0);
            $6 = ((($1)) + 158|0);
            $7 = HEAP8[$6>>0]|0;
            $8 = ($7<<24>>24)==(0);
            if ($8) {
                ___assert_fail((6636|0),(5629|0),1708,(6656|0));
                // unreachable;
            } else {
                $9 = ((($1)) + 156|0);
                HEAP8[$9>>0] = 1;
                $10 = $5 >>> 2;
                $$lobit = $10 & 1;
                $11 = $$lobit&255;
                $12 = ((($1)) + 157|0);
                HEAP8[$12>>0] = $11;
                $13 = HEAP32[$2>>2]|0;
                $14 = HEAP32[$13>>2]|0;
                $15 = HEAP32[$ocharskip>>2]|0;
                __Z15set_option_textP12Clp_InternalPKci($1,$14,$15);
                STACKTOP = sp;return;
            }
        }
        function __Z15ambiguity_errorP10Clp_ParseriPiPK10Clp_OptionPK16Clp_InternOptionPKcS9_z($clp,$ambiguous,$ambiguous_values,$opt,$iopt,$prefix,$fmt,$varargs) {
            $clp = $clp|0;
            $ambiguous = $ambiguous|0;
            $ambiguous_values = $ambiguous_values|0;
            $opt = $opt|0;
            $iopt = $iopt|0;
            $prefix = $prefix|0;
            $fmt = $fmt|0;
            $varargs = $varargs|0;
            var $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bs = 0, $exitcond = 0, $i$01 = 0, $no_dash$0 = 0, $val = 0, $value$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 288|0;
            $bs = sp + 16|0;
            $val = sp;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            HEAP32[$val>>2] = $varargs;
            __Z17build_string_initP15Clp_BuildStringP10Clp_Parser($bs,$clp);
            __Z13Clp_vbsprintfP10Clp_ParserP15Clp_BuildStringPKcPi($clp,$bs,$fmt,$val);
            __Z19append_build_stringP15Clp_BuildStringPKci($bs,5824,1);
            __Z27build_string_program_prefixP15Clp_BuildStringPK10Clp_Parser($bs,$clp);
            __Z19append_build_stringP15Clp_BuildStringPKci($bs,6718,-1);
            $2 = ($ambiguous|0)>(0);
            if (!($2)) {
                __Z19append_build_stringP15Clp_BuildStringPKci($bs,6766,-1);
                __Z8do_errorP10Clp_ParserP15Clp_BuildString($clp,$bs);
                __Z20build_string_cleanupP15Clp_BuildString($bs);
                STACKTOP = sp;return;
            }
            $3 = ((($1)) + 124|0);
            $4 = (($ambiguous) + -1)|0;
            $5 = (0 - ($ambiguous))|0;
            $6 = ($5>>>0)>(4294967292);
            $7 = $6 ? $ambiguous : 4;
            $i$01 = 0;
            while(1) {
                $8 = (($ambiguous_values) + ($i$01<<2)|0);
                $9 = HEAP32[$8>>2]|0;
                $10 = ($9|0)<(0);
                $$lobit = $9 >> 31;
                $value$0 = $$lobit ^ $9;
                $no_dash$0 = $10 ? 5574 : 23987;
                $11 = ($i$01|0)==(0);
                do {
                    if ($11) {
                        __Z19append_build_stringP15Clp_BuildStringPKci($bs,6687,1);
                    } else {
                        $12 = ($i$01|0)==($4|0);
                        if ($12) {
                            $13 = ($i$01|0)==(1);
                            $14 = $13 ? 6737 : 6743;
                            __Z19append_build_stringP15Clp_BuildStringPKci($bs,$14,-1);
                            break;
                        } else {
                            __Z19append_build_stringP15Clp_BuildStringPKci($bs,6750,2);
                            break;
                        }
                    }
                } while(0);
                $15 = HEAP32[$3>>2]|0;
                $16 = ($15|0)!=(0);
                $17 = $16 ? 6691 : 6695;
                __Z19append_build_stringP15Clp_BuildStringPKci($bs,$17,-1);
                __Z19append_build_stringP15Clp_BuildStringPKci($bs,$prefix,-1);
                __Z19append_build_stringP15Clp_BuildStringPKci($bs,$no_dash$0,-1);
                $18 = (($opt) + (($value$0*20)|0)|0);
                $19 = HEAP32[$18>>2]|0;
                $20 = (((($iopt) + (($value$0*12)|0)|0)) + 2|0);
                $21 = HEAP8[$20>>0]|0;
                $22 = $21&255;
                $23 = (($19) + ($22)|0);
                __Z19append_build_stringP15Clp_BuildStringPKci($bs,$23,-1);
                $24 = HEAP32[$3>>2]|0;
                $25 = ($24|0)!=(0);
                $26 = $25 ? 6697 : 6695;
                __Z19append_build_stringP15Clp_BuildStringPKci($bs,$26,-1);
                $27 = (($i$01) + 1)|0;
                $exitcond = ($27|0)==($7|0);
                if ($exitcond) {
                    break;
                } else {
                    $i$01 = $27;
                }
            }
            $28 = ($ambiguous|0)>(4);
            if (!($28)) {
                __Z19append_build_stringP15Clp_BuildStringPKci($bs,6766,-1);
                __Z8do_errorP10Clp_ParserP15Clp_BuildString($clp,$bs);
                __Z20build_string_cleanupP15Clp_BuildString($bs);
                STACKTOP = sp;return;
            }
            __Z19append_build_stringP15Clp_BuildStringPKci($bs,6753,-1);
            __Z19append_build_stringP15Clp_BuildStringPKci($bs,6766,-1);
            __Z8do_errorP10Clp_ParserP15Clp_BuildString($clp,$bs);
            __Z20build_string_cleanupP15Clp_BuildString($bs);
            STACKTOP = sp;return;
        }
        function __Z16clp_utf8_charlenPK12Clp_InternalPKc($cli,$s) {
            $cli = $cli|0;
            $s = $s|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($cli)) + 124|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0);
            if ($2) {
                $4 = 1;
                return ($4|0);
            }
            $3 = (__Z12utf8_charlenPKc($s)|0);
            $4 = $3;
            return ($4|0);
        }
        function _Clp_Shift($clp,$allow_options) {
            $clp = $clp|0;
            $allow_options = $allow_options|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $clpsave = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 48|0;
            $clpsave = sp;
            _Clp_SaveParser($clp,$clpsave);
            $0 = ($allow_options|0)!=(0);
            $1 = $0 ? 2 : 1;
            (__Z13next_argumentP10Clp_Parseri($clp,$1)|0);
            $2 = ((($clp)) + 8|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($3|0)==(0);
            if ($4) {
                _Clp_RestoreParser($clp,$clpsave);
            }
            $5 = ((($clp)) + 12|0);
            $6 = HEAP32[$5>>2]|0;
            STACKTOP = sp;return ($6|0);
        }
        function __Z17build_string_initP15Clp_BuildStringP10Clp_Parser($bs,$clp) {
            $bs = $bs|0;
            $clp = $clp|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($bs)) + 12|0);
            $1 = ((($bs)) + 4|0);
            HEAP32[$1>>2] = $0;
            HEAP32[$bs>>2] = $0;
            $2 = ((($bs)) + 268|0);
            $3 = ((($bs)) + 8|0);
            HEAP32[$3>>2] = $2;
            $4 = ($clp|0)==(0|0);
            if ($4) {
                return;
            }
            __Z27build_string_program_prefixP15Clp_BuildStringPK10Clp_Parser($bs,$clp);
            return;
        }
        function __Z13Clp_vbsprintfP10Clp_ParserP15Clp_BuildStringPKcPi($clp,$bs,$fmt,$val) {
            $clp = $clp|0;
            $bs = $bs|0;
            $fmt = $fmt|0;
            $val = $val|0;
            var $$015 = 0, $$017 = 0, $$017$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
            var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
            var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
            var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
            var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
            var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
            var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
            var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
            var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
            var $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $c$0 = 0, $c$0$off = 0, $c$0$off8 = 0, $expanded = 0, $expanded13 = 0, $expanded15 = 0, $expanded16 = 0, $expanded17 = 0, $expanded19 = 0, $expanded20 = 0;
            var $expanded22 = 0, $expanded23 = 0, $expanded24 = 0, $expanded26 = 0, $expanded27 = 0, $expanded29 = 0, $expanded30 = 0, $expanded31 = 0, $expanded33 = 0, $expanded34 = 0, $expanded36 = 0, $expanded37 = 0, $expanded38 = 0, $percent$016 = 0, $strchr = 0, $strlen = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer10 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = (_strchr($fmt,37)|0);
            $3 = ($2|0)==(0|0);
            if ($3) {
                $$015 = $fmt;
                __Z19append_build_stringP15Clp_BuildStringPKci($bs,$$015,-1);
                STACKTOP = sp;return;
            }
            $4 = ((($bs)) + 8|0);
            $5 = ((($bs)) + 4|0);
            $6 = ((($1)) + 124|0);
            $7 = ((($bs)) + 8|0);
            $8 = ((($bs)) + 4|0);
            $9 = ((($1)) + 124|0);
            $10 = ((($bs)) + 8|0);
            $11 = ((($bs)) + 4|0);
            $12 = ((($1)) + 152|0);
            $13 = ((($1)) + 159|0);
            $14 = ((($1)) + 160|0);
            $15 = ((($1)) + 128|0);
            $16 = ((($1)) + 4|0);
            $17 = ((($1)) + 4|0);
            $18 = ((($clp)) + 8|0);
            $19 = ((($1)) + 159|0);
            $20 = ((($clp)) + 12|0);
            $21 = ((($1)) + 4|0);
            $22 = ((($1)) + 128|0);
            $23 = ((($bs)) + 8|0);
            $24 = ((($bs)) + 4|0);
            $25 = ((($1)) + 124|0);
            $26 = ((($bs)) + 8|0);
            $27 = ((($bs)) + 4|0);
            $28 = ((($1)) + 124|0);
            $29 = ((($1)) + 124|0);
            $$017 = $fmt;$percent$016 = $2;
            L4: while(1) {
                $30 = $percent$016;
                $31 = $$017;
                $32 = (($30) - ($31))|0;
                __Z19append_build_stringP15Clp_BuildStringPKci($bs,$$017,$32);
                $33 = ((($percent$016)) + 1|0);
                $34 = HEAP8[$33>>0]|0;
                $35 = $34 << 24 >> 24;
                L6: do {
                    switch ($35|0) {
                        case 0:  {
                            $$017$lcssa = $$017;
                            break L4;
                            break;
                        }
                        case 115:  {
                            $arglist_current = HEAP32[$val>>2]|0;
                            $36 = $arglist_current;
                            $37 = ((0) + 4|0);
                            $expanded13 = $37;
                            $expanded = (($expanded13) - 1)|0;
                            $38 = (($36) + ($expanded))|0;
                            $39 = ((0) + 4|0);
                            $expanded17 = $39;
                            $expanded16 = (($expanded17) - 1)|0;
                            $expanded15 = $expanded16 ^ -1;
                            $40 = $38 & $expanded15;
                            $41 = $40;
                            $42 = HEAP32[$41>>2]|0;
                            $arglist_next = ((($41)) + 4|0);
                            HEAP32[$val>>2] = $arglist_next;
                            $43 = ($42|0)!=(0|0);
                            $44 = $43 ? $42 : 29217;
                            __Z19append_build_stringP15Clp_BuildStringPKci($bs,$44,-1);
                            break;
                        }
                        case 67:  {
                            $arglist_current2 = HEAP32[$val>>2]|0;
                            $45 = $arglist_current2;
                            $46 = ((0) + 4|0);
                            $expanded20 = $46;
                            $expanded19 = (($expanded20) - 1)|0;
                            $47 = (($45) + ($expanded19))|0;
                            $48 = ((0) + 4|0);
                            $expanded24 = $48;
                            $expanded23 = (($expanded24) - 1)|0;
                            $expanded22 = $expanded23 ^ -1;
                            $49 = $47 & $expanded22;
                            $50 = $49;
                            $51 = HEAP32[$50>>2]|0;
                            $arglist_next3 = ((($50)) + 4|0);
                            HEAP32[$val>>2] = $arglist_next3;
                            $52 = HEAP32[$6>>2]|0;
                            $53 = ($52|0)==(0);
                            if ($53) {
                                $55 = HEAP8[$51>>0]|0;
                                $56 = $55&255;
                                $c$0 = $56;
                                label = 9;
                                break L6;
                            } else {
                                $54 = (__Z11decode_utf8PKcPS0_($51,0)|0);
                                $c$0 = $54;
                                label = 9;
                                break L6;
                            }
                            break;
                        }
                        case 99:  {
                            $arglist_current5 = HEAP32[$val>>2]|0;
                            $57 = $arglist_current5;
                            $58 = ((0) + 4|0);
                            $expanded27 = $58;
                            $expanded26 = (($expanded27) - 1)|0;
                            $59 = (($57) + ($expanded26))|0;
                            $60 = ((0) + 4|0);
                            $expanded31 = $60;
                            $expanded30 = (($expanded31) - 1)|0;
                            $expanded29 = $expanded30 ^ -1;
                            $61 = $59 & $expanded29;
                            $62 = $61;
                            $63 = HEAP32[$62>>2]|0;
                            $arglist_next6 = ((($62)) + 4|0);
                            HEAP32[$val>>2] = $arglist_next6;
                            $c$0 = $63;
                            label = 9;
                            break;
                        }
                        case 100:  {
                            $arglist_current8 = HEAP32[$val>>2]|0;
                            $101 = $arglist_current8;
                            $102 = ((0) + 4|0);
                            $expanded34 = $102;
                            $expanded33 = (($expanded34) - 1)|0;
                            $103 = (($101) + ($expanded33))|0;
                            $104 = ((0) + 4|0);
                            $expanded38 = $104;
                            $expanded37 = (($expanded38) - 1)|0;
                            $expanded36 = $expanded37 ^ -1;
                            $105 = $103 & $expanded36;
                            $106 = $105;
                            $107 = HEAP32[$106>>2]|0;
                            $arglist_next9 = ((($106)) + 4|0);
                            HEAP32[$val>>2] = $arglist_next9;
                            $108 = HEAP32[$10>>2]|0;
                            $109 = HEAP32[$11>>2]|0;
                            $110 = $108;
                            $111 = $109;
                            $112 = (($110) - ($111))|0;
                            $113 = ($112|0)>(31);
                            if (!($113)) {
                                $114 = HEAP32[$bs>>2]|0;
                                $115 = $114;
                                $116 = (($111) + 32)|0;
                                $117 = (($116) - ($115))|0;
                                $118 = (__Z17build_string_growP15Clp_BuildStringj($bs,$117)|0);
                                $119 = ($118|0)==(0);
                                if ($119) {
                                    break L6;
                                }
                            }
                            $120 = HEAP32[$11>>2]|0;
                            HEAP32[$vararg_buffer10>>2] = $107;
                            (_sprintf($120,6684,$vararg_buffer10)|0);
                            $121 = HEAP32[$11>>2]|0;
                            $strlen = (_strlen($121)|0);
                            $strchr = (($121) + ($strlen)|0);
                            HEAP32[$11>>2] = $strchr;
                            break;
                        }
                        case 86: case 79:  {
                        $122 = HEAP32[$12>>2]|0;
                        $123 = HEAP32[$1>>2]|0;
                        $124 = (($123) + (($122*20)|0)|0);
                        $125 = ($122|0)<(0);
                        if ($125) {
                            __Z19append_build_stringP15Clp_BuildStringPKci($bs,5826,-1);
                            break L6;
                        }
                        $126 = HEAP8[$13>>0]|0;
                        $127 = ($126<<24>>24)==(0);
                        do {
                            if ($127) {
                                $151 = HEAP8[$14>>0]|0;
                                $152 = ($151<<24>>24)==(0);
                                __Z19append_build_stringP15Clp_BuildStringPKci($bs,$15,-1);
                                if ($152) {
                                    $159 = HEAP32[$124>>2]|0;
                                    $160 = HEAP32[$16>>2]|0;
                                    $161 = (((($160) + (($122*12)|0)|0)) + 2|0);
                                    $162 = HEAP8[$161>>0]|0;
                                    $163 = $162&255;
                                    $164 = (($159) + ($163)|0);
                                    __Z19append_build_stringP15Clp_BuildStringPKci($bs,$164,-1);
                                    break;
                                } else {
                                    __Z19append_build_stringP15Clp_BuildStringPKci($bs,5574,3);
                                    $153 = HEAP32[$124>>2]|0;
                                    $154 = HEAP32[$17>>2]|0;
                                    $155 = (((($154) + (($122*12)|0)|0)) + 2|0);
                                    $156 = HEAP8[$155>>0]|0;
                                    $157 = $156&255;
                                    $158 = (($153) + ($157)|0);
                                    __Z19append_build_stringP15Clp_BuildStringPKci($bs,$158,-1);
                                    break;
                                }
                            } else {
                                __Z19append_build_stringP15Clp_BuildStringPKci($bs,$22,-1);
                                $128 = HEAP32[$23>>2]|0;
                                $129 = HEAP32[$24>>2]|0;
                                $130 = $128;
                                $131 = $129;
                                $132 = (($130) - ($131))|0;
                                $133 = ($132|0)>(4);
                                if (!($133)) {
                                    $134 = HEAP32[$bs>>2]|0;
                                    $135 = $134;
                                    $136 = (($131) + 5)|0;
                                    $137 = (($136) - ($135))|0;
                                    $138 = (__Z17build_string_growP15Clp_BuildStringj($bs,$137)|0);
                                    $139 = ($138|0)==(0);
                                    if ($139) {
                                        break;
                                    }
                                }
                                $140 = HEAP32[$25>>2]|0;
                                $141 = ($140|0)==(0);
                                if ($141) {
                                    $146 = (((($123) + (($122*20)|0)|0)) + 4|0);
                                    $147 = HEAP32[$146>>2]|0;
                                    $148 = $147&255;
                                    $149 = HEAP32[$24>>2]|0;
                                    $150 = ((($149)) + 1|0);
                                    HEAP32[$24>>2] = $150;
                                    HEAP8[$149>>0] = $148;
                                    break;
                                } else {
                                    $142 = HEAP32[$24>>2]|0;
                                    $143 = (((($123) + (($122*20)|0)|0)) + 4|0);
                                    $144 = HEAP32[$143>>2]|0;
                                    $145 = (__Z11encode_utf8Pcii($142,5,$144)|0);
                                    HEAP32[$24>>2] = $145;
                                    break;
                                }
                            }
                        } while(0);
                        $165 = HEAP32[$18>>2]|0;
                        $166 = ($165|0)==(0);
                        if (!($166)) {
                            $167 = HEAP8[$33>>0]|0;
                            $168 = ($167<<24>>24)==(86);
                            if ($168) {
                                $169 = HEAP8[$19>>0]|0;
                                $170 = ($169<<24>>24)==(0);
                                do {
                                    if ($170) {
                                        label = 40;
                                    } else {
                                        $171 = HEAP32[$21>>2]|0;
                                        $172 = (($171) + (($122*12)|0)|0);
                                        $173 = HEAP16[$172>>1]|0;
                                        $174 = $173 & 8;
                                        $175 = ($174<<16>>16)==(0);
                                        if ($175) {
                                            __Z19append_build_stringP15Clp_BuildStringPKci($bs,6687,1);
                                            break;
                                        } else {
                                            $$pr = HEAP8[$19>>0]|0;
                                            $176 = ($$pr<<24>>24)==(0);
                                            if ($176) {
                                                label = 40;
                                                break;
                                            } else {
                                                break;
                                            }
                                        }
                                    }
                                } while(0);
                                if ((label|0) == 40) {
                                    label = 0;
                                    __Z19append_build_stringP15Clp_BuildStringPKci($bs,6689,1);
                                }
                                $177 = HEAP32[$20>>2]|0;
                                __Z19append_build_stringP15Clp_BuildStringPKci($bs,$177,-1);
                            }
                        }
                        break;
                    }
                        case 37:  {
                            $178 = HEAP32[$26>>2]|0;
                            $179 = HEAP32[$27>>2]|0;
                            $180 = $178;
                            $181 = $179;
                            $182 = (($180) - ($181))|0;
                            $183 = ($182|0)>(0);
                            if (!($183)) {
                                $184 = HEAP32[$bs>>2]|0;
                                $185 = $184;
                                $186 = (($181) + 1)|0;
                                $187 = (($186) - ($185))|0;
                                $188 = (__Z17build_string_growP15Clp_BuildStringj($bs,$187)|0);
                                $189 = ($188|0)==(0);
                                if ($189) {
                                    break L6;
                                }
                            }
                            $190 = HEAP32[$27>>2]|0;
                            $191 = ((($190)) + 1|0);
                            HEAP32[$27>>2] = $191;
                            HEAP8[$190>>0] = 37;
                            break;
                        }
                        case 60:  {
                            $192 = HEAP32[$28>>2]|0;
                            $193 = ($192|0)!=(0);
                            $194 = $193 ? 6691 : 6695;
                            __Z19append_build_stringP15Clp_BuildStringPKci($bs,$194,-1);
                            break;
                        }
                        case 62: case 44:  {
                        $195 = HEAP32[$29>>2]|0;
                        $196 = ($195|0)!=(0);
                        $197 = $196 ? 6697 : 6695;
                        __Z19append_build_stringP15Clp_BuildStringPKci($bs,$197,-1);
                        break;
                    }
                        default: {
                            $198 = HEAP32[$4>>2]|0;
                            $199 = HEAP32[$5>>2]|0;
                            $200 = $198;
                            $201 = $199;
                            $202 = (($200) - ($201))|0;
                            $203 = ($202|0)>(1);
                            if (!($203)) {
                                $204 = HEAP32[$bs>>2]|0;
                                $205 = $204;
                                $206 = (($201) + 2)|0;
                                $207 = (($206) - ($205))|0;
                                $208 = (__Z17build_string_growP15Clp_BuildStringj($bs,$207)|0);
                                $209 = ($208|0)==(0);
                                if ($209) {
                                    break L6;
                                }
                            }
                            $210 = HEAP32[$5>>2]|0;
                            $211 = ((($210)) + 1|0);
                            HEAP32[$5>>2] = $211;
                            HEAP8[$210>>0] = 37;
                            $212 = HEAP8[$33>>0]|0;
                            $213 = HEAP32[$5>>2]|0;
                            $214 = ((($213)) + 1|0);
                            HEAP32[$5>>2] = $214;
                            HEAP8[$213>>0] = $212;
                        }
                    }
                } while(0);
                do {
                    if ((label|0) == 9) {
                        label = 0;
                        $64 = HEAP32[$7>>2]|0;
                        $65 = HEAP32[$8>>2]|0;
                        $66 = $64;
                        $67 = $65;
                        $68 = (($66) - ($67))|0;
                        $69 = ($68|0)>(3);
                        if (!($69)) {
                            $70 = HEAP32[$bs>>2]|0;
                            $71 = $70;
                            $72 = (($67) + 4)|0;
                            $73 = (($72) - ($71))|0;
                            $74 = (__Z17build_string_growP15Clp_BuildStringj($bs,$73)|0);
                            $75 = ($74|0)==(0);
                            if ($75) {
                                break;
                            }
                        }
                        $c$0$off = (($c$0) + -32)|0;
                        $76 = ($c$0$off>>>0)<(95);
                        if ($76) {
                            $77 = $c$0&255;
                            $78 = HEAP32[$8>>2]|0;
                            $79 = ((($78)) + 1|0);
                            HEAP32[$8>>2] = $79;
                            HEAP8[$78>>0] = $77;
                            break;
                        }
                        $80 = ($c$0|0)<(32);
                        if ($80) {
                            $81 = HEAP32[$8>>2]|0;
                            $82 = ((($81)) + 1|0);
                            HEAP32[$8>>2] = $82;
                            HEAP8[$81>>0] = 94;
                            $83 = (($c$0) + 64)|0;
                            $84 = $83&255;
                            $85 = HEAP32[$8>>2]|0;
                            $86 = ((($85)) + 1|0);
                            HEAP32[$8>>2] = $86;
                            HEAP8[$85>>0] = $84;
                            break;
                        }
                        $87 = HEAP32[$9>>2]|0;
                        $88 = ($87|0)!=(0);
                        $c$0$off8 = (($c$0) + -127)|0;
                        $89 = ($c$0$off8>>>0)<(1113985);
                        $90 = $89 & $88;
                        if ($90) {
                            $91 = HEAP32[$8>>2]|0;
                            $92 = (__Z11encode_utf8Pcii($91,4,$c$0)|0);
                            HEAP32[$8>>2] = $92;
                            break;
                        }
                        $93 = ($c$0$off8>>>0)<(129);
                        $94 = HEAP32[$8>>2]|0;
                        if ($93) {
                            $95 = $c$0 & 255;
                            HEAP32[$vararg_buffer>>2] = $95;
                            (_sprintf($94,19281,$vararg_buffer)|0);
                            $96 = HEAP32[$8>>2]|0;
                            $97 = ((($96)) + 4|0);
                            HEAP32[$8>>2] = $97;
                            break;
                        } else {
                            $98 = ((($94)) + 1|0);
                            HEAP32[$8>>2] = $98;
                            HEAP8[$94>>0] = 92;
                            $99 = HEAP32[$8>>2]|0;
                            $100 = ((($99)) + 1|0);
                            HEAP32[$8>>2] = $100;
                            HEAP8[$99>>0] = 63;
                            break;
                        }
                    }
                } while(0);
                $215 = ((($percent$016)) + 2|0);
                $216 = (_strchr($215,37)|0);
                $217 = ($216|0)==(0|0);
                if ($217) {
                    $$015 = $215;
                    label = 52;
                    break;
                } else {
                    $$017 = $215;$percent$016 = $216;
                }
            }
            if ((label|0) == 52) {
                __Z19append_build_stringP15Clp_BuildStringPKci($bs,$$015,-1);
                STACKTOP = sp;return;
            }
            __Z19append_build_stringP15Clp_BuildStringPKci($bs,6701,1);
            $$015 = $$017$lcssa;
            __Z19append_build_stringP15Clp_BuildStringPKci($bs,$$015,-1);
            STACKTOP = sp;return;
        }
        function __Z19append_build_stringP15Clp_BuildStringPKci($bs,$s,$l) {
            $bs = $bs|0;
            $s = $s|0;
            $l = $l|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($l|0)<(0);
            if ($0) {
                $1 = (_strlen($s)|0);
                $$0 = $1;
            } else {
                $$0 = $l;
            }
            $2 = ((($bs)) + 8|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ((($bs)) + 4|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = $3;
            $7 = $5;
            $8 = (($6) - ($7))|0;
            $9 = ($8|0)<($$0|0);
            if ($9) {
                $10 = HEAP32[$bs>>2]|0;
                $11 = $10;
                $12 = (($7) + ($$0))|0;
                $13 = (($12) - ($11))|0;
                $14 = (__Z17build_string_growP15Clp_BuildStringj($bs,$13)|0);
                $15 = ($14|0)==(0);
                if ($15) {
                    return;
                }
            }
            $16 = HEAP32[$4>>2]|0;
            _memcpy(($16|0),($s|0),($$0|0))|0;
            $17 = HEAP32[$4>>2]|0;
            $18 = (($17) + ($$0)|0);
            HEAP32[$4>>2] = $18;
            return;
        }
        function __Z8do_errorP10Clp_ParserP15Clp_BuildString($clp,$bs) {
            $clp = $clp|0;
            $bs = $bs|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (__Z17build_string_textP15Clp_BuildStringi($bs)|0);
            $1 = ((($clp)) + 60|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($2)) + 144|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)==(0|0);
            if ($5) {
                $6 = HEAP32[3472>>2]|0;
                (_fputs($0,$6)|0);
                return;
            } else {
                FUNCTION_TABLE_vii[$4 & 7]($clp,$0);
                return;
            }
        }
        function __Z20build_string_cleanupP15Clp_BuildString($bs) {
            $bs = $bs|0;
            var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$bs>>2]|0;
            $1 = ((($bs)) + 12|0);
            $2 = ($0|0)==($1|0);
            if ($2) {
                return;
            }
            _free($0);
            return;
        }
        function _Clp_vsnprintf($clp,$str,$size,$format,$val) {
            $clp = $clp|0;
            $str = $str|0;
            $size = $size|0;
            $format = $format|0;
            $val = $val|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
            var $bs = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 272|0;
            $bs = sp;
            __Z17build_string_initP15Clp_BuildStringP10Clp_Parser($bs,0);
            __Z13Clp_vbsprintfP10Clp_ParserP15Clp_BuildStringPKcPi($clp,$bs,$format,$val);
            $0 = ((($bs)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = HEAP32[$bs>>2]|0;
            $3 = $1;
            $4 = $2;
            $5 = (($3) - ($4))|0;
            $6 = ($5>>>0)<($size>>>0);
            if ($6) {
                _memcpy(($str|0),($2|0),($5|0))|0;
                $7 = HEAP32[$0>>2]|0;
                $8 = HEAP32[$bs>>2]|0;
                $9 = $7;
                $10 = $8;
                $11 = (($9) - ($10))|0;
                $12 = (($str) + ($11)|0);
                HEAP8[$12>>0] = 0;
            } else {
                $13 = (($size) + -1)|0;
                _memcpy(($str|0),($2|0),($13|0))|0;
                $14 = (($str) + ($13)|0);
                HEAP8[$14>>0] = 0;
            }
            __Z20build_string_cleanupP15Clp_BuildString($bs);
            $15 = HEAP32[$0>>2]|0;
            $16 = HEAP32[$bs>>2]|0;
            $17 = $15;
            $18 = $16;
            $19 = (($17) - ($18))|0;
            STACKTOP = sp;return ($19|0);
        }
        function _Clp_CurOptionNameBuf($clp,$buf,$len) {
            $clp = $clp|0;
            $buf = $buf|0;
            $len = $len|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $7 = 0, $8 = 0, $9 = 0, $pos$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 152|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($3|0)<(0);
            do {
                if ($4) {
                    $5 = (__Z11copy_stringPciiPKc($buf,$len,0,5826)|0);
                    $pos$0 = $5;
                } else {
                    $6 = ((($1)) + 159|0);
                    $7 = HEAP8[$6>>0]|0;
                    $8 = ($7<<24>>24)==(0);
                    if ($8) {
                        $32 = ((($1)) + 160|0);
                        $33 = HEAP8[$32>>0]|0;
                        $34 = ($33<<24>>24)==(0);
                        $35 = ((($1)) + 128|0);
                        $36 = (__Z11copy_stringPciiPKc($buf,$len,0,$35)|0);
                        if ($34) {
                            $50 = HEAP32[$1>>2]|0;
                            $51 = (($50) + (($3*20)|0)|0);
                            $52 = HEAP32[$51>>2]|0;
                            $53 = ((($1)) + 4|0);
                            $54 = HEAP32[$53>>2]|0;
                            $55 = (((($54) + (($3*12)|0)|0)) + 2|0);
                            $56 = HEAP8[$55>>0]|0;
                            $57 = $56&255;
                            $58 = (($52) + ($57)|0);
                            $59 = (__Z11copy_stringPciiPKc($buf,$len,$36,$58)|0);
                            $60 = (($59) + ($36))|0;
                            $pos$0 = $60;
                            break;
                        } else {
                            $37 = (__Z11copy_stringPciiPKc($buf,$len,$36,5574)|0);
                            $38 = (($37) + ($36))|0;
                            $39 = HEAP32[$1>>2]|0;
                            $40 = (($39) + (($3*20)|0)|0);
                            $41 = HEAP32[$40>>2]|0;
                            $42 = ((($1)) + 4|0);
                            $43 = HEAP32[$42>>2]|0;
                            $44 = (((($43) + (($3*12)|0)|0)) + 2|0);
                            $45 = HEAP8[$44>>0]|0;
                            $46 = $45&255;
                            $47 = (($41) + ($46)|0);
                            $48 = (__Z11copy_stringPciiPKc($buf,$len,$38,$47)|0);
                            $49 = (($48) + ($38))|0;
                            $pos$0 = $49;
                            break;
                        }
                    }
                    $9 = ((($1)) + 128|0);
                    $10 = (__Z11copy_stringPciiPKc($buf,$len,0,$9)|0);
                    $11 = ((($1)) + 124|0);
                    $12 = HEAP32[$11>>2]|0;
                    $13 = ($12|0)==(0);
                    if (!($13)) {
                        $14 = (($buf) + ($10)|0);
                        $15 = (($len) + -1)|0;
                        $16 = (($15) - ($10))|0;
                        $17 = HEAP32[$1>>2]|0;
                        $18 = (((($17) + (($3*20)|0)|0)) + 4|0);
                        $19 = HEAP32[$18>>2]|0;
                        $20 = (__Z11encode_utf8Pcii($14,$16,$19)|0);
                        $21 = $20;
                        $22 = $buf;
                        $23 = (($21) - ($22))|0;
                        $pos$0 = $23;
                        break;
                    }
                    $24 = (($len) + -1)|0;
                    $25 = ($10|0)<($24|0);
                    if ($25) {
                        $26 = HEAP32[$1>>2]|0;
                        $27 = (((($26) + (($3*20)|0)|0)) + 4|0);
                        $28 = HEAP32[$27>>2]|0;
                        $29 = $28&255;
                        $30 = (($10) + 1)|0;
                        $31 = (($buf) + ($10)|0);
                        HEAP8[$31>>0] = $29;
                        $pos$0 = $30;
                    } else {
                        $pos$0 = $10;
                    }
                }
            } while(0);
            $61 = ($pos$0|0)<($len|0);
            if (!($61)) {
                return ($pos$0|0);
            }
            $62 = (($buf) + ($pos$0)|0);
            HEAP8[$62>>0] = 0;
            return ($pos$0|0);
        }
        function __Z11copy_stringPciiPKc($buf,$buflen,$bufpos,$what) {
            $buf = $buf|0;
            $buflen = $buflen|0;
            $bufpos = $bufpos|0;
            $what = $what|0;
            var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_strlen($what)|0);
            $1 = (($buflen) - ($bufpos))|0;
            $2 = (($1) + -1)|0;
            $3 = ($0|0)>($2|0);
            $$ = $3 ? $2 : $0;
            $4 = (($buf) + ($bufpos)|0);
            _memcpy(($4|0),($what|0),($$|0))|0;
            return ($$|0);
        }
        function __Z11encode_utf8Pcii($s,$n,$c) {
            $s = $s|0;
            $n = $n|0;
            $c = $c|0;
            var $$0 = 0, $$010 = 0, $$1 = 0, $$2 = 0, $$sum11 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
            var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
            var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($c>>>0)>(1114111);
            $1 = $c & -2048;
            $2 = ($1|0)==(55296);
            $or$cond = $0 | $2;
            $$0 = $or$cond ? 65533 : $c;
            $3 = ($$0|0)<(128);
            $4 = ($n|0)>(0);
            $or$cond5 = $4 & $3;
            if ($or$cond5) {
                $5 = $$0&255;
                $6 = ((($s)) + 1|0);
                HEAP8[$s>>0] = $5;
                $$2 = $6;
                return ($$2|0);
            }
            $7 = ($$0|0)<(2048);
            $8 = ($n|0)>(1);
            $or$cond7 = $8 & $7;
            if ($or$cond7) {
                $9 = $$0 >>> 6;
                $10 = $9 | 192;
                $11 = $10&255;
                $12 = ((($s)) + 1|0);
                HEAP8[$s>>0] = $11;
                $$1 = $12;$38 = 1;
            } else {
                $13 = ($$0|0)<(65536);
                $14 = ($n|0)>(2);
                $or$cond9 = $14 & $13;
                do {
                    if ($or$cond9) {
                        $15 = $$0 >>> 12;
                        $16 = $15 | 224;
                        $17 = $16&255;
                        $18 = ((($s)) + 1|0);
                        HEAP8[$s>>0] = $17;
                        $$010 = $18;$34 = 2;
                    } else {
                        $19 = ($n|0)>(3);
                        if ($19) {
                            $20 = $$0 >>> 18;
                            $21 = $20 | 240;
                            $22 = $21&255;
                            $23 = ((($s)) + 1|0);
                            HEAP8[$s>>0] = $22;
                            $24 = $$0 >>> 12;
                            $25 = $24 & 63;
                            $26 = $25 | 128;
                            $27 = $26&255;
                            $28 = ((($s)) + 2|0);
                            HEAP8[$23>>0] = $27;
                            $$010 = $28;$34 = 3;
                            break;
                        } else {
                            $$2 = $s;
                            return ($$2|0);
                        }
                    }
                } while(0);
                $29 = $$0 >>> 6;
                $30 = $29 & 63;
                $31 = $30 | 128;
                $32 = $31&255;
                $33 = (($s) + ($34)|0);
                HEAP8[$$010>>0] = $32;
                $$1 = $33;$38 = $34;
            }
            $35 = $$0 & 63;
            $36 = $35 | 128;
            $37 = $36&255;
            $$sum11 = (($38) + 1)|0;
            $39 = (($s) + ($$sum11)|0);
            HEAP8[$$1>>0] = $37;
            $$2 = $39;
            return ($$2|0);
        }
        function _Clp_CurOptionName($clp) {
            $clp = $clp|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            (_Clp_CurOptionNameBuf($clp,5847,256)|0);
            return (5847|0);
        }
        function __Z15compare_optionsP10Clp_ParserPK10Clp_OptionP16Clp_InternOptionS3_S5_($clp,$o1,$io1,$o2,$io2) {
            $clp = $clp|0;
            $o1 = $o1|0;
            $io1 = $io1|0;
            $o2 = $o2|0;
            $io2 = $io2|0;
            var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
            var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
            var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
            var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
            var $or$cond5 = 0, $or$cond6 = 0, $or$cond8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $vararg_buffer4 = sp + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = HEAP16[$io1>>1]|0;
            $3 = $2 & 3;
            $4 = ($3<<16>>16)==(0);
            if ($4) {
                STACKTOP = sp;return;
            }
            $5 = HEAP16[$io2>>1]|0;
            $6 = $5 & 3;
            $7 = ($6<<16>>16)==(0);
            if ($7) {
                STACKTOP = sp;return;
            }
            $8 = $2 & 16;
            $9 = $8 & $5;
            $10 = ($9<<16>>16)==(0);
            if ($10) {
                $11 = HEAP16[$io1>>1]|0;
                $12 = $11 & 32;
                $13 = ($12<<16>>16)==(0);
                if ($13) {
                    STACKTOP = sp;return;
                }
                $14 = HEAP16[$io2>>1]|0;
                $15 = $14 & 32;
                $16 = ($15<<16>>16)==(0);
                if ($16) {
                    STACKTOP = sp;return;
                }
            }
            $17 = ((($o1)) + 8|0);
            $18 = HEAP32[$17>>2]|0;
            $19 = ((($o2)) + 8|0);
            $20 = HEAP32[$19>>2]|0;
            $21 = ($18|0)==($20|0);
            if ($21) {
                STACKTOP = sp;return;
            }
            $22 = HEAP16[$io1>>1]|0;
            $23 = $22 & 2;
            $24 = ($23<<16>>16)==(0);
            if ($24) {
                $29 = -1;
            } else {
                $25 = ((($o1)) + 4|0);
                $26 = HEAP32[$25>>2]|0;
                $29 = $26;
            }
            $27 = (__Z13long_as_shortPK12Clp_InternalPK10Clp_OptionP16Clp_InternOptioni($1,$o1,$io1,-2)|0);
            $28 = $27 & $29;
            $30 = ($28|0)>(-1);
            do {
                if ($30) {
                    $31 = HEAP16[$io2>>1]|0;
                    $32 = $31 & 2;
                    $33 = ($32<<16>>16)==(0);
                    if ($33) {
                        $38 = -3;
                    } else {
                        $34 = ((($o2)) + 4|0);
                        $35 = HEAP32[$34>>2]|0;
                        $38 = $35;
                    }
                    $36 = (__Z13long_as_shortPK12Clp_InternalPK10Clp_OptionP16Clp_InternOptioni($1,$o2,$io2,-4)|0);
                    $37 = ($29|0)==($38|0);
                    if ($37) {
                        HEAP32[$vararg_buffer>>2] = $29;
                        (_Clp_OptionError($clp,6103,$vararg_buffer)|0);
                        break;
                    }
                    $39 = ($29|0)==($36|0);
                    $40 = ($27|0)==($38|0);
                    $or$cond5 = $40 | $39;
                    $41 = ($27|0)==($36|0);
                    $or$cond6 = $41 | $or$cond5;
                    if ($or$cond6) {
                        $42 = HEAP16[$io1>>1]|0;
                        $43 = $42 & 16;
                        $44 = ($43<<16>>16)==(0);
                        if ($44) {
                            label = 18;
                        } else {
                            $45 = HEAP16[$io2>>1]|0;
                            $46 = $45 & 16;
                            $47 = ($46<<16>>16)==(0);
                            if ($47) {
                                label = 18;
                            } else {
                                $48 = ((($1)) + 116|0);
                                $49 = HEAP32[$48>>2]|0;
                                $50 = ($49|0)==(0);
                                if ($50) {
                                    label = 18;
                                }
                            }
                        }
                        if ((label|0) == 18) {
                            $51 = HEAP16[$io1>>1]|0;
                            $52 = $51 & 32;
                            $53 = ($52<<16>>16)==(0);
                            if ($53) {
                                break;
                            }
                            $54 = HEAP16[$io2>>1]|0;
                            $55 = $54 & 32;
                            $56 = ($55<<16>>16)==(0);
                            if ($56) {
                                break;
                            }
                            $57 = ((($1)) + 120|0);
                            $58 = HEAP32[$57>>2]|0;
                            $59 = ($58|0)==(0);
                            if ($59) {
                                break;
                            }
                        }
                        $60 = $39 ? $36 : $27;
                        HEAP32[$vararg_buffer1>>2] = $60;
                        (_Clp_OptionError($clp,6164,$vararg_buffer1)|0);
                    }
                }
            } while(0);
            $61 = HEAP16[$io1>>1]|0;
            $62 = $61 & 1;
            $63 = ($62<<16>>16)==(0);
            if ($63) {
                STACKTOP = sp;return;
            }
            $64 = HEAP32[$o1>>2]|0;
            $65 = ((($io1)) + 2|0);
            $66 = HEAP8[$65>>0]|0;
            $67 = $66&255;
            $68 = (($64) + ($67)|0);
            $69 = HEAP16[$io2>>1]|0;
            $70 = $69 & 2;
            $71 = ($70<<16>>16)!=(0);
            $72 = $61 & 64;
            $73 = ($72<<16>>16)==(0);
            $or$cond8 = $73 & $71;
            if ($or$cond8) {
                $74 = ((($1)) + 124|0);
                $75 = HEAP32[$74>>2]|0;
                $76 = ($75|0)==(0);
                if ($76) {
                    $78 = HEAP8[$68>>0]|0;
                    $79 = $78&255;
                    $82 = $79;
                } else {
                    $77 = (__Z11decode_utf8PKcPS0_($68,0)|0);
                    $82 = $77;
                }
                $80 = ((($o2)) + 4|0);
                $81 = HEAP32[$80>>2]|0;
                $83 = ($82|0)==($81|0);
                if ($83) {
                    $84 = HEAP16[$io1>>1]|0;
                    $85 = $84 & 16;
                    $86 = ($85<<16>>16)==(0);
                    if (!($86)) {
                        $87 = HEAP16[$io2>>1]|0;
                        $88 = $87 & 16;
                        $89 = ($88<<16>>16)==(0);
                        if (!($89)) {
                            $90 = $84 | 128;
                            HEAP16[$io1>>1] = $90;
                        }
                    }
                    $91 = HEAP16[$io1>>1]|0;
                    $92 = $91 & 32;
                    $93 = ($92<<16>>16)==(0);
                    if (!($93)) {
                        $94 = HEAP16[$io2>>1]|0;
                        $95 = $94 & 32;
                        $96 = ($95<<16>>16)==(0);
                        if (!($96)) {
                            $97 = $91 | 256;
                            HEAP16[$io1>>1] = $97;
                        }
                    }
                }
            }
            $98 = HEAP16[$io2>>1]|0;
            $99 = $98 & 1;
            $100 = ($99<<16>>16)==(0);
            if ($100) {
                STACKTOP = sp;return;
            }
            $101 = HEAP32[$o2>>2]|0;
            $102 = ((($io2)) + 2|0);
            $103 = HEAP8[$102>>0]|0;
            $104 = $103&255;
            $105 = (($101) + ($104)|0);
            $106 = (_strcmp($68,$105)|0);
            $107 = ($106|0)==(0);
            if ($107) {
                HEAP32[$vararg_buffer4>>2] = $68;
                (_Clp_OptionError($clp,6234,$vararg_buffer4)|0);
            }
            $108 = HEAP16[$io1>>1]|0;
            $109 = $108 & 16;
            $110 = ($109<<16>>16)==(0);
            do {
                if (!($110)) {
                    $111 = HEAP16[$io2>>1]|0;
                    $112 = $111 & 16;
                    $113 = ($112<<16>>16)==(0);
                    if (!($113)) {
                        $114 = ((($io1)) + 4|0);
                        $115 = HEAP32[$114>>2]|0;
                        $116 = (_strncmp($68,$105,$115)|0);
                        $117 = ($116|0)==(0);
                        if ($117) {
                            $118 = $108 & 64;
                            $119 = ($118<<16>>16)==(0);
                            if (!($119)) {
                                $120 = (_strlen($68)|0);
                                $121 = (_strncmp($68,$105,$120)|0);
                                $122 = ($121|0)==(0);
                                if ($122) {
                                    break;
                                }
                            }
                            $123 = (__Z19min_different_charsPKcS0_($68,$105)|0);
                            HEAP32[$114>>2] = $123;
                        }
                    }
                }
            } while(0);
            $124 = HEAP16[$io1>>1]|0;
            $125 = $124 & 32;
            $126 = ($125<<16>>16)==(0);
            if ($126) {
                STACKTOP = sp;return;
            }
            $127 = HEAP16[$io2>>1]|0;
            $128 = $127 & 32;
            $129 = ($128<<16>>16)==(0);
            if ($129) {
                STACKTOP = sp;return;
            }
            $130 = ((($io1)) + 8|0);
            $131 = HEAP32[$130>>2]|0;
            $132 = (_strncmp($68,$105,$131)|0);
            $133 = ($132|0)==(0);
            if (!($133)) {
                STACKTOP = sp;return;
            }
            $134 = $124 & 64;
            $135 = ($134<<16>>16)==(0);
            if (!($135)) {
                $136 = (_strlen($68)|0);
                $137 = (_strncmp($68,$105,$136)|0);
                $138 = ($137|0)==(0);
                if ($138) {
                    STACKTOP = sp;return;
                }
            }
            $139 = (__Z19min_different_charsPKcS0_($68,$105)|0);
            HEAP32[$130>>2] = $139;
            STACKTOP = sp;return;
        }
        function __Z13long_as_shortPK12Clp_InternalPK10Clp_OptionP16Clp_InternOptioni($cli,$o,$io,$failure) {
            $cli = $cli|0;
            $o = $o|0;
            $io = $io|0;
            $failure = $failure|0;
            var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $switch$split2D = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $name = sp;
            $0 = ((($cli)) + 116|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0);
            if ($2) {
                $3 = ((($cli)) + 120|0);
                $4 = HEAP32[$3>>2]|0;
                $5 = ($4|0)==(0);
                if (!($5)) {
                    label = 3;
                }
            } else {
                label = 3;
            }
            L3: do {
                if ((label|0) == 3) {
                    $6 = HEAP16[$io>>1]|0;
                    $7 = $6 & 1;
                    $8 = ($7<<16>>16)==(0);
                    if (!($8)) {
                        $9 = HEAP32[$o>>2]|0;
                        $10 = ((($io)) + 2|0);
                        $11 = HEAP8[$10>>0]|0;
                        $12 = $11&255;
                        $13 = (($9) + ($12)|0);
                        HEAP32[$name>>2] = $13;
                        $14 = ((($cli)) + 124|0);
                        $15 = HEAP32[$14>>2]|0;
                        $16 = ($15|0)==(0);
                        if ($16) {
                            $21 = HEAP8[$13>>0]|0;
                            $22 = ($21<<24>>24)==(0);
                            if ($22) {
                                break;
                            }
                            $$sum = (($12) + 1)|0;
                            $23 = (($9) + ($$sum)|0);
                            $24 = HEAP8[$23>>0]|0;
                            $25 = ($24<<24>>24)==(0);
                            if (!($25)) {
                                break;
                            }
                            $26 = $21&255;
                            $$0 = $26;
                            STACKTOP = sp;return ($$0|0);
                        }
                        $17 = (__Z11decode_utf8PKcPS0_($13,$name)|0);
                        $18 = HEAP32[$name>>2]|0;
                        $19 = HEAP8[$18>>0]|0;
                        $20 = ($19<<24>>24)==(0);
                        if ($20) {
                            $switch$split2D = ($17|0)<(65533);
                            if ($switch$split2D) {
                                switch ($17|0) {
                                    case 0:  {
                                        break L3;
                                        break;
                                    }
                                    default: {
                                        $$0 = $17;
                                    }
                                }
                                STACKTOP = sp;return ($$0|0);
                            } else {
                                switch ($17|0) {
                                    case 65533:  {
                                        break L3;
                                        break;
                                    }
                                    default: {
                                        $$0 = $17;
                                    }
                                }
                                STACKTOP = sp;return ($$0|0);
                            }
                        }
                    }
                }
            } while(0);
            $$0 = $failure;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z11decode_utf8PKcPS0_($s,$cp) {
            $s = $s|0;
            $cp = $cp|0;
            var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
            var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
            var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
            var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
            var $77 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond7 = 0, $s$pn = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP8[$s>>0]|0;
            $1 = ($0<<24>>24)>(-1);
            L1: do {
                if ($1) {
                    $2 = ((($s)) + 1|0);
                    $3 = $0 << 24 >> 24;
                    $$3 = $2;$c$2 = $3;
                } else {
                    $4 = ($0&255)<(194);
                    do {
                        if ($4) {
                            $s$pn = $s;
                        } else {
                            $5 = ($0&255)<(224);
                            if ($5) {
                                $6 = ((($s)) + 1|0);
                                $7 = HEAP8[$6>>0]|0;
                                $8 = $7 & -64;
                                $9 = ($8<<24>>24)==(-128);
                                if (!($9)) {
                                    $s$pn = $s;
                                    break;
                                }
                                $10 = $0&255;
                                $11 = $10 << 6;
                                $12 = $11 & 1984;
                                $$1 = $6;$68 = 1;$c$1 = $12;
                            } else {
                                $13 = ($0&255)<(240);
                                if ($13) {
                                    $14 = ((($s)) + 1|0);
                                    $15 = HEAP8[$14>>0]|0;
                                    $16 = $15 << 24 >> 24;
                                    $17 = $16 & 192;
                                    $18 = ($17|0)==(128);
                                    if (!($18)) {
                                        $s$pn = $s;
                                        break;
                                    }
                                    $19 = ((($s)) + 2|0);
                                    $20 = HEAP8[$19>>0]|0;
                                    $21 = $20 & -64;
                                    $22 = ($21<<24>>24)==(-128);
                                    if (!($22)) {
                                        $s$pn = $s;
                                        break;
                                    }
                                    $23 = ($0<<24>>24)==(-32);
                                    $24 = $16 & 224;
                                    $25 = ($24|0)==(128);
                                    $or$cond = $23 & $25;
                                    if ($or$cond) {
                                        $s$pn = $s;
                                        break;
                                    }
                                    $26 = ($0<<24>>24)==(-19);
                                    $27 = $15 & -32;
                                    $28 = ($27<<24>>24)==(-96);
                                    $or$cond6 = $26 & $28;
                                    if ($or$cond6) {
                                        $s$pn = $s;
                                        break;
                                    }
                                    $29 = HEAP8[$s>>0]|0;
                                    $30 = $29&255;
                                    $31 = $30 << 12;
                                    $32 = $31 & 61440;
                                    $$0 = $14;$62 = 2;$c$0 = $32;
                                } else {
                                    $33 = ($0&255)<(245);
                                    if (!($33)) {
                                        $s$pn = $s;
                                        break;
                                    }
                                    $34 = ((($s)) + 1|0);
                                    $35 = HEAP8[$34>>0]|0;
                                    $36 = $35 << 24 >> 24;
                                    $37 = $36 & 192;
                                    $38 = ($37|0)==(128);
                                    if (!($38)) {
                                        $s$pn = $s;
                                        break;
                                    }
                                    $39 = ((($s)) + 2|0);
                                    $40 = HEAP8[$39>>0]|0;
                                    $41 = $40 & -64;
                                    $42 = ($41<<24>>24)==(-128);
                                    if (!($42)) {
                                        $s$pn = $s;
                                        break;
                                    }
                                    $43 = ((($s)) + 3|0);
                                    $44 = HEAP8[$43>>0]|0;
                                    $45 = $44 & -64;
                                    $46 = ($45<<24>>24)==(-128);
                                    if (!($46)) {
                                        $s$pn = $s;
                                        break;
                                    }
                                    $47 = ($0<<24>>24)==(-16);
                                    $48 = $36 & 240;
                                    $49 = ($48|0)==(128);
                                    $or$cond4 = $47 & $49;
                                    if ($or$cond4) {
                                        $s$pn = $s;
                                        break;
                                    }
                                    $50 = ($0<<24>>24)==(-12);
                                    $51 = ($35&255)>(143);
                                    $or$cond7 = $50 & $51;
                                    if ($or$cond7) {
                                        $s$pn = $s;
                                        break;
                                    }
                                    $52 = HEAP8[$s>>0]|0;
                                    $53 = $52&255;
                                    $54 = $53 << 18;
                                    $55 = $54 & 1835008;
                                    $56 = HEAP8[$34>>0]|0;
                                    $57 = $56&255;
                                    $58 = $57 << 12;
                                    $59 = $58 & 258048;
                                    $60 = $59 | $55;
                                    $$0 = $39;$62 = 3;$c$0 = $60;
                                }
                                $61 = (($s) + ($62)|0);
                                $63 = HEAP8[$$0>>0]|0;
                                $64 = $63&255;
                                $65 = $64 << 6;
                                $66 = $65 & 4032;
                                $67 = (($66) + ($c$0))|0;
                                $$1 = $61;$68 = $62;$c$1 = $67;
                            }
                            $$sum1 = (($68) + 1)|0;
                            $69 = (($s) + ($$sum1)|0);
                            $70 = HEAP8[$$1>>0]|0;
                            $71 = $70&255;
                            $72 = $71 & 63;
                            $73 = (($72) + ($c$1))|0;
                            $$3 = $69;$c$2 = $73;
                            break L1;
                        }
                    } while(0);
                    while(1) {
                        $$2 = ((($s$pn)) + 1|0);
                        $74 = HEAP8[$$2>>0]|0;
                        $75 = $74 & -64;
                        $76 = ($75<<24>>24)==(-128);
                        if ($76) {
                            $s$pn = $$2;
                        } else {
                            $$3 = $$2;$c$2 = 65533;
                            break;
                        }
                    }
                }
            } while(0);
            $77 = ($cp|0)==(0|0);
            if ($77) {
                return ($c$2|0);
            }
            HEAP32[$cp>>2] = $$3;
            return ($c$2|0);
        }
        function __Z19min_different_charsPKcS0_($s,$t) {
            $s = $s|0;
            $t = $t|0;
            var $$ = 0, $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0;
            var $not$3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP8[$s>>0]|0;
            $1 = ($0<<24>>24)==(0);
            L1: do {
                if ($1) {
                    $$02$lcssa = $s;
                } else {
                    $$015 = $t;$$024 = $s;$3 = $0;
                    while(1) {
                        $2 = HEAP8[$$015>>0]|0;
                        $4 = ($3<<24>>24)==($2<<24>>24);
                        $not$ = ($2<<24>>24)!=(0);
                        $$ = $4 & $not$;
                        if (!($$)) {
                            $$02$lcssa = $$024;
                            break L1;
                        }
                        $5 = ((($$024)) + 1|0);
                        $6 = ((($$015)) + 1|0);
                        $7 = HEAP8[$5>>0]|0;
                        $8 = ($7<<24>>24)==(0);
                        if ($8) {
                            $$02$lcssa = $5;
                            break;
                        } else {
                            $$015 = $6;$$024 = $5;$3 = $7;
                        }
                    }
                }
            } while(0);
            $9 = HEAP8[$$02$lcssa>>0]|0;
            $10 = $$02$lcssa;
            $11 = $s;
            $12 = (($10) - ($11))|0;
            $not$3 = ($9<<24>>24)!=(0);
            $13 = $not$3&1;
            $$0 = (($12) + ($13))|0;
            return ($$0|0);
        }
        function __Z6argcmpPKcS0_ii($ref,$arg,$min_match,$fewer_dashes) {
            $ref = $ref|0;
            $arg = $arg|0;
            $min_match = $min_match|0;
            $fewer_dashes = $fewer_dashes|0;
            var $$0 = 0, $$03 = 0, $$03$lcssa = 0, $$03$lcssa30 = 0, $$03$ph = 0, $$0332 = 0, $$04$ph = 0, $$04$ph$lcssa = 0, $$04$ph34 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
            var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($min_match|0)>(0);
            if (!($0)) {
                ___assert_fail((6478|0),(5629|0),929,(6492|0));
                // unreachable;
            }
            $1 = ($fewer_dashes|0)==(0);
            $$03$ph = $ref;$$04$ph = $arg;
            L4: while(1) {
                $$03 = $$03$ph;
                L6: while(1) {
                    $2 = HEAP8[$$03>>0]|0;
                    $3 = ($2<<24>>24)==(0);
                    L8: do {
                        if (!($3)) {
                            $4 = HEAP8[$$04$ph>>0]|0;
                            switch ($4<<24>>24) {
                                case 61: case 0:  {
                                break L8;
                                break;
                            }
                                default: {
                                }
                            }
                            $5 = ($2<<24>>24)==($4<<24>>24);
                            if ($5) {
                                $$03$lcssa = $$03;
                                break L6;
                            }
                        }
                    } while(0);
                    if ($1) {
                        $$03$lcssa30 = $$03;$$04$ph$lcssa = $$04$ph;
                        label = 13;
                        break L4;
                    }
                    $8 = HEAP8[$$03>>0]|0;
                    $9 = ($8<<24>>24)==(45);
                    if (!($9)) {
                        $$03$lcssa30 = $$03;$$04$ph$lcssa = $$04$ph;
                        label = 13;
                        break L4;
                    }
                    $10 = ((($$03)) + 1|0);
                    $11 = HEAP8[$10>>0]|0;
                    $12 = ($11<<24>>24)==(0);
                    if ($12) {
                        $$03$lcssa30 = $$03;$$04$ph$lcssa = $$04$ph;
                        label = 13;
                        break L4;
                    }
                    $13 = HEAP8[$$04$ph>>0]|0;
                    $14 = ($11<<24>>24)==($13<<24>>24);
                    if ($14) {
                        $$03 = $10;
                    } else {
                        $$0332 = $$03;$$04$ph34 = $$04$ph;$15 = $13;
                        break L4;
                    }
                }
                $6 = ((($$03$lcssa)) + 1|0);
                $7 = ((($$04$ph)) + 1|0);
                $$03$ph = $6;$$04$ph = $7;
            }
            if ((label|0) == 13) {
                $$pr = HEAP8[$$04$ph$lcssa>>0]|0;
                $$0332 = $$03$lcssa30;$$04$ph34 = $$04$ph$lcssa;$15 = $$pr;
            }
            switch ($15<<24>>24) {
                case 61: case 0:  {
                break;
            }
                default: {
                    $$0 = 0;
                    return ($$0|0);
                }
            }
            $16 = $$0332;
            $17 = $ref;
            $18 = (($16) - ($17))|0;
            $19 = ($18|0)<($min_match|0);
            if ($19) {
                $$0 = -1;
                return ($$0|0);
            }
            $20 = $$04$ph34;
            $21 = $arg;
            $22 = (($20) - ($21))|0;
            $$0 = $22;
            return ($$0|0);
        }
        function __Z15find_prefix_optP10Clp_ParserPKciPK10Clp_OptionPK16Clp_InternOptionPiS9_($clp,$arg,$nopt,$opt,$iopt,$ambiguous,$ambiguous_values) {
            $clp = $clp|0;
            $arg = $arg|0;
            $nopt = $nopt|0;
            $opt = $opt|0;
            $iopt = $iopt|0;
            $ambiguous = $ambiguous|0;
            $ambiguous_values = $ambiguous_values|0;
            var $$0 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fewer_dashes$0 = 0, $i$05 = 0, $lmm$0 = 0, $or$cond = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$ambiguous>>2]|0;
            $1 = ($clp|0)!=(0|0);
            if ($1) {
                $2 = ((($clp)) + 4|0);
                $3 = HEAP32[$2>>2]|0;
                $4 = ($3|0)!=(0);
                $5 = ((($clp)) + 60|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = (__Z16clp_utf8_charlenPK12Clp_InternalPKc($6,$arg)|0);
                $10 = $4;$13 = $7;
            } else {
                $10 = 0;$13 = 1;
            }
            $8 = ($nopt|0)>(0);
            $9 = ((($clp)) + 60|0);
            $11 = $10 ? 256 : 128;
            $12 = (($13) + 1)|0;
            $fewer_dashes$0 = 0;
            L4: while(1) {
                if ($8) {
                    $i$05 = 0;
                    while(1) {
                        $14 = (($iopt) + (($i$05*12)|0)|0);
                        $15 = HEAP16[$14>>1]|0;
                        $16 = $15 & 1;
                        $17 = ($16<<16>>16)==(0);
                        do {
                            if (!($17)) {
                                if ($10) {
                                    $18 = $15 & 32;
                                    $19 = ($18<<16>>16)==(0);
                                    if ($19) {
                                        break;
                                    }
                                } else {
                                    $20 = $15 & 16;
                                    $21 = ($20<<16>>16)==(0);
                                    if ($21) {
                                        break;
                                    }
                                }
                                $22 = (((($iopt) + (($i$05*12)|0)|0)) + 8|0);
                                $23 = (((($iopt) + (($i$05*12)|0)|0)) + 4|0);
                                $$in = $10 ? $22 : $23;
                                $24 = HEAP32[$$in>>2]|0;
                                if ($1) {
                                    $25 = HEAP32[$9>>2]|0;
                                    $26 = ((($25)) + 158|0);
                                    $27 = HEAP8[$26>>0]|0;
                                    $28 = ($27<<24>>24)==(0);
                                    if ($28) {
                                        $lmm$0 = $24;
                                    } else {
                                        $29 = HEAP16[$14>>1]|0;
                                        $30 = $29 & $11;
                                        $31 = ($30<<16>>16)==(0);
                                        if ($31) {
                                            $lmm$0 = $24;
                                        } else {
                                            $32 = ($13|0)>=($24|0);
                                            $33 = $32 ? $12 : $24;
                                            $lmm$0 = $33;
                                        }
                                    }
                                } else {
                                    $lmm$0 = $24;
                                }
                                $34 = (($opt) + (($i$05*20)|0)|0);
                                $35 = HEAP32[$34>>2]|0;
                                $36 = (((($iopt) + (($i$05*12)|0)|0)) + 2|0);
                                $37 = HEAP8[$36>>0]|0;
                                $38 = $37&255;
                                $39 = (($35) + ($38)|0);
                                $40 = (__Z6argcmpPKcS0_ii($39,$arg,$lmm$0,$fewer_dashes$0)|0);
                                $41 = ($40|0)>(0);
                                if ($41) {
                                    $$0 = $i$05;
                                    label = 20;
                                    break L4;
                                }
                                $42 = ($40|0)<(0);
                                if ($42) {
                                    $43 = HEAP32[$ambiguous>>2]|0;
                                    $44 = ($43|0)<(4);
                                    if ($44) {
                                        $45 = (($ambiguous_values) + ($43<<2)|0);
                                        HEAP32[$45>>2] = $i$05;
                                    }
                                    $46 = HEAP32[$ambiguous>>2]|0;
                                    $47 = (($46) + 1)|0;
                                    HEAP32[$ambiguous>>2] = $47;
                                }
                            }
                        } while(0);
                        $48 = (($i$05) + 1)|0;
                        $49 = ($48|0)<($nopt|0);
                        if ($49) {
                            $i$05 = $48;
                        } else {
                            break;
                        }
                    }
                }
                $50 = HEAP32[$ambiguous>>2]|0;
                $51 = ($50|0)!=($0|0);
                $52 = ($fewer_dashes$0|0)!=(0);
                $or$cond = $52 | $51;
                if ($or$cond) {
                    $$0 = -1;
                    label = 20;
                    break;
                } else {
                    $fewer_dashes$0 = 1;
                }
            }
            if ((label|0) == 20) {
                return ($$0|0);
            }
            return (0)|0;
        }
        function __Z10get_oclassP10Clp_ParserPKcPi($clp,$text,$ocharskip) {
            $clp = $clp|0;
            $text = $text|0;
            $ocharskip = $ocharskip|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $s = 0, $storemerge = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $s = sp;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 124|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($3|0)==(0);
            if ($4) {
                $10 = HEAP8[$text>>0]|0;
                $11 = $10&255;
                $c$0 = $11;$storemerge = 1;
            } else {
                $5 = (__Z11decode_utf8PKcPS0_($text,$s)|0);
                $6 = HEAP32[$s>>2]|0;
                $7 = $6;
                $8 = $text;
                $9 = (($7) - ($8))|0;
                $c$0 = $5;$storemerge = $9;
            }
            HEAP32[$ocharskip>>2] = $storemerge;
            $12 = (_Clp_OptionChar($clp,$c$0)|0);
            STACKTOP = sp;return ($12|0);
        }
        function __Z15set_option_textP12Clp_InternalPKci($cli,$text,$n_option_chars) {
            $cli = $cli|0;
            $text = $text|0;
            $n_option_chars = $n_option_chars|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($n_option_chars|0)<(5);
            if ($0) {
                $1 = ((($cli)) + 128|0);
                _memcpy(($1|0),($text|0),($n_option_chars|0))|0;
                $2 = (((($cli)) + 128|0) + ($n_option_chars)|0);
                HEAP8[$2>>0] = 0;
                $3 = (($text) + ($n_option_chars)|0);
                $4 = ((($cli)) + 136|0);
                HEAP32[$4>>2] = $3;
                return;
            } else {
                ___assert_fail((6565|0),(5629|0),1547,(6602|0));
                // unreachable;
            }
        }
        function __Z12utf8_charlenPKc($s) {
            $s = $s|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $sout = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $sout = sp;
            (__Z11decode_utf8PKcPS0_($s,$sout)|0);
            $0 = HEAP32[$sout>>2]|0;
            $1 = $0;
            $2 = $s;
            $3 = (($1) - ($2))|0;
            STACKTOP = sp;return ($3|0);
        }
        function __Z27build_string_program_prefixP15Clp_BuildStringPK10Clp_Parser($bs,$clp) {
            $bs = $bs|0;
            $clp = $clp|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($clp)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 140|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($3|0)==(0|0);
            if ($4) {
                return;
            }
            $5 = HEAP8[$3>>0]|0;
            $6 = ($5<<24>>24)==(0);
            if ($6) {
                return;
            }
            __Z19append_build_stringP15Clp_BuildStringPKci($bs,$3,-1);
            __Z19append_build_stringP15Clp_BuildStringPKci($bs,6681,2);
            return;
        }
        function __Z17build_string_growP15Clp_BuildStringj($bs,$want) {
            $bs = $bs|0;
            $want = $want|0;
            var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ncap$0 = 0, $ncap$0$in = 0, $ncap$0$lcssa = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($bs)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = HEAP32[$bs>>2]|0;
            $3 = $1;
            $4 = $2;
            $5 = (($3) - ($4))|0;
            $6 = ($1|0)==(0|0);
            if ($6) {
                $$0 = 0;
                return ($$0|0);
            }
            $7 = ((($bs)) + 8|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = $8;
            $10 = (($9) - ($4))|0;
            $ncap$0$in = $10;
            while(1) {
                $ncap$0 = $ncap$0$in << 1;
                $11 = ($ncap$0>>>0)<($want>>>0);
                if ($11) {
                    $ncap$0$in = $ncap$0;
                } else {
                    $ncap$0$lcssa = $ncap$0;
                    break;
                }
            }
            $12 = HEAP32[$bs>>2]|0;
            $13 = ((($bs)) + 12|0);
            $14 = ($12|0)==($13|0);
            if ($14) {
                $15 = (_malloc($ncap$0$lcssa)|0);
                HEAP32[$bs>>2] = $15;
                $16 = ($15|0)==(0|0);
                if (!($16)) {
                    $17 = HEAP32[$0>>2]|0;
                    $18 = $17;
                    $19 = $13;
                    $20 = (($18) - ($19))|0;
                    _memcpy(($15|0),($13|0),($20|0))|0;
                    $$pr = HEAP32[$bs>>2]|0;
                    $22 = $$pr;
                    label = 8;
                }
            } else {
                $21 = (_realloc($12,$ncap$0$lcssa)|0);
                HEAP32[$bs>>2] = $21;
                $22 = $21;
                label = 8;
            }
            if ((label|0) == 8) {
                $23 = ($22|0)==(0|0);
                if (!($23)) {
                    $24 = (($22) + ($5)|0);
                    HEAP32[$0>>2] = $24;
                    $25 = HEAP32[$bs>>2]|0;
                    $26 = (($25) + ($ncap$0$lcssa)|0);
                    HEAP32[$7>>2] = $26;
                    $$0 = 1;
                    return ($$0|0);
                }
            }
            HEAP32[$7>>2] = 0;
            HEAP32[$0>>2] = 0;
            $$0 = 0;
            return ($$0|0);
        }
        function __Z17build_string_textP15Clp_BuildStringi($bs) {
            $bs = $bs|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($bs)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            if ($2) {
                $$0 = 6703;
                return ($$0|0);
            }
            HEAP8[$1>>0] = 0;
            $3 = HEAP32[$bs>>2]|0;
            $$0 = $3;
            return ($$0|0);
        }
        function _Gif_Realloc($p,$s,$n,$file,$line) {
            $p = $p|0;
            $s = $s|0;
            $n = $n|0;
            $file = $file|0;
            $line = $line|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = ($s|0)==(0);
            $1 = ($n|0)==(0);
            $or$cond = $0 | $1;
            if ($or$cond) {
                _free($p);
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $2 = ($s|0)==(1);
            $3 = ($n|0)==(1);
            $or$cond3 = $2 | $3;
            if (!($or$cond3)) {
                $4 = (4294967295 / ($n>>>0))&-1;
                $5 = ($4>>>0)<($s>>>0);
                if ($5) {
                    $11 = HEAP32[3472>>2]|0;
                    $12 = HEAP32[556>>2]|0;
                    HEAP32[$vararg_buffer1>>2] = $12;
                    (_fprintf($11,6800,$vararg_buffer1)|0);
                    _exit(1);
                    // unreachable;
                }
            }
            $6 = Math_imul($n, $s)|0;
            $7 = (_realloc($p,$6)|0);
            $8 = ($7|0)==(0|0);
            if ($8) {
                $9 = HEAP32[3472>>2]|0;
                $10 = HEAP32[556>>2]|0;
                HEAP32[$vararg_buffer>>2] = $10;
                (_fprintf($9,6770,$vararg_buffer)|0);
                _exit(1);
                // unreachable;
            } else {
                $$0 = $7;
                STACKTOP = sp;return ($$0|0);
            }
            return (0)|0;
        }
        function _Gif_NewStream() {
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Gif_Realloc(0,52,1,6848,24)|0);
            $1 = ($0|0)==(0|0);
            if ($1) {
                $$0 = 0;
                return ($$0|0);
            }
            $2 = ((($0)) + 16|0);
            ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
            HEAP16[$2>>1] = 256;
            $3 = ((($0)) + 20|0);
            HEAP16[$3>>1] = 0;
            $4 = ((($0)) + 18|0);
            HEAP16[$4>>1] = 0;
            $5 = ((($0)) + 24|0);
            HEAP32[$5>>2] = -1;
            $6 = ((($0)) + 28|0);
            ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;HEAP32[$6+16>>2]=0|0;HEAP32[$6+20>>2]=0|0;
            $$0 = $0;
            return ($$0|0);
        }
        function _Gif_NewImage() {
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Gif_Realloc(0,76,1,6848,46)|0);
            $1 = ($0|0)==(0|0);
            if ($1) {
                $$0 = 0;
                return ($$0|0);
            }
            $2 = ((($0)) + 24|0);
            HEAP32[$2>>2] = 0;
            $3 = ((($0)) + 20|0);
            ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
            HEAP16[$3>>1] = -1;
            $4 = ((($0)) + 60|0);
            HEAP32[$4>>2] = 0;
            $5 = ((($0)) + 28|0);
            HEAP32[$5>>2] = 0;
            $6 = ((($0)) + 32|0);
            HEAP32[$6>>2] = 0;
            $7 = ((($0)) + 36|0);
            HEAP32[$7>>2] = 0;
            $8 = ((($0)) + 40|0);
            HEAP32[$8>>2] = 1;
            $9 = ((($0)) + 44|0);
            $10 = ((($0)) + 64|0);
            HEAP32[$10>>2] = 0;
            $11 = ((($0)) + 68|0);
            HEAP32[$11>>2] = 0;
            $12 = ((($0)) + 72|0);
            HEAP32[$12>>2] = 0;
            ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;
            $$0 = $0;
            return ($$0|0);
        }
        function _Gif_NewFullColormap($count,$capacity) {
            $count = $count|0;
            $capacity = $capacity|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$capacity = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Gif_Realloc(0,20,1,6848,92)|0);
            $1 = ($0|0)==(0|0);
            $2 = ($capacity|0)<(1);
            $or$cond = $2 | $1;
            $3 = ($count|0)<(0);
            $or$cond3 = $3 | $or$cond;
            if ($or$cond3) {
                _free($0);
                $$0 = 0;
                return ($$0|0);
            }
            $4 = ($count|0)>($capacity|0);
            $count$capacity = $4 ? $count : $capacity;
            HEAP32[$0>>2] = $count;
            $5 = ((($0)) + 4|0);
            HEAP32[$5>>2] = $count$capacity;
            $6 = (_Gif_Realloc(0,8,$count$capacity,6848,101)|0);
            $7 = ((($0)) + 16|0);
            HEAP32[$7>>2] = $6;
            $8 = ((($0)) + 12|0);
            HEAP32[$8>>2] = 0;
            $9 = ((($0)) + 8|0);
            HEAP32[$9>>2] = 0;
            $10 = HEAP32[$7>>2]|0;
            $11 = ($10|0)==(0|0);
            if (!($11)) {
                $$0 = $0;
                return ($$0|0);
            }
            _free($0);
            $$0 = 0;
            return ($$0|0);
        }
        function _Gif_NewComment() {
            var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Gif_Realloc(0,16,1,6848,115)|0);
            $1 = ($0|0)==(0|0);
            if ($1) {
                $$0 = 0;
                return ($$0|0);
            }
            ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
            $$0 = $0;
            return ($$0|0);
        }
        function _Gif_NewExtension($kind,$appname,$applength) {
            $kind = $kind|0;
            $appname = $appname|0;
            $applength = $applength|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Gif_Realloc(0,40,1,6848,128)|0);
            $1 = ($0|0)==(0|0);
            if ($1) {
                $$0 = 0;
                return ($$0|0);
            }
            HEAP32[$0>>2] = $kind;
            $2 = ($appname|0)==(0|0);
            do {
                if ($2) {
                    $10 = ((($0)) + 4|0);
                    HEAP32[$10>>2] = 0;
                    $11 = ((($0)) + 8|0);
                    HEAP32[$11>>2] = 0;
                } else {
                    $3 = (($applength) + 1)|0;
                    $4 = (_Gif_Realloc(0,1,$3,6848,133)|0);
                    $5 = ((($0)) + 4|0);
                    HEAP32[$5>>2] = $4;
                    $6 = ($4|0)==(0|0);
                    if (!($6)) {
                        _memcpy(($4|0),($appname|0),($applength|0))|0;
                        $7 = HEAP32[$5>>2]|0;
                        $8 = (($7) + ($applength)|0);
                        HEAP8[$8>>0] = 0;
                        $9 = ((($0)) + 8|0);
                        HEAP32[$9>>2] = $applength;
                        break;
                    }
                    _free($0);
                    $$0 = 0;
                    return ($$0|0);
                }
            } while(0);
            $12 = ((($0)) + 12|0);
            HEAP32[$12>>2] = 0;
            $13 = ((($0)) + 20|0);
            ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;HEAP32[$13+12>>2]=0|0;HEAP32[$13+16>>2]=0|0;
            $$0 = $0;
            return ($$0|0);
        }
        function _Gif_CopyExtension($src) {
            $src = $src|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$src>>2]|0;
            $1 = ((($src)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($src)) + 8|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = (_Gif_NewExtension($0,$2,$4)|0);
            $6 = ($5|0)==(0|0);
            if ($6) {
                $$0 = 0;
                return ($$0|0);
            }
            $7 = ((($src)) + 12|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = ($8|0)==(0|0);
            do {
                if ($9) {
                    label = 4;
                } else {
                    $10 = ((($src)) + 36|0);
                    $11 = HEAP32[$10>>2]|0;
                    $12 = ($11|0)==(0|0);
                    if ($12) {
                        label = 4;
                    } else {
                        $18 = ((($src)) + 16|0);
                        $19 = HEAP32[$18>>2]|0;
                        $20 = (_Gif_Realloc(0,1,$19,6848,164)|0);
                        $21 = ((($5)) + 12|0);
                        HEAP32[$21>>2] = $20;
                        $22 = ($20|0)==(0|0);
                        if (!($22)) {
                            $23 = HEAP32[$7>>2]|0;
                            $24 = HEAP32[$18>>2]|0;
                            _memcpy(($20|0),($23|0),($24|0))|0;
                            $25 = HEAP32[$18>>2]|0;
                            $26 = ((($5)) + 16|0);
                            HEAP32[$26>>2] = $25;
                            $27 = ((($5)) + 36|0);
                            HEAP32[$27>>2] = 1;
                            break;
                        }
                        _Gif_DeleteExtension($5);
                        $$0 = 0;
                        return ($$0|0);
                    }
                }
            } while(0);
            if ((label|0) == 4) {
                $13 = HEAP32[$7>>2]|0;
                $14 = ((($5)) + 12|0);
                HEAP32[$14>>2] = $13;
                $15 = ((($src)) + 16|0);
                $16 = HEAP32[$15>>2]|0;
                $17 = ((($5)) + 16|0);
                HEAP32[$17>>2] = $16;
            }
            $28 = ((($src)) + 20|0);
            $29 = HEAP32[$28>>2]|0;
            $30 = ((($5)) + 20|0);
            HEAP32[$30>>2] = $29;
            $$0 = $5;
            return ($$0|0);
        }
        function _Gif_DeleteExtension($gfex) {
            $gfex = $gfex|0;
            var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $pprev$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($gfex|0)==(0|0);
            if ($0) {
                return;
            }
            $1 = ((($gfex)) + 12|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)==(0|0);
            if (!($3)) {
                $4 = ((($gfex)) + 36|0);
                $5 = HEAP32[$4>>2]|0;
                $6 = ($5|0)==(0|0);
                if (!($6)) {
                    FUNCTION_TABLE_vi[$5 & 7]($2);
                }
            }
            $7 = ((($gfex)) + 4|0);
            $8 = HEAP32[$7>>2]|0;
            _free($8);
            $9 = ((($gfex)) + 24|0);
            $10 = HEAP32[$9>>2]|0;
            $11 = ($10|0)==(0|0);
            if ($11) {
                $12 = ((($gfex)) + 28|0);
                $13 = HEAP32[$12>>2]|0;
                $14 = ($13|0)==(0|0);
                if (!($14)) {
                    label = 7;
                }
            } else {
                label = 7;
            }
            if ((label|0) == 7) {
                $15 = ((($gfex)) + 28|0);
                $16 = HEAP32[$15>>2]|0;
                $17 = ($16|0)==(0|0);
                if ($17) {
                    $19 = HEAP32[$9>>2]|0;
                    $20 = ((($19)) + 32|0);
                    $pprev$0 = $20;
                } else {
                    $18 = ((($16)) + 36|0);
                    $pprev$0 = $18;
                }
                while(1) {
                    $21 = HEAP32[$pprev$0>>2]|0;
                    $22 = ($21|0)==(0|0);
                    $23 = ($21|0)!=($gfex|0);
                    $not$ = $22 ^ 1;
                    $$ = $23 & $not$;
                    $24 = ((($21)) + 32|0);
                    if ($$) {
                        $pprev$0 = $24;
                    } else {
                        break;
                    }
                }
                if (!($22)) {
                    $25 = ((($gfex)) + 32|0);
                    $26 = HEAP32[$25>>2]|0;
                    HEAP32[$pprev$0>>2] = $26;
                }
            }
            _free($gfex);
            return;
        }
        function _Gif_CopyString($s) {
            $s = $s|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($s|0)==(0|0);
            if ($0) {
                $$0 = 0;
                return ($$0|0);
            }
            $1 = (_strlen($s)|0);
            $2 = (($1) + 1)|0;
            $3 = (_Gif_Realloc(0,1,$2,6848,186)|0);
            $4 = ($3|0)==(0|0);
            if ($4) {
                $$0 = 0;
                return ($$0|0);
            }
            _memcpy(($3|0),($s|0),($2|0))|0;
            $$0 = $3;
            return ($$0|0);
        }
        function _Gif_AddImage($gfs,$gfi) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfs)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($gfs)) + 8|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($1|0)<($3|0);
            if (!($4)) {
                $5 = ($3|0)==(0);
                $6 = $3 << 1;
                $storemerge = $5 ? 2 : $6;
                HEAP32[$2>>2] = $storemerge;
                $7 = HEAP32[$gfs>>2]|0;
                $8 = (_Gif_Realloc($7,4,$storemerge,6848,202)|0);
                HEAP32[$gfs>>2] = $8;
                $9 = ($8|0)==(0|0);
                if ($9) {
                    $$0 = 0;
                    return ($$0|0);
                }
            }
            $10 = HEAP32[$0>>2]|0;
            $11 = HEAP32[$gfs>>2]|0;
            $12 = (($11) + ($10<<2)|0);
            HEAP32[$12>>2] = $gfi;
            $13 = HEAP32[$0>>2]|0;
            $14 = (($13) + 1)|0;
            HEAP32[$0>>2] = $14;
            $15 = ((($gfi)) + 72|0);
            $16 = HEAP32[$15>>2]|0;
            $17 = (($16) + 1)|0;
            HEAP32[$15>>2] = $17;
            $$0 = 1;
            return ($$0|0);
        }
        function _Gif_RemoveImage($gfs,$inum) {
            $gfs = $gfs|0;
            $inum = $inum|0;
            var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$01 = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($inum|0)<(0);
            if ($0) {
                return;
            }
            $1 = ((($gfs)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)>($inum|0);
            if (!($3)) {
                return;
            }
            $4 = HEAP32[$gfs>>2]|0;
            $5 = (($4) + ($inum<<2)|0);
            $6 = HEAP32[$5>>2]|0;
            _Gif_DeleteImage($6);
            $7 = HEAP32[$1>>2]|0;
            $8 = (($7) + -1)|0;
            $9 = ($8|0)>($inum|0);
            if ($9) {
                $10 = HEAP32[$1>>2]|0;
                $11 = (($10) + -1)|0;
                $j$01 = $inum;
                while(1) {
                    $12 = (($j$01) + 1)|0;
                    $13 = HEAP32[$gfs>>2]|0;
                    $14 = (($13) + ($12<<2)|0);
                    $15 = HEAP32[$14>>2]|0;
                    $16 = (($13) + ($j$01<<2)|0);
                    HEAP32[$16>>2] = $15;
                    $17 = ($12|0)<($11|0);
                    if ($17) {
                        $j$01 = $12;
                    } else {
                        $$lcssa = $11;
                        break;
                    }
                }
            } else {
                $$lcssa = $8;
            }
            HEAP32[$1>>2] = $$lcssa;
            return;
        }
        function _Gif_DeleteImage($gfi) {
            $gfi = $gfi|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hook$0 = 0, $hook$01 = 0, $hook$02 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($gfi|0)==(0|0);
            if ($0) {
                return;
            }
            $1 = ((($gfi)) + 72|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = (($2) + -1)|0;
            HEAP32[$1>>2] = $3;
            $4 = ($2|0)>(1);
            if ($4) {
                return;
            }
            $hook$01 = HEAP32[396>>2]|0;
            $5 = ($hook$01|0)==(0|0);
            if (!($5)) {
                $hook$02 = $hook$01;
                while(1) {
                    $6 = HEAP32[$hook$02>>2]|0;
                    $7 = ($6|0)==(1);
                    if ($7) {
                        $8 = ((($hook$02)) + 4|0);
                        $9 = HEAP32[$8>>2]|0;
                        $10 = ((($hook$02)) + 8|0);
                        $11 = HEAP32[$10>>2]|0;
                        FUNCTION_TABLE_viii[$9 & 7](1,$gfi,$11);
                    }
                    $12 = ((($hook$02)) + 12|0);
                    $hook$0 = HEAP32[$12>>2]|0;
                    $13 = ($hook$0|0)==(0|0);
                    if ($13) {
                        break;
                    } else {
                        $hook$02 = $hook$0;
                    }
                }
            }
            $14 = ((($gfi)) + 28|0);
            $15 = HEAP32[$14>>2]|0;
            _free($15);
            $16 = ((($gfi)) + 32|0);
            $17 = HEAP32[$16>>2]|0;
            _Gif_DeleteComment($17);
            $18 = ((($gfi)) + 36|0);
            $19 = HEAP32[$18>>2]|0;
            $20 = ($19|0)==(0|0);
            if (!($20)) {
                $21 = $19;
                while(1) {
                    _Gif_DeleteExtension($21);
                    $22 = HEAP32[$18>>2]|0;
                    $23 = ($22|0)==(0|0);
                    if ($23) {
                        break;
                    } else {
                        $21 = $22;
                    }
                }
            }
            $24 = ((($gfi)) + 24|0);
            $25 = HEAP32[$24>>2]|0;
            _Gif_DeleteColormap($25);
            $26 = ((($gfi)) + 4|0);
            $27 = HEAP32[$26>>2]|0;
            $28 = ($27|0)==(0|0);
            if (!($28)) {
                $29 = ((($gfi)) + 40|0);
                $30 = HEAP32[$29>>2]|0;
                $31 = ($30|0)==(0|0);
                if (!($31)) {
                    FUNCTION_TABLE_vi[$30 & 7]($27);
                }
            }
            $32 = HEAP32[$gfi>>2]|0;
            _free($32);
            $33 = ((($gfi)) + 52|0);
            $34 = HEAP32[$33>>2]|0;
            $35 = ($34|0)==(0|0);
            if (!($35)) {
                $36 = ((($gfi)) + 56|0);
                $37 = HEAP32[$36>>2]|0;
                $38 = ($37|0)==(0|0);
                if (!($38)) {
                    FUNCTION_TABLE_vi[$37 & 7]($34);
                }
            }
            $39 = ((($gfi)) + 64|0);
            $40 = HEAP32[$39>>2]|0;
            $41 = ($40|0)==(0|0);
            if (!($41)) {
                $42 = ((($gfi)) + 68|0);
                $43 = HEAP32[$42>>2]|0;
                $44 = ($43|0)==(0|0);
                if (!($44)) {
                    FUNCTION_TABLE_vi[$43 & 7]($40);
                }
            }
            _free($gfi);
            return;
        }
        function _Gif_ImageColorBound($gfi) {
            $gfi = $gfi|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 52|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            if ($2) {
                $$0 = 256;
                return ($$0|0);
            }
            $3 = HEAP8[$1>>0]|0;
            $4 = $3&255;
            $5 = 1 << $4;
            $$0 = $5;
            return ($$0|0);
        }
        function _Gif_AddCommentTake($gfcom,$x,$xlen) {
            $gfcom = $gfcom|0;
            $x = $x|0;
            $xlen = $xlen|0;
            var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfcom)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($gfcom)) + 12|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($1|0)<($3|0);
            if (!($4)) {
                $5 = ($3|0)==(0);
                $6 = $3 << 1;
                $storemerge = $5 ? 2 : $6;
                HEAP32[$2>>2] = $storemerge;
                $7 = HEAP32[$gfcom>>2]|0;
                $8 = (_Gif_Realloc($7,4,$storemerge,6848,244)|0);
                HEAP32[$gfcom>>2] = $8;
                $9 = ((($gfcom)) + 4|0);
                $10 = HEAP32[$9>>2]|0;
                $11 = HEAP32[$2>>2]|0;
                $12 = (_Gif_Realloc($10,4,$11,6848,245)|0);
                HEAP32[$9>>2] = $12;
                $13 = HEAP32[$gfcom>>2]|0;
                $14 = ($13|0)==(0|0);
                $15 = ($12|0)==(0|0);
                $or$cond = $15 | $14;
                if ($or$cond) {
                    $$01 = 0;
                    return ($$01|0);
                }
            }
            $16 = ($xlen|0)<(0);
            if ($16) {
                $17 = (_strlen($x)|0);
                $$0 = $17;
            } else {
                $$0 = $xlen;
            }
            $18 = HEAP32[$0>>2]|0;
            $19 = HEAP32[$gfcom>>2]|0;
            $20 = (($19) + ($18<<2)|0);
            HEAP32[$20>>2] = $x;
            $21 = HEAP32[$0>>2]|0;
            $22 = ((($gfcom)) + 4|0);
            $23 = HEAP32[$22>>2]|0;
            $24 = (($23) + ($21<<2)|0);
            HEAP32[$24>>2] = $$0;
            $25 = HEAP32[$0>>2]|0;
            $26 = (($25) + 1)|0;
            HEAP32[$0>>2] = $26;
            $$01 = 1;
            return ($$01|0);
        }
        function _Gif_AddComment($gfcom,$x,$xlen) {
            $gfcom = $gfcom|0;
            $x = $x|0;
            $xlen = $xlen|0;
            var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($xlen|0)<(0);
            if ($0) {
                $1 = (_strlen($x)|0);
                $$01 = $1;
            } else {
                $$01 = $xlen;
            }
            $2 = (_Gif_Realloc(0,1,$$01,6848,264)|0);
            $3 = ($2|0)==(0|0);
            if ($3) {
                $$0 = 0;
                return ($$0|0);
            }
            _memcpy(($2|0),($x|0),($$01|0))|0;
            $4 = (_Gif_AddCommentTake($gfcom,$2,$$01)|0);
            $5 = ($4|0)==(0);
            if (!($5)) {
                $$0 = 1;
                return ($$0|0);
            }
            _free($2);
            $$0 = 0;
            return ($$0|0);
        }
        function _Gif_AddExtension($gfs,$gfi,$gfex) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $gfex = $gfex|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pprev$0 = 0, $pprev$0$lcssa = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfex)) + 24|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            if (!($2)) {
                $$0 = 0;
                return ($$0|0);
            }
            $3 = ((($gfex)) + 28|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)==(0|0);
            if (!($5)) {
                $$0 = 0;
                return ($$0|0);
            }
            $6 = ($gfi|0)!=(0|0);
            $7 = ((($gfi)) + 36|0);
            $8 = ((($gfs)) + 32|0);
            $9 = $6 ? $7 : $8;
            $pprev$0 = $9;
            while(1) {
                $10 = HEAP32[$pprev$0>>2]|0;
                $11 = ($10|0)==(0|0);
                $12 = ((($10)) + 32|0);
                if ($11) {
                    $pprev$0$lcssa = $pprev$0;
                    break;
                } else {
                    $pprev$0 = $12;
                }
            }
            HEAP32[$pprev$0$lcssa>>2] = $gfex;
            HEAP32[$0>>2] = $gfs;
            HEAP32[$3>>2] = $gfi;
            $13 = ((($gfex)) + 32|0);
            HEAP32[$13>>2] = 0;
            $$0 = 1;
            return ($$0|0);
        }
        function _Gif_ImageNumber($gfs,$gfi) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $or$cond = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($gfs|0)!=(0|0);
            $1 = ($gfi|0)!=(0|0);
            $or$cond = $0 & $1;
            if (!($or$cond)) {
                $$0 = -1;
                return ($$0|0);
            }
            $2 = ((($gfs)) + 4|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($3|0)==(0);
            if ($4) {
                $$0 = -1;
                return ($$0|0);
            }
            $5 = HEAP32[$gfs>>2]|0;
            $i$02 = 0;
            while(1) {
                $6 = (($5) + ($i$02<<2)|0);
                $7 = HEAP32[$6>>2]|0;
                $8 = ($7|0)==($gfi|0);
                if ($8) {
                    $$0 = $i$02;
                    label = 6;
                    break;
                }
                $9 = (($i$02) + 1)|0;
                $10 = HEAP32[$2>>2]|0;
                $11 = ($9|0)==($10|0);
                if ($11) {
                    $$0 = -1;
                    label = 6;
                    break;
                } else {
                    $i$02 = $9;
                }
            }
            if ((label|0) == 6) {
                return ($$0|0);
            }
            return (0)|0;
        }
        function _Gif_CalculateScreenSize($gfs,$force) {
            $gfs = $gfs|0;
            $force = $force|0;
            var $$screen_height$0 = 0, $$screen_width$0 = 0, $$screen_width$0$lcssa = 0, $$screen_width$08 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
            var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$011 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $screen_height$0$lcssa13 = 0, $screen_height$0$lcssa14 = 0, $screen_height$010 = 0, $screen_height$1 = 0, $screen_height$1$lcssa = 0;
            var $screen_height$2 = 0, $screen_width$09 = 0, $screen_width$2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfs)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)>(0);
            if ($2) {
                $3 = HEAP32[$gfs>>2]|0;
                $4 = HEAP32[$0>>2]|0;
                $i$011 = 0;$screen_height$010 = 0;$screen_width$09 = 0;
                while(1) {
                    $5 = (($3) + ($i$011<<2)|0);
                    $6 = HEAP32[$5>>2]|0;
                    $7 = ((($6)) + 12|0);
                    $8 = HEAP16[$7>>1]|0;
                    $9 = $8&65535;
                    $10 = ((($6)) + 8|0);
                    $11 = HEAP16[$10>>1]|0;
                    $12 = $11&65535;
                    $13 = (($12) + ($9))|0;
                    $14 = ($screen_width$09|0)<($13|0);
                    $$screen_width$0 = $14 ? $13 : $screen_width$09;
                    $15 = ((($6)) + 14|0);
                    $16 = HEAP16[$15>>1]|0;
                    $17 = $16&65535;
                    $18 = ((($6)) + 10|0);
                    $19 = HEAP16[$18>>1]|0;
                    $20 = $19&65535;
                    $21 = (($20) + ($17))|0;
                    $22 = ($screen_height$010|0)<($21|0);
                    $screen_height$1 = $22 ? $21 : $screen_height$010;
                    $23 = (($i$011) + 1)|0;
                    $24 = ($23|0)<($4|0);
                    if ($24) {
                        $i$011 = $23;$screen_height$010 = $screen_height$1;$screen_width$09 = $$screen_width$0;
                    } else {
                        $$screen_width$0$lcssa = $$screen_width$0;$screen_height$1$lcssa = $screen_height$1;
                        break;
                    }
                }
                $25 = ($$screen_width$0$lcssa|0)==(0);
                if ($25) {
                    $screen_height$0$lcssa14 = $screen_height$1$lcssa;
                    label = 5;
                } else {
                    $screen_height$0$lcssa13 = $screen_height$1$lcssa;$screen_width$2 = $$screen_width$0$lcssa;
                }
            } else {
                $screen_height$0$lcssa14 = 0;
                label = 5;
            }
            if ((label|0) == 5) {
                $26 = ((($gfs)) + 18|0);
                $27 = HEAP16[$26>>1]|0;
                $28 = ($27<<16>>16)==(0);
                $29 = ($force|0)!=(0);
                $or$cond = $29 | $28;
                $$screen_width$08 = $or$cond ? 640 : 0;
                $screen_height$0$lcssa13 = $screen_height$0$lcssa14;$screen_width$2 = $$screen_width$08;
            }
            $30 = ($screen_height$0$lcssa13|0)==(0);
            if ($30) {
                $31 = ((($gfs)) + 20|0);
                $32 = HEAP16[$31>>1]|0;
                $33 = ($32<<16>>16)==(0);
                $34 = ($force|0)!=(0);
                $or$cond3 = $34 | $33;
                $$screen_height$0 = $or$cond3 ? 480 : $screen_height$0$lcssa13;
                $screen_height$2 = $$screen_height$0;
            } else {
                $screen_height$2 = $screen_height$0$lcssa13;
            }
            $35 = ((($gfs)) + 18|0);
            $36 = HEAP16[$35>>1]|0;
            $37 = $36&65535;
            $38 = ($37|0)<($screen_width$2|0);
            $39 = ($force|0)!=(0);
            $or$cond5 = $39 | $38;
            if ($or$cond5) {
                $40 = $screen_width$2&65535;
                HEAP16[$35>>1] = $40;
            }
            $41 = ((($gfs)) + 20|0);
            $42 = HEAP16[$41>>1]|0;
            $43 = $42&65535;
            $44 = ($43|0)<($screen_height$2|0);
            $or$cond7 = $39 | $44;
            if (!($or$cond7)) {
                return;
            }
            $45 = $screen_height$2&65535;
            HEAP16[$41>>1] = $45;
            return;
        }
        function _Gif_CopyColormap($src) {
            $src = $src|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($src|0)==(0|0);
            if ($0) {
                $$0 = 0;
                return ($$0|0);
            }
            $1 = HEAP32[$src>>2]|0;
            $2 = ((($src)) + 4|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = (_Gif_NewFullColormap($1,$3)|0);
            $5 = ($4|0)==(0|0);
            if ($5) {
                $$0 = 0;
                return ($$0|0);
            }
            $6 = ((($4)) + 16|0);
            $7 = HEAP32[$6>>2]|0;
            $8 = ((($src)) + 16|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = HEAP32[$src>>2]|0;
            $11 = $10 << 3;
            _memcpy(($7|0),($9|0),($11|0))|0;
            $$0 = $4;
            return ($$0|0);
        }
        function _Gif_DeleteStream($gfs) {
            $gfs = $gfs|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hook$0 = 0, $hook$02 = 0, $hook$03 = 0, $i$06 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($gfs|0)==(0|0);
            if ($0) {
                return;
            }
            $1 = ((($gfs)) + 48|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = (($2) + -1)|0;
            HEAP32[$1>>2] = $3;
            $4 = ($2|0)>(1);
            if ($4) {
                return;
            }
            $5 = ((($gfs)) + 4|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = ($6|0)>(0);
            if ($7) {
                $i$06 = 0;
                while(1) {
                    $8 = HEAP32[$gfs>>2]|0;
                    $9 = (($8) + ($i$06<<2)|0);
                    $10 = HEAP32[$9>>2]|0;
                    _Gif_DeleteImage($10);
                    $11 = (($i$06) + 1)|0;
                    $12 = HEAP32[$5>>2]|0;
                    $13 = ($11|0)<($12|0);
                    if ($13) {
                        $i$06 = $11;
                    } else {
                        break;
                    }
                }
            }
            $14 = HEAP32[$gfs>>2]|0;
            _free($14);
            $15 = ((($gfs)) + 12|0);
            $16 = HEAP32[$15>>2]|0;
            _Gif_DeleteColormap($16);
            $17 = ((($gfs)) + 28|0);
            $18 = HEAP32[$17>>2]|0;
            _Gif_DeleteComment($18);
            $19 = ((($gfs)) + 32|0);
            $20 = HEAP32[$19>>2]|0;
            $21 = ($20|0)==(0|0);
            if (!($21)) {
                $23 = $20;
                while(1) {
                    _Gif_DeleteExtension($23);
                    $24 = HEAP32[$19>>2]|0;
                    $25 = ($24|0)==(0|0);
                    if ($25) {
                        break;
                    } else {
                        $23 = $24;
                    }
                }
            }
            $hook$02 = HEAP32[396>>2]|0;
            $22 = ($hook$02|0)==(0|0);
            if (!($22)) {
                $hook$03 = $hook$02;
                while(1) {
                    $26 = HEAP32[$hook$03>>2]|0;
                    $27 = ($26|0)==(0);
                    if ($27) {
                        $28 = ((($hook$03)) + 4|0);
                        $29 = HEAP32[$28>>2]|0;
                        $30 = ((($hook$03)) + 8|0);
                        $31 = HEAP32[$30>>2]|0;
                        FUNCTION_TABLE_viii[$29 & 7](0,$gfs,$31);
                    }
                    $32 = ((($hook$03)) + 12|0);
                    $hook$0 = HEAP32[$32>>2]|0;
                    $33 = ($hook$0|0)==(0|0);
                    if ($33) {
                        break;
                    } else {
                        $hook$03 = $hook$0;
                    }
                }
            }
            _free($gfs);
            return;
        }
        function _Gif_CopyImage($src) {
            $src = $src|0;
            var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
            var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
            var $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
            var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
            var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
            var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
            var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data$06 = 0, $gfex$08 = 0, $i$010 = 0, $i$17 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            $0 = ($src|0)==(0|0);
            if ($0) {
                $$0 = 0;
                return ($$0|0);
            }
            $1 = (_Gif_NewImage()|0);
            $2 = ($1|0)==(0|0);
            if ($2) {
                $$0 = 0;
                return ($$0|0);
            }
            $3 = ((($src)) + 28|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = (_Gif_CopyString($4)|0);
            $6 = ((($1)) + 28|0);
            HEAP32[$6>>2] = $5;
            $7 = ($5|0)==(0|0);
            if ($7) {
                $8 = HEAP32[$3>>2]|0;
                $9 = ($8|0)==(0|0);
                if ($9) {
                    label = 5;
                }
            } else {
                label = 5;
            }
            L9: do {
                if ((label|0) == 5) {
                    $10 = ((($src)) + 32|0);
                    $11 = HEAP32[$10>>2]|0;
                    $12 = ($11|0)==(0|0);
                    if (!($12)) {
                        $13 = (_Gif_NewComment()|0);
                        $14 = ((($1)) + 32|0);
                        HEAP32[$14>>2] = $13;
                        $15 = ($13|0)==(0|0);
                        if ($15) {
                            break;
                        }
                        $16 = HEAP32[$10>>2]|0;
                        $17 = ((($16)) + 8|0);
                        $18 = HEAP32[$17>>2]|0;
                        $19 = ($18|0)>(0);
                        if ($19) {
                            $27 = $16;$i$010 = 0;
                            while(1) {
                                $25 = HEAP32[$14>>2]|0;
                                $26 = HEAP32[$27>>2]|0;
                                $28 = (($26) + ($i$010<<2)|0);
                                $29 = HEAP32[$28>>2]|0;
                                $30 = ((($27)) + 4|0);
                                $31 = HEAP32[$30>>2]|0;
                                $32 = (($31) + ($i$010<<2)|0);
                                $33 = HEAP32[$32>>2]|0;
                                $34 = (_Gif_AddComment($25,$29,$33)|0);
                                $35 = ($34|0)==(0);
                                $23 = (($i$010) + 1)|0;
                                if ($35) {
                                    break L9;
                                }
                                $20 = HEAP32[$10>>2]|0;
                                $21 = ((($20)) + 8|0);
                                $22 = HEAP32[$21>>2]|0;
                                $24 = ($23|0)<($22|0);
                                if ($24) {
                                    $27 = $20;$i$010 = $23;
                                } else {
                                    break;
                                }
                            }
                        }
                    }
                    $36 = ((($src)) + 36|0);
                    $37 = HEAP32[$36>>2]|0;
                    $38 = ($37|0)==(0|0);
                    if (!($38)) {
                        $gfex$08 = $37;
                        while(1) {
                            $39 = (_Gif_CopyExtension($gfex$08)|0);
                            $40 = ($39|0)==(0|0);
                            if ($40) {
                                break L9;
                            }
                            (_Gif_AddExtension(0,$1,$39)|0);
                            $41 = ((($gfex$08)) + 32|0);
                            $42 = HEAP32[$41>>2]|0;
                            $43 = ($42|0)==(0|0);
                            if ($43) {
                                break;
                            } else {
                                $gfex$08 = $42;
                            }
                        }
                    }
                    $44 = ((($src)) + 24|0);
                    $45 = HEAP32[$44>>2]|0;
                    $46 = (_Gif_CopyColormap($45)|0);
                    $47 = ((($1)) + 24|0);
                    HEAP32[$47>>2] = $46;
                    $48 = ($46|0)==(0|0);
                    if ($48) {
                        $49 = HEAP32[$44>>2]|0;
                        $50 = ($49|0)==(0|0);
                        if (!($50)) {
                            break;
                        }
                    }
                    $51 = ((($src)) + 20|0);
                    $52 = HEAP16[$51>>1]|0;
                    $53 = ((($1)) + 20|0);
                    HEAP16[$53>>1] = $52;
                    $54 = ((($src)) + 16|0);
                    $55 = HEAP16[$54>>1]|0;
                    $56 = ((($1)) + 16|0);
                    HEAP16[$56>>1] = $55;
                    $57 = ((($src)) + 18|0);
                    $58 = HEAP8[$57>>0]|0;
                    $59 = ((($1)) + 18|0);
                    HEAP8[$59>>0] = $58;
                    $60 = ((($src)) + 12|0);
                    $61 = HEAP16[$60>>1]|0;
                    $62 = ((($1)) + 12|0);
                    HEAP16[$62>>1] = $61;
                    $63 = ((($src)) + 14|0);
                    $64 = HEAP16[$63>>1]|0;
                    $65 = ((($1)) + 14|0);
                    HEAP16[$65>>1] = $64;
                    $66 = ((($src)) + 8|0);
                    $67 = HEAP16[$66>>1]|0;
                    $68 = ((($1)) + 8|0);
                    HEAP16[$68>>1] = $67;
                    $69 = ((($src)) + 10|0);
                    $70 = HEAP16[$69>>1]|0;
                    $71 = ((($1)) + 10|0);
                    HEAP16[$71>>1] = $70;
                    $72 = ((($src)) + 19|0);
                    $73 = HEAP8[$72>>0]|0;
                    $74 = ((($1)) + 19|0);
                    HEAP8[$74>>0] = $73;
                    $75 = HEAP32[$src>>2]|0;
                    $76 = ($75|0)==(0|0);
                    if (!($76)) {
                        $77 = HEAP16[$71>>1]|0;
                        $78 = $77&65535;
                        $79 = (($78) + 1)|0;
                        $80 = (_Gif_Realloc(0,4,$79,6848,440)|0);
                        HEAP32[$1>>2] = $80;
                        $81 = HEAP16[$68>>1]|0;
                        $82 = $81&65535;
                        $83 = HEAP16[$71>>1]|0;
                        $84 = $83&65535;
                        $85 = Math_imul($84, $82)|0;
                        $86 = (_Gif_Realloc(0,1,$85,6848,441)|0);
                        $87 = ((($1)) + 4|0);
                        HEAP32[$87>>2] = $86;
                        $88 = ((($1)) + 40|0);
                        HEAP32[$88>>2] = 1;
                        $89 = HEAP32[$1>>2]|0;
                        $90 = ($89|0)==(0|0);
                        if ($90) {
                            break;
                        }
                        $91 = HEAP32[$87>>2]|0;
                        $92 = ($91|0)==(0|0);
                        if ($92) {
                            break;
                        }
                        $93 = HEAP16[$71>>1]|0;
                        $94 = $93&65535;
                        $95 = ($93<<16>>16)==(0);
                        if ($95) {
                            $$lcssa = $94;
                        } else {
                            $data$06 = $91;$i$17 = 0;
                            while(1) {
                                $96 = HEAP32[$src>>2]|0;
                                $97 = (($96) + ($i$17<<2)|0);
                                $98 = HEAP32[$97>>2]|0;
                                $99 = HEAP16[$68>>1]|0;
                                $100 = $99&65535;
                                _memcpy(($data$06|0),($98|0),($100|0))|0;
                                $101 = HEAP32[$1>>2]|0;
                                $102 = (($101) + ($i$17<<2)|0);
                                HEAP32[$102>>2] = $data$06;
                                $103 = HEAP16[$68>>1]|0;
                                $104 = $103&65535;
                                $105 = (($data$06) + ($104)|0);
                                $106 = (($i$17) + 1)|0;
                                $107 = HEAP16[$71>>1]|0;
                                $108 = $107&65535;
                                $109 = ($106|0)<($108|0);
                                if ($109) {
                                    $data$06 = $105;$i$17 = $106;
                                } else {
                                    $$lcssa = $108;
                                    break;
                                }
                            }
                        }
                        $110 = HEAP32[$1>>2]|0;
                        $111 = (($110) + ($$lcssa<<2)|0);
                        HEAP32[$111>>2] = 0;
                    }
                    $112 = ((($src)) + 52|0);
                    $113 = HEAP32[$112>>2]|0;
                    $114 = ($113|0)==(0|0);
                    if ($114) {
                        $$0 = $1;
                        return ($$0|0);
                    }
                    $115 = ((($src)) + 56|0);
                    $116 = HEAP32[$115>>2]|0;
                    $117 = ($116|0)==(0|0);
                    if ($117) {
                        $118 = ((($1)) + 52|0);
                        HEAP32[$118>>2] = $113;
                    } else {
                        $119 = ((($src)) + 44|0);
                        $120 = HEAP32[$119>>2]|0;
                        $121 = (_Gif_Realloc(0,1,$120,6848,456)|0);
                        $122 = ((($1)) + 52|0);
                        HEAP32[$122>>2] = $121;
                        $123 = ((($1)) + 56|0);
                        HEAP32[$123>>2] = 1;
                        $124 = HEAP32[$122>>2]|0;
                        $125 = HEAP32[$112>>2]|0;
                        $126 = HEAP32[$119>>2]|0;
                        _memcpy(($124|0),($125|0),($126|0))|0;
                    }
                    $127 = ((($src)) + 44|0);
                    $128 = HEAP32[$127>>2]|0;
                    $129 = ((($1)) + 44|0);
                    HEAP32[$129>>2] = $128;
                    $130 = ((($src)) + 48|0);
                    $131 = HEAP32[$130>>2]|0;
                    $132 = ((($1)) + 48|0);
                    HEAP32[$132>>2] = $131;
                    $$0 = $1;
                    return ($$0|0);
                }
            } while(0);
            _Gif_DeleteImage($1);
            $$0 = 0;
            return ($$0|0);
        }
        function _Gif_MakeImageEmpty($gfi) {
            $gfi = $gfi|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            _Gif_ReleaseUncompressedImage($gfi);
            _Gif_ReleaseCompressedImage($gfi);
            $0 = ((($gfi)) + 10|0);
            HEAP16[$0>>1] = 1;
            $1 = ((($gfi)) + 8|0);
            HEAP16[$1>>1] = 1;
            $2 = ((($gfi)) + 20|0);
            HEAP16[$2>>1] = 0;
            (_Gif_CreateUncompressedImage($gfi,0)|0);
            $3 = HEAP32[$gfi>>2]|0;
            $4 = HEAP32[$3>>2]|0;
            HEAP8[$4>>0] = 0;
            return;
        }
        function _Gif_ReleaseUncompressedImage($gfi) {
            $gfi = $gfi|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$gfi>>2]|0;
            _free($0);
            $1 = ((($gfi)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)==(0|0);
            if (!($3)) {
                $4 = ((($gfi)) + 40|0);
                $5 = HEAP32[$4>>2]|0;
                $6 = ($5|0)==(0|0);
                if (!($6)) {
                    FUNCTION_TABLE_vi[$5 & 7]($2);
                }
            }
            HEAP32[$gfi>>2] = 0;
            HEAP32[$1>>2] = 0;
            $7 = ((($gfi)) + 40|0);
            HEAP32[$7>>2] = 0;
            return;
        }
        function _Gif_ReleaseCompressedImage($gfi) {
            $gfi = $gfi|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 52|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            if (!($2)) {
                $3 = ((($gfi)) + 56|0);
                $4 = HEAP32[$3>>2]|0;
                $5 = ($4|0)==(0|0);
                if (!($5)) {
                    FUNCTION_TABLE_vi[$4 & 7]($1);
                }
            }
            $6 = ((($gfi)) + 44|0);
            ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;
            return;
        }
        function _Gif_CreateUncompressedImage($gfi,$data_interlaced) {
            $gfi = $gfi|0;
            $data_interlaced = $data_interlaced|0;
            var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 8|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($gfi)) + 10|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = Math_imul($5, $2)|0;
            $7 = ($6|0)!=(0);
            $8 = $7 ? $6 : 1;
            $9 = (_Gif_Realloc(0,1,$8,6848,816)|0);
            $10 = (_Gif_SetUncompressedImage($gfi,$9,1,$data_interlaced)|0);
            return ($10|0);
        }
        function _Gif_DeleteColormap($gfcm) {
            $gfcm = $gfcm|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hook$0 = 0, $hook$01 = 0, $hook$02 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            $0 = ($gfcm|0)==(0|0);
            if ($0) {
                return;
            }
            $1 = ((($gfcm)) + 12|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = (($2) + -1)|0;
            HEAP32[$1>>2] = $3;
            $4 = ($2|0)>(1);
            if ($4) {
                return;
            }
            $hook$01 = HEAP32[396>>2]|0;
            $5 = ($hook$01|0)==(0|0);
            if (!($5)) {
                $hook$02 = $hook$01;
                while(1) {
                    $6 = HEAP32[$hook$02>>2]|0;
                    $7 = ($6|0)==(2);
                    if ($7) {
                        $8 = ((($hook$02)) + 4|0);
                        $9 = HEAP32[$8>>2]|0;
                        $10 = ((($hook$02)) + 8|0);
                        $11 = HEAP32[$10>>2]|0;
                        FUNCTION_TABLE_viii[$9 & 7](2,$gfcm,$11);
                    }
                    $12 = ((($hook$02)) + 12|0);
                    $hook$0 = HEAP32[$12>>2]|0;
                    $13 = ($hook$0|0)==(0|0);
                    if ($13) {
                        break;
                    } else {
                        $hook$02 = $hook$0;
                    }
                }
            }
            $14 = ((($gfcm)) + 16|0);
            $15 = HEAP32[$14>>2]|0;
            _free($15);
            _free($gfcm);
            return;
        }
        function _Gif_DeleteComment($gfcom) {
            $gfcom = $gfcom|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($gfcom|0)==(0|0);
            if ($0) {
                return;
            }
            $1 = ((($gfcom)) + 8|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)>(0);
            if ($3) {
                $i$01 = 0;
                while(1) {
                    $4 = HEAP32[$gfcom>>2]|0;
                    $5 = (($4) + ($i$01<<2)|0);
                    $6 = HEAP32[$5>>2]|0;
                    _free($6);
                    $7 = (($i$01) + 1)|0;
                    $8 = HEAP32[$1>>2]|0;
                    $9 = ($7|0)<($8|0);
                    if ($9) {
                        $i$01 = $7;
                    } else {
                        break;
                    }
                }
            }
            $10 = HEAP32[$gfcom>>2]|0;
            _free($10);
            $11 = ((($gfcom)) + 4|0);
            $12 = HEAP32[$11>>2]|0;
            _free($12);
            _free($gfcom);
            return;
        }
        function _Gif_FindColor($gfcm,$c) {
            $gfcm = $gfcm|0;
            $c = $c|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
            var $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$gfcm>>2]|0;
            $1 = ($0|0)>(0);
            if (!($1)) {
                $$0 = -1;
                return ($$0|0);
            }
            $2 = ((($gfcm)) + 16|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ((($c)) + 1|0);
            $5 = HEAP8[$4>>0]|0;
            $6 = ((($c)) + 2|0);
            $7 = ((($c)) + 3|0);
            $i$01 = 0;
            while(1) {
                $8 = (((($3) + ($i$01<<3)|0)) + 1|0);
                $9 = HEAP8[$8>>0]|0;
                $10 = ($9<<24>>24)==($5<<24>>24);
                if ($10) {
                    $11 = (((($3) + ($i$01<<3)|0)) + 2|0);
                    $12 = HEAP8[$11>>0]|0;
                    $13 = HEAP8[$6>>0]|0;
                    $14 = ($12<<24>>24)==($13<<24>>24);
                    if ($14) {
                        $15 = (((($3) + ($i$01<<3)|0)) + 3|0);
                        $16 = HEAP8[$15>>0]|0;
                        $17 = HEAP8[$7>>0]|0;
                        $18 = ($16<<24>>24)==($17<<24>>24);
                        if ($18) {
                            $$0 = $i$01;
                            label = 7;
                            break;
                        }
                    }
                }
                $19 = (($i$01) + 1)|0;
                $20 = HEAP32[$gfcm>>2]|0;
                $21 = ($19|0)<($20|0);
                if ($21) {
                    $i$01 = $19;
                } else {
                    $$0 = -1;
                    label = 7;
                    break;
                }
            }
            if ((label|0) == 7) {
                return ($$0|0);
            }
            return (0)|0;
        }
        function _Gif_AddColor($gfcm,$c,$look_from) {
            $gfcm = $gfcm|0;
            $c = $c|0;
            $look_from = $look_from|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($look_from|0)>(-1);
            L1: do {
                if ($0) {
                    $1 = HEAP32[$gfcm>>2]|0;
                    $2 = ($1|0)>($look_from|0);
                    if ($2) {
                        $3 = ((($gfcm)) + 16|0);
                        $4 = HEAP32[$3>>2]|0;
                        $5 = ((($c)) + 1|0);
                        $6 = HEAP8[$5>>0]|0;
                        $7 = ((($c)) + 2|0);
                        $8 = ((($c)) + 3|0);
                        $i$03 = $look_from;
                        while(1) {
                            $9 = (((($4) + ($i$03<<3)|0)) + 1|0);
                            $10 = HEAP8[$9>>0]|0;
                            $11 = ($10<<24>>24)==($6<<24>>24);
                            if ($11) {
                                $12 = (((($4) + ($i$03<<3)|0)) + 2|0);
                                $13 = HEAP8[$12>>0]|0;
                                $14 = HEAP8[$7>>0]|0;
                                $15 = ($13<<24>>24)==($14<<24>>24);
                                if ($15) {
                                    $16 = (((($4) + ($i$03<<3)|0)) + 3|0);
                                    $17 = HEAP8[$16>>0]|0;
                                    $18 = HEAP8[$8>>0]|0;
                                    $19 = ($17<<24>>24)==($18<<24>>24);
                                    if ($19) {
                                        $$0 = $i$03;
                                        break;
                                    }
                                }
                            }
                            $20 = (($i$03) + 1)|0;
                            $21 = HEAP32[$gfcm>>2]|0;
                            $22 = ($20|0)<($21|0);
                            if ($22) {
                                $i$03 = $20;
                            } else {
                                break L1;
                            }
                        }
                        return ($$0|0);
                    }
                }
            } while(0);
            $23 = HEAP32[$gfcm>>2]|0;
            $24 = ((($gfcm)) + 4|0);
            $25 = HEAP32[$24>>2]|0;
            $26 = ($23|0)<($25|0);
            if (!($26)) {
                $27 = $25 << 1;
                HEAP32[$24>>2] = $27;
                $28 = ((($gfcm)) + 16|0);
                $29 = HEAP32[$28>>2]|0;
                $30 = (_Gif_Realloc($29,8,$27,6848,663)|0);
                HEAP32[$28>>2] = $30;
                $31 = ($30|0)==(0|0);
                if ($31) {
                    $$0 = -1;
                    return ($$0|0);
                }
            }
            $32 = HEAP32[$gfcm>>2]|0;
            $33 = (($32) + 1)|0;
            HEAP32[$gfcm>>2] = $33;
            $34 = ((($gfcm)) + 16|0);
            $35 = HEAP32[$34>>2]|0;
            $36 = (($35) + ($32<<3)|0);
            $37 = $c;
            $38 = $37;
            $39 = HEAP32[$38>>2]|0;
            $40 = (($37) + 4)|0;
            $41 = $40;
            $42 = HEAP32[$41>>2]|0;
            $43 = $36;
            $44 = $43;
            HEAP32[$44>>2] = $39;
            $45 = (($43) + 4)|0;
            $46 = $45;
            HEAP32[$46>>2] = $42;
            $$0 = $32;
            return ($$0|0);
        }
        function _Gif_GetImage($gfs,$imagenumber) {
            $gfs = $gfs|0;
            $imagenumber = $imagenumber|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($imagenumber|0)>(-1);
            if (!($0)) {
                $$0 = 0;
                return ($$0|0);
            }
            $1 = ((($gfs)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)>($imagenumber|0);
            if (!($3)) {
                $$0 = 0;
                return ($$0|0);
            }
            $4 = HEAP32[$gfs>>2]|0;
            $5 = (($4) + ($imagenumber<<2)|0);
            $6 = HEAP32[$5>>2]|0;
            $$0 = $6;
            return ($$0|0);
        }
        function _Gif_GetNamedImage($gfs,$name) {
            $gfs = $gfs|0;
            $name = $name|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($name|0)==(0|0);
            $1 = ((($gfs)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            if ($0) {
                $5 = ($2|0)==(0);
                if ($5) {
                    $$0 = 0;
                    return ($$0|0);
                }
                $6 = HEAP32[$gfs>>2]|0;
                $7 = HEAP32[$6>>2]|0;
                $$0 = $7;
                return ($$0|0);
            }
            $3 = ($2|0)>(0);
            if (!($3)) {
                $$0 = 0;
                return ($$0|0);
            }
            $4 = HEAP32[$gfs>>2]|0;
            $i$01 = 0;
            while(1) {
                $8 = (($4) + ($i$01<<2)|0);
                $9 = HEAP32[$8>>2]|0;
                $10 = ((($9)) + 28|0);
                $11 = HEAP32[$10>>2]|0;
                $12 = ($11|0)==(0|0);
                if (!($12)) {
                    $13 = (_strcmp($11,$name)|0);
                    $14 = ($13|0)==(0);
                    if ($14) {
                        $$0 = $9;
                        label = 9;
                        break;
                    }
                }
                $15 = (($i$01) + 1)|0;
                $16 = HEAP32[$1>>2]|0;
                $17 = ($15|0)<($16|0);
                if ($17) {
                    $i$01 = $15;
                } else {
                    $$0 = 0;
                    label = 9;
                    break;
                }
            }
            if ((label|0) == 9) {
                return ($$0|0);
            }
            return (0)|0;
        }
        function _Gif_ClipImage($gfi,$left,$top,$width,$height) {
            $gfi = $gfi|0;
            $left = $left|0;
            $top = $top|0;
            $width = $width|0;
            $height = $height|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $new_height$0 = 0, $new_height$1 = 0, $new_width$0 = 0, $new_width$0$ = 0, $y$02 = 0, $y$11 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 8|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($gfi)) + 10|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = HEAP32[$gfi>>2]|0;
            $7 = ($6|0)==(0|0);
            if ($7) {
                $$0 = 0;
                return ($$0|0);
            }
            $8 = ((($gfi)) + 12|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = $9&65535;
            $11 = ($10|0)<($left|0);
            if ($11) {
                $12 = (($left) - ($10))|0;
                $13 = HEAP16[$3>>1]|0;
                $14 = ($13<<16>>16)==(0);
                if (!($14)) {
                    $15 = HEAP16[$3>>1]|0;
                    $16 = $15&65535;
                    $y$02 = 0;
                    while(1) {
                        $17 = HEAP32[$gfi>>2]|0;
                        $18 = (($17) + ($y$02<<2)|0);
                        $19 = HEAP32[$18>>2]|0;
                        $20 = (($19) + ($12)|0);
                        HEAP32[$18>>2] = $20;
                        $21 = (($y$02) + 1)|0;
                        $22 = ($21|0)<($16|0);
                        if ($22) {
                            $y$02 = $21;
                        } else {
                            break;
                        }
                    }
                }
                $23 = HEAP16[$8>>1]|0;
                $24 = $23&65535;
                $25 = (($24) + ($12))|0;
                $26 = $25&65535;
                HEAP16[$8>>1] = $26;
                $27 = (($2) - ($12))|0;
                $new_width$0 = $27;
            } else {
                $new_width$0 = $2;
            }
            $28 = ((($gfi)) + 14|0);
            $29 = HEAP16[$28>>1]|0;
            $30 = $29&65535;
            $31 = ($30|0)<($top|0);
            if ($31) {
                $32 = (($top) - ($30))|0;
                $33 = HEAP16[$3>>1]|0;
                $34 = $33&65535;
                $35 = ($34|0)>($32|0);
                if ($35) {
                    $36 = (($34) + -1)|0;
                    $y$11 = $36;
                    while(1) {
                        $37 = HEAP32[$gfi>>2]|0;
                        $38 = (($37) + ($y$11<<2)|0);
                        $39 = HEAP32[$38>>2]|0;
                        $40 = (($y$11) - ($32))|0;
                        $41 = (($37) + ($40<<2)|0);
                        HEAP32[$41>>2] = $39;
                        $42 = (($y$11) + 1)|0;
                        $43 = ($42|0)<($32|0);
                        if ($43) {
                            break;
                        } else {
                            $y$11 = $42;
                        }
                    }
                }
                $44 = HEAP16[$28>>1]|0;
                $45 = $44&65535;
                $46 = (($45) + ($32))|0;
                $47 = $46&65535;
                HEAP16[$28>>1] = $47;
                $48 = (($5) - ($32))|0;
                $new_height$0 = $48;
            } else {
                $new_height$0 = $5;
            }
            $49 = HEAP16[$8>>1]|0;
            $50 = $49&65535;
            $51 = (($50) + ($new_width$0))|0;
            $52 = ($51|0)<($width|0);
            $53 = (($width) - ($50))|0;
            $new_width$0$ = $52 ? $new_width$0 : $53;
            $54 = HEAP16[$28>>1]|0;
            $55 = $54&65535;
            $56 = (($55) + ($new_height$0))|0;
            $57 = ($56|0)<($height|0);
            $58 = (($height) - ($55))|0;
            $new_height$1 = $57 ? $new_height$0 : $58;
            $59 = ($new_width$0$|0)<(0);
            $60 = ($new_height$1|0)<(0);
            $61 = $new_width$0$&65535;
            $62 = $59 ? 0 : $61;
            HEAP16[$0>>1] = $62;
            $63 = $new_height$1&65535;
            $64 = $60 ? 0 : $63;
            HEAP16[$3>>1] = $64;
            $$0 = 1;
            return ($$0|0);
        }
        function _Gif_InterlaceLine($line,$height) {
            $line = $line|0;
            $height = $height|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            $0 = (($height) + -1)|0;
            $1 = (($0|0) / 2)&-1;
            $2 = ($1|0)<($line|0);
            if ($2) {
                $3 = $line << 1;
                $4 = $0 | 1;
                $5 = (($3) - ($4))|0;
                $$0 = $5;
                return ($$0|0);
            }
            $6 = (($0|0) / 4)&-1;
            $7 = ($6|0)<($line|0);
            if ($7) {
                $8 = $line << 2;
                $9 = $0 & -4;
                $10 = $9 | 2;
                $11 = (($8) - ($10))|0;
                $$0 = $11;
                return ($$0|0);
            }
            $12 = (($0|0) / 8)&-1;
            $13 = ($12|0)<($line|0);
            $14 = $line << 3;
            if (!($13)) {
                $$0 = $14;
                return ($$0|0);
            }
            $15 = $0 & -8;
            $16 = $15 | 4;
            $17 = (($14) - ($16))|0;
            $$0 = $17;
            return ($$0|0);
        }
        function _Gif_SetUncompressedImage($gfi,$image_data,$free_data,$data_interlaced) {
            $gfi = $gfi|0;
            $image_data = $image_data|0;
            $free_data = $free_data|0;
            $data_interlaced = $data_interlaced|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $i$04 = 0, $i$13 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 8|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($gfi)) + 10|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            _Gif_ReleaseUncompressedImage($gfi);
            $6 = ($image_data|0)==(0|0);
            if ($6) {
                $$0 = 0;
                return ($$0|0);
            }
            $7 = (($5) + 1)|0;
            $8 = (_Gif_Realloc(0,4,$7,6848,794)|0);
            $9 = ($8|0)==(0|0);
            if ($9) {
                $$0 = 0;
                return ($$0|0);
            }
            $10 = ($data_interlaced|0)==(0);
            $11 = ($4<<16>>16)==(0);
            if ($10) {
                if (!($11)) {
                    $13 = $4&65535;
                    $i$13 = 0;
                    while(1) {
                        $19 = Math_imul($i$13, $2)|0;
                        $20 = (($image_data) + ($19)|0);
                        $21 = (($8) + ($i$13<<2)|0);
                        HEAP32[$21>>2] = $20;
                        $22 = (($i$13) + 1)|0;
                        $exitcond = ($22|0)==($13|0);
                        if ($exitcond) {
                            break;
                        } else {
                            $i$13 = $22;
                        }
                    }
                }
            } else {
                if (!($11)) {
                    $12 = $4&65535;
                    $i$04 = 0;
                    while(1) {
                        $14 = Math_imul($i$04, $2)|0;
                        $15 = (($image_data) + ($14)|0);
                        $16 = (_Gif_InterlaceLine($i$04,$5)|0);
                        $17 = (($8) + ($16<<2)|0);
                        HEAP32[$17>>2] = $15;
                        $18 = (($i$04) + 1)|0;
                        $exitcond6 = ($18|0)==($12|0);
                        if ($exitcond6) {
                            break;
                        } else {
                            $i$04 = $18;
                        }
                    }
                }
            }
            $23 = (($8) + ($5<<2)|0);
            HEAP32[$23>>2] = 0;
            HEAP32[$gfi>>2] = $8;
            $24 = ((($gfi)) + 4|0);
            HEAP32[$24>>2] = $image_data;
            $25 = ((($gfi)) + 40|0);
            HEAP32[$25>>2] = $free_data;
            $$0 = 1;
            return ($$0|0);
        }
        function _Gif_InitCompressInfo($gcinfo) {
            $gcinfo = $gcinfo|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            HEAP32[$gcinfo>>2] = 0;
            return;
        }
        function _Gif_FullUncompressImage($gfs,$gfi,$h) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $h = $h|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gfc = 0;
            var $grr = 0, $not$ = 0, $ok$0 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 96|0;
            $gfc = sp + 40|0;
            $grr = sp;
            $0 = HEAP32[$gfi>>2]|0;
            $1 = ($0|0)==(0|0);
            if (!($1)) {
                $$0 = 2;
                STACKTOP = sp;return ($$0|0);
            }
            $2 = ((($gfi)) + 4|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($3|0)==(0|0);
            if (!($4)) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            HEAP32[$gfc>>2] = $gfs;
            $5 = ((($gfc)) + 32|0);
            HEAP32[$5>>2] = $gfi;
            $6 = (_Gif_Realloc(0,2,4096,6860,538)|0);
            $7 = ((($gfc)) + 4|0);
            HEAP32[$7>>2] = $6;
            $8 = (_Gif_Realloc(0,1,4096,6860,539)|0);
            $9 = ((($gfc)) + 8|0);
            HEAP32[$9>>2] = $8;
            $10 = (_Gif_Realloc(0,2,4096,6860,540)|0);
            $11 = ((($gfc)) + 12|0);
            HEAP32[$11>>2] = $10;
            $12 = ((($gfc)) + 36|0);
            HEAP32[$12>>2] = $h;
            $13 = ((($gfc)) + 44|0);
            HEAP32[$13>>2] = 0;
            $14 = ((($gfc)) + 40|0);
            HEAP32[$14>>2] = 0;
            $15 = HEAP32[$7>>2]|0;
            $16 = ($15|0)==(0|0);
            $17 = HEAP32[$9>>2]|0;
            $18 = ($17|0)==(0|0);
            $or$cond = $16 | $18;
            $19 = HEAP32[$11>>2]|0;
            $20 = ($19|0)==(0|0);
            $or$cond3 = $or$cond | $20;
            if ($or$cond3) {
                $ok$0 = 0;
            } else {
                $21 = ((($gfi)) + 52|0);
                $22 = HEAP32[$21>>2]|0;
                $23 = ($22|0)==(0|0);
                if ($23) {
                    $ok$0 = 0;
                } else {
                    $24 = ((($gfi)) + 44|0);
                    $25 = HEAP32[$24>>2]|0;
                    __Z16make_data_readerP10Gif_ReaderPKhj($grr,$22,$25);
                    $26 = (__Z16uncompress_imageP11Gif_ContextP9Gif_ImageP10Gif_Reader($gfc,$gfi,$grr)|0);
                    $ok$0 = $26;
                }
            }
            $27 = HEAP32[$7>>2]|0;
            _free($27);
            $28 = HEAP32[$9>>2]|0;
            _free($28);
            $29 = HEAP32[$11>>2]|0;
            _free($29);
            $30 = HEAP32[$14>>2]|0;
            $31 = HEAP32[$13>>2]|0;
            $32 = $31 | $30;
            $33 = ($32|0)==(0);
            if (!($33)) {
                __Z14gif_read_errorP11Gif_ContextiPKc($gfc,-1,0);
            }
            $34 = HEAP32[$13>>2]|0;
            $35 = ($34|0)==(0);
            $not$ = ($ok$0|0)!=(0);
            $36 = $not$ & $35;
            $37 = $36&1;
            $$0 = $37;
            STACKTOP = sp;return ($$0|0);
        }
        function _Gif_FullReadFile($f,$read_flags,$landmark,$h) {
            $f = $f|0;
            $read_flags = $read_flags|0;
            $landmark = $landmark|0;
            $h = $h|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $grr = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 48|0;
            $grr = sp;
            $0 = ($f|0)==(0|0);
            if ($0) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            HEAP32[$grr>>2] = $f;
            $1 = ((($grr)) + 8|0);
            HEAP32[$1>>2] = 0;
            $2 = ((($grr)) + 16|0);
            HEAP32[$2>>2] = 0;
            $3 = ((($grr)) + 24|0);
            HEAP32[$3>>2] = 2;
            $4 = ((($grr)) + 28|0);
            HEAP32[$4>>2] = 6;
            $5 = ((($grr)) + 32|0);
            HEAP32[$5>>2] = 3;
            $6 = (__Z8read_gifP10Gif_ReaderiPKcPFvP10Gif_StreamP9Gif_ImageiS2_E($grr,$read_flags,$landmark,$h)|0);
            $$0 = $6;
            STACKTOP = sp;return ($$0|0);
        }
        function _Gif_SetErrorHandler($handler) {
            $handler = $handler|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            HEAP32[400>>2] = $handler;
            return;
        }
        function __Z16make_data_readerP10Gif_ReaderPKhj($grr,$data,$length) {
            $grr = $grr|0;
            $data = $data|0;
            $length = $length|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 4|0);
            HEAP32[$0>>2] = $data;
            $1 = ((($grr)) + 8|0);
            HEAP32[$1>>2] = 0;
            $2 = ((($grr)) + 12|0);
            HEAP32[$2>>2] = $length;
            $3 = ((($grr)) + 16|0);
            HEAP32[$3>>2] = 1;
            $4 = ((($grr)) + 24|0);
            HEAP32[$4>>2] = 4;
            $5 = ((($grr)) + 28|0);
            HEAP32[$5>>2] = 7;
            $6 = ((($grr)) + 32|0);
            HEAP32[$6>>2] = 5;
            return;
        }
        function __Z16uncompress_imageP11Gif_ContextP9Gif_ImageP10Gif_Reader($gfc,$gfi,$grr) {
            $gfc = $gfc|0;
            $gfi = $gfi|0;
            $grr = $grr|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 19|0);
            $1 = HEAP8[$0>>0]|0;
            $2 = $1&255;
            $3 = (_Gif_CreateUncompressedImage($gfi,$2)|0);
            $4 = ($3|0)==(0);
            if ($4) {
                $$0 = 0;
                return ($$0|0);
            }
            $5 = ((($gfi)) + 8|0);
            $6 = HEAP16[$5>>1]|0;
            $7 = ((($gfc)) + 16|0);
            HEAP16[$7>>1] = $6;
            $8 = ((($gfi)) + 10|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = ((($gfc)) + 18|0);
            HEAP16[$10>>1] = $9;
            $11 = ((($gfi)) + 4|0);
            $12 = HEAP32[$11>>2]|0;
            $13 = ((($gfc)) + 20|0);
            HEAP32[$13>>2] = $12;
            $14 = HEAP32[$11>>2]|0;
            $15 = HEAP16[$5>>1]|0;
            $16 = $15&65535;
            $17 = HEAP16[$8>>1]|0;
            $18 = $17&65535;
            $19 = Math_imul($18, $16)|0;
            $20 = (($14) + ($19)|0);
            $21 = ((($gfc)) + 24|0);
            HEAP32[$21>>2] = $20;
            $22 = ((($gfc)) + 44|0);
            $23 = HEAP32[$22>>2]|0;
            __Z15read_image_dataP11Gif_ContextP10Gif_Reader($gfc,$grr);
            $24 = HEAP32[$22>>2]|0;
            $25 = (($24) - ($23))|0;
            $26 = ((($gfi)) + 48|0);
            HEAP32[$26>>2] = $25;
            $$0 = 1;
            return ($$0|0);
        }
        function __Z14gif_read_errorP11Gif_ContextiPKc($gfc,$is_error,$text) {
            $gfc = $gfc|0;
            $is_error = $is_error|0;
            $text = $text|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfc)) + 36|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            $3 = HEAP32[400>>2]|0;
            $4 = $2 ? $3 : $1;
            $5 = ($is_error|0)>(-1);
            if ($5) {
                $6 = ($is_error|0)>(0);
                $7 = $6&1;
                $8 = (((($gfc)) + 40|0) + ($7<<2)|0);
                $9 = HEAP32[$8>>2]|0;
                $10 = (($9) + 1)|0;
                HEAP32[$8>>2] = $10;
            }
            $11 = ($4|0)==(0|0);
            if ($11) {
                return;
            }
            $12 = HEAP32[$gfc>>2]|0;
            $13 = ((($gfc)) + 32|0);
            $14 = HEAP32[$13>>2]|0;
            FUNCTION_TABLE_viiii[$4 & 3]($12,$14,$is_error,$text);
            return;
        }
        function __Z16file_byte_getterP10Gif_Reader($grr) {
            $grr = $grr|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$grr>>2]|0;
            $1 = (_getc($0)|0);
            $2 = ($1|0)==(-1);
            if ($2) {
                $$0 = 0;
                return ($$0|0);
            }
            $3 = ((($grr)) + 8|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = (($4) + 1)|0;
            HEAP32[$3>>2] = $5;
            $6 = $1&255;
            $$0 = $6;
            return ($$0|0);
        }
        function __Z17file_block_getterPhjP10Gif_Reader($p,$s,$grr) {
            $p = $p|0;
            $s = $s|0;
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$grr>>2]|0;
            $1 = (_fread($p,1,$s,$0)|0);
            $2 = ($1>>>0)<($s>>>0);
            if ($2) {
                $3 = (($p) + ($1)|0);
                $4 = (($s) - ($1))|0;
                _memset(($3|0),0,($4|0))|0;
            }
            $5 = ((($grr)) + 8|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = (($6) + ($1))|0;
            HEAP32[$5>>2] = $7;
            return ($1|0);
        }
        function __Z10file_eoferP10Gif_Reader($grr) {
            $grr = $grr|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$grr>>2]|0;
            $1 = (_getc($0)|0);
            $2 = ($1|0)==(-1);
            if ($2) {
                $$0 = 1;
                return ($$0|0);
            }
            $3 = HEAP32[$grr>>2]|0;
            (_ungetc($1,$3)|0);
            $$0 = 0;
            return ($$0|0);
        }
        function __Z8read_gifP10Gif_ReaderiPKcPFvP10Gif_StreamP9Gif_ImageiS2_E($grr,$read_flags,$landmark,$handler) {
            $grr = $grr|0;
            $read_flags = $read_flags|0;
            $landmark = $landmark|0;
            $handler = $handler|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
            var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $buf = 0, $gfc = 0, $gfex$0 = 0, $gfex$019 = 0, $gfex$020 = 0;
            var $gfi$0$be = 0, $gfi$021 = 0, $gfi$1 = 0, $gfi$115 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $unknown_block_type$0$be = 0, $unknown_block_type$022 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 320|0;
            $vararg_buffer = sp;
            $gfc = sp + 8|0;
            $buf = sp + 56|0;
            $0 = ((($grr)) + 24|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = (FUNCTION_TABLE_ii[$1 & 7]($grr)|0);
            $3 = ($2<<24>>24)==(71);
            if (!($3)) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $4 = HEAP32[$0>>2]|0;
            $5 = (FUNCTION_TABLE_ii[$4 & 7]($grr)|0);
            $6 = ($5<<24>>24)==(73);
            if (!($6)) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $7 = HEAP32[$0>>2]|0;
            $8 = (FUNCTION_TABLE_ii[$7 & 7]($grr)|0);
            $9 = ($8<<24>>24)==(70);
            if (!($9)) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $10 = HEAP32[$0>>2]|0;
            (FUNCTION_TABLE_ii[$10 & 7]($grr)|0);
            $11 = HEAP32[$0>>2]|0;
            (FUNCTION_TABLE_ii[$11 & 7]($grr)|0);
            $12 = HEAP32[$0>>2]|0;
            (FUNCTION_TABLE_ii[$12 & 7]($grr)|0);
            $13 = (_Gif_NewStream()|0);
            $14 = (_Gif_NewImage()|0);
            HEAP32[$gfc>>2] = $13;
            $15 = (_Gif_Realloc(0,2,4096,6860,799)|0);
            $16 = ((($gfc)) + 4|0);
            HEAP32[$16>>2] = $15;
            $17 = (_Gif_Realloc(0,1,4096,6860,800)|0);
            $18 = ((($gfc)) + 8|0);
            HEAP32[$18>>2] = $17;
            $19 = (_Gif_Realloc(0,2,4096,6860,801)|0);
            $20 = ((($gfc)) + 12|0);
            HEAP32[$20>>2] = $19;
            $21 = ((($gfc)) + 36|0);
            HEAP32[$21>>2] = $handler;
            $22 = ((($gfc)) + 32|0);
            HEAP32[$22>>2] = $14;
            $23 = ((($gfc)) + 44|0);
            HEAP32[$23>>2] = 0;
            $24 = ((($gfc)) + 40|0);
            HEAP32[$24>>2] = 0;
            $25 = ($13|0)!=(0|0);
            $26 = ($14|0)!=(0|0);
            $or$cond = $25 & $26;
            $or$cond$not = $or$cond ^ 1;
            $27 = HEAP32[$16>>2]|0;
            $28 = ($27|0)==(0|0);
            $or$cond5 = $28 | $or$cond$not;
            $29 = HEAP32[$18>>2]|0;
            $30 = ($29|0)==(0|0);
            $or$cond7 = $or$cond5 | $30;
            $31 = HEAP32[$20>>2]|0;
            $32 = ($31|0)==(0|0);
            $or$cond9 = $or$cond7 | $32;
            L10: do {
                if ($or$cond9) {
                    $gfi$1 = $14;
                    label = 22;
                } else {
                    $33 = ((($13)) + 44|0);
                    HEAP32[$33>>2] = $landmark;
                    $34 = (__Z30read_logical_screen_descriptorP10Gif_StreamP10Gif_Reader($13,$grr)|0);
                    $35 = ($34|0)==(0);
                    if ($35) {
                        $gfi$1 = $14;
                        label = 22;
                    } else {
                        $36 = ((($grr)) + 32|0);
                        $37 = HEAP32[$36>>2]|0;
                        $38 = (FUNCTION_TABLE_ii[$37 & 7]($grr)|0);
                        $39 = ($38|0)==(0);
                        if ($39) {
                            $40 = ((($grr)) + 8|0);
                            $gfi$021 = $14;$unknown_block_type$022 = 0;
                            L14: while(1) {
                                $41 = HEAP32[$0>>2]|0;
                                $42 = (FUNCTION_TABLE_ii[$41 & 7]($grr)|0);
                                $43 = $42&255;
                                L16: do {
                                    switch ($43|0) {
                                        case 59:  {
                                            $gfi$1 = $gfi$021;
                                            label = 22;
                                            break L10;
                                            break;
                                        }
                                        case 44:  {
                                            $44 = HEAP32[404>>2]|0;
                                            $45 = ((($gfi$021)) + 28|0);
                                            HEAP32[$45>>2] = $44;
                                            HEAP32[404>>2] = 0;
                                            $46 = (_Gif_AddImage($13,$gfi$021)|0);
                                            $47 = ($46|0)==(0);
                                            if ($47) {
                                                $gfi$1 = $gfi$021;
                                                label = 22;
                                                break L10;
                                            }
                                            $48 = (__Z10read_imageP10Gif_ReaderP11Gif_ContextP9Gif_Imagei($grr,$gfc,$gfi$021,$read_flags)|0);
                                            $49 = ($48|0)==(0);
                                            if ($49) {
                                                break L14;
                                            }
                                            $53 = (_Gif_NewImage()|0);
                                            HEAP32[$22>>2] = $53;
                                            $54 = ($53|0)==(0|0);
                                            if ($54) {
                                                $gfi$115 = 0;
                                                break L10;
                                            } else {
                                                $gfi$0$be = $53;$unknown_block_type$0$be = $unknown_block_type$022;
                                            }
                                            break;
                                        }
                                        case 33:  {
                                            $55 = HEAP32[$0>>2]|0;
                                            $56 = (FUNCTION_TABLE_ii[$55 & 7]($grr)|0);
                                            $57 = $56&255;
                                            switch ($57|0) {
                                                case 249:  {
                                                    __Z30read_graphic_control_extensionP11Gif_ContextP9Gif_ImageP10Gif_Reader($gfc,$gfi$021,$grr);
                                                    $gfi$0$be = $gfi$021;$unknown_block_type$0$be = $unknown_block_type$022;
                                                    break L16;
                                                    break;
                                                }
                                                case 206:  {
                                                    $58 = HEAP32[404>>2]|0;
                                                    $59 = (__Z9suck_dataPcPiP10Gif_Reader($58,0,$grr)|0);
                                                    HEAP32[404>>2] = $59;
                                                    $gfi$0$be = $gfi$021;$unknown_block_type$0$be = $unknown_block_type$022;
                                                    break L16;
                                                    break;
                                                }
                                                case 254:  {
                                                    $60 = (__Z22read_comment_extensionP9Gif_ImageP10Gif_Reader($gfi$021,$grr)|0);
                                                    $61 = ($60|0)==(0);
                                                    if ($61) {
                                                        $gfi$1 = $gfi$021;
                                                        label = 22;
                                                        break L10;
                                                    } else {
                                                        $gfi$0$be = $gfi$021;$unknown_block_type$0$be = $unknown_block_type$022;
                                                        break L16;
                                                    }
                                                    break;
                                                }
                                                case 255:  {
                                                    __Z26read_application_extensionP11Gif_ContextP10Gif_Reader($gfc,$grr);
                                                    $gfi$0$be = $gfi$021;$unknown_block_type$0$be = $unknown_block_type$022;
                                                    break L16;
                                                    break;
                                                }
                                                default: {
                                                    (__Z22read_unknown_extensionP11Gif_ContextP10Gif_ReaderiPci($gfc,$grr,$57,0,0)|0);
                                                    $gfi$0$be = $gfi$021;$unknown_block_type$0$be = $unknown_block_type$022;
                                                    break L16;
                                                }
                                            }
                                            break;
                                        }
                                        default: {
                                            $62 = ($unknown_block_type$022|0)==(0);
                                            if ($62) {
                                                $63 = HEAP32[$40>>2]|0;
                                                $64 = (($63) + -1)|0;
                                                HEAP32[$vararg_buffer>>2] = $43;
                                                $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                                                HEAP32[$vararg_ptr1>>2] = $64;
                                                (_sprintf($buf,6872,$vararg_buffer)|0);
                                                __Z14gif_read_errorP11Gif_ContextiPKc($gfc,1,$buf);
                                                $gfi$0$be = $gfi$021;$unknown_block_type$0$be = 1;
                                            } else {
                                                $gfi$0$be = $gfi$021;$unknown_block_type$0$be = $unknown_block_type$022;
                                            }
                                        }
                                    }
                                } while(0);
                                $65 = HEAP32[$36>>2]|0;
                                $66 = (FUNCTION_TABLE_ii[$65 & 7]($grr)|0);
                                $67 = ($66|0)==(0);
                                if ($67) {
                                    $gfi$021 = $gfi$0$be;$unknown_block_type$022 = $unknown_block_type$0$be;
                                } else {
                                    $gfi$1 = $gfi$0$be;
                                    label = 22;
                                    break L10;
                                }
                            }
                            $50 = ((($13)) + 4|0);
                            $51 = HEAP32[$50>>2]|0;
                            $52 = (($51) + -1)|0;
                            _Gif_RemoveImage($13,$52);
                            $gfi$115 = 0;
                        } else {
                            $gfi$1 = $14;
                            label = 22;
                        }
                    }
                }
            } while(0);
            if ((label|0) == 22) {
                $68 = ($gfi$1|0)!=(0|0);
                $or$cond3 = $25 & $68;
                if ($or$cond3) {
                    $69 = ((($gfi$1)) + 32|0);
                    $70 = HEAP32[$69>>2]|0;
                    $71 = ((($13)) + 28|0);
                    HEAP32[$71>>2] = $70;
                    HEAP32[$69>>2] = 0;
                    $72 = ((($gfi$1)) + 36|0);
                    $73 = HEAP32[$72>>2]|0;
                    $74 = ((($13)) + 32|0);
                    HEAP32[$74>>2] = $73;
                    HEAP32[$72>>2] = 0;
                    $gfex$019 = HEAP32[$74>>2]|0;
                    $75 = ($gfex$019|0)==(0|0);
                    if ($75) {
                        $gfi$115 = $gfi$1;
                    } else {
                        $gfex$020 = $gfex$019;
                        while(1) {
                            $76 = ((($gfex$020)) + 28|0);
                            HEAP32[$76>>2] = 0;
                            $77 = ((($gfex$020)) + 32|0);
                            $gfex$0 = HEAP32[$77>>2]|0;
                            $78 = ($gfex$0|0)==(0|0);
                            if ($78) {
                                $gfi$115 = $gfi$1;
                                break;
                            } else {
                                $gfex$020 = $gfex$0;
                            }
                        }
                    }
                } else {
                    $gfi$115 = $gfi$1;
                }
            }
            _Gif_DeleteImage($gfi$115);
            $79 = HEAP32[404>>2]|0;
            _free($79);
            $80 = HEAP32[$16>>2]|0;
            _free($80);
            $81 = HEAP32[$18>>2]|0;
            _free($81);
            $82 = HEAP32[$20>>2]|0;
            _free($82);
            HEAP32[$22>>2] = 0;
            if ($25) {
                $83 = HEAP32[$23>>2]|0;
                $84 = ((($13)) + 36|0);
                HEAP32[$84>>2] = $83;
                $85 = HEAP32[$23>>2]|0;
                $86 = $read_flags & 8;
                $87 = $85 | $86;
                $88 = ($87|0)==(0);
                $89 = $25 & $88;
                if ($89) {
                    $90 = ((($grr)) + 32|0);
                    $91 = HEAP32[$90>>2]|0;
                    $92 = (FUNCTION_TABLE_ii[$91 & 7]($grr)|0);
                    $93 = ($92|0)==(0);
                    if ($93) {
                        __Z14gif_read_errorP11Gif_ContextiPKc($gfc,0,6912);
                    }
                }
            }
            __Z14gif_read_errorP11Gif_ContextiPKc($gfc,-1,0);
            $$0 = $13;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z30read_logical_screen_descriptorP10Gif_StreamP10Gif_Reader($gfs,$grr) {
            $gfs = $gfs|0;
            $grr = $grr|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
            var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (__Z14gifgetunsignedP10Gif_Reader($grr)|0);
            $1 = ((($gfs)) + 18|0);
            HEAP16[$1>>1] = $0;
            $2 = (__Z14gifgetunsignedP10Gif_Reader($grr)|0);
            $3 = ((($gfs)) + 20|0);
            HEAP16[$3>>1] = $2;
            $4 = ((($grr)) + 24|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = (FUNCTION_TABLE_ii[$5 & 7]($grr)|0);
            $7 = HEAP32[$4>>2]|0;
            $8 = (FUNCTION_TABLE_ii[$7 & 7]($grr)|0);
            $9 = $8&255;
            $10 = ((($gfs)) + 16|0);
            HEAP16[$10>>1] = $9;
            $11 = HEAP32[$4>>2]|0;
            (FUNCTION_TABLE_ii[$11 & 7]($grr)|0);
            $12 = $6&255;
            $13 = $12 & 128;
            $14 = ($13|0)==(0);
            if ($14) {
                HEAP16[$10>>1] = 256;
                $$0 = 1;
                return ($$0|0);
            }
            $15 = $12 & 7;
            $16 = (($15) + 1)|0;
            $17 = 1 << $16;
            $18 = (__Z16read_color_tableiP10Gif_Reader($17,$grr)|0);
            $19 = ((($gfs)) + 12|0);
            HEAP32[$19>>2] = $18;
            $20 = ($18|0)==(0|0);
            if ($20) {
                $$0 = 0;
                return ($$0|0);
            }
            $21 = ((($18)) + 12|0);
            HEAP32[$21>>2] = 1;
            $$0 = 1;
            return ($$0|0);
        }
        function __Z10read_imageP10Gif_ReaderP11Gif_ContextP9Gif_Imagei($grr,$gfc,$gfi,$read_flags) {
            $grr = $grr|0;
            $gfc = $gfc|0;
            $gfi = $gfi|0;
            $read_flags = $read_flags|0;
            var $$02 = 0, $$1 = 0, $$13 = 0, $$lobit = 0, $$pr = 0, $$sink4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
            var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
            var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
            var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0;
            var $new_grr = 0, $not$ = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 256|0;
            $new_grr = sp;
            $0 = (__Z14gifgetunsignedP10Gif_Reader($grr)|0);
            $1 = ((($gfi)) + 12|0);
            HEAP16[$1>>1] = $0;
            $2 = (__Z14gifgetunsignedP10Gif_Reader($grr)|0);
            $3 = ((($gfi)) + 14|0);
            HEAP16[$3>>1] = $2;
            $4 = (__Z14gifgetunsignedP10Gif_Reader($grr)|0);
            $5 = ((($gfi)) + 8|0);
            HEAP16[$5>>1] = $4;
            $6 = (__Z14gifgetunsignedP10Gif_Reader($grr)|0);
            $7 = ((($gfi)) + 10|0);
            HEAP16[$7>>1] = $6;
            $8 = HEAP16[$5>>1]|0;
            $9 = ($8<<16>>16)==(0);
            if ($9) {
                $10 = HEAP32[$gfc>>2]|0;
                $11 = ((($10)) + 18|0);
                $12 = HEAP16[$11>>1]|0;
                HEAP16[$5>>1] = $12;
                $$pr = HEAP16[$7>>1]|0;
                $13 = $$pr;
            } else {
                $13 = $6;
            }
            $14 = ($13<<16>>16)==(0);
            if ($14) {
                $15 = HEAP32[$gfc>>2]|0;
                $16 = ((($15)) + 20|0);
                $17 = HEAP16[$16>>1]|0;
                HEAP16[$7>>1] = $17;
            }
            $18 = HEAP16[$5>>1]|0;
            $19 = ($18<<16>>16)==(0);
            if ($19) {
                label = 7;
            } else {
                $20 = HEAP16[$7>>1]|0;
                $21 = ($20<<16>>16)==(0);
                if ($21) {
                    label = 7;
                } else {
                    $$02 = $read_flags;
                }
            }
            if ((label|0) == 7) {
                __Z14gif_read_errorP11Gif_ContextiPKc($gfc,1,7012);
                _Gif_MakeImageEmpty($gfi);
                $$02 = 0;
            }
            $22 = HEAP16[$1>>1]|0;
            $23 = $22&65535;
            $24 = HEAP16[$5>>1]|0;
            $25 = $24&65535;
            $26 = (($25) + ($23))|0;
            $27 = ($26>>>0)>(65535);
            if ($27) {
                label = 10;
            } else {
                $28 = HEAP16[$3>>1]|0;
                $29 = $28&65535;
                $30 = HEAP16[$7>>1]|0;
                $31 = $30&65535;
                $32 = (($31) + ($29))|0;
                $33 = ($32>>>0)>(65535);
                if ($33) {
                    label = 10;
                } else {
                    $$13 = $$02;
                }
            }
            if ((label|0) == 10) {
                __Z14gif_read_errorP11Gif_ContextiPKc($gfc,1,7047);
                _Gif_MakeImageEmpty($gfi);
                $$13 = 0;
            }
            $34 = ((($grr)) + 24|0);
            $35 = HEAP32[$34>>2]|0;
            $36 = (FUNCTION_TABLE_ii[$35 & 7]($grr)|0);
            $37 = $36&255;
            $38 = $37 & 128;
            $39 = ($38|0)==(0);
            do {
                if (!($39)) {
                    $40 = $37 & 7;
                    $41 = (($40) + 1)|0;
                    $42 = 1 << $41;
                    $43 = (__Z16read_color_tableiP10Gif_Reader($42,$grr)|0);
                    $44 = ((($gfi)) + 24|0);
                    HEAP32[$44>>2] = $43;
                    $45 = ($43|0)==(0|0);
                    if ($45) {
                        $$1 = 0;
                        STACKTOP = sp;return ($$1|0);
                    } else {
                        $46 = ((($43)) + 12|0);
                        HEAP32[$46>>2] = 1;
                        break;
                    }
                }
            } while(0);
            $47 = $37 >>> 6;
            $$lobit = $47 & 1;
            $48 = $$lobit&255;
            $49 = ((($gfi)) + 19|0);
            HEAP8[$49>>0] = $48;
            $50 = $$13 & 1;
            $51 = ($50|0)==(0);
            do {
                if ($51) {
                    $61 = $$13 & 2;
                    $62 = ($61|0)==(0);
                    if (!($62)) {
                        $63 = (__Z16uncompress_imageP11Gif_ContextP9Gif_ImageP10Gif_Reader($gfc,$gfi,$grr)|0);
                        $64 = ($63|0)==(0);
                        if ($64) {
                            $$1 = 0;
                        } else {
                            break;
                        }
                        STACKTOP = sp;return ($$1|0);
                    }
                    $65 = HEAP32[$34>>2]|0;
                    $66 = (FUNCTION_TABLE_ii[$65 & 7]($grr)|0);
                    $67 = ($66<<24>>24)==(0);
                    if (!($67)) {
                        $68 = ((($grr)) + 28|0);
                        $$sink4 = $66;
                        while(1) {
                            $69 = $$sink4&255;
                            $70 = HEAP32[$68>>2]|0;
                            (FUNCTION_TABLE_iiii[$70 & 15]($new_grr,$69,$grr)|0);
                            $71 = HEAP32[$34>>2]|0;
                            $72 = (FUNCTION_TABLE_ii[$71 & 7]($grr)|0);
                            $73 = ($72<<24>>24)==(0);
                            if ($73) {
                                break;
                            } else {
                                $$sink4 = $72;
                            }
                        }
                    }
                } else {
                    $52 = (__Z21read_compressed_imageP9Gif_ImageP10Gif_Readeri($gfi,$grr,$$13)|0);
                    $53 = ($52|0)==(0);
                    if ($53) {
                        $$1 = 0;
                        STACKTOP = sp;return ($$1|0);
                    }
                    $54 = $$13 & 2;
                    $55 = ($54|0)==(0);
                    if (!($55)) {
                        $56 = ((($gfi)) + 52|0);
                        $57 = HEAP32[$56>>2]|0;
                        $58 = ((($gfi)) + 44|0);
                        $59 = HEAP32[$58>>2]|0;
                        __Z16make_data_readerP10Gif_ReaderPKhj($new_grr,$57,$59);
                        $60 = (__Z16uncompress_imageP11Gif_ContextP9Gif_ImageP10Gif_Reader($gfc,$gfi,$new_grr)|0);
                        $not$ = ($60|0)==(0);
                        if ($not$) {
                            $$1 = 0;
                            STACKTOP = sp;return ($$1|0);
                        }
                    }
                }
            } while(0);
            $$1 = 1;
            STACKTOP = sp;return ($$1|0);
        }
        function __Z30read_graphic_control_extensionP11Gif_ContextP9Gif_ImageP10Gif_Reader($gfc,$gfi,$grr) {
            $gfc = $gfc|0;
            $gfi = $gfi|0;
            $grr = $grr|0;
            var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $crap = 0, $len$11 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 256|0;
            $crap = sp;
            $0 = ((($grr)) + 24|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = (FUNCTION_TABLE_ii[$1 & 7]($grr)|0);
            switch ($2<<24>>24) {
                case 4:  {
                    $3 = HEAP32[$0>>2]|0;
                    $4 = (FUNCTION_TABLE_ii[$3 & 7]($grr)|0);
                    $5 = $4&255;
                    $6 = $5 >>> 2;
                    $7 = $6 & 7;
                    $8 = $7&255;
                    $9 = ((($gfi)) + 18|0);
                    HEAP8[$9>>0] = $8;
                    $10 = (__Z14gifgetunsignedP10Gif_Reader($grr)|0);
                    $11 = ((($gfi)) + 16|0);
                    HEAP16[$11>>1] = $10;
                    $12 = HEAP32[$0>>2]|0;
                    $13 = (FUNCTION_TABLE_ii[$12 & 7]($grr)|0);
                    $14 = $13&255;
                    $15 = ((($gfi)) + 20|0);
                    $16 = $5 & 1;
                    $17 = ($16|0)==(0);
                    $$ = $17 ? -1 : $14;
                    HEAP16[$15>>1] = $$;
                    break;
                }
                case 0:  {
                    break;
                }
                default: {
                    $18 = $2&255;
                    __Z14gif_read_errorP11Gif_ContextiPKc($gfc,1,6990);
                    $19 = ((($grr)) + 28|0);
                    $20 = HEAP32[$19>>2]|0;
                    (FUNCTION_TABLE_iiii[$20 & 15]($crap,$18,$grr)|0);
                }
            }
            $21 = HEAP32[$0>>2]|0;
            $22 = (FUNCTION_TABLE_ii[$21 & 7]($grr)|0);
            $23 = ($22<<24>>24)==(0);
            if ($23) {
                STACKTOP = sp;return;
            }
            $24 = ((($grr)) + 28|0);
            $len$11 = $22;
            while(1) {
                $25 = $len$11&255;
                __Z14gif_read_errorP11Gif_ContextiPKc($gfc,1,6990);
                $26 = HEAP32[$24>>2]|0;
                (FUNCTION_TABLE_iiii[$26 & 15]($crap,$25,$grr)|0);
                $27 = HEAP32[$0>>2]|0;
                $28 = (FUNCTION_TABLE_ii[$27 & 7]($grr)|0);
                $29 = ($28<<24>>24)==(0);
                if ($29) {
                    break;
                } else {
                    $len$11 = $28;
                }
            }
            STACKTOP = sp;return;
        }
        function __Z9suck_dataPcPiP10Gif_Reader($data,$store_len,$grr) {
            $data = $data|0;
            $store_len = $store_len|0;
            $grr = $grr|0;
            var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
            var $8 = 0, $9 = 0, $total_len$0$lcssa = 0, $total_len$05 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 24|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = (FUNCTION_TABLE_ii[$1 & 7]($grr)|0);
            $3 = ($2<<24>>24)==(0);
            L1: do {
                if ($3) {
                    $$01$lcssa = $data;$total_len$0$lcssa = 0;
                } else {
                    $4 = $2&255;
                    $5 = ((($grr)) + 28|0);
                    $$014 = $data;$7 = $4;$total_len$05 = 0;
                    while(1) {
                        $6 = (($total_len$05) + ($7))|0;
                        $8 = (($6) + 1)|0;
                        $9 = (_Gif_Realloc($$014,1,$8,6860,671)|0);
                        $10 = ($9|0)==(0|0);
                        if ($10) {
                            $$0 = 0;
                            break;
                        }
                        $11 = HEAP32[$5>>2]|0;
                        $12 = (($9) + ($total_len$05)|0);
                        (FUNCTION_TABLE_iiii[$11 & 15]($12,$7,$grr)|0);
                        $13 = (($9) + ($6)|0);
                        HEAP8[$13>>0] = 0;
                        $14 = HEAP32[$0>>2]|0;
                        $15 = (FUNCTION_TABLE_ii[$14 & 7]($grr)|0);
                        $16 = $15&255;
                        $17 = ($15<<24>>24)==(0);
                        if ($17) {
                            $$01$lcssa = $9;$total_len$0$lcssa = $6;
                            break L1;
                        } else {
                            $$014 = $9;$7 = $16;$total_len$05 = $6;
                        }
                    }
                    return ($$0|0);
                }
            } while(0);
            $18 = ($store_len|0)==(0|0);
            if ($18) {
                $$0 = $$01$lcssa;
                return ($$0|0);
            }
            HEAP32[$store_len>>2] = $total_len$0$lcssa;
            $$0 = $$01$lcssa;
            return ($$0|0);
        }
        function __Z22read_comment_extensionP9Gif_ImageP10Gif_Reader($gfi,$grr) {
            $gfi = $gfi|0;
            $grr = $grr|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gfcom$01 = 0, $len = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $len = sp;
            $0 = ((($gfi)) + 32|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = (__Z9suck_dataPcPiP10Gif_Reader(0,$len,$grr)|0);
            $3 = ($2|0)==(0|0);
            if (!($3)) {
                $4 = ($1|0)==(0|0);
                if ($4) {
                    $5 = (_Gif_NewComment()|0);
                    HEAP32[$0>>2] = $5;
                    $6 = ($5|0)==(0|0);
                    if ($6) {
                        $$0 = 0;
                        STACKTOP = sp;return ($$0|0);
                    } else {
                        $gfcom$01 = $5;
                    }
                } else {
                    $gfcom$01 = $1;
                }
                $7 = HEAP32[$len>>2]|0;
                $8 = (_Gif_AddCommentTake($gfcom$01,$2,$7)|0);
                $9 = ($8|0)==(0);
                if ($9) {
                    $$0 = 0;
                    STACKTOP = sp;return ($$0|0);
                }
            }
            $$0 = 1;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z26read_application_extensionP11Gif_ContextP10Gif_Reader($gfc,$grr) {
            $gfc = $gfc|0;
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $len$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 256|0;
            $buffer = sp;
            $0 = HEAP32[$gfc>>2]|0;
            $1 = ((($grr)) + 24|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = (FUNCTION_TABLE_ii[$2 & 7]($grr)|0);
            $4 = ((($grr)) + 28|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = $3&255;
            (FUNCTION_TABLE_iiii[$5 & 15]($buffer,$6,$grr)|0);
            $7 = ($3<<24>>24)==(11);
            do {
                if ($7) {
                    $8 = (_memcmp($buffer,6947,11)|0);
                    $9 = ($8|0)==(0);
                    if (!($9)) {
                        $10 = (_memcmp($buffer,6959,11)|0);
                        $11 = ($10|0)==(0);
                        if (!($11)) {
                            break;
                        }
                    }
                    $12 = HEAP32[$1>>2]|0;
                    $13 = (FUNCTION_TABLE_ii[$12 & 7]($grr)|0);
                    $14 = ($13<<24>>24)==(3);
                    do {
                        if ($14) {
                            $15 = HEAP32[$1>>2]|0;
                            (FUNCTION_TABLE_ii[$15 & 7]($grr)|0);
                            $16 = (__Z14gifgetunsignedP10Gif_Reader($grr)|0);
                            $17 = $16&65535;
                            $18 = ((($0)) + 24|0);
                            HEAP32[$18>>2] = $17;
                            $19 = HEAP32[$1>>2]|0;
                            $20 = (FUNCTION_TABLE_ii[$19 & 7]($grr)|0);
                            $21 = ($20<<24>>24)==(0);
                            if ($21) {
                                STACKTOP = sp;return;
                            } else {
                                __Z14gif_read_errorP11Gif_ContextiPKc($gfc,1,6971);
                                $len$01 = $20;
                                break;
                            }
                        } else {
                            __Z14gif_read_errorP11Gif_ContextiPKc($gfc,1,6971);
                            $22 = ($13<<24>>24)==(0);
                            if ($22) {
                                STACKTOP = sp;return;
                            } else {
                                $len$01 = $13;
                            }
                        }
                    } while(0);
                    while(1) {
                        $23 = $len$01&255;
                        $24 = HEAP32[$4>>2]|0;
                        (FUNCTION_TABLE_iiii[$24 & 15]($buffer,$23,$grr)|0);
                        $25 = HEAP32[$1>>2]|0;
                        $26 = (FUNCTION_TABLE_ii[$25 & 7]($grr)|0);
                        $27 = ($26<<24>>24)==(0);
                        if ($27) {
                            break;
                        } else {
                            $len$01 = $26;
                        }
                    }
                    STACKTOP = sp;return;
                }
            } while(0);
            (__Z22read_unknown_extensionP11Gif_ContextP10Gif_ReaderiPci($gfc,$grr,255,$buffer,$6)|0);
            STACKTOP = sp;return;
        }
        function __Z22read_unknown_extensionP11Gif_ContextP10Gif_ReaderiPci($gfc,$grr,$kind,$appname,$applength) {
            $gfc = $gfc|0;
            $grr = $grr|0;
            $kind = $kind|0;
            $appname = $appname|0;
            $applength = $applength|0;
            var $$lcssa = 0, $$lcssa34 = 0, $$ph23 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
            var $block_len$08 = 0, $block_len$08$lcssa = 0, $block_len$17 = 0, $buffer = 0, $data$09 = 0, $data$1$ph$ph = 0, $data_len$010 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 256|0;
            $buffer = sp;
            $0 = ((($grr)) + 24|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = (FUNCTION_TABLE_ii[$1 & 7]($grr)|0);
            $3 = ($2<<24>>24)==(0);
            do {
                if ($3) {
                    $data$1$ph$ph = 0;
                } else {
                    $4 = $2&255;
                    $5 = ((($grr)) + 28|0);
                    $7 = $4;$block_len$08 = $2;$data$09 = 0;$data_len$010 = 0;
                    while(1) {
                        $6 = (($7) + 2)|0;
                        $8 = (($6) + ($data_len$010))|0;
                        $9 = (_Gif_Realloc($data$09,1,$8,6860,696)|0);
                        $10 = ($9|0)==(0|0);
                        if ($10) {
                            $block_len$08$lcssa = $block_len$08;
                            label = 8;
                            break;
                        }
                        $11 = (($9) + ($data_len$010)|0);
                        HEAP8[$11>>0] = $block_len$08;
                        $12 = HEAP32[$5>>2]|0;
                        $$sum = (($data_len$010) + 1)|0;
                        $13 = (($9) + ($$sum)|0);
                        (FUNCTION_TABLE_iiii[$12 & 15]($13,$7,$grr)|0);
                        $14 = (($7) + 1)|0;
                        $15 = (($14) + ($data_len$010))|0;
                        $16 = HEAP32[$0>>2]|0;
                        $17 = (FUNCTION_TABLE_ii[$16 & 7]($grr)|0);
                        $18 = $17&255;
                        $19 = ($17<<24>>24)==(0);
                        if ($19) {
                            $$lcssa = $15;$$lcssa34 = $9;
                            label = 5;
                            break;
                        } else {
                            $7 = $18;$block_len$08 = $17;$data$09 = $9;$data_len$010 = $15;
                        }
                    }
                    if ((label|0) == 5) {
                        $20 = (_Gif_NewExtension($kind,$appname,$applength)|0);
                        $21 = ($20|0)==(0|0);
                        if ($21) {
                            $data$1$ph$ph = $$lcssa34;
                            break;
                        }
                        $22 = ((($20)) + 12|0);
                        HEAP32[$22>>2] = $$lcssa34;
                        $23 = ((($20)) + 36|0);
                        HEAP32[$23>>2] = 1;
                        $24 = ((($20)) + 16|0);
                        HEAP32[$24>>2] = $$lcssa;
                        $25 = ((($20)) + 20|0);
                        HEAP32[$25>>2] = 1;
                        $26 = (($$lcssa34) + ($$lcssa)|0);
                        HEAP8[$26>>0] = 0;
                        $27 = HEAP32[$gfc>>2]|0;
                        $28 = ((($gfc)) + 32|0);
                        $29 = HEAP32[$28>>2]|0;
                        (_Gif_AddExtension($27,$29,$20)|0);
                        $$ph23 = 1;
                        STACKTOP = sp;return ($$ph23|0);
                    }
                    else if ((label|0) == 8) {
                        $30 = ((($grr)) + 28|0);
                        $block_len$17 = $block_len$08$lcssa;
                        while(1) {
                            $31 = $block_len$17&255;
                            $32 = HEAP32[$30>>2]|0;
                            (FUNCTION_TABLE_iiii[$32 & 15]($buffer,$31,$grr)|0);
                            $33 = HEAP32[$0>>2]|0;
                            $34 = (FUNCTION_TABLE_ii[$33 & 7]($grr)|0);
                            $35 = ($34<<24>>24)==(0);
                            if ($35) {
                                $$ph23 = 0;
                                break;
                            } else {
                                $block_len$17 = $34;
                            }
                        }
                        STACKTOP = sp;return ($$ph23|0);
                    }
                }
            } while(0);
            _free($data$1$ph$ph);
            $$ph23 = 0;
            STACKTOP = sp;return ($$ph23|0);
        }
        function __Z14gifgetunsignedP10Gif_Reader($grr) {
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 24|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = (FUNCTION_TABLE_ii[$1 & 7]($grr)|0);
            $3 = HEAP32[$0>>2]|0;
            $4 = (FUNCTION_TABLE_ii[$3 & 7]($grr)|0);
            $5 = $2&255;
            $6 = $4&255;
            $7 = $6 << 8;
            $8 = $7 | $5;
            $9 = $8&65535;
            return ($9|0);
        }
        function __Z16read_color_tableiP10Gif_Reader($size,$grr) {
            $size = $size|0;
            $grr = $grr|0;
            var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
            var $c$03 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Gif_NewFullColormap($size,$size)|0);
            $1 = ($0|0)==(0|0);
            if ($1) {
                $$0 = 0;
                return ($$0|0);
            }
            $2 = ($size|0)==(0);
            if ($2) {
                $$0 = $0;
                return ($$0|0);
            }
            $3 = ((($0)) + 16|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ((($grr)) + 24|0);
            $$012 = $size;$c$03 = $4;
            while(1) {
                $6 = HEAP32[$5>>2]|0;
                $7 = (FUNCTION_TABLE_ii[$6 & 7]($grr)|0);
                $8 = ((($c$03)) + 1|0);
                HEAP8[$8>>0] = $7;
                $9 = HEAP32[$5>>2]|0;
                $10 = (FUNCTION_TABLE_ii[$9 & 7]($grr)|0);
                $11 = ((($c$03)) + 2|0);
                HEAP8[$11>>0] = $10;
                $12 = HEAP32[$5>>2]|0;
                $13 = (FUNCTION_TABLE_ii[$12 & 7]($grr)|0);
                $14 = ((($c$03)) + 3|0);
                HEAP8[$14>>0] = $13;
                HEAP8[$c$03>>0] = 0;
                $15 = (($$012) + -1)|0;
                $16 = ((($c$03)) + 8|0);
                $17 = ($15|0)==(0);
                if ($17) {
                    $$0 = $0;
                    break;
                } else {
                    $$012 = $15;$c$03 = $16;
                }
            }
            return ($$0|0);
        }
        function __Z21read_compressed_imageP9Gif_ImageP10Gif_Readeri($gfi,$grr,$read_flags) {
            $gfi = $gfi|0;
            $grr = $grr|0;
            $read_flags = $read_flags|0;
            var $$0 = 0, $$sink3 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
            var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $comp$0$lcssa = 0, $comp$06 = 0, $comp$1 = 0;
            var $comp_cap$04 = 0, $comp_cap$1 = 0, $comp_len$0$lcssa = 0, $comp_len$05 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 16|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0);
            if ($2) {
                $42 = (_Gif_Realloc(0,1,1024,6860,467)|0);
                $43 = ($42|0)==(0|0);
                if ($43) {
                    $$0 = 0;
                    return ($$0|0);
                }
                $44 = ((($grr)) + 24|0);
                $45 = HEAP32[$44>>2]|0;
                $46 = (FUNCTION_TABLE_ii[$45 & 7]($grr)|0);
                HEAP8[$42>>0] = $46;
                $47 = HEAP32[$44>>2]|0;
                $48 = (FUNCTION_TABLE_ii[$47 & 7]($grr)|0);
                $49 = ($48<<24>>24)==(0);
                L6: do {
                    if ($49) {
                        $comp$0$lcssa = $42;$comp_len$0$lcssa = 1;
                    } else {
                        $50 = $48&255;
                        $51 = ((($grr)) + 28|0);
                        $$sink3 = $48;$53 = $50;$comp$06 = $42;$comp_cap$04 = 1024;$comp_len$05 = 1;
                        while(1) {
                            $52 = (($53) + 2)|0;
                            $54 = (($52) + ($comp_len$05))|0;
                            $55 = ($54>>>0)>($comp_cap$04>>>0);
                            if ($55) {
                                $56 = $comp_cap$04 << 1;
                                $57 = (_Gif_Realloc($comp$06,1,$56,6860,482)|0);
                                $58 = ($57|0)==(0|0);
                                if ($58) {
                                    $$0 = 0;
                                    break;
                                } else {
                                    $comp$1 = $57;$comp_cap$1 = $56;
                                }
                            } else {
                                $comp$1 = $comp$06;$comp_cap$1 = $comp_cap$04;
                            }
                            $59 = (($comp$1) + ($comp_len$05)|0);
                            HEAP8[$59>>0] = $$sink3;
                            $60 = HEAP32[$51>>2]|0;
                            $$sum = (($comp_len$05) + 1)|0;
                            $61 = (($comp$1) + ($$sum)|0);
                            (FUNCTION_TABLE_iiii[$60 & 15]($61,$53,$grr)|0);
                            $62 = (($53) + 1)|0;
                            $63 = (($62) + ($comp_len$05))|0;
                            $64 = HEAP32[$44>>2]|0;
                            $65 = (FUNCTION_TABLE_ii[$64 & 7]($grr)|0);
                            $66 = $65&255;
                            $67 = ($65<<24>>24)==(0);
                            if ($67) {
                                $comp$0$lcssa = $comp$1;$comp_len$0$lcssa = $63;
                                break L6;
                            } else {
                                $$sink3 = $65;$53 = $66;$comp$06 = $comp$1;$comp_cap$04 = $comp_cap$1;$comp_len$05 = $63;
                            }
                        }
                        return ($$0|0);
                    }
                } while(0);
                $68 = (($comp_len$0$lcssa) + 1)|0;
                $69 = (($comp$0$lcssa) + ($comp_len$0$lcssa)|0);
                HEAP8[$69>>0] = 0;
                $70 = ((($gfi)) + 44|0);
                HEAP32[$70>>2] = $68;
                $71 = ((($gfi)) + 48|0);
                HEAP32[$71>>2] = 0;
                $72 = ((($gfi)) + 52|0);
                HEAP32[$72>>2] = $comp$0$lcssa;
                $73 = ((($gfi)) + 56|0);
                HEAP32[$73>>2] = 1;
                $$0 = 1;
                return ($$0|0);
            }
            $3 = ((($grr)) + 8|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = (($4) + 1)|0;
            HEAP32[$3>>2] = $5;
            $6 = ((($grr)) + 4|0);
            $7 = ((($grr)) + 12|0);
            while(1) {
                $8 = HEAP32[$3>>2]|0;
                $9 = HEAP32[$7>>2]|0;
                $10 = ($8>>>0)<($9>>>0);
                if (!($10)) {
                    break;
                }
                $11 = HEAP32[$6>>2]|0;
                $12 = (($11) + ($8)|0);
                $13 = HEAP8[$12>>0]|0;
                $14 = $13&255;
                $15 = (($8) + 1)|0;
                $16 = (($15) + ($14))|0;
                HEAP32[$3>>2] = $16;
                $17 = ($13<<24>>24)==(0);
                if ($17) {
                    break;
                }
            }
            $18 = HEAP32[$3>>2]|0;
            $19 = HEAP32[$7>>2]|0;
            $20 = ($18>>>0)>($19>>>0);
            if ($20) {
                HEAP32[$3>>2] = $19;
            }
            $21 = HEAP32[$3>>2]|0;
            $22 = (($21) - ($4))|0;
            $23 = ((($gfi)) + 44|0);
            HEAP32[$23>>2] = $22;
            $24 = ((($gfi)) + 48|0);
            HEAP32[$24>>2] = 0;
            $25 = $read_flags & 4;
            $26 = ($25|0)==(0);
            if (!($26)) {
                $27 = ((($grr)) + 4|0);
                $28 = HEAP32[$27>>2]|0;
                $29 = (($28) + ($4)|0);
                $30 = ((($gfi)) + 52|0);
                HEAP32[$30>>2] = $29;
                $31 = ((($gfi)) + 56|0);
                HEAP32[$31>>2] = 0;
                $$0 = 1;
                return ($$0|0);
            }
            $32 = HEAP32[$23>>2]|0;
            $33 = (_Gif_Realloc(0,1,$32,6860,457)|0);
            $34 = ((($gfi)) + 52|0);
            HEAP32[$34>>2] = $33;
            $35 = ((($gfi)) + 56|0);
            HEAP32[$35>>2] = 1;
            $36 = HEAP32[$34>>2]|0;
            $37 = ($36|0)==(0|0);
            if ($37) {
                $$0 = 0;
                return ($$0|0);
            }
            $38 = ((($grr)) + 4|0);
            $39 = HEAP32[$38>>2]|0;
            $40 = (($39) + ($4)|0);
            $41 = HEAP32[$23>>2]|0;
            _memcpy(($36|0),($40|0),($41|0))|0;
            $$0 = 1;
            return ($$0|0);
        }
        function __Z15read_image_dataP11Gif_ContextP10Gif_Reader($gfc,$grr) {
            $gfc = $gfc|0;
            $grr = $grr|0;
            var $$ = 0, $$bits_needed$0 = 0, $$lcssa32 = 0, $$sink10 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
            var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0;
            var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
            var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
            var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
            var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
            var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $accum$0 = 0, $bit_length = 0, $bit_position = 0, $bits_needed$0$ph$ph = 0, $buf = 0, $buffer = 0, $code$011 = 0;
            var $code$1 = 0, $code$1$ph = 0, $code$1$ph$ph = 0, $code$2 = 0, $code$2$lcssa = 0, $code$2$lcssa$lcssa = 0, $min_code_size$0$ph = 0, $next_code$0$ph = 0, $next_code$0$ph$ph = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond2 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 1312|0;
            $vararg_buffer2 = sp + 8|0;
            $vararg_buffer = sp;
            $buffer = sp + 1048|0;
            $bit_position = sp + 16|0;
            $bit_length = sp + 12|0;
            $buf = sp + 24|0;
            $0 = ((($gfc)) + 28|0);
            HEAP32[$0>>2] = 0;
            $1 = ((($grr)) + 24|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = (FUNCTION_TABLE_ii[$2 & 7]($grr)|0);
            $4 = ($3&255)>(11);
            if ($4) {
                __Z14gif_read_errorP11Gif_ContextiPKc($gfc,1,7093);
                $min_code_size$0$ph = 11;
            } else {
                $5 = $3&255;
                $6 = ($3&255)<(2);
                if ($6) {
                    __Z14gif_read_errorP11Gif_ContextiPKc($gfc,1,7132);
                    $min_code_size$0$ph = 2;
                } else {
                    $min_code_size$0$ph = $5;
                }
            }
            $7 = 1 << $min_code_size$0$ph;
            $8 = $7&65535;
            $9 = $7 & 65535;
            $10 = ((($gfc)) + 4|0);
            $11 = ((($gfc)) + 8|0);
            $12 = ((($gfc)) + 12|0);
            $15 = 0;$code$011 = 0;
            while(1) {
                $13 = HEAP32[$10>>2]|0;
                $14 = (($13) + ($15<<1)|0);
                HEAP16[$14>>1] = -16108;
                $16 = $code$011&255;
                $17 = HEAP32[$11>>2]|0;
                $18 = (($17) + ($15)|0);
                HEAP8[$18>>0] = $16;
                $19 = HEAP32[$12>>2]|0;
                $20 = (($19) + ($15<<1)|0);
                HEAP16[$20>>1] = 1;
                $21 = (($code$011) + 1)<<16>>16;
                $22 = $21&65535;
                $23 = ($22>>>0)<($9>>>0);
                if ($23) {
                    $15 = $22;$code$011 = $21;
                } else {
                    break;
                }
            }
            $24 = (($7) + 1)|0;
            $25 = $24&65535;
            $26 = (($min_code_size$0$ph) + 1)|0;
            HEAP32[$bit_position>>2] = 0;
            HEAP32[$bit_length>>2] = 0;
            $27 = $24 & 65535;
            $28 = ((($gfc)) + 4|0);
            $29 = ((($gfc)) + 12|0);
            $30 = ((($gfc)) + 8|0);
            $31 = ((($gfc)) + 20|0);
            $32 = ((($gfc)) + 24|0);
            $33 = ((($gfc)) + 44|0);
            $bits_needed$0$ph$ph = $26;$code$1$ph$ph = $8;$next_code$0$ph$ph = $25;
            L9: while(1) {
                $34 = ($bits_needed$0$ph$ph|0)>(7);
                $35 = 1 << $bits_needed$0$ph$ph;
                $36 = (($35) + 65535)|0;
                $code$1$ph = $code$1$ph$ph;$next_code$0$ph = $next_code$0$ph$ph;
                while(1) {
                    $37 = $next_code$0$ph&65535;
                    $notrhs = ($next_code$0$ph<<16>>16)==(0);
                    $38 = ($37|0)==($9|0);
                    $code$1 = $code$1$ph;
                    while(1) {
                        $39 = HEAP32[$bit_position>>2]|0;
                        $40 = (($39) + ($bits_needed$0$ph$ph))|0;
                        $41 = HEAP32[$bit_length>>2]|0;
                        $42 = ($40|0)>($41|0);
                        if ($42) {
                            $43 = (__Z16read_image_blockP10Gif_ReaderPhPiS2_i($grr,$buffer,$bit_position,$bit_length,$bits_needed$0$ph$ph)|0);
                            $44 = ($43|0)==(0);
                            if ($44) {
                                break L9;
                            }
                        }
                        $45 = HEAP32[$bit_position>>2]|0;
                        $46 = (($45|0) / 8)&-1;
                        $47 = (($buffer) + ($46)|0);
                        $48 = HEAP8[$47>>0]|0;
                        $49 = $48&255;
                        $50 = (($46) + 1)|0;
                        $51 = (($buffer) + ($50)|0);
                        $52 = HEAP8[$51>>0]|0;
                        $53 = $52&255;
                        $54 = $53 << 8;
                        $55 = $54 | $49;
                        if ($34) {
                            $56 = (($46) + 2)|0;
                            $57 = (($buffer) + ($56)|0);
                            $58 = HEAP8[$57>>0]|0;
                            $59 = $58&255;
                            $60 = $59 << 16;
                            $61 = $60 | $55;
                            $accum$0 = $61;
                        } else {
                            $accum$0 = $55;
                        }
                        $62 = HEAP32[$bit_position>>2]|0;
                        $63 = $62 & 7;
                        $64 = $accum$0 >>> $63;
                        $65 = $64 & $36;
                        $66 = $65&65535;
                        $67 = (($62) + ($bits_needed$0$ph$ph))|0;
                        HEAP32[$bit_position>>2] = $67;
                        $68 = $65 & 65535;
                        $69 = ($68|0)==($9|0);
                        if ($69) {
                            $bits_needed$0$ph$ph = $26;$code$1$ph$ph = $66;$next_code$0$ph$ph = $25;
                            continue L9;
                        }
                        $70 = ($68|0)==($27|0);
                        if ($70) {
                            label = 27;
                            break L9;
                        }
                        $notlhs = ($68>>>0)<=($37>>>0);
                        $or$cond$not = $notrhs | $notlhs;
                        $or$cond2 = $38 | $or$cond$not;
                        do {
                            if ($or$cond2) {
                                $code$2 = $66;
                            } else {
                                $71 = HEAP32[$33>>2]|0;
                                $72 = ($71|0)<(20);
                                if ($72) {
                                    __Z14gif_read_errorP11Gif_ContextiPKc($gfc,1,7173);
                                    $code$2 = 0;
                                    break;
                                }
                                $73 = ($71|0)==(20);
                                if ($73) {
                                    __Z14gif_read_errorP11Gif_ContextiPKc($gfc,1,7208);
                                    $code$2 = 0;
                                } else {
                                    $code$2 = 0;
                                }
                            }
                        } while(0);
                        $74 = HEAP32[$28>>2]|0;
                        $75 = (($74) + ($37<<1)|0);
                        HEAP16[$75>>1] = $code$1;
                        $76 = $code$1&65535;
                        $77 = HEAP32[$29>>2]|0;
                        $78 = (($77) + ($76<<1)|0);
                        $79 = HEAP16[$78>>1]|0;
                        $80 = $79&65535;
                        $81 = (($80) + 1)|0;
                        $82 = $81&65535;
                        $83 = (($77) + ($37<<1)|0);
                        HEAP16[$83>>1] = $82;
                        $84 = (__Z8one_codeP11Gif_Contextt($gfc,$code$2)|0);
                        $85 = HEAP32[$30>>2]|0;
                        $86 = (($85) + ($37)|0);
                        HEAP8[$86>>0] = $84;
                        $87 = ($code$2<<16>>16)==($next_code$0$ph<<16>>16);
                        if ($87) {
                            $88 = HEAP32[$31>>2]|0;
                            $89 = HEAP32[$0>>2]|0;
                            $90 = (($88) + ($89)|0);
                            $91 = HEAP32[$32>>2]|0;
                            $92 = ($90>>>0)>($91>>>0);
                            if (!($92)) {
                                $93 = HEAP32[$30>>2]|0;
                                $94 = (($93) + ($37)|0);
                                $95 = HEAP8[$94>>0]|0;
                                $96 = (($89) + -1)|0;
                                $97 = (($88) + ($96)|0);
                                HEAP8[$97>>0] = $95;
                            }
                        }
                        if ($38) {
                            $code$1 = $code$2;
                        } else {
                            $code$2$lcssa = $code$2;
                            break;
                        }
                    }
                    $98 = (($next_code$0$ph) + 1)<<16>>16;
                    $99 = $98&65535;
                    $100 = ($99|0)==($35|0);
                    if ($100) {
                        $$lcssa32 = $98;$code$2$lcssa$lcssa = $code$2$lcssa;
                        break;
                    } else {
                        $code$1$ph = $code$2$lcssa;$next_code$0$ph = $98;
                    }
                }
                $101 = ($bits_needed$0$ph$ph|0)<(12);
                $$ = $101 ? $$lcssa32 : $8;
                $102 = $101&1;
                $$bits_needed$0 = (($102) + ($bits_needed$0$ph$ph))|0;
                $bits_needed$0$ph$ph = $$bits_needed$0;$code$1$ph$ph = $code$2$lcssa$lcssa;$next_code$0$ph$ph = $$;
            }
            if ((label|0) == 27) {
                $103 = HEAP32[$1>>2]|0;
                $104 = (FUNCTION_TABLE_ii[$103 & 7]($grr)|0);
                $105 = ($104<<24>>24)==(0);
                if (!($105)) {
                    $106 = ((($grr)) + 28|0);
                    $$sink10 = $104;
                    while(1) {
                        $107 = $$sink10&255;
                        $108 = HEAP32[$106>>2]|0;
                        (FUNCTION_TABLE_iiii[$108 & 15]($buffer,$107,$grr)|0);
                        $109 = HEAP32[$1>>2]|0;
                        $110 = (FUNCTION_TABLE_ii[$109 & 7]($grr)|0);
                        $111 = ($110<<24>>24)==(0);
                        if ($111) {
                            break;
                        } else {
                            $$sink10 = $110;
                        }
                    }
                }
            }
            $112 = ((($gfc)) + 24|0);
            $113 = HEAP32[$112>>2]|0;
            $114 = ((($gfc)) + 20|0);
            $115 = HEAP32[$114>>2]|0;
            $116 = $113;
            $117 = $115;
            $118 = (($116) - ($117))|0;
            $119 = HEAP32[$0>>2]|0;
            $120 = (($118) - ($119))|0;
            $121 = ($120|0)>(0);
            if ($121) {
                $122 = ($120|0)==(1);
                $123 = $122 ? 7236 : 7242;
                HEAP32[$vararg_buffer>>2] = $120;
                $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                HEAP32[$vararg_ptr1>>2] = $123;
                (_sprintf($buf,7249,$vararg_buffer)|0);
                __Z14gif_read_errorP11Gif_ContextiPKc($gfc,1,$buf);
                $124 = HEAP32[$0>>2]|0;
                $125 = HEAP32[$114>>2]|0;
                $126 = (($125) + ($124)|0);
                _memset(($126|0),0,($120|0))|0;
                STACKTOP = sp;return;
            }
            $127 = ($120|0)<(-1);
            if (!($127)) {
                STACKTOP = sp;return;
            }
            $128 = (0 - ($120))|0;
            HEAP32[$vararg_buffer2>>2] = $128;
            (_sprintf($buf,7278,$vararg_buffer2)|0);
            __Z14gif_read_errorP11Gif_ContextiPKc($gfc,0,$buf);
            STACKTOP = sp;return;
        }
        function __Z16read_image_blockP10Gif_ReaderPhPiS2_i($grr,$buffer,$bit_pos_store,$bit_len_store,$bits_needed) {
            $grr = $grr|0;
            $buffer = $buffer|0;
            $bit_pos_store = $bit_pos_store|0;
            $bit_len_store = $bit_len_store|0;
            $bits_needed = $bits_needed|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bit_length$0$lcssa = 0, $bit_length$03 = 0, $bit_length$1 = 0, $bit_position$0$lcssa = 0, $bit_position$04 = 0, $bit_position$1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$bit_pos_store>>2]|0;
            $1 = HEAP32[$bit_len_store>>2]|0;
            $2 = (($0) + ($bits_needed))|0;
            $3 = ($2|0)>($1|0);
            L1: do {
                if ($3) {
                    $4 = ((($buffer)) + 1|0);
                    $5 = ((($grr)) + 24|0);
                    $6 = ((($grr)) + 28|0);
                    $bit_length$03 = $1;$bit_position$04 = $0;
                    while(1) {
                        $7 = ($bit_position$04|0)>(7);
                        if ($7) {
                            $8 = (($bit_position$04|0) / 8)&-1;
                            $9 = (($buffer) + ($8)|0);
                            $10 = HEAP8[$9>>0]|0;
                            HEAP8[$buffer>>0] = $10;
                            $11 = (($8) + 1)|0;
                            $12 = (($buffer) + ($11)|0);
                            $13 = HEAP8[$12>>0]|0;
                            HEAP8[$4>>0] = $13;
                            $14 = $8 << 3;
                            $15 = (($bit_position$04) - ($14))|0;
                            $16 = (($bit_length$03) - ($14))|0;
                            $bit_length$1 = $16;$bit_position$1 = $15;
                        } else {
                            $bit_length$1 = $bit_length$03;$bit_position$1 = $bit_position$04;
                        }
                        $17 = HEAP32[$5>>2]|0;
                        $18 = (FUNCTION_TABLE_ii[$17 & 7]($grr)|0);
                        $19 = $18&255;
                        $20 = ($18<<24>>24)==(0);
                        if ($20) {
                            $$0 = 0;
                            break;
                        }
                        $21 = HEAP32[$6>>2]|0;
                        $22 = (($bit_length$1|0) / 8)&-1;
                        $23 = (($buffer) + ($22)|0);
                        (FUNCTION_TABLE_iiii[$21 & 15]($23,$19,$grr)|0);
                        $24 = $19 << 3;
                        $25 = (($24) + ($bit_length$1))|0;
                        $26 = (($bit_position$1) + ($bits_needed))|0;
                        $27 = ($26|0)>($25|0);
                        if ($27) {
                            $bit_length$03 = $25;$bit_position$04 = $bit_position$1;
                        } else {
                            $bit_length$0$lcssa = $25;$bit_position$0$lcssa = $bit_position$1;
                            break L1;
                        }
                    }
                    return ($$0|0);
                } else {
                    $bit_length$0$lcssa = $1;$bit_position$0$lcssa = $0;
                }
            } while(0);
            HEAP32[$bit_pos_store>>2] = $bit_position$0$lcssa;
            HEAP32[$bit_len_store>>2] = $bit_length$0$lcssa;
            $$0 = 1;
            return ($$0|0);
        }
        function __Z8one_codeP11Gif_Contextt($gfc,$code) {
            $gfc = $gfc|0;
            $code = $code|0;
            var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $codelength$03 = 0, $lastsuffix$0$lcssa = 0, $ptr$02 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfc)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($gfc)) + 4|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = $code&65535;
            $5 = ((($gfc)) + 12|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = (($6) + ($4<<1)|0);
            $8 = HEAP16[$7>>1]|0;
            $9 = $8&65535;
            $10 = ((($gfc)) + 28|0);
            $11 = HEAP32[$10>>2]|0;
            $12 = (($11) + ($9))|0;
            HEAP32[$10>>2] = $12;
            $13 = ($8<<16>>16)==(0);
            if ($13) {
                $lastsuffix$0$lcssa = 0;
                return ($lastsuffix$0$lcssa|0);
            }
            $14 = ((($gfc)) + 20|0);
            $15 = HEAP32[$14>>2]|0;
            $16 = (($15) + ($12)|0);
            $17 = ((($gfc)) + 24|0);
            $$01 = $code;$codelength$03 = $9;$ptr$02 = $16;
            while(1) {
                $18 = $$01&65535;
                $19 = (($1) + ($18)|0);
                $20 = HEAP8[$19>>0]|0;
                $21 = (($3) + ($18<<1)|0);
                $22 = HEAP16[$21>>1]|0;
                $23 = ((($ptr$02)) + -1|0);
                $24 = HEAP32[$17>>2]|0;
                $25 = ($23>>>0)<($24>>>0);
                if ($25) {
                    HEAP8[$23>>0] = $20;
                }
                $26 = (($codelength$03) + -1)|0;
                $27 = ($codelength$03|0)>(1);
                if ($27) {
                    $$01 = $22;$codelength$03 = $26;$ptr$02 = $23;
                } else {
                    $lastsuffix$0$lcssa = $20;
                    break;
                }
            }
            return ($lastsuffix$0$lcssa|0);
        }
        function __Z18record_byte_getterP10Gif_Reader($grr) {
            $grr = $grr|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($grr)) + 12|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($1>>>0)<($3>>>0);
            if (!($4)) {
                $$0 = 0;
                return ($$0|0);
            }
            $5 = (($1) + 1)|0;
            HEAP32[$0>>2] = $5;
            $6 = ((($grr)) + 4|0);
            $7 = HEAP32[$6>>2]|0;
            $8 = (($7) + ($1)|0);
            $9 = HEAP8[$8>>0]|0;
            $$0 = $9;
            return ($$0|0);
        }
        function __Z19record_block_getterPhjP10Gif_Reader($p,$s,$grr) {
            $p = $p|0;
            $s = $s|0;
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = (($1) + ($s))|0;
            $3 = ((($grr)) + 12|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($2>>>0)>($4>>>0);
            $6 = (($4) - ($1))|0;
            $7 = $5 ? $6 : $s;
            $8 = ((($grr)) + 4|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = (($9) + ($1)|0);
            _memcpy(($p|0),($10|0),($7|0))|0;
            $11 = HEAP32[$0>>2]|0;
            $12 = (($11) + ($7))|0;
            HEAP32[$0>>2] = $12;
            $13 = ($7>>>0)<($s>>>0);
            if (!($13)) {
                return ($7|0);
            }
            $14 = (($p) + ($7)|0);
            $15 = (($s) - ($7))|0;
            _memset(($14|0),0,($15|0))|0;
            return ($7|0);
        }
        function __Z12record_eoferP10Gif_Reader($grr) {
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($grr)) + 12|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($1|0)==($3|0);
            $5 = $4&1;
            return ($5|0);
        }
        function _Gif_FullUnoptimize($gfs,$flags) {
            $gfs = $gfs|0;
            $flags = $flags|0;
            var $$0 = 0, $$ok$0 = 0, $$ok$0$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
            var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
            var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $background$0 = 0, $i$015 = 0, $i$19 = 0, $i$27 = 0, $i$36 = 0, $ok$0$lcssa18 = 0, $ok$0$lcssa19 = 0, $ok$010 = 0, $pos$012 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfs)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)<(1);
            if ($2) {
                $$0 = 1;
                return ($$0|0);
            }
            $3 = HEAP32[$0>>2]|0;
            $4 = ($3|0)>(0);
            L4: do {
                if ($4) {
                    $5 = HEAP32[$gfs>>2]|0;
                    $i$015 = 0;
                    while(1) {
                        $9 = (($5) + ($i$015<<2)|0);
                        $10 = HEAP32[$9>>2]|0;
                        $11 = ((($10)) + 24|0);
                        $12 = HEAP32[$11>>2]|0;
                        $13 = ($12|0)==(0|0);
                        $7 = (($i$015) + 1)|0;
                        if (!($13)) {
                            $$0 = 0;
                            break;
                        }
                        $6 = HEAP32[$0>>2]|0;
                        $8 = ($7|0)<($6|0);
                        if ($8) {
                            $i$015 = $7;
                        } else {
                            break L4;
                        }
                    }
                    return ($$0|0);
                }
            } while(0);
            $14 = ((($gfs)) + 12|0);
            $15 = HEAP32[$14>>2]|0;
            $16 = ($15|0)==(0|0);
            if ($16) {
                $$0 = 0;
                return ($$0|0);
            }
            _Gif_CalculateScreenSize($gfs,0);
            $17 = ((($gfs)) + 18|0);
            $18 = HEAP16[$17>>1]|0;
            $19 = $18&65535;
            $20 = ((($gfs)) + 20|0);
            $21 = HEAP16[$20>>1]|0;
            $22 = $21&65535;
            $23 = Math_imul($22, $19)|0;
            $24 = (_Gif_Realloc(0,2,$23,7315,195)|0);
            $25 = HEAP32[$gfs>>2]|0;
            $26 = HEAP32[$25>>2]|0;
            $27 = ((($26)) + 20|0);
            $28 = HEAP16[$27>>1]|0;
            $29 = ($28<<16>>16)<(0);
            if ($29) {
                $30 = HEAP32[$14>>2]|0;
                $31 = ($30|0)==(0|0);
                if ($31) {
                    label = 10;
                } else {
                    $32 = ((($gfs)) + 16|0);
                    $33 = HEAP16[$32>>1]|0;
                    $34 = $33&65535;
                    $35 = HEAP32[$30>>2]|0;
                    $36 = ($34|0)<($35|0);
                    if ($36) {
                        $background$0 = $33;
                    } else {
                        label = 10;
                    }
                }
            } else {
                label = 10;
            }
            if ((label|0) == 10) {
                $background$0 = 256;
            }
            $37 = ($23|0)==(0);
            if (!($37)) {
                $pos$012 = 0;
                while(1) {
                    $40 = (($24) + ($pos$012<<1)|0);
                    HEAP16[$40>>1] = $background$0;
                    $41 = (($pos$012) + 1)|0;
                    $42 = ($41|0)==($23|0);
                    if ($42) {
                        break;
                    } else {
                        $pos$012 = $41;
                    }
                }
            }
            $38 = HEAP32[$0>>2]|0;
            $39 = ($38|0)>(0);
            if ($39) {
                $i$19 = 0;$ok$010 = 1;
                while(1) {
                    $43 = HEAP32[$gfs>>2]|0;
                    $44 = (($43) + ($i$19<<2)|0);
                    $45 = HEAP32[$44>>2]|0;
                    $46 = (__Z16unoptimize_imageP10Gif_StreamP9Gif_ImagePt($gfs,$45,$24)|0);
                    $47 = ($46|0)==(0);
                    $$ok$0 = $47 ? 0 : $ok$010;
                    $48 = (($i$19) + 1)|0;
                    $49 = HEAP32[$0>>2]|0;
                    $50 = ($48|0)<($49|0);
                    if ($50) {
                        $i$19 = $48;$ok$010 = $$ok$0;
                    } else {
                        $$ok$0$lcssa = $$ok$0;
                        break;
                    }
                }
                $51 = ($$ok$0$lcssa|0)==(0);
                if ($51) {
                    $ok$0$lcssa19 = 0;
                } else {
                    $ok$0$lcssa18 = $$ok$0$lcssa;
                    label = 16;
                }
            } else {
                $ok$0$lcssa18 = 1;
                label = 16;
            }
            L28: do {
                if ((label|0) == 16) {
                    $52 = $flags & 1;
                    $53 = ($52|0)==(0);
                    $54 = HEAP32[$0>>2]|0;
                    $55 = ($54|0)>(0);
                    if ($53) {
                        if (!($55)) {
                            $ok$0$lcssa19 = $ok$0$lcssa18;
                            break;
                        }
                        $56 = HEAP32[$gfs>>2]|0;
                        $57 = HEAP32[$0>>2]|0;
                        $i$36 = 0;
                        while(1) {
                            $77 = (($56) + ($i$36<<2)|0);
                            $78 = HEAP32[$77>>2]|0;
                            $79 = ((($78)) + 18|0);
                            HEAP8[$79>>0] = 2;
                            $80 = (($i$36) + 1)|0;
                            $81 = ($80|0)<($57|0);
                            if ($81) {
                                $i$36 = $80;
                            } else {
                                $ok$0$lcssa19 = $ok$0$lcssa18;
                                break L28;
                            }
                        }
                    }
                    if ($55) {
                        $59 = $54;$i$27 = 0;
                        while(1) {
                            $58 = (($59) + -1)|0;
                            $60 = ($i$27|0)==($58|0);
                            if ($60) {
                                label = 22;
                            } else {
                                $61 = (($i$27) + 1)|0;
                                $62 = HEAP32[$gfs>>2]|0;
                                $63 = (($62) + ($61<<2)|0);
                                $64 = HEAP32[$63>>2]|0;
                                $65 = (($62) + ($i$27<<2)|0);
                                $66 = HEAP32[$65>>2]|0;
                                $67 = (__Z20no_more_transparencyP9Gif_ImageS0_($64,$66)|0);
                                $68 = ($67|0)==(0);
                                if ($68) {
                                    $73 = ((($66)) + 18|0);
                                    HEAP8[$73>>0] = 2;
                                } else {
                                    label = 22;
                                }
                            }
                            if ((label|0) == 22) {
                                label = 0;
                                $69 = HEAP32[$gfs>>2]|0;
                                $70 = (($69) + ($i$27<<2)|0);
                                $71 = HEAP32[$70>>2]|0;
                                $72 = ((($71)) + 18|0);
                                HEAP8[$72>>0] = 0;
                            }
                            $74 = (($i$27) + 1)|0;
                            $75 = HEAP32[$0>>2]|0;
                            $76 = ($74|0)<($75|0);
                            if ($76) {
                                $59 = $75;$i$27 = $74;
                            } else {
                                $ok$0$lcssa19 = $ok$0$lcssa18;
                                break;
                            }
                        }
                    } else {
                        $ok$0$lcssa19 = $ok$0$lcssa18;
                    }
                }
            } while(0);
            _free($24);
            $$0 = $ok$0$lcssa19;
            return ($$0|0);
        }
        function __Z16unoptimize_imageP10Gif_StreamP9Gif_ImagePt($gfs,$gfi,$screen) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $screen = $screen|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_screen$0 = 0, $used_transparent = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $used_transparent = sp;
            $0 = ((($gfs)) + 18|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($gfs)) + 20|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = Math_imul($5, $2)|0;
            $7 = (_Gif_Realloc(0,1,$6,7315,121)|0);
            $8 = ($7|0)==(0|0);
            if ($8) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            (_Gif_FullUncompressImage($gfs,$gfi,0)|0);
            _Gif_ReleaseCompressedImage($gfi);
            $9 = ((($gfi)) + 18|0);
            $10 = HEAP8[$9>>0]|0;
            $11 = ($10<<24>>24)==(3);
            do {
                if ($11) {
                    $12 = (_Gif_Realloc(0,2,$6,7315,130)|0);
                    $13 = ($12|0)==(0|0);
                    if ($13) {
                        $$0 = 0;
                        STACKTOP = sp;return ($$0|0);
                    } else {
                        $14 = $6 << 1;
                        _memcpy(($12|0),($screen|0),($14|0))|0;
                        $new_screen$0 = $12;
                        break;
                    }
                } else {
                    $new_screen$0 = $screen;
                }
            } while(0);
            __Z19put_image_in_screenP10Gif_StreamP9Gif_ImagePt($gfs,$gfi,$new_screen$0);
            $15 = (__Z17create_image_dataP10Gif_StreamP9Gif_ImagePtPhPi($gfs,$gfi,$new_screen$0,$7,$used_transparent)|0);
            $16 = ($15|0)==(0);
            if ($16) {
                _free($7);
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $17 = HEAP8[$9>>0]|0;
            switch ($17<<24>>24) {
                case 3:  {
                    _free($new_screen$0);
                    break;
                }
                case 2:  {
                    __Z24put_background_in_screenP10Gif_StreamP9Gif_ImagePt($gfs,$gfi,$screen);
                    break;
                }
                default: {
                }
            }
            $18 = ((($gfi)) + 12|0);
            HEAP16[$18>>1] = 0;
            $19 = ((($gfi)) + 14|0);
            HEAP16[$19>>1] = 0;
            $20 = HEAP16[$0>>1]|0;
            $21 = ((($gfi)) + 8|0);
            HEAP16[$21>>1] = $20;
            $22 = HEAP16[$3>>1]|0;
            $23 = ((($gfi)) + 10|0);
            HEAP16[$23>>1] = $22;
            $24 = HEAP32[$used_transparent>>2]|0;
            $25 = $24&255;
            HEAP8[$9>>0] = $25;
            (_Gif_SetUncompressedImage($gfi,$7,1,0)|0);
            $$0 = 1;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z20no_more_transparencyP9Gif_ImageS0_($gfi1,$gfi2) {
            $gfi1 = $gfi1|0;
            $gfi2 = $gfi2|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $d1$02 = 0, $d2$03 = 0, $y$04 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi1)) + 20|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1 << 16 >> 16;
            $3 = ((($gfi2)) + 20|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4 << 16 >> 16;
            $6 = ($1<<16>>16)<(0);
            if ($6) {
                $$0 = 1;
                return ($$0|0);
            }
            $7 = ((($gfi1)) + 10|0);
            $8 = HEAP16[$7>>1]|0;
            $9 = ($8<<16>>16)==(0);
            if ($9) {
                $$0 = 1;
                return ($$0|0);
            }
            $10 = HEAP32[$gfi1>>2]|0;
            $11 = HEAP32[$gfi2>>2]|0;
            $12 = ((($gfi1)) + 8|0);
            $13 = HEAP16[$12>>1]|0;
            $14 = $13&65535;
            $15 = ($13<<16>>16)==(0);
            $y$04 = 0;
            L7: while(1) {
                $16 = (($10) + ($y$04<<2)|0);
                $17 = HEAP32[$16>>2]|0;
                $18 = (($17) + ($14)|0);
                if (!($15)) {
                    $19 = (($11) + ($y$04<<2)|0);
                    $20 = HEAP32[$19>>2]|0;
                    $d1$02 = $17;$d2$03 = $20;
                    while(1) {
                        $21 = HEAP8[$d1$02>>0]|0;
                        $22 = $21&255;
                        $23 = ($22|0)==($2|0);
                        if ($23) {
                            $24 = HEAP8[$d2$03>>0]|0;
                            $25 = $24&255;
                            $26 = ($25|0)==($5|0);
                            if (!($26)) {
                                $$0 = 0;
                                label = 10;
                                break L7;
                            }
                        }
                        $27 = ((($d1$02)) + 1|0);
                        $28 = ((($d2$03)) + 1|0);
                        $29 = ($27>>>0)<($18>>>0);
                        if ($29) {
                            $d1$02 = $27;$d2$03 = $28;
                        } else {
                            break;
                        }
                    }
                }
                $30 = (($y$04) + 1)|0;
                $31 = HEAP16[$7>>1]|0;
                $32 = $31&65535;
                $33 = ($30|0)<($32|0);
                if ($33) {
                    $y$04 = $30;
                } else {
                    $$0 = 1;
                    label = 10;
                    break;
                }
            }
            if ((label|0) == 10) {
                return ($$0|0);
            }
            return (0)|0;
        }
        function __Z19put_image_in_screenP10Gif_StreamP9Gif_ImagePt($gfs,$gfi,$screen) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $screen = $screen|0;
            var $$ = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
            var $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond9 = 0, $h$0 = 0, $line$03 = 0, $move$02 = 0, $x$01 = 0, $y$04 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 20|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1 << 16 >> 16;
            $3 = ((($gfi)) + 8|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = ((($gfi)) + 10|0);
            $7 = HEAP16[$6>>1]|0;
            $8 = $7&65535;
            $9 = ((($gfi)) + 12|0);
            $10 = HEAP16[$9>>1]|0;
            $11 = $10&65535;
            $12 = ((($gfs)) + 18|0);
            $13 = HEAP16[$12>>1]|0;
            $14 = $13&65535;
            $15 = ((($gfi)) + 14|0);
            $16 = HEAP16[$15>>1]|0;
            $17 = $16&65535;
            $18 = (($17) + ($8))|0;
            $19 = ((($gfs)) + 20|0);
            $20 = HEAP16[$19>>1]|0;
            $21 = $20&65535;
            $22 = ($18|0)>($21|0);
            $23 = (($21) - ($17))|0;
            $h$0 = $22 ? $23 : $8;
            $24 = ($h$0|0)>(0);
            if (!($24)) {
                return;
            }
            $25 = (($11) + ($5))|0;
            $26 = ($25|0)>($14|0);
            $27 = (($14) - ($11))|0;
            $$ = $26 ? $27 : $5;
            $28 = ($$|0)>(0);
            $29 = $10&65535;
            $30 = $4&65535;
            $31 = (($29) + ($30))|0;
            $32 = $13&65535;
            $33 = ($32|0)>($31|0);
            $34 = $33 ? $31 : $32;
            $35 = (($34) - ($29))|0;
            $36 = $16&65535;
            $37 = $7&65535;
            $38 = (($36) + ($37))|0;
            $39 = $20&65535;
            $40 = ($39|0)>($38|0);
            $41 = $40 ? $38 : $39;
            $42 = (($41) - ($36))|0;
            $y$04 = 0;
            while(1) {
                if ($28) {
                    $43 = HEAP32[$gfi>>2]|0;
                    $44 = (($43) + ($y$04<<2)|0);
                    $45 = HEAP32[$44>>2]|0;
                    $46 = HEAP16[$15>>1]|0;
                    $47 = $46&65535;
                    $48 = (($47) + ($y$04))|0;
                    $49 = HEAP16[$12>>1]|0;
                    $50 = $49&65535;
                    $51 = Math_imul($48, $50)|0;
                    $52 = HEAP16[$9>>1]|0;
                    $53 = $52&65535;
                    $$sum = (($51) + ($53))|0;
                    $54 = (($screen) + ($$sum<<1)|0);
                    $line$03 = $45;$move$02 = $54;$x$01 = 0;
                    while(1) {
                        $55 = HEAP8[$line$03>>0]|0;
                        $56 = $55&255;
                        $57 = ($56|0)==($2|0);
                        if (!($57)) {
                            $58 = $55&255;
                            HEAP16[$move$02>>1] = $58;
                        }
                        $59 = (($x$01) + 1)|0;
                        $60 = ((($move$02)) + 2|0);
                        $61 = ((($line$03)) + 1|0);
                        $exitcond = ($59|0)==($35|0);
                        if ($exitcond) {
                            break;
                        } else {
                            $line$03 = $61;$move$02 = $60;$x$01 = $59;
                        }
                    }
                }
                $62 = (($y$04) + 1)|0;
                $exitcond9 = ($62|0)==($42|0);
                if ($exitcond9) {
                    break;
                } else {
                    $y$04 = $62;
                }
            }
            return;
        }
        function __Z17create_image_dataP10Gif_StreamP9Gif_ImagePtPhPi($gfs,$gfi,$screen,$new_data,$used_transparent) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $screen = $screen|0;
            $new_data = $new_data|0;
            $used_transparent = $used_transparent|0;
            var $$0 = 0, $$013 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $have = 0, $i$1$transparent$0 = 0, $i$17 = 0, $move$09 = 0, $move$15 = 0, $pos$08 = 0, $pos$14 = 0, $transparent$06 = 0, $transparent$2 = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 1040|0;
            $have = sp;
            $0 = ((($gfs)) + 18|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = ((($gfs)) + 20|0);
            $3 = HEAP16[$2>>1]|0;
            _memset(($have|0),0,1028)|0;
            $4 = $3&65535;
            $5 = $1&65535;
            $6 = Math_imul($4, $5)|0;
            $7 = ($6|0)==(0);
            if (!($7)) {
                $move$09 = $screen;$pos$08 = 0;
                while(1) {
                    $8 = HEAP16[$move$09>>1]|0;
                    $9 = $8&65535;
                    $10 = (($have) + ($9<<2)|0);
                    HEAP32[$10>>2] = 1;
                    $11 = (($pos$08) + 1)|0;
                    $12 = ((($move$09)) + 2|0);
                    $13 = ($11|0)==($6|0);
                    if ($13) {
                        break;
                    } else {
                        $move$09 = $12;$pos$08 = $11;
                    }
                }
            }
            $14 = ((($have)) + 1024|0);
            $15 = HEAP32[$14>>2]|0;
            $16 = ($15|0)==(0);
            do {
                if ($16) {
                    $transparent$2 = -1;
                } else {
                    $i$17 = 0;$transparent$06 = -1;
                    while(1) {
                        $17 = (($have) + ($i$17<<2)|0);
                        $18 = HEAP32[$17>>2]|0;
                        $19 = ($18|0)==(0);
                        $i$1$transparent$0 = $19 ? $i$17 : $transparent$06;
                        $20 = (($i$17) + 1)|0;
                        $21 = ($20|0)<(256);
                        $22 = ($i$1$transparent$0|0)<(0);
                        $23 = $22 & $21;
                        if ($23) {
                            $i$17 = $20;$transparent$06 = $i$1$transparent$0;
                        } else {
                            break;
                        }
                    }
                    if ($22) {
                        $$0 = 0;
                        STACKTOP = sp;return ($$0|0);
                    }
                    $24 = ((($gfs)) + 12|0);
                    $25 = HEAP32[$24>>2]|0;
                    $26 = HEAP32[$25>>2]|0;
                    $27 = ($i$1$transparent$0|0)<($26|0);
                    if ($27) {
                        $transparent$2 = $i$1$transparent$0;
                    } else {
                        $28 = ((($25)) + 16|0);
                        $29 = HEAP32[$28>>2]|0;
                        $30 = (_Gif_Realloc($29,8,256,7315,93)|0);
                        $31 = HEAP32[$24>>2]|0;
                        $32 = ((($31)) + 16|0);
                        HEAP32[$32>>2] = $30;
                        $33 = HEAP32[$24>>2]|0;
                        $34 = ((($33)) + 16|0);
                        $35 = HEAP32[$34>>2]|0;
                        $36 = ($35|0)==(0|0);
                        if ($36) {
                            $$0 = 0;
                            STACKTOP = sp;return ($$0|0);
                        } else {
                            $37 = (($i$1$transparent$0) + 1)|0;
                            HEAP32[$33>>2] = $37;
                            $transparent$2 = $i$1$transparent$0;
                            break;
                        }
                    }
                }
            } while(0);
            HEAP32[$used_transparent>>2] = 0;
            $38 = ($6|0)==(0);
            if (!($38)) {
                $39 = $transparent$2&255;
                $$013 = $new_data;$move$15 = $screen;$pos$14 = 0;
                while(1) {
                    $40 = HEAP16[$move$15>>1]|0;
                    $41 = ($40<<16>>16)==(256);
                    if ($41) {
                        HEAP8[$$013>>0] = $39;
                        HEAP32[$used_transparent>>2] = 1;
                    } else {
                        $42 = $40&255;
                        HEAP8[$$013>>0] = $42;
                    }
                    $43 = (($pos$14) + 1)|0;
                    $44 = ((($move$15)) + 2|0);
                    $45 = ((($$013)) + 1|0);
                    $46 = ($43|0)==($6|0);
                    if ($46) {
                        break;
                    } else {
                        $$013 = $45;$move$15 = $44;$pos$14 = $43;
                    }
                }
            }
            $47 = $transparent$2&65535;
            $48 = ((($gfi)) + 20|0);
            HEAP16[$48>>1] = $47;
            $$0 = 1;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z24put_background_in_screenP10Gif_StreamP9Gif_ImagePt($gfs,$gfi,$screen) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $screen = $screen|0;
            var $$ = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
            var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond8 = 0, $h$0 = 0, $move$02 = 0, $solid$0 = 0, $x$01 = 0, $y$03 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 8|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($gfi)) + 10|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = ((($gfi)) + 12|0);
            $7 = HEAP16[$6>>1]|0;
            $8 = $7&65535;
            $9 = (($8) + ($2))|0;
            $10 = ((($gfs)) + 18|0);
            $11 = HEAP16[$10>>1]|0;
            $12 = $11&65535;
            $13 = ($9|0)>($12|0);
            $14 = (($12) - ($8))|0;
            $$ = $13 ? $14 : $2;
            $15 = ((($gfi)) + 14|0);
            $16 = HEAP16[$15>>1]|0;
            $17 = $16&65535;
            $18 = (($17) + ($5))|0;
            $19 = ((($gfs)) + 20|0);
            $20 = HEAP16[$19>>1]|0;
            $21 = $20&65535;
            $22 = ($18|0)>($21|0);
            $23 = (($21) - ($17))|0;
            $h$0 = $22 ? $23 : $5;
            $24 = ((($gfi)) + 20|0);
            $25 = HEAP16[$24>>1]|0;
            $26 = ($25<<16>>16)<(0);
            if ($26) {
                $27 = HEAP32[$gfs>>2]|0;
                $28 = HEAP32[$27>>2]|0;
                $29 = ((($28)) + 20|0);
                $30 = HEAP16[$29>>1]|0;
                $31 = ($30<<16>>16)<(0);
                if ($31) {
                    $32 = ((($gfs)) + 12|0);
                    $33 = HEAP32[$32>>2]|0;
                    $34 = ($33|0)==(0|0);
                    if ($34) {
                        label = 5;
                    } else {
                        $35 = ((($gfs)) + 16|0);
                        $36 = HEAP16[$35>>1]|0;
                        $37 = $36&65535;
                        $38 = HEAP32[$33>>2]|0;
                        $39 = ($37|0)<($38|0);
                        if ($39) {
                            $solid$0 = $36;
                        } else {
                            label = 5;
                        }
                    }
                } else {
                    label = 5;
                }
            } else {
                label = 5;
            }
            if ((label|0) == 5) {
                $solid$0 = 256;
            }
            $40 = ($h$0|0)>(0);
            if (!($40)) {
                return;
            }
            $41 = ($$|0)>(0);
            $42 = $7&65535;
            $43 = $1&65535;
            $44 = (($42) + ($43))|0;
            $45 = $11&65535;
            $46 = ($45|0)>($44|0);
            $47 = $46 ? $44 : $45;
            $48 = (($47) - ($42))|0;
            $49 = $16&65535;
            $50 = $4&65535;
            $51 = (($49) + ($50))|0;
            $52 = $20&65535;
            $53 = ($52|0)>($51|0);
            $54 = $53 ? $51 : $52;
            $55 = (($54) - ($49))|0;
            $y$03 = 0;
            while(1) {
                if ($41) {
                    $56 = HEAP16[$15>>1]|0;
                    $57 = $56&65535;
                    $58 = (($57) + ($y$03))|0;
                    $59 = HEAP16[$10>>1]|0;
                    $60 = $59&65535;
                    $61 = Math_imul($58, $60)|0;
                    $62 = HEAP16[$6>>1]|0;
                    $63 = $62&65535;
                    $$sum = (($61) + ($63))|0;
                    $64 = (($screen) + ($$sum<<1)|0);
                    $move$02 = $64;$x$01 = 0;
                    while(1) {
                        HEAP16[$move$02>>1] = $solid$0;
                        $65 = (($x$01) + 1)|0;
                        $66 = ((($move$02)) + 2|0);
                        $exitcond = ($65|0)==($48|0);
                        if ($exitcond) {
                            break;
                        } else {
                            $move$02 = $66;$x$01 = $65;
                        }
                    }
                }
                $67 = (($y$03) + 1)|0;
                $exitcond8 = ($67|0)==($55|0);
                if ($exitcond8) {
                    break;
                } else {
                    $y$03 = $67;
                }
            }
            return;
        }
        function __Z13unmark_colorsP12Gif_Colormap($gfcm) {
            $gfcm = $gfcm|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($gfcm|0)==(0|0);
            if ($0) {
                return;
            }
            $1 = HEAP32[$gfcm>>2]|0;
            $2 = ($1|0)>(0);
            if (!($2)) {
                return;
            }
            $3 = ((($gfcm)) + 16|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = HEAP32[$gfcm>>2]|0;
            $i$01 = 0;
            while(1) {
                $6 = (($4) + ($i$01<<3)|0);
                HEAP8[$6>>0] = 0;
                $7 = (($i$01) + 1)|0;
                $8 = ($7|0)<($5|0);
                if ($8) {
                    $i$01 = $7;
                } else {
                    break;
                }
            }
            return;
        }
        function __Z15unmark_colors_2P12Gif_Colormap($gfcm) {
            $gfcm = $gfcm|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$gfcm>>2]|0;
            $1 = ($0|0)>(0);
            if (!($1)) {
                return;
            }
            $2 = ((($gfcm)) + 16|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = HEAP32[$gfcm>>2]|0;
            $i$01 = 0;
            while(1) {
                $5 = (((($3) + ($i$01<<3)|0)) + 4|0);
                HEAP32[$5>>2] = 256;
                $6 = (($3) + ($i$01<<3)|0);
                HEAP8[$6>>0] = 0;
                $7 = (($i$01) + 1)|0;
                $8 = ($7|0)<($4|0);
                if ($8) {
                    $i$01 = $7;
                } else {
                    break;
                }
            }
            return;
        }
        function __Z16mark_used_colorsP10Gif_StreamP9Gif_ImageP7Gt_Cropi($gfs,$gfi,$crop,$compress_immediately) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $crop = $crop|0;
            $compress_immediately = $compress_immediately|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
            var $80 = 0, $81 = 0, $9 = 0, $b$0 = 0, $c = 0, $data$07 = 0, $exitcond = 0, $i$013 = 0, $i$16 = 0, $j$08 = 0, $l$0 = 0, $nleft$012 = 0, $nleft$1 = 0, $nleft$1$lcssa = 0, $nleft$29 = 0, $nleft$3$lcssa = 0, $nleft$35 = 0, $nleft$4 = 0, $or$cond = 0, $or$cond2 = 0;
            var $r$0 = 0, $t$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 48|0;
            $c = sp;
            $0 = ((($gfi)) + 24|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            if ($2) {
                $6 = ((($gfs)) + 12|0);
                $7 = HEAP32[$6>>2]|0;
                $8 = ((($gfi)) + 20|0);
                $9 = HEAP16[$8>>1]|0;
                $10 = $9 << 16 >> 16;
                $11 = ($7|0)==(0|0);
                if ($11) {
                    STACKTOP = sp;return;
                } else {
                    $13 = $7;$16 = $9;$18 = $10;
                }
            } else {
                $3 = ((($gfi)) + 20|0);
                $4 = HEAP16[$3>>1]|0;
                $5 = $4 << 16 >> 16;
                $13 = $1;$16 = $4;$18 = $5;
            }
            $12 = ((($13)) + 16|0);
            $14 = HEAP32[$12>>2]|0;
            $15 = HEAP32[$13>>2]|0;
            $17 = ($16<<16>>16)>(-1);
            $19 = ($18|0)<($15|0);
            $or$cond = $17 & $19;
            if ($or$cond) {
                $20 = (($14) + ($18<<3)|0);
                $21 = HEAP8[$20>>0]|0;
                $22 = $21&255;
                $23 = $22 | 2;
                $24 = $23&255;
                HEAP8[$20>>0] = $24;
            }
            $25 = ($15|0)>(0);
            if ($25) {
                $i$013 = 0;$nleft$012 = 0;
            } else {
                STACKTOP = sp;return;
            }
            while(1) {
                $26 = (($14) + ($i$013<<3)|0);
                $27 = HEAP8[$26>>0]|0;
                $28 = $27 & 1;
                $29 = ($i$013|0)==($18|0);
                $30 = $28&255;
                $31 = $29&1;
                $32 = $30 | $31;
                $33 = $32 ^ 1;
                $nleft$1 = (($33) + ($nleft$012))|0;
                $34 = (($i$013) + 1)|0;
                $exitcond = ($34|0)==($15|0);
                if ($exitcond) {
                    $nleft$1$lcssa = $nleft$1;
                    break;
                } else {
                    $i$013 = $34;$nleft$012 = $nleft$1;
                }
            }
            $35 = ($nleft$1$lcssa|0)==(0);
            if ($35) {
                STACKTOP = sp;return;
            }
            $36 = HEAP32[$gfi>>2]|0;
            $37 = ($36|0)==(0|0);
            if ($37) {
                $38 = (_Gif_FullUncompressImage($gfs,$gfi,0)|0);
                $39 = ($38|0)==(2);
                if ($39) {
                    label = 11;
                } else {
                    $$0 = $compress_immediately;
                }
            } else {
                label = 11;
            }
            if ((label|0) == 11) {
                $$0 = 0;
            }
            $40 = ($crop|0)==(0|0);
            if ($40) {
                $51 = ((($gfi)) + 8|0);
                $52 = HEAP16[$51>>1]|0;
                $53 = $52&65535;
                $54 = ((($gfi)) + 10|0);
                $55 = HEAP16[$54>>1]|0;
                $56 = $55&65535;
                $b$0 = $56;$l$0 = 0;$r$0 = $53;$t$0 = 0;
            } else {
                __Z12combine_cropP7Gt_CropPKS_PK9Gif_Image($c,$crop,$gfi);
                $41 = ((($c)) + 24|0);
                $42 = HEAP32[$41>>2]|0;
                $43 = ((($c)) + 28|0);
                $44 = HEAP32[$43>>2]|0;
                $45 = ((($c)) + 32|0);
                $46 = HEAP32[$45>>2]|0;
                $47 = (($46) + ($42))|0;
                $48 = ((($c)) + 36|0);
                $49 = HEAP32[$48>>2]|0;
                $50 = (($49) + ($44))|0;
                $b$0 = $50;$l$0 = $42;$r$0 = $47;$t$0 = $44;
            }
            $57 = ($t$0|0)==($b$0|0);
            L26: do {
                if (!($57)) {
                    $58 = ($l$0|0)==($r$0|0);
                    $j$08 = $t$0;$nleft$29 = $nleft$1$lcssa;
                    while(1) {
                        if ($58) {
                            $nleft$3$lcssa = $nleft$29;
                        } else {
                            $59 = HEAP32[$gfi>>2]|0;
                            $60 = (($59) + ($j$08<<2)|0);
                            $61 = HEAP32[$60>>2]|0;
                            $62 = (($61) + ($l$0)|0);
                            $data$07 = $62;$i$16 = $l$0;$nleft$35 = $nleft$29;
                            while(1) {
                                $63 = HEAP8[$data$07>>0]|0;
                                $64 = $63&255;
                                $65 = ($64|0)<($15|0);
                                if ($65) {
                                    $66 = (($14) + ($64<<3)|0);
                                    $67 = HEAP8[$66>>0]|0;
                                    $68 = $67&255;
                                    $69 = $68 & 1;
                                    $70 = ($69|0)!=(0);
                                    $71 = ($64|0)==($18|0);
                                    $or$cond2 = $71 | $70;
                                    if ($or$cond2) {
                                        $nleft$4 = $nleft$35;
                                    } else {
                                        $72 = $68 | 1;
                                        $73 = $72&255;
                                        HEAP8[$66>>0] = $73;
                                        $74 = (($nleft$35) + -1)|0;
                                        $75 = ($74|0)==(0);
                                        if ($75) {
                                            break L26;
                                        } else {
                                            $nleft$4 = $74;
                                        }
                                    }
                                } else {
                                    $nleft$4 = $nleft$35;
                                }
                                $76 = (($i$16) + 1)|0;
                                $77 = ((($data$07)) + 1|0);
                                $78 = ($76|0)==($r$0|0);
                                if ($78) {
                                    $nleft$3$lcssa = $nleft$4;
                                    break;
                                } else {
                                    $data$07 = $77;$i$16 = $76;$nleft$35 = $nleft$4;
                                }
                            }
                        }
                        $79 = (($j$08) + 1)|0;
                        $80 = ($79|0)==($b$0|0);
                        if ($80) {
                            break;
                        } else {
                            $j$08 = $79;$nleft$29 = $nleft$3$lcssa;
                        }
                    }
                }
            } while(0);
            $81 = ($$0|0)>(0);
            if (!($81)) {
                STACKTOP = sp;return;
            }
            _Gif_ReleaseUncompressedImage($gfi);
            STACKTOP = sp;return;
        }
        function __Z16find_color_indexP9Gif_ColoriS0_($c,$nc,$color) {
            $c = $c|0;
            $nc = $nc|0;
            $color = $color|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index$01 = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($nc|0)>(0);
            if (!($0)) {
                $$0 = -1;
                return ($$0|0);
            }
            $1 = ((($color)) + 1|0);
            $2 = HEAP8[$1>>0]|0;
            $3 = ((($color)) + 2|0);
            $4 = ((($color)) + 3|0);
            $index$01 = 0;
            while(1) {
                $5 = (((($c) + ($index$01<<3)|0)) + 1|0);
                $6 = HEAP8[$5>>0]|0;
                $7 = ($6<<24>>24)==($2<<24>>24);
                if ($7) {
                    $8 = (((($c) + ($index$01<<3)|0)) + 2|0);
                    $9 = HEAP8[$8>>0]|0;
                    $10 = HEAP8[$3>>0]|0;
                    $11 = ($9<<24>>24)==($10<<24>>24);
                    if ($11) {
                        $12 = (((($c) + ($index$01<<3)|0)) + 3|0);
                        $13 = HEAP8[$12>>0]|0;
                        $14 = HEAP8[$4>>0]|0;
                        $15 = ($13<<24>>24)==($14<<24>>24);
                        if ($15) {
                            $$0 = $index$01;
                            label = 7;
                            break;
                        }
                    }
                }
                $16 = (($index$01) + 1)|0;
                $17 = ($16|0)<($nc|0);
                if ($17) {
                    $index$01 = $16;
                } else {
                    $$0 = -1;
                    label = 7;
                    break;
                }
            }
            if ((label|0) == 7) {
                return ($$0|0);
            }
            return (0)|0;
        }
        function __Z26merge_colormap_if_possibleP12Gif_ColormapS0_($dest,$src) {
            $dest = $dest|0;
            $src = $src|0;
            var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
            var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
            var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
            var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
            var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $i$025 = 0, $i$025$lcssa = 0, $mapto$1 = 0, $mapto$2 = 0, $mapto$211 = 0, $ndestcol$0$lcssa = 0, $ndestcol$024 = 0, $ndestcol$1 = 0, $ndestcol$1810 = 0, $ndestcol$2 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0;
            var $trivial_map$0$ = 0, $trivial_map$028 = 0, $trivial_map$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $x$022 = 0, $x$022$lcssa = 0, $x$121 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = ((($dest)) + 16|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($dest)) + 8|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($src|0)==(0|0);
            if ($4) {
                $$0 = 1;
                STACKTOP = sp;return ($$0|0);
            }
            $5 = HEAP32[$dest>>2]|0;
            $6 = ((($src)) + 16|0);
            $7 = HEAP32[$6>>2]|0;
            $8 = HEAP32[$src>>2]|0;
            $9 = ($8|0)>(0);
            L4: do {
                if ($9) {
                    $i$025 = 0;$ndestcol$024 = $5;$trivial_map$028 = 1;
                    while(1) {
                        $10 = (($7) + ($i$025<<3)|0);
                        $11 = HEAP8[$10>>0]|0;
                        $12 = $11&255;
                        $13 = $12 & 1;
                        $14 = ($13|0)==(0);
                        if ($14) {
                            $69 = $12 & 2;
                            $70 = ($69|0)!=(0);
                            $71 = ($trivial_map$028|0)!=(0);
                            $or$cond3 = $71 & $70;
                            $72 = ($i$025|0)==($ndestcol$024|0);
                            $or$cond5 = $72 & $or$cond3;
                            if ($or$cond5) {
                                $73 = (($1) + ($ndestcol$024<<3)|0);
                                $74 = $10;
                                $75 = $74;
                                $76 = HEAP32[$75>>2]|0;
                                $77 = (($74) + 4)|0;
                                $78 = $77;
                                $79 = HEAP32[$78>>2]|0;
                                $80 = $73;
                                $81 = $80;
                                HEAP32[$81>>2] = $76;
                                $82 = (($80) + 4)|0;
                                $83 = $82;
                                HEAP32[$83>>2] = $79;
                                $84 = (($ndestcol$024) + 1)|0;
                                $ndestcol$2 = $84;$trivial_map$1 = $trivial_map$028;
                            } else {
                                $ndestcol$2 = $ndestcol$024;$trivial_map$1 = $trivial_map$028;
                            }
                        } else {
                            $15 = (((($7) + ($i$025<<3)|0)) + 4|0);
                            $16 = HEAP32[$15>>2]|0;
                            $not$ = ($16>>>0)>(255);
                            if ($not$) {
                                $17 = (__Z16find_color_indexP9Gif_ColoriS0_($1,$ndestcol$024,$10)|0);
                                $18 = ($17|0)==(-1);
                                $19 = ($ndestcol$024|0)<(256);
                                $or$cond = $19 & $18;
                                if ($or$cond) {
                                    $20 = (($1) + ($ndestcol$024<<3)|0);
                                    $21 = $10;
                                    $22 = $21;
                                    $23 = HEAP32[$22>>2]|0;
                                    $24 = (($21) + 4)|0;
                                    $25 = $24;
                                    $26 = HEAP32[$25>>2]|0;
                                    $27 = $20;
                                    $28 = $27;
                                    HEAP32[$28>>2] = $23;
                                    $29 = (($27) + 4)|0;
                                    $30 = $29;
                                    HEAP32[$30>>2] = $26;
                                    $31 = (($ndestcol$024) + 1)|0;
                                    $mapto$1 = $ndestcol$024;$ndestcol$1 = $31;
                                } else {
                                    $mapto$1 = $17;$ndestcol$1 = $ndestcol$024;
                                }
                                $32 = ($mapto$1|0)==(-1);
                                if ($32) {
                                    $33 = ($ndestcol$1|0)>(0);
                                    if ($33) {
                                        $x$022 = 0;
                                    } else {
                                        $i$025$lcssa = $i$025;
                                        label = 24;
                                        break;
                                    }
                                    while(1) {
                                        $34 = (($1) + ($x$022<<3)|0);
                                        $35 = HEAP8[$34>>0]|0;
                                        $36 = ($35<<24>>24)==(2);
                                        if ($36) {
                                            $$lcssa = $34;$x$022$lcssa = $x$022;
                                            label = 10;
                                            break;
                                        }
                                        $47 = (($x$022) + 1)|0;
                                        $48 = ($47|0)<($ndestcol$1|0);
                                        if ($48) {
                                            $x$022 = $47;
                                        } else {
                                            $mapto$2 = $mapto$1;
                                            break;
                                        }
                                    }
                                    if ((label|0) == 10) {
                                        label = 0;
                                        $37 = $10;
                                        $38 = $37;
                                        $39 = HEAP32[$38>>2]|0;
                                        $40 = (($37) + 4)|0;
                                        $41 = $40;
                                        $42 = HEAP32[$41>>2]|0;
                                        $43 = $$lcssa;
                                        $44 = $43;
                                        HEAP32[$44>>2] = $39;
                                        $45 = (($43) + 4)|0;
                                        $46 = $45;
                                        HEAP32[$46>>2] = $42;
                                        $mapto$2 = $x$022$lcssa;
                                    }
                                    $49 = ($mapto$2|0)==(-1);
                                    if ($49) {
                                        $i$025$lcssa = $i$025;
                                        label = 24;
                                        break;
                                    } else {
                                        $mapto$211 = $mapto$2;$ndestcol$1810 = $ndestcol$1;
                                    }
                                } else {
                                    $mapto$211 = $mapto$1;$ndestcol$1810 = $ndestcol$1;
                                }
                            } else {
                                $mapto$211 = $16;$ndestcol$1810 = $ndestcol$024;
                            }
                            $50 = ($mapto$211|0)>(-1);
                            $51 = ($mapto$211|0)<($ndestcol$1810|0);
                            $or$cond4 = $50 & $51;
                            if (!($or$cond4)) {
                                label = 14;
                                break;
                            }
                            $52 = (((($1) + ($mapto$211<<3)|0)) + 1|0);
                            $53 = HEAP8[$52>>0]|0;
                            $54 = (((($7) + ($i$025<<3)|0)) + 1|0);
                            $55 = HEAP8[$54>>0]|0;
                            $56 = ($53<<24>>24)==($55<<24>>24);
                            if (!($56)) {
                                label = 18;
                                break;
                            }
                            $57 = (((($1) + ($mapto$211<<3)|0)) + 2|0);
                            $58 = HEAP8[$57>>0]|0;
                            $59 = (((($7) + ($i$025<<3)|0)) + 2|0);
                            $60 = HEAP8[$59>>0]|0;
                            $61 = ($58<<24>>24)==($60<<24>>24);
                            if (!($61)) {
                                label = 18;
                                break;
                            }
                            $62 = (((($1) + ($mapto$211<<3)|0)) + 3|0);
                            $63 = HEAP8[$62>>0]|0;
                            $64 = (((($7) + ($i$025<<3)|0)) + 3|0);
                            $65 = HEAP8[$64>>0]|0;
                            $66 = ($63<<24>>24)==($65<<24>>24);
                            if (!($66)) {
                                label = 18;
                                break;
                            }
                            HEAP32[$15>>2] = $mapto$211;
                            $67 = (($1) + ($mapto$211<<3)|0);
                            HEAP8[$67>>0] = 1;
                            $68 = ($mapto$211|0)==($i$025|0);
                            $trivial_map$0$ = $68 ? $trivial_map$028 : 0;
                            $ndestcol$2 = $ndestcol$1810;$trivial_map$1 = $trivial_map$0$;
                        }
                        $85 = (($i$025) + 1)|0;
                        $86 = HEAP32[$src>>2]|0;
                        $87 = ($85|0)<($86|0);
                        if ($87) {
                            $i$025 = $85;$ndestcol$024 = $ndestcol$2;$trivial_map$028 = $trivial_map$1;
                        } else {
                            $ndestcol$0$lcssa = $ndestcol$2;
                            break L4;
                        }
                    }
                    if ((label|0) == 14) {
                        ___assert_fail((7328|0),(7359|0),156,(7369|0));
                        // unreachable;
                    }
                    else if ((label|0) == 18) {
                        ___assert_fail((7396|0),(7359|0),157,(7369|0));
                        // unreachable;
                    }
                    else if ((label|0) == 24) {
                        $88 = HEAP32[812>>2]|0;
                        $89 = ($88|0)==(1);
                        if ($89) {
                            $90 = HEAP32[408>>2]|0;
                            $91 = ($90|0)==(0);
                            if ($91) {
                                __Z7warningiPKcz(1,7437,$vararg_buffer);
                                HEAP32[408>>2] = 1;
                            } else {
                                __Z7warningiPKcz(1,7518,$vararg_buffer1);
                            }
                            HEAP32[812>>2] = 2;
                        }
                        $92 = ($i$025$lcssa|0)>(0);
                        if ($92) {
                            $x$121 = 0;
                        } else {
                            $$0 = 0;
                            STACKTOP = sp;return ($$0|0);
                        }
                        while(1) {
                            $93 = (($7) + ($x$121<<3)|0);
                            $94 = HEAP8[$93>>0]|0;
                            $95 = $94 & 1;
                            $96 = ($95<<24>>24)==(0);
                            if (!($96)) {
                                $97 = (((($7) + ($x$121<<3)|0)) + 4|0);
                                $98 = HEAP32[$97>>2]|0;
                                $99 = HEAP32[$dest>>2]|0;
                                $100 = ($98>>>0)<($99>>>0);
                                if (!($100)) {
                                    HEAP32[$97>>2] = 256;
                                }
                            }
                            $101 = (($x$121) + 1)|0;
                            $exitcond = ($101|0)==($i$025$lcssa|0);
                            if ($exitcond) {
                                $$0 = 0;
                                break;
                            } else {
                                $x$121 = $101;
                            }
                        }
                        STACKTOP = sp;return ($$0|0);
                    }
                } else {
                    $ndestcol$0$lcssa = $5;
                }
            } while(0);
            HEAP32[$dest>>2] = $ndestcol$0$lcssa;
            HEAP32[$2>>2] = $3;
            $$0 = 1;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z12merge_streamP10Gif_StreamS0_i($dest,$src,$no_comments) {
            $dest = $dest|0;
            $src = $src|0;
            $no_comments = $no_comments|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $or$cond = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($dest)) + 12|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            if ($2) {
                ___assert_fail((7557|0),(7359|0),210,(7570|0));
                // unreachable;
            }
            $3 = ((($src)) + 12|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)==(0|0);
            if (!($5)) {
                __Z15unmark_colors_2P12Gif_Colormap($4);
            }
            $6 = ((($src)) + 4|0);
            $7 = HEAP32[$6>>2]|0;
            $8 = ($7|0)>(0);
            if ($8) {
                $i$02 = 0;
                while(1) {
                    $9 = HEAP32[$src>>2]|0;
                    $10 = (($9) + ($i$02<<2)|0);
                    $11 = HEAP32[$10>>2]|0;
                    $12 = ((($11)) + 24|0);
                    $13 = HEAP32[$12>>2]|0;
                    $14 = ($13|0)==(0|0);
                    if (!($14)) {
                        __Z15unmark_colors_2P12Gif_Colormap($13);
                    }
                    $15 = (($i$02) + 1)|0;
                    $16 = HEAP32[$6>>2]|0;
                    $17 = ($15|0)<($16|0);
                    if ($17) {
                        $i$02 = $15;
                    } else {
                        break;
                    }
                }
            }
            $18 = ((($dest)) + 24|0);
            $19 = HEAP32[$18>>2]|0;
            $20 = ($19|0)<(0);
            if ($20) {
                $21 = ((($src)) + 24|0);
                $22 = HEAP32[$21>>2]|0;
                HEAP32[$18>>2] = $22;
            }
            $23 = ((($src)) + 28|0);
            $24 = HEAP32[$23>>2]|0;
            $25 = ($24|0)==(0|0);
            $26 = ($no_comments|0)!=(0);
            $or$cond = $26 | $25;
            if ($or$cond) {
                return;
            }
            $27 = ((($dest)) + 28|0);
            $28 = HEAP32[$27>>2]|0;
            $29 = ($28|0)==(0|0);
            if ($29) {
                $30 = (_Gif_NewComment()|0);
                HEAP32[$27>>2] = $30;
            }
            $31 = HEAP32[$27>>2]|0;
            $32 = HEAP32[$23>>2]|0;
            __Z14merge_commentsP11Gif_CommentS0_($31,$32);
            return;
        }
        function __Z14merge_commentsP11Gif_CommentS0_($destc,$srcc) {
            $destc = $destc|0;
            $srcc = $srcc|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($srcc)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)>(0);
            if (!($2)) {
                return;
            }
            $3 = ((($srcc)) + 4|0);
            $i$01 = 0;
            while(1) {
                $4 = HEAP32[$srcc>>2]|0;
                $5 = (($4) + ($i$01<<2)|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = HEAP32[$3>>2]|0;
                $8 = (($7) + ($i$01<<2)|0);
                $9 = HEAP32[$8>>2]|0;
                (_Gif_AddComment($destc,$6,$9)|0);
                $10 = (($i$01) + 1)|0;
                $11 = HEAP32[$0>>2]|0;
                $12 = ($10|0)<($11|0);
                if ($12) {
                    $i$01 = $10;
                } else {
                    break;
                }
            }
            return;
        }
        function __Z11merge_imageP10Gif_StreamS0_P9Gif_ImageP8Gt_Framei($dest,$src,$srci,$srcfr,$same_compressed_ok) {
            $dest = $dest|0;
            $src = $src|0;
            $srci = $srci|0;
            $srcfr = $srcfr|0;
            $same_compressed_ok = $same_compressed_ok|0;
            var $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
            var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
            var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
            var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
            var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
            var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
            var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
            var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
            var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
            var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
            var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
            var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
            var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $destcm$0 = 0, $destdata$019 = 0, $found_transparent$026 = 0, $found_transparent$2 = 0, $found_transparent$3 = 0, $gfex$013 = 0, $i$038 = 0, $i$235 = 0, $i$332 = 0, $i$431 = 0;
            var $i$5$found_transparent$0 = 0, $i$527 = 0, $i$527$in = 0, $i1$017 = 0, $inused = 0, $j$015 = 0, $j$123 = 0, $localcm$0 = 0, $map = 0, $or$cond3 = 0, $srcdata$018 = 0, $trivial_map$0$ = 0, $trivial_map$030 = 0, $trivial_map$1 = 0, $trivial_map$1$lcssa = 0, $trivial_map$2 = 0, $used = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 784|0;
            $vararg_buffer = sp;
            $map = sp + 520|0;
            $inused = sp + 264|0;
            $used = sp + 8|0;
            $0 = ((($dest)) + 12|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($srci)) + 24|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($3|0)==(0|0);
            if ($4) {
                $5 = ((($src)) + 12|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = ($6|0)==(0|0);
                if ($7) {
                    __ZL24merge_image_input_colorsPhPK9Gif_Image($inused,$srci);
                    $245 = 0;$246 = 0;$247 = 0;
                    label = 5;
                } else {
                    $9 = $6;
                    label = 4;
                }
            } else {
                $9 = $3;
                label = 4;
            }
            if ((label|0) == 4) {
                $8 = HEAP32[$9>>2]|0;
                __ZL24merge_image_input_colorsPhPK9Gif_Image($inused,$srci);
                $10 = ($8|0)==(256);
                if ($10) {
                    $19 = $9;$22 = 256;$248 = 1;
                } else {
                    $245 = $8;$246 = $9;$247 = 1;
                    label = 5;
                }
            }
            L6: do {
                if ((label|0) == 5) {
                    $i$038 = $245;
                    while(1) {
                        $13 = (($inused) + ($i$038)|0);
                        $14 = HEAP8[$13>>0]|0;
                        $15 = ($14<<24>>24)==(0);
                        $11 = (($i$038) + 1)|0;
                        if (!($15)) {
                            break;
                        }
                        $12 = ($11|0)==(256);
                        if ($12) {
                            $19 = $246;$22 = $245;$248 = $247;
                            break L6;
                        } else {
                            $i$038 = $11;
                        }
                    }
                    $16 = ((($srcfr)) + 96|0);
                    $17 = HEAP32[$16>>2]|0;
                    __Z8lwarningPKcS0_z($17,7583,$vararg_buffer);
                    $19 = $246;$22 = $245;$248 = $247;
                }
            } while(0);
            _memset(($used|0),0,256)|0;
            _memset(($map|0),0,256)|0;
            $18 = HEAP32[$0>>2]|0;
            $20 = (__Z26merge_colormap_if_possibleP12Gif_ColormapS0_($18,$19)|0);
            $21 = ($20|0)==(0);
            if ($21) {
                $35 = (_Gif_NewFullColormap(0,256)|0);
                $36 = ($22|0)==(0);
                if ($36) {
                    $destcm$0 = $35;$localcm$0 = $35;
                } else {
                    $37 = ((($35)) + 16|0);
                    $38 = ((($19)) + 16|0);
                    $i$332 = 0;
                    while(1) {
                        $39 = (($inused) + ($i$332)|0);
                        $40 = HEAP8[$39>>0]|0;
                        $41 = ($40<<24>>24)==(0);
                        if (!($41)) {
                            $42 = HEAP32[$35>>2]|0;
                            $43 = $42&255;
                            $44 = (($map) + ($i$332)|0);
                            HEAP8[$44>>0] = $43;
                            $45 = HEAP32[$35>>2]|0;
                            $46 = HEAP32[$37>>2]|0;
                            $47 = HEAP32[$38>>2]|0;
                            $48 = (($46) + ($45<<3)|0);
                            $49 = (($47) + ($i$332<<3)|0);
                            $50 = $49;
                            $51 = $50;
                            $52 = HEAP32[$51>>2]|0;
                            $53 = (($50) + 4)|0;
                            $54 = $53;
                            $55 = HEAP32[$54>>2]|0;
                            $56 = $48;
                            $57 = $56;
                            HEAP32[$57>>2] = $52;
                            $58 = (($56) + 4)|0;
                            $59 = $58;
                            HEAP32[$59>>2] = $55;
                            $60 = HEAP32[$35>>2]|0;
                            $61 = (($60) + 1)|0;
                            HEAP32[$35>>2] = $61;
                        }
                        $62 = (($i$332) + 1)|0;
                        $63 = ($62|0)==($22|0);
                        if ($63) {
                            $destcm$0 = $35;$localcm$0 = $35;
                            break;
                        } else {
                            $i$332 = $62;
                        }
                    }
                }
            } else {
                $23 = ($22|0)==(0);
                if ($23) {
                    $destcm$0 = $1;$localcm$0 = 0;
                } else {
                    $24 = ((($19)) + 16|0);
                    $i$235 = 0;
                    while(1) {
                        $25 = (($inused) + ($i$235)|0);
                        $26 = HEAP8[$25>>0]|0;
                        $27 = ($26<<24>>24)==(0);
                        if (!($27)) {
                            $28 = HEAP32[$24>>2]|0;
                            $29 = (((($28) + ($i$235<<3)|0)) + 4|0);
                            $30 = HEAP32[$29>>2]|0;
                            $31 = $30&255;
                            $32 = (($map) + ($i$235)|0);
                            HEAP8[$32>>0] = $31;
                        }
                        $33 = (($i$235) + 1)|0;
                        $34 = ($33|0)==($22|0);
                        if ($34) {
                            $destcm$0 = $1;$localcm$0 = 0;
                            break;
                        } else {
                            $i$235 = $33;
                        }
                    }
                }
            }
            $i$431 = 0;$trivial_map$030 = 1;
            while(1) {
                $64 = (($inused) + ($i$431)|0);
                $65 = HEAP8[$64>>0]|0;
                $66 = ($65<<24>>24)==(0);
                if ($66) {
                    $trivial_map$1 = $trivial_map$030;
                } else {
                    $67 = (($map) + ($i$431)|0);
                    $68 = HEAP8[$67>>0]|0;
                    $69 = $68&255;
                    $70 = (($used) + ($69)|0);
                    HEAP8[$70>>0] = 1;
                    $71 = ($trivial_map$030|0)==(0);
                    if ($71) {
                        $76 = 0;
                    } else {
                        $72 = HEAP8[$67>>0]|0;
                        $73 = $72&255;
                        $74 = ($73|0)==($i$431|0);
                        $76 = $74;
                    }
                    $75 = $76&1;
                    $trivial_map$1 = $75;
                }
                $77 = (($i$431) + 1)|0;
                $78 = ($77|0)==(256);
                if ($78) {
                    $trivial_map$1$lcssa = $trivial_map$1;
                    break;
                } else {
                    $i$431 = $77;$trivial_map$030 = $trivial_map$1;
                }
            }
            $79 = ((($srci)) + 20|0);
            $80 = HEAP16[$79>>1]|0;
            $81 = $80 << 16 >> 16;
            $82 = ($80<<16>>16)>(-1);
            if ($82) {
                $83 = ($trivial_map$1$lcssa|0)==(0);
                if ($83) {
                    label = 29;
                } else {
                    $84 = (($used) + ($81)|0);
                    $85 = HEAP8[$84>>0]|0;
                    $86 = ($85<<24>>24)==(0);
                    if ($86) {
                        $found_transparent$2 = $81;
                        label = 31;
                    } else {
                        label = 29;
                    }
                }
                if ((label|0) == 29) {
                    $87 = HEAP32[$destcm$0>>2]|0;
                    $88 = ($87|0)>(0);
                    if ($88) {
                        $found_transparent$026 = -1;$i$527$in = $87;
                        while(1) {
                            $i$527 = (($i$527$in) + -1)|0;
                            $89 = (($used) + ($i$527)|0);
                            $90 = HEAP8[$89>>0]|0;
                            $91 = ($90<<24>>24)==(0);
                            $i$5$found_transparent$0 = $91 ? $i$527 : $found_transparent$026;
                            $92 = ($i$527$in|0)>(1);
                            if ($92) {
                                $found_transparent$026 = $i$5$found_transparent$0;$i$527$in = $i$527;
                            } else {
                                $found_transparent$2 = $i$5$found_transparent$0;
                                label = 31;
                                break;
                            }
                        }
                    } else {
                        label = 33;
                    }
                }
                if ((label|0) == 31) {
                    $93 = ($found_transparent$2|0)<(0);
                    if ($93) {
                        label = 33;
                    } else {
                        $94 = HEAP32[$destcm$0>>2]|0;
                        $95 = ($found_transparent$2|0)<($94|0);
                        if ($95) {
                            $found_transparent$3 = $found_transparent$2;
                        } else {
                            label = 33;
                        }
                    }
                }
                if ((label|0) == 33) {
                    $96 = HEAP32[$destcm$0>>2]|0;
                    $97 = ((($destcm$0)) + 16|0);
                    $98 = HEAP32[$97>>2]|0;
                    $99 = (($98) + ($96<<3)|0);
                    if ($248) {
                        $100 = HEAP16[$79>>1]|0;
                        $101 = $100 << 16 >> 16;
                        $102 = HEAP32[$19>>2]|0;
                        $103 = ($101|0)<($102|0);
                        if ($103) {
                            $104 = ((($19)) + 16|0);
                            $105 = HEAP32[$104>>2]|0;
                            $106 = (($105) + ($101<<3)|0);
                            $107 = $106;
                            $108 = $107;
                            $109 = HEAP32[$108>>2]|0;
                            $110 = (($107) + 4)|0;
                            $111 = $110;
                            $112 = HEAP32[$111>>2]|0;
                            $113 = $99;
                            $114 = $113;
                            HEAP32[$114>>2] = $109;
                            $115 = (($113) + 4)|0;
                            $116 = $115;
                            HEAP32[$116>>2] = $112;
                        }
                    }
                    HEAP8[$99>>0] = 2;
                    $117 = ($96|0)<(256);
                    if ($117) {
                        $found_transparent$3 = $96;
                    } else {
                        ___assert_fail((7617|0),(7359|0),337,(7661|0));
                        // unreachable;
                    }
                }
                $118 = $found_transparent$3&255;
                $119 = HEAP16[$79>>1]|0;
                $120 = $119 << 16 >> 16;
                $121 = (($map) + ($120)|0);
                HEAP8[$121>>0] = $118;
                $122 = HEAP16[$79>>1]|0;
                $123 = $122 << 16 >> 16;
                $124 = ($123|0)==($found_transparent$3|0);
                $trivial_map$0$ = $124 ? $trivial_map$1$lcssa : 0;
                $trivial_map$2 = $trivial_map$0$;
            } else {
                $trivial_map$2 = $trivial_map$1$lcssa;
            }
            $125 = HEAP32[$destcm$0>>2]|0;
            $126 = ($125|0)<(257);
            if (!($126)) {
                ___assert_fail((7673|0),(7359|0),344,(7661|0));
                // unreachable;
            }
            $127 = (_Gif_NewImage()|0);
            $128 = ((($srci)) + 28|0);
            $129 = HEAP32[$128>>2]|0;
            $130 = (_Gif_CopyString($129)|0);
            $131 = ((($127)) + 28|0);
            HEAP32[$131>>2] = $130;
            $132 = HEAP16[$79>>1]|0;
            $133 = ($132<<16>>16)>(-1);
            if ($133) {
                $134 = $132 << 16 >> 16;
                $135 = (($map) + ($134)|0);
                $136 = HEAP8[$135>>0]|0;
                $137 = $136&255;
                $138 = ((($127)) + 20|0);
                HEAP16[$138>>1] = $137;
            }
            $139 = ((($srci)) + 16|0);
            $140 = HEAP16[$139>>1]|0;
            $141 = ((($127)) + 16|0);
            HEAP16[$141>>1] = $140;
            $142 = ((($srci)) + 18|0);
            $143 = HEAP8[$142>>0]|0;
            $144 = ((($127)) + 18|0);
            HEAP8[$144>>0] = $143;
            $145 = ((($srci)) + 12|0);
            $146 = HEAP16[$145>>1]|0;
            $147 = ((($127)) + 12|0);
            HEAP16[$147>>1] = $146;
            $148 = ((($srci)) + 14|0);
            $149 = HEAP16[$148>>1]|0;
            $150 = ((($127)) + 14|0);
            HEAP16[$150>>1] = $149;
            $151 = ((($srci)) + 19|0);
            $152 = HEAP8[$151>>0]|0;
            $153 = ((($127)) + 19|0);
            HEAP8[$153>>0] = $152;
            $154 = ((($srci)) + 8|0);
            $155 = HEAP16[$154>>1]|0;
            $156 = ((($127)) + 8|0);
            HEAP16[$156>>1] = $155;
            $157 = ((($srci)) + 10|0);
            $158 = HEAP16[$157>>1]|0;
            $159 = ((($127)) + 10|0);
            HEAP16[$159>>1] = $158;
            $160 = ((($127)) + 24|0);
            HEAP32[$160>>2] = $localcm$0;
            $161 = ($trivial_map$2|0)!=(0);
            $162 = ($same_compressed_ok|0)!=(0);
            $or$cond3 = $162 & $161;
            if ($or$cond3) {
                $163 = ((($srci)) + 52|0);
                $164 = HEAP32[$163>>2]|0;
                $165 = ($164|0)==(0|0);
                if ($165) {
                    label = 47;
                } else {
                    $166 = ((($srci)) + 48|0);
                    $167 = HEAP32[$166>>2]|0;
                    $168 = ($167|0)==(0);
                    if ($168) {
                        $169 = ((($srci)) + 44|0);
                        $170 = HEAP32[$169>>2]|0;
                        $171 = ((($127)) + 44|0);
                        HEAP32[$171>>2] = $170;
                        $172 = HEAP32[$169>>2]|0;
                        $173 = (_Gif_Realloc(0,1,$172,7359,364)|0);
                        $174 = ((($127)) + 52|0);
                        HEAP32[$174>>2] = $173;
                        $175 = ((($127)) + 56|0);
                        HEAP32[$175>>2] = 1;
                        $176 = HEAP32[$174>>2]|0;
                        $177 = HEAP32[$163>>2]|0;
                        $178 = HEAP32[$169>>2]|0;
                        _memcpy(($176|0),($177|0),($178|0))|0;
                    } else {
                        label = 47;
                    }
                }
            } else {
                label = 47;
            }
            L68: do {
                if ((label|0) == 47) {
                    $179 = HEAP8[$153>>0]|0;
                    $180 = $179&255;
                    (_Gif_CreateUncompressedImage($127,$180)|0);
                    $181 = HEAP16[$159>>1]|0;
                    $182 = ($181<<16>>16)==(0);
                    if ($161) {
                        if ($182) {
                            break;
                        }
                        $j$015 = 0;
                        while(1) {
                            $183 = HEAP32[$127>>2]|0;
                            $184 = (($183) + ($j$015<<2)|0);
                            $185 = HEAP32[$184>>2]|0;
                            $186 = HEAP32[$srci>>2]|0;
                            $187 = (($186) + ($j$015<<2)|0);
                            $188 = HEAP32[$187>>2]|0;
                            $189 = HEAP16[$156>>1]|0;
                            $190 = $189&65535;
                            _memcpy(($185|0),($188|0),($190|0))|0;
                            $191 = (($j$015) + 1)|0;
                            $192 = HEAP16[$159>>1]|0;
                            $193 = $192&65535;
                            $194 = ($191|0)<($193|0);
                            if ($194) {
                                $j$015 = $191;
                            } else {
                                break L68;
                            }
                        }
                    }
                    if (!($182)) {
                        $j$123 = 0;
                        while(1) {
                            $195 = HEAP16[$156>>1]|0;
                            $196 = ($195<<16>>16)==(0);
                            if (!($196)) {
                                $197 = HEAP32[$127>>2]|0;
                                $198 = (($197) + ($j$123<<2)|0);
                                $199 = HEAP32[$198>>2]|0;
                                $200 = HEAP32[$srci>>2]|0;
                                $201 = (($200) + ($j$123<<2)|0);
                                $202 = HEAP32[$201>>2]|0;
                                $destdata$019 = $199;$i1$017 = 0;$srcdata$018 = $202;
                                while(1) {
                                    $203 = HEAP8[$srcdata$018>>0]|0;
                                    $204 = $203&255;
                                    $205 = (($map) + ($204)|0);
                                    $206 = HEAP8[$205>>0]|0;
                                    HEAP8[$destdata$019>>0] = $206;
                                    $207 = (($i1$017) + 1)|0;
                                    $208 = ((($srcdata$018)) + 1|0);
                                    $209 = ((($destdata$019)) + 1|0);
                                    $210 = HEAP16[$156>>1]|0;
                                    $211 = $210&65535;
                                    $212 = ($207|0)<($211|0);
                                    if ($212) {
                                        $destdata$019 = $209;$i1$017 = $207;$srcdata$018 = $208;
                                    } else {
                                        break;
                                    }
                                }
                            }
                            $213 = (($j$123) + 1)|0;
                            $214 = HEAP16[$159>>1]|0;
                            $215 = $214&65535;
                            $216 = ($213|0)<($215|0);
                            if ($216) {
                                $j$123 = $213;
                            } else {
                                break;
                            }
                        }
                    }
                }
            } while(0);
            $217 = ((($srci)) + 32|0);
            $218 = HEAP32[$217>>2]|0;
            $219 = ($218|0)==(0|0);
            if (!($219)) {
                $220 = (_Gif_NewComment()|0);
                $221 = ((($127)) + 32|0);
                HEAP32[$221>>2] = $220;
                $222 = HEAP32[$217>>2]|0;
                __Z14merge_commentsP11Gif_CommentS0_($220,$222);
            }
            $223 = ((($srci)) + 36|0);
            $224 = HEAP32[$223>>2]|0;
            $225 = ($224|0)==(0|0);
            if (!($225)) {
                $226 = ((($srcfr)) + 76|0);
                $227 = HEAP32[$226>>2]|0;
                $228 = ($227|0)==(0);
                if ($228) {
                    $229 = ((($srcfr)) + 80|0);
                    $gfex$013 = $224;
                    while(1) {
                        $233 = HEAP32[$gfex$013>>2]|0;
                        $234 = ($233|0)==(255);
                        if ($234) {
                            $235 = HEAP32[$229>>2]|0;
                            $236 = ($235|0)==(0);
                            if ($236) {
                                label = 66;
                            }
                        } else {
                            label = 66;
                        }
                        if ((label|0) == 66) {
                            label = 0;
                            $237 = (_Gif_CopyExtension($gfex$013)|0);
                            (_Gif_AddExtension($dest,$127,$237)|0);
                        }
                        $238 = ((($gfex$013)) + 32|0);
                        $239 = HEAP32[$238>>2]|0;
                        $240 = ($239|0)==(0|0);
                        if ($240) {
                            break;
                        } else {
                            $gfex$013 = $239;
                        }
                    }
                }
            }
            $230 = ((($srcfr)) + 84|0);
            $231 = HEAP32[$230>>2]|0;
            $232 = ($231|0)==(0|0);
            if ($232) {
                (_Gif_AddImage($dest,$127)|0);
                STACKTOP = sp;return ($127|0);
            }
            $242 = $231;
            while(1) {
                $241 = ((($242)) + 32|0);
                $243 = HEAP32[$241>>2]|0;
                (_Gif_AddExtension($dest,$127,$242)|0);
                HEAP32[$230>>2] = $243;
                $$cast = $243;
                $244 = ($243|0)==(0);
                if ($244) {
                    break;
                } else {
                    $242 = $$cast;
                }
            }
            (_Gif_AddImage($dest,$127)|0);
            STACKTOP = sp;return ($127|0);
        }
        function __ZL24merge_image_input_colorsPhPK9Gif_Image($inused,$srci) {
            $inused = $inused|0;
            $srci = $srci|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data$03 = 0, $nleft$05 = 0, $nleft$1$lcssa = 0, $nleft$12 = 0, $x$01 = 0;
            var $y$04 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Gif_ImageColorBound($srci)|0);
            _memset(($inused|0),0,256)|0;
            $1 = ((($srci)) + 10|0);
            $2 = HEAP16[$1>>1]|0;
            $3 = ($2<<16>>16)!=(0);
            $4 = ($0|0)>(0);
            $5 = $4 & $3;
            if ($5) {
                $6 = ((($srci)) + 8|0);
                $nleft$05 = $0;$y$04 = 0;
                while(1) {
                    $7 = HEAP16[$6>>1]|0;
                    $8 = ($7<<16>>16)==(0);
                    if ($8) {
                        $nleft$1$lcssa = $nleft$05;
                    } else {
                        $9 = HEAP32[$srci>>2]|0;
                        $10 = (($9) + ($y$04<<2)|0);
                        $11 = HEAP32[$10>>2]|0;
                        $data$03 = $11;$nleft$12 = $nleft$05;$x$01 = 0;
                        while(1) {
                            $12 = HEAP8[$data$03>>0]|0;
                            $13 = $12&255;
                            $14 = (($inused) + ($13)|0);
                            $15 = HEAP8[$14>>0]|0;
                            $16 = $15&255;
                            $17 = (($nleft$12) + -1)|0;
                            $18 = (($17) + ($16))|0;
                            HEAP8[$14>>0] = 1;
                            $19 = (($x$01) + 1)|0;
                            $20 = ((($data$03)) + 1|0);
                            $21 = HEAP16[$6>>1]|0;
                            $22 = $21&65535;
                            $23 = ($19|0)==($22|0);
                            if ($23) {
                                $nleft$1$lcssa = $18;
                                break;
                            } else {
                                $data$03 = $20;$nleft$12 = $18;$x$01 = $19;
                            }
                        }
                    }
                    $24 = (($y$04) + 1)|0;
                    $25 = HEAP16[$1>>1]|0;
                    $26 = $25&65535;
                    $27 = ($24|0)!=($26|0);
                    $28 = ($nleft$1$lcssa|0)>(0);
                    $29 = $28 & $27;
                    if ($29) {
                        $nleft$05 = $nleft$1$lcssa;$y$04 = $24;
                    } else {
                        break;
                    }
                }
            }
            $30 = ((($srci)) + 20|0);
            $31 = HEAP16[$30>>1]|0;
            $32 = ($31<<16>>16)>(-1);
            if (!($32)) {
                return;
            }
            $33 = $31 << 16 >> 16;
            $34 = (($inused) + ($33)|0);
            HEAP8[$34>>0] = 0;
            return;
        }
        function __Z12new_opt_datav() {
            var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Gif_Realloc(0,44,1,7693,75)|0);
            $1 = ((($0)) + 20|0);
            HEAP32[$1>>2] = 0;
            $2 = ((($0)) + 32|0);
            HEAP32[$2>>2] = 1;
            return ($0|0);
        }
        function __Z15delete_opt_dataP11Gif_OptData($od) {
            $od = $od|0;
            var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($od|0)==(0|0);
            if ($0) {
                return;
            }
            $1 = ((($od)) + 20|0);
            $2 = HEAP32[$1>>2]|0;
            _free($2);
            _free($od);
            return;
        }
        function __Z18optimize_fragmentsP10Gif_Streamii($gfs,$optimize_flags,$huge_stream) {
            $gfs = $gfs|0;
            $optimize_flags = $optimize_flags|0;
            $huge_stream = $huge_stream|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (__ZL20initialize_optimizerP10Gif_Stream($gfs)|0);
            $1 = ($0|0)==(0);
            if ($1) {
                return;
            }
            $2 = HEAP32[412>>2]|0;
            $3 = HEAP32[$2>>2]|0;
            $4 = ($3>>>0)>(65534);
            $5 = ($huge_stream|0)==(0);
            $6 = $5&1;
            if ($4) {
                __ZL18create_subimages32P10Gif_Streamii($gfs,$optimize_flags,$6);
                __ZL23create_out_global_map32P10Gif_Stream($gfs);
                __ZL23create_new_image_data32P10Gif_Streami($gfs,$optimize_flags);
                __ZL25finalize_optimizer_data32v();
            } else {
                __ZL18create_subimages16P10Gif_Streamii($gfs,$optimize_flags,$6);
                __ZL23create_out_global_map16P10Gif_Stream($gfs);
                __ZL23create_new_image_data16P10Gif_Streami($gfs,$optimize_flags);
                __ZL25finalize_optimizer_data16v();
            }
            __ZL18finalize_optimizerP10Gif_Streami($gfs,$optimize_flags);
            return;
        }
        function __ZL20initialize_optimizerP10Gif_Stream($gfs) {
            $gfs = $gfs|0;
            var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
            var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
            var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
            var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
            var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
            var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $any_globals$03 = 0, $any_globals$1 = 0, $any_globals$1$lcssa = 0, $col$011 = 0, $exitcond = 0, $first_transparent$04 = 0, $i$012 = 0, $i$1$first_transparent$0 = 0, $i$1$first_transparent$0$lcssa = 0, $i$15 = 0, $i$22 = 0, $or$cond = 0;
            var $storemerge = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfs)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)<(1);
            if ($2) {
                $$0 = 0;
                return ($$0|0);
            }
            $3 = (_Gif_NewFullColormap(1,384)|0);
            HEAP32[412>>2] = $3;
            $4 = ((($3)) + 16|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = ((($5)) + 1|0);
            HEAP8[$6>>0] = -1;
            $7 = HEAP32[412>>2]|0;
            $8 = ((($7)) + 16|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = ((($9)) + 2|0);
            HEAP8[$10>>0] = -1;
            $11 = HEAP32[412>>2]|0;
            $12 = ((($11)) + 16|0);
            $13 = HEAP32[$12>>2]|0;
            $14 = ((($13)) + 3|0);
            HEAP8[$14>>0] = -1;
            $15 = ((($gfs)) + 12|0);
            $16 = HEAP32[$15>>2]|0;
            HEAP32[420>>2] = $16;
            $17 = ($16|0)==(0|0);
            if ($17) {
                $18 = (_Gif_NewFullColormap(256,256)|0);
                HEAP32[420>>2] = $18;
                $19 = ((($18)) + 16|0);
                $20 = HEAP32[$19>>2]|0;
                $col$011 = $20;$i$012 = 0;
                while(1) {
                    $21 = $i$012&255;
                    $22 = ((($col$011)) + 3|0);
                    HEAP8[$22>>0] = $21;
                    $23 = ((($col$011)) + 2|0);
                    HEAP8[$23>>0] = $21;
                    $24 = ((($col$011)) + 1|0);
                    HEAP8[$24>>0] = $21;
                    $25 = (($i$012) + 1)|0;
                    $26 = ((($col$011)) + 8|0);
                    $exitcond = ($25|0)==(256);
                    if ($exitcond) {
                        break;
                    } else {
                        $col$011 = $26;$i$012 = $25;
                    }
                }
            }
            __Z11kchist_initP6kchist(468);
            $27 = HEAP32[$0>>2]|0;
            $28 = ($27|0)>(0);
            if ($28) {
                $any_globals$03 = 0;$first_transparent$04 = -1;$i$15 = 0;
                while(1) {
                    $29 = HEAP32[$gfs>>2]|0;
                    $30 = (($29) + ($i$15<<2)|0);
                    $31 = HEAP32[$30>>2]|0;
                    $32 = ((($31)) + 24|0);
                    $33 = HEAP32[$32>>2]|0;
                    $34 = ($33|0)==(0|0);
                    if ($34) {
                        $any_globals$1 = 1;
                    } else {
                        __ZL16all_colormap_addPK12Gif_Colormap($33);
                        $any_globals$1 = $any_globals$03;
                    }
                    $35 = ((($31)) + 20|0);
                    $36 = HEAP16[$35>>1]|0;
                    $37 = ($36<<16>>16)>(-1);
                    $38 = ($first_transparent$04|0)<(0);
                    $or$cond = $38 & $37;
                    $i$1$first_transparent$0 = $or$cond ? $i$15 : $first_transparent$04;
                    $39 = (($i$15) + 1)|0;
                    $40 = HEAP32[$0>>2]|0;
                    $41 = ($39|0)<($40|0);
                    if ($41) {
                        $any_globals$03 = $any_globals$1;$first_transparent$04 = $i$1$first_transparent$0;$i$15 = $39;
                    } else {
                        $any_globals$1$lcssa = $any_globals$1;$i$1$first_transparent$0$lcssa = $i$1$first_transparent$0;
                        break;
                    }
                }
                $42 = ($any_globals$1$lcssa|0)==(0);
                if (!($42)) {
                    $43 = HEAP32[420>>2]|0;
                    __ZL16all_colormap_addPK12Gif_Colormap($43);
                }
                __Z14kchist_cleanupP6kchist(468);
                $44 = ($i$1$first_transparent$0$lcssa|0)>(-1);
                if ($44) {
                    $45 = HEAP32[$gfs>>2]|0;
                    $46 = (($45) + ($i$1$first_transparent$0$lcssa<<2)|0);
                    $47 = HEAP32[$46>>2]|0;
                    $48 = ((($47)) + 24|0);
                    $49 = HEAP32[$48>>2]|0;
                    $50 = ($49|0)==(0|0);
                    if ($50) {
                        $51 = HEAP32[$15>>2]|0;
                        $59 = $51;
                    } else {
                        $59 = $49;
                    }
                    $52 = HEAP32[412>>2]|0;
                    $53 = ((($52)) + 16|0);
                    $54 = HEAP32[$53>>2]|0;
                    $55 = ((($47)) + 20|0);
                    $56 = HEAP16[$55>>1]|0;
                    $57 = $56 << 16 >> 16;
                    $58 = ((($59)) + 16|0);
                    $60 = HEAP32[$58>>2]|0;
                    $61 = (($60) + ($57<<3)|0);
                    $62 = $61;
                    $63 = $62;
                    $64 = HEAP32[$63>>2]|0;
                    $65 = (($62) + 4)|0;
                    $66 = $65;
                    $67 = HEAP32[$66>>2]|0;
                    $68 = $54;
                    $69 = $68;
                    HEAP32[$69>>2] = $64;
                    $70 = (($68) + 4)|0;
                    $71 = $70;
                    HEAP32[$71>>2] = $67;
                }
            } else {
                __Z14kchist_cleanupP6kchist(468);
            }
            _Gif_CalculateScreenSize($gfs,0);
            $72 = ((($gfs)) + 18|0);
            $73 = HEAP16[$72>>1]|0;
            $74 = $73&65535;
            HEAP32[432>>2] = $74;
            $75 = ((($gfs)) + 20|0);
            $76 = HEAP16[$75>>1]|0;
            $77 = $76&65535;
            HEAP32[436>>2] = $77;
            $78 = HEAP32[$0>>2]|0;
            $79 = ($78|0)>(0);
            $80 = HEAP32[$gfs>>2]|0;
            if ($79) {
                $82 = $80;$i$22 = 0;
                while(1) {
                    $81 = (($82) + ($i$22<<2)|0);
                    $83 = HEAP32[$81>>2]|0;
                    $84 = HEAP32[432>>2]|0;
                    $85 = HEAP32[436>>2]|0;
                    (_Gif_ClipImage($83,0,0,$84,$85)|0);
                    $86 = (($i$22) + 1)|0;
                    $87 = HEAP32[$0>>2]|0;
                    $88 = ($86|0)<($87|0);
                    $89 = HEAP32[$gfs>>2]|0;
                    if ($88) {
                        $82 = $89;$i$22 = $86;
                    } else {
                        $$lcssa = $89;
                        break;
                    }
                }
            } else {
                $$lcssa = $80;
            }
            $90 = HEAP32[$$lcssa>>2]|0;
            $91 = ((($90)) + 20|0);
            $92 = HEAP16[$91>>1]|0;
            $93 = ($92<<16>>16)<(0);
            if ($93) {
                $94 = HEAP32[$15>>2]|0;
                $95 = ($94|0)==(0|0);
                if ($95) {
                    $storemerge = 0;
                } else {
                    $96 = ((($gfs)) + 16|0);
                    $97 = HEAP16[$96>>1]|0;
                    $98 = $97&65535;
                    $99 = HEAP32[420>>2]|0;
                    $100 = HEAP32[$99>>2]|0;
                    $101 = ($98|0)<($100|0);
                    if ($101) {
                        $102 = ((($99)) + 16|0);
                        $103 = HEAP32[$102>>2]|0;
                        $104 = (((($103) + ($98<<3)|0)) + 4|0);
                        $105 = HEAP32[$104>>2]|0;
                        $storemerge = $105;
                    } else {
                        $storemerge = 0;
                    }
                }
            } else {
                $storemerge = 0;
            }
            HEAP32[416>>2] = $storemerge;
            $$0 = 1;
            return ($$0|0);
        }
        function __ZL18create_subimages32P10Gif_Streamii($gfs,$optimize_flags,$save_uncompressed) {
            $gfs = $gfs|0;
            $optimize_flags = $optimize_flags|0;
            $save_uncompressed = $save_uncompressed|0;
            var $$ = 0, $$lcssa27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
            var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
            var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
            var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
            var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
            var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $last_gfi$017 = 0, $local_color_tables$0$ = 0, $local_color_tables$014 = 0, $next_data_valid$016 = 0, $next_data_valid$1 = 0, $next_data_valid$2 = 0, $next_data_valid$2$lcssa = 0, $ob = 0, $or$cond = 0, $or$cond5 = 0, $previous_data$015 = 0;
            var $previous_data$1 = 0, $previous_data$2 = 0, $previous_data$3 = 0, $previous_data$3$lcssa = 0, $storemerge13 = 0, $switch = 0, $switch7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $vararg_buffer = sp;
            $ob = sp + 8|0;
            $0 = HEAP32[432>>2]|0;
            $1 = HEAP32[436>>2]|0;
            $2 = Math_imul($1, $0)|0;
            $3 = (_Gif_Realloc(0,4,$2,7706,462)|0);
            HEAP32[456>>2] = $3;
            $4 = (_Gif_Realloc(0,4,$2,7706,463)|0);
            HEAP32[460>>2] = $4;
            $5 = (_Gif_Realloc(0,4,$2,7706,464)|0);
            HEAP32[464>>2] = $5;
            $6 = HEAP32[456>>2]|0;
            __ZL14erase_screen32Pj($6);
            $7 = HEAP32[460>>2]|0;
            __ZL14erase_screen32Pj($7);
            HEAP32[444>>2] = 0;
            $8 = ((($gfs)) + 4|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = ($9|0)>(0);
            if (!($10)) {
                $11 = HEAP32[464>>2]|0;
                _free($11);
                STACKTOP = sp;return;
            }
            $12 = $2 << 2;
            $13 = $optimize_flags & 65534;
            $14 = ($13|0)!=(0);
            $15 = $2 << 2;
            $16 = ((($ob)) + 4|0);
            $17 = ((($ob)) + 8|0);
            $18 = ((($ob)) + 12|0);
            $last_gfi$017 = 0;$local_color_tables$014 = 0;$next_data_valid$016 = 0;$previous_data$015 = 0;$storemerge13 = 0;
            L5: while(1) {
                $19 = HEAP32[$gfs>>2]|0;
                $20 = (($19) + ($storemerge13<<2)|0);
                $21 = HEAP32[$20>>2]|0;
                $22 = (__Z12new_opt_datav()|0);
                $23 = ((($21)) + 24|0);
                $24 = HEAP32[$23>>2]|0;
                $25 = ($24|0)==(0|0);
                $local_color_tables$0$ = $25 ? $local_color_tables$014 : 1;
                $26 = ((($21)) + 18|0);
                $27 = HEAP8[$26>>0]|0;
                $28 = ($27<<24>>24)==(3);
                if ($28) {
                    label = 7;
                } else {
                    $29 = ($local_color_tables$0$|0)!=(0);
                    $30 = HEAP32[444>>2]|0;
                    $31 = ($30|0)>(0);
                    $or$cond = $29 & $31;
                    if ($or$cond) {
                        $32 = ((($last_gfi$017)) + 18|0);
                        $33 = HEAP8[$32>>0]|0;
                        $34 = ($33&255)>(1);
                        if ($34) {
                            label = 7;
                        } else {
                            $previous_data$2 = $previous_data$015;
                        }
                    } else {
                        $previous_data$2 = $previous_data$015;
                    }
                }
                if ((label|0) == 7) {
                    label = 0;
                    $35 = ($previous_data$015|0)==(0|0);
                    if ($35) {
                        $36 = (_Gif_Realloc(0,4,$2,7706,489)|0);
                        $previous_data$1 = $36;
                    } else {
                        $previous_data$1 = $previous_data$015;
                    }
                    $37 = HEAP32[460>>2]|0;
                    _memcpy(($previous_data$1|0),($37|0),($12|0))|0;
                    $previous_data$2 = $previous_data$1;
                }
                $38 = ($next_data_valid$016|0)==(0);
                $39 = HEAP32[460>>2]|0;
                if ($38) {
                    __ZL13apply_frame32PjP10Gif_StreamP9Gif_Imageii($39,$gfs,$21,$save_uncompressed);
                } else {
                    $40 = HEAP32[464>>2]|0;
                    HEAP32[460>>2] = $40;
                    HEAP32[464>>2] = $39;
                }
                $41 = ((($22)) + 12|0);
                $42 = ((($22)) + 24|0);
                $43 = ($local_color_tables$0$|0)!=(0);
                $44 = ((($last_gfi$017)) + 18|0);
                $45 = ((($last_gfi$017)) + 64|0);
                $46 = ((($22)) + 2|0);
                $47 = ((($22)) + 4|0);
                $48 = ((($22)) + 6|0);
                $next_data_valid$1 = 0;
                while(1) {
                    HEAP8[$41>>0] = 1;
                    $49 = HEAP32[444>>2]|0;
                    $50 = ($49|0)>(0);
                    if ($50) {
                        __ZL24find_difference_bounds32P11Gif_OptDataP9Gif_ImageS2_($22,$21,$last_gfi$017);
                    } else {
                        __ZL11safe_boundsP9Gif_Image($ob,$21);
                        $51 = HEAP32[$ob>>2]|0;
                        $52 = $51&65535;
                        HEAP16[$22>>1] = $52;
                        $53 = HEAP32[$16>>2]|0;
                        $54 = $53&65535;
                        HEAP16[$46>>1] = $54;
                        $55 = HEAP32[$17>>2]|0;
                        $56 = $55&65535;
                        HEAP16[$47>>1] = $56;
                        $57 = HEAP32[$18>>2]|0;
                        $58 = $57&65535;
                        HEAP16[$48>>1] = $58;
                    }
                    $59 = HEAP8[$26>>0]|0;
                    $60 = $59 & -2;
                    $switch = ($60<<24>>24)==(2);
                    if ($switch) {
                        $61 = HEAP32[444>>2]|0;
                        $62 = HEAP32[$8>>2]|0;
                        $63 = (($62) + -1)|0;
                        $64 = ($61|0)<($63|0);
                        if ($64) {
                            $65 = (($61) + 1)|0;
                            $66 = HEAP32[$gfs>>2]|0;
                            $67 = (($66) + ($65<<2)|0);
                            $68 = HEAP32[$67>>2]|0;
                            $69 = HEAP32[464>>2]|0;
                            $70 = HEAP32[460>>2]|0;
                            __ZL22apply_frame_disposal32PjS_S_P9Gif_Image($69,$70,$previous_data$2,$21);
                            $71 = HEAP32[464>>2]|0;
                            __ZL13apply_frame32PjP10Gif_StreamP9Gif_Imageii($71,$gfs,$68,$save_uncompressed);
                            $72 = (__ZL26expand_difference_bounds32P11Gif_OptDataP9Gif_Image($22,$21)|0);
                            $73 = ($72|0)==(0);
                            if ($73) {
                                $next_data_valid$2 = 1;
                            } else {
                                HEAP8[$41>>0] = 2;
                                $next_data_valid$2 = 1;
                            }
                        } else {
                            $next_data_valid$2 = $next_data_valid$1;
                        }
                    } else {
                        $next_data_valid$2 = $next_data_valid$1;
                    }
                    __ZL21fix_difference_boundsP11Gif_OptData($22);
                    $74 = HEAP32[444>>2]|0;
                    $75 = ($74|0)>(0);
                    $76 = $14 & $75;
                    $77 = $76&1;
                    $78 = HEAP32[416>>2]|0;
                    $79 = $78 | $74;
                    $80 = ($79|0)==(0);
                    $$ = $80 ? 2 : $77;
                    __ZL17get_used_colors32P11Gif_OptDatai($22,$$);
                    $81 = HEAP32[$42>>2]|0;
                    $82 = ($81>>>0)>(256);
                    if (!($82)) {
                        $next_data_valid$2$lcssa = $next_data_valid$2;
                        break;
                    }
                    $83 = HEAP32[444>>2]|0;
                    $84 = ($83|0)>(0);
                    $or$cond5 = $43 & $84;
                    if (!($or$cond5)) {
                        $$lcssa27 = $42;
                        label = 26;
                        break L5;
                    }
                    $85 = HEAP8[$44>>0]|0;
                    $86 = $85 & -2;
                    $switch7 = ($86<<24>>24)==(2);
                    if (!($switch7)) {
                        $$lcssa27 = $42;
                        label = 26;
                        break L5;
                    }
                    $87 = HEAP32[$45>>2]|0;
                    $88 = ((($87)) + 12|0);
                    $89 = HEAP8[$88>>0]|0;
                    $90 = ($89<<24>>24)==($85<<24>>24);
                    if ($90) {
                        $$lcssa27 = $42;
                        label = 26;
                        break L5;
                    }
                    HEAP8[$88>>0] = $85;
                    $91 = HEAP32[456>>2]|0;
                    _memcpy(($91|0),($previous_data$2|0),($15|0))|0;
                    $next_data_valid$1 = $next_data_valid$2;
                }
                $93 = ((($21)) + 64|0);
                HEAP32[$93>>2] = $22;
                $94 = HEAP8[$41>>0]|0;
                $95 = ($94<<24>>24)==(2);
                $96 = HEAP32[456>>2]|0;
                if ($95) {
                    __ZL26erase_data_area_subimage32PjP11Gif_OptData($96,$22);
                } else {
                    $97 = HEAP32[460>>2]|0;
                    __ZL25copy_data_area_subimage32PjS_P11Gif_OptData($96,$97,$22);
                }
                $98 = HEAP8[$26>>0]|0;
                switch ($98<<24>>24) {
                    case 2:  {
                        $99 = HEAP32[460>>2]|0;
                        __ZL17erase_data_area32PjP9Gif_Image($99,$21);
                        $previous_data$3 = $previous_data$2;
                        break;
                    }
                    case 3:  {
                        $100 = HEAP32[460>>2]|0;
                        HEAP32[460>>2] = $previous_data$2;
                        $previous_data$3 = $100;
                        break;
                    }
                    default: {
                        $previous_data$3 = $previous_data$2;
                    }
                }
                $101 = HEAP32[444>>2]|0;
                $102 = (($101) + 1)|0;
                HEAP32[444>>2] = $102;
                $103 = HEAP32[$8>>2]|0;
                $104 = ($102|0)<($103|0);
                if ($104) {
                    $last_gfi$017 = $21;$local_color_tables$014 = $local_color_tables$0$;$next_data_valid$016 = $next_data_valid$2$lcssa;$previous_data$015 = $previous_data$3;$storemerge13 = $102;
                } else {
                    $previous_data$3$lcssa = $previous_data$3;
                    label = 34;
                    break;
                }
            }
            if ((label|0) == 26) {
                $92 = HEAP32[$$lcssa27>>2]|0;
                HEAP32[$vararg_buffer>>2] = $92;
                __Z11fatal_errorPKcz(7792,$vararg_buffer);
                // unreachable;
            }
            else if ((label|0) == 34) {
                $105 = HEAP32[464>>2]|0;
                _free($105);
                $106 = ($previous_data$3$lcssa|0)==(0|0);
                if ($106) {
                    STACKTOP = sp;return;
                }
                _free($previous_data$3$lcssa);
                STACKTOP = sp;return;
            }
        }
        function __ZL23create_out_global_map32P10Gif_Stream($gfs) {
            $gfs = $gfs|0;
            var $$ = 0, $$lcssa = 0, $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
            var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
            var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0;
            var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
            var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
            var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
            var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
            var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cur_ncol$017 = 0, $exitcond = 0, $exitcond37 = 0, $i$032 = 0, $i$36 = 0, $imagei$029 = 0, $imagei$120 = 0, $imagei$28 = 0, $imagei$314 = 0;
            var $permutation_changed$0$be = 0, $permutation_changed$016 = 0, $permutation_changed$1$lcssa = 0, $permutation_changed$17 = 0, $permutation_changed$2 = 0, $pi$024 = 0, $scevgep = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[412>>2]|0;
            $1 = HEAP32[$0>>2]|0;
            $2 = (_Gif_Realloc(0,4,$1,7706,611)|0);
            $3 = (_Gif_Realloc(0,4,$1,7706,612)|0);
            $4 = (_Gif_Realloc(0,4,$1,7706,613)|0);
            $5 = ($1|0)<(258);
            $6 = (($1) + -1)|0;
            $7 = $5 ? $6 : 256;
            $8 = ($1|0)>(1);
            if ($8) {
                $9 = (($1) + -1)|0;
                $i$032 = 0;
                while(1) {
                    $14 = (($i$032) + 1)|0;
                    $15 = (($3) + ($i$032<<2)|0);
                    HEAP32[$15>>2] = $14;
                    $exitcond37 = ($14|0)==($9|0);
                    if ($exitcond37) {
                        break;
                    } else {
                        $i$032 = $14;
                    }
                }
            }
            $10 = ((($gfs)) + 4|0);
            $11 = HEAP32[$10>>2]|0;
            $12 = ($11|0)>(0);
            if ($12) {
                $13 = ($1|0)>(257);
                $imagei$029 = 0;
                while(1) {
                    $17 = HEAP32[$gfs>>2]|0;
                    $18 = (($17) + ($imagei$029<<2)|0);
                    $19 = HEAP32[$18>>2]|0;
                    $20 = ((($19)) + 64|0);
                    $21 = HEAP32[$20>>2]|0;
                    $22 = ((($21)) + 36|0);
                    HEAP32[$22>>2] = 1;
                    $23 = ((($21)) + 32|0);
                    HEAP32[$23>>2] = 1;
                    $24 = ((($21)) + 24|0);
                    $25 = HEAP32[$24>>2]|0;
                    $26 = ($25>>>0)>(2);
                    if ($26) {
                        $27 = HEAP32[$24>>2]|0;
                        $$promoted = HEAP32[$22>>2]|0;
                        $29 = $$promoted;$pi$024 = 2;
                        while(1) {
                            $28 = ($29*3)|0;
                            $30 = $pi$024 << 1;
                            $31 = ($30>>>0)<($27>>>0);
                            if ($31) {
                                $29 = $28;$pi$024 = $30;
                            } else {
                                $$lcssa = $28;
                                break;
                            }
                        }
                        HEAP32[$22>>2] = $$lcssa;
                    }
                    $$ = $13 ? $22 : $23;
                    $32 = HEAP32[$$>>2]|0;
                    $33 = ((($21)) + 28|0);
                    HEAP32[$33>>2] = $32;
                    $34 = (($imagei$029) + 1)|0;
                    $35 = HEAP32[$10>>2]|0;
                    $36 = ($34|0)<($35|0);
                    if ($36) {
                        $imagei$029 = $34;
                    } else {
                        break;
                    }
                }
            }
            $16 = ($1|0)>(1);
            if ($16) {
                $scevgep = ((($2)) + 4|0);
                $37 = $1 << 2;
                $38 = (($37) + -4)|0;
                _memset(($scevgep|0),0,($38|0))|0;
            }
            $39 = HEAP32[$10>>2]|0;
            $40 = ($39|0)>(0);
            if ($40) {
                $imagei$120 = 0;
                while(1) {
                    $44 = HEAP32[$gfs>>2]|0;
                    $45 = (($44) + ($imagei$120<<2)|0);
                    $46 = HEAP32[$45>>2]|0;
                    $47 = ((($46)) + 64|0);
                    $48 = HEAP32[$47>>2]|0;
                    $49 = ((($48)) + 28|0);
                    $50 = HEAP32[$49>>2]|0;
                    __ZL19increment_penaltiesP11Gif_OptDataPii($48,$2,$50);
                    $51 = (($imagei$120) + 1)|0;
                    $52 = HEAP32[$10>>2]|0;
                    $53 = ($51|0)<($52|0);
                    if ($53) {
                        $imagei$120 = $51;
                    } else {
                        break;
                    }
                }
            }
            $41 = ($6|0)==(0);
            if (!($41)) {
                $42 = ($1|0)>(0);
                $43 = $1 << 2;
                $cur_ncol$017 = $6;$permutation_changed$016 = 1;
                while(1) {
                    $54 = ($permutation_changed$016|0)==(0);
                    if (!($54)) {
                        __ZL18sort_permutation32PjiPii($3,$cur_ncol$017,$2);
                    }
                    $55 = (($cur_ncol$017) + -1)|0;
                    $56 = (($3) + ($55<<2)|0);
                    $57 = HEAP32[$56>>2]|0;
                    $58 = (($4) + ($57<<2)|0);
                    HEAP32[$58>>2] = $55;
                    $59 = HEAP32[$10>>2]|0;
                    $60 = ($59|0)>(0);
                    if ($60) {
                        $61 = ($cur_ncol$017|0)>(256);
                        $62 = $61 << 31 >> 31;
                        $imagei$28 = 0;$permutation_changed$17 = 0;
                        while(1) {
                            $63 = HEAP32[$gfs>>2]|0;
                            $64 = (($63) + ($imagei$28<<2)|0);
                            $65 = HEAP32[$64>>2]|0;
                            $66 = ((($65)) + 64|0);
                            $67 = HEAP32[$66>>2]|0;
                            $68 = ((($67)) + 32|0);
                            $69 = HEAP32[$68>>2]|0;
                            $70 = ($69|0)>(0);
                            if ($70) {
                                $71 = ((($67)) + 20|0);
                                $72 = HEAP32[$71>>2]|0;
                                $73 = (($72) + ($57)|0);
                                $74 = HEAP8[$73>>0]|0;
                                $75 = ($74<<24>>24)==(2);
                                if ($75) {
                                    $76 = ((($67)) + 28|0);
                                    $77 = HEAP32[$76>>2]|0;
                                    $78 = (0 - ($77))|0;
                                    __ZL19increment_penaltiesP11Gif_OptDataPii($67,$2,$78);
                                    HEAP32[$68>>2] = 0;
                                    $79 = ((($67)) + 36|0);
                                    HEAP32[$79>>2] = $62;
                                    $permutation_changed$2 = 1;
                                } else {
                                    $permutation_changed$2 = $permutation_changed$17;
                                }
                            } else {
                                $permutation_changed$2 = $permutation_changed$17;
                            }
                            $80 = (($imagei$28) + 1)|0;
                            $81 = HEAP32[$10>>2]|0;
                            $82 = ($80|0)<($81|0);
                            if ($82) {
                                $imagei$28 = $80;$permutation_changed$17 = $permutation_changed$2;
                            } else {
                                $permutation_changed$1$lcssa = $permutation_changed$2;
                                break;
                            }
                        }
                    } else {
                        $permutation_changed$1$lcssa = 0;
                    }
                    $83 = ($cur_ncol$017|0)==(257);
                    if ($83) {
                        if ($42) {
                            _memset(($2|0),0,($43|0))|0;
                        }
                        $85 = HEAP32[$10>>2]|0;
                        $86 = ($85|0)>(0);
                        if ($86) {
                            $imagei$314 = 0;
                            while(1) {
                                $87 = HEAP32[$gfs>>2]|0;
                                $88 = (($87) + ($imagei$314<<2)|0);
                                $89 = HEAP32[$88>>2]|0;
                                $90 = ((($89)) + 64|0);
                                $91 = HEAP32[$90>>2]|0;
                                $92 = ((($91)) + 32|0);
                                $93 = HEAP32[$92>>2]|0;
                                $94 = ((($91)) + 28|0);
                                HEAP32[$94>>2] = $93;
                                $95 = HEAP32[$92>>2]|0;
                                __ZL19increment_penaltiesP11Gif_OptDataPii($91,$2,$95);
                                $96 = (($imagei$314) + 1)|0;
                                $97 = HEAP32[$10>>2]|0;
                                $98 = ($96|0)<($97|0);
                                if ($98) {
                                    $imagei$314 = $96;
                                } else {
                                    $permutation_changed$0$be = 1;
                                    break;
                                }
                            }
                        } else {
                            $permutation_changed$0$be = 1;
                        }
                    } else {
                        $permutation_changed$0$be = $permutation_changed$1$lcssa;
                    }
                    $84 = ($55|0)==(0);
                    if ($84) {
                        break;
                    } else {
                        $cur_ncol$017 = $55;$permutation_changed$016 = $permutation_changed$0$be;
                    }
                }
            }
            $99 = HEAP32[416>>2]|0;
            $100 = ($99|0)==(0);
            if (!($100)) {
                $101 = (($4) + ($99<<2)|0);
                $102 = HEAP32[$101>>2]|0;
                $103 = ($102>>>0)>(255);
                if ($103) {
                    $104 = ((($3)) + 1020|0);
                    $105 = HEAP32[$104>>2]|0;
                    $106 = (($4) + ($105<<2)|0);
                    HEAP32[$106>>2] = $102;
                    $107 = HEAP32[416>>2]|0;
                    $108 = (($4) + ($107<<2)|0);
                    HEAP32[$108>>2] = 255;
                }
            }
            $109 = (_Gif_NewFullColormap($7,256)|0);
            HEAP32[440>>2] = $109;
            $110 = ($1|0)>(1);
            if ($110) {
                $i$36 = 1;
                while(1) {
                    $111 = (($4) + ($i$36<<2)|0);
                    $112 = HEAP32[$111>>2]|0;
                    $113 = ($112>>>0)<(256);
                    if ($113) {
                        $114 = HEAP32[440>>2]|0;
                        $115 = ((($114)) + 16|0);
                        $116 = HEAP32[$115>>2]|0;
                        $117 = HEAP32[412>>2]|0;
                        $118 = ((($117)) + 16|0);
                        $119 = HEAP32[$118>>2]|0;
                        $120 = (($116) + ($112<<3)|0);
                        $121 = (($119) + ($i$36<<3)|0);
                        $122 = $121;
                        $123 = $122;
                        $124 = HEAP32[$123>>2]|0;
                        $125 = (($122) + 4)|0;
                        $126 = $125;
                        $127 = HEAP32[$126>>2]|0;
                        $128 = $120;
                        $129 = $128;
                        HEAP32[$129>>2] = $124;
                        $130 = (($128) + 4)|0;
                        $131 = $130;
                        HEAP32[$131>>2] = $127;
                        $132 = HEAP32[$111>>2]|0;
                        $133 = HEAP32[412>>2]|0;
                        $134 = ((($133)) + 16|0);
                        $135 = HEAP32[$134>>2]|0;
                        $136 = (((($135) + ($i$36<<3)|0)) + 4|0);
                        HEAP32[$136>>2] = $132;
                    } else {
                        $137 = HEAP32[412>>2]|0;
                        $138 = ((($137)) + 16|0);
                        $139 = HEAP32[$138>>2]|0;
                        $140 = (((($139) + ($i$36<<3)|0)) + 4|0);
                        HEAP32[$140>>2] = 256;
                    }
                    $141 = (($i$36) + 1)|0;
                    $exitcond = ($141|0)==($1|0);
                    if ($exitcond) {
                        break;
                    } else {
                        $i$36 = $141;
                    }
                }
            }
            $142 = HEAP32[416>>2]|0;
            $143 = ($142|0)==(0);
            if ($143) {
                _free($2);
                _free($3);
                _free($4);
                return;
            }
            $144 = (($4) + ($142<<2)|0);
            $145 = HEAP32[$144>>2]|0;
            $146 = $145&65535;
            $147 = ((($gfs)) + 16|0);
            HEAP16[$147>>1] = $146;
            _free($2);
            _free($3);
            _free($4);
            return;
        }
        function __ZL23create_new_image_data32P10Gif_Streami($gfs,$optimize_flags) {
            $gfs = $gfs|0;
            $optimize_flags = $optimize_flags|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $brmerge = 0, $cur_unopt_gfi = 0, $gcinfo = 0, $or$cond = 0, $previous_data$04 = 0, $previous_data$1 = 0;
            var $previous_data$2 = 0, $previous_data$2$lcssa9 = 0, $storemerge3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 112|0;
            $cur_unopt_gfi = sp + 32|0;
            $gcinfo = sp;
            $0 = HEAP32[432>>2]|0;
            $1 = HEAP32[436>>2]|0;
            $2 = Math_imul($1, $0)|0;
            ;HEAP32[$gcinfo>>2]=HEAP32[780>>2]|0;HEAP32[$gcinfo+4>>2]=HEAP32[780+4>>2]|0;HEAP32[$gcinfo+8>>2]=HEAP32[780+8>>2]|0;HEAP32[$gcinfo+12>>2]=HEAP32[780+12>>2]|0;HEAP32[$gcinfo+16>>2]=HEAP32[780+16>>2]|0;HEAP32[$gcinfo+20>>2]=HEAP32[780+20>>2]|0;HEAP32[$gcinfo+24>>2]=HEAP32[780+24>>2]|0;HEAP32[$gcinfo+28>>2]=HEAP32[780+28>>2]|0;
            $3 = $optimize_flags & 65535;
            $4 = ($3>>>0)>(2);
            if ($4) {
                $5 = HEAP32[$gcinfo>>2]|0;
                $6 = $5 | 4;
                HEAP32[$gcinfo>>2] = $6;
            }
            $7 = HEAP32[440>>2]|0;
            $8 = ((($gfs)) + 12|0);
            HEAP32[$8>>2] = $7;
            $9 = HEAP32[456>>2]|0;
            __ZL14erase_screen32Pj($9);
            $10 = HEAP32[460>>2]|0;
            __ZL14erase_screen32Pj($10);
            HEAP32[444>>2] = 0;
            $11 = ((($gfs)) + 4|0);
            $12 = HEAP32[$11>>2]|0;
            $13 = ($12|0)>(0);
            if (!($13)) {
                STACKTOP = sp;return;
            }
            $14 = ($3>>>0)>(1);
            $15 = ((($cur_unopt_gfi)) + 18|0);
            $previous_data$04 = 0;$storemerge3 = 0;
            L7: while(1) {
                $16 = HEAP32[$gfs>>2]|0;
                $17 = (($16) + ($storemerge3<<2)|0);
                $18 = HEAP32[$17>>2]|0;
                $19 = ((($18)) + 64|0);
                $20 = HEAP32[$19>>2]|0;
                $21 = HEAP32[$18>>2]|0;
                $22 = ($21|0)==(0|0);
                $23 = ((($18)) + 18|0);
                $24 = HEAP8[$23>>0]|0;
                $25 = ($24<<24>>24)==(3);
                if ($25) {
                    $26 = ($previous_data$04|0)==(0|0);
                    if ($26) {
                        $27 = (_Gif_Realloc(0,4,$2,7706,883)|0);
                        $previous_data$1 = $27;
                    } else {
                        $previous_data$1 = $previous_data$04;
                    }
                    $28 = HEAP32[460>>2]|0;
                    __ZL16copy_data_area32PjS_P9Gif_Image($previous_data$1,$28,$18);
                    $previous_data$2 = $previous_data$1;
                } else {
                    $previous_data$2 = $previous_data$04;
                }
                $29 = HEAP32[460>>2]|0;
                __ZL13apply_frame32PjP10Gif_StreamP9Gif_Imageii($29,$gfs,$18,0);
                dest=$cur_unopt_gfi; src=$18; stop=dest+76|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
                _Gif_ReleaseUncompressedImage($18);
                $30 = HEAP16[$20>>1]|0;
                $31 = ((($18)) + 12|0);
                HEAP16[$31>>1] = $30;
                $32 = ((($20)) + 2|0);
                $33 = HEAP16[$32>>1]|0;
                $34 = ((($18)) + 14|0);
                HEAP16[$34>>1] = $33;
                $35 = ((($20)) + 4|0);
                $36 = HEAP16[$35>>1]|0;
                $37 = ((($18)) + 8|0);
                HEAP16[$37>>1] = $36;
                $38 = ((($20)) + 6|0);
                $39 = HEAP16[$38>>1]|0;
                $40 = ((($18)) + 10|0);
                HEAP16[$40>>1] = $39;
                $41 = ((($20)) + 12|0);
                $42 = HEAP8[$41>>0]|0;
                HEAP8[$23>>0] = $42;
                $43 = HEAP32[444>>2]|0;
                $44 = ($43|0)>(0);
                if ($44) {
                    $45 = ((($18)) + 19|0);
                    HEAP8[$45>>0] = 0;
                }
                $46 = ((($20)) + 20|0);
                $47 = HEAP32[$46>>2]|0;
                $48 = (__ZL16prepare_colormapP9Gif_ImagePh($18,$47)|0);
                $49 = HEAP16[$37>>1]|0;
                $50 = $49&65535;
                $51 = HEAP16[$40>>1]|0;
                $52 = $51&65535;
                $53 = Math_imul($52, $50)|0;
                $54 = (_Gif_Realloc(0,1,$53,7706,907)|0);
                (_Gif_SetUncompressedImage($18,$54,1,0)|0);
                $55 = HEAP32[444>>2]|0;
                $56 = ($55|0)>(0);
                $or$cond = $14 & $56;
                if ($or$cond) {
                    $57 = ((($18)) + 20|0);
                    $58 = HEAP16[$57>>1]|0;
                    $59 = ($58<<16>>16)>(-1);
                    if ($59) {
                        __ZL19transp_frame_data32P10Gif_StreamP9Gif_ImagePhiP16Gif_CompressInfo($gfs,$18,$48,$optimize_flags,$gcinfo);
                    } else {
                        label = 14;
                    }
                } else {
                    label = 14;
                }
                if ((label|0) == 14) {
                    label = 0;
                    __ZL19simple_frame_data32P9Gif_ImagePh($18,$48);
                }
                $60 = HEAP32[$18>>2]|0;
                $61 = ($60|0)==(0|0);
                do {
                    if (!($61)) {
                        $brmerge = $14 | $22;
                        if ($brmerge) {
                            (_Gif_FullCompressImage($gfs,$18,$gcinfo)|0);
                            _Gif_ReleaseUncompressedImage($18);
                            break;
                        } else {
                            _Gif_ReleaseCompressedImage($18);
                            break;
                        }
                    }
                } while(0);
                _free($48);
                __Z15delete_opt_dataP11Gif_OptData($20);
                HEAP32[$19>>2] = 0;
                $62 = HEAP8[$23>>0]|0;
                switch ($62<<24>>24) {
                    case 1: case 0:  {
                    $63 = HEAP32[456>>2]|0;
                    $64 = HEAP32[460>>2]|0;
                    __ZL16copy_data_area32PjS_P9Gif_Image($63,$64,$18);
                    break;
                }
                    case 2:  {
                        $65 = HEAP32[456>>2]|0;
                        __ZL17erase_data_area32PjP9Gif_Image($65,$18);
                        break;
                    }
                    case 3:  {
                        break;
                    }
                    default: {
                        label = 22;
                        break L7;
                    }
                }
                $66 = HEAP8[$15>>0]|0;
                switch ($66<<24>>24) {
                    case 2:  {
                        $67 = HEAP32[460>>2]|0;
                        __ZL17erase_data_area32PjP9Gif_Image($67,$cur_unopt_gfi);
                        break;
                    }
                    case 3:  {
                        $68 = HEAP32[460>>2]|0;
                        __ZL16copy_data_area32PjS_P9Gif_Image($68,$previous_data$2,$cur_unopt_gfi);
                        break;
                    }
                    default: {
                    }
                }
                $69 = HEAP32[444>>2]|0;
                $70 = (($69) + 1)|0;
                HEAP32[444>>2] = $70;
                $71 = HEAP32[$11>>2]|0;
                $72 = ($70|0)<($71|0);
                if ($72) {
                    $previous_data$04 = $previous_data$2;$storemerge3 = $70;
                } else {
                    $previous_data$2$lcssa9 = $previous_data$2;
                    break;
                }
            }
            if ((label|0) == 22) {
                ___assert_fail((7724|0),(7706|0),939,(8013|0));
                // unreachable;
            }
            $73 = ($previous_data$2$lcssa9|0)==(0|0);
            if ($73) {
                STACKTOP = sp;return;
            }
            _free($previous_data$2$lcssa9);
            STACKTOP = sp;return;
        }
        function __ZL25finalize_optimizer_data32v() {
            var $0 = 0, $1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[456>>2]|0;
            _free($0);
            $1 = HEAP32[460>>2]|0;
            _free($1);
            return;
        }
        function __ZL18create_subimages16P10Gif_Streamii($gfs,$optimize_flags,$save_uncompressed) {
            $gfs = $gfs|0;
            $optimize_flags = $optimize_flags|0;
            $save_uncompressed = $save_uncompressed|0;
            var $$ = 0, $$lcssa27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
            var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
            var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
            var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
            var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
            var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $last_gfi$017 = 0, $local_color_tables$0$ = 0, $local_color_tables$014 = 0, $next_data_valid$016 = 0, $next_data_valid$1 = 0, $next_data_valid$2 = 0, $next_data_valid$2$lcssa = 0, $ob = 0, $or$cond = 0, $or$cond5 = 0, $previous_data$015 = 0;
            var $previous_data$1 = 0, $previous_data$2 = 0, $previous_data$3 = 0, $previous_data$3$lcssa = 0, $storemerge13 = 0, $switch = 0, $switch7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $vararg_buffer = sp;
            $ob = sp + 8|0;
            $0 = HEAP32[432>>2]|0;
            $1 = HEAP32[436>>2]|0;
            $2 = Math_imul($1, $0)|0;
            $3 = (_Gif_Realloc(0,2,$2,7706,462)|0);
            HEAP32[424>>2] = $3;
            $4 = (_Gif_Realloc(0,2,$2,7706,463)|0);
            HEAP32[428>>2] = $4;
            $5 = (_Gif_Realloc(0,2,$2,7706,464)|0);
            HEAP32[452>>2] = $5;
            $6 = HEAP32[424>>2]|0;
            __ZL14erase_screen16Pt($6);
            $7 = HEAP32[428>>2]|0;
            __ZL14erase_screen16Pt($7);
            HEAP32[444>>2] = 0;
            $8 = ((($gfs)) + 4|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = ($9|0)>(0);
            if (!($10)) {
                $11 = HEAP32[452>>2]|0;
                _free($11);
                STACKTOP = sp;return;
            }
            $12 = $2 << 1;
            $13 = $optimize_flags & 65534;
            $14 = ($13|0)!=(0);
            $15 = $2 << 1;
            $16 = ((($ob)) + 4|0);
            $17 = ((($ob)) + 8|0);
            $18 = ((($ob)) + 12|0);
            $last_gfi$017 = 0;$local_color_tables$014 = 0;$next_data_valid$016 = 0;$previous_data$015 = 0;$storemerge13 = 0;
            L5: while(1) {
                $19 = HEAP32[$gfs>>2]|0;
                $20 = (($19) + ($storemerge13<<2)|0);
                $21 = HEAP32[$20>>2]|0;
                $22 = (__Z12new_opt_datav()|0);
                $23 = ((($21)) + 24|0);
                $24 = HEAP32[$23>>2]|0;
                $25 = ($24|0)==(0|0);
                $local_color_tables$0$ = $25 ? $local_color_tables$014 : 1;
                $26 = ((($21)) + 18|0);
                $27 = HEAP8[$26>>0]|0;
                $28 = ($27<<24>>24)==(3);
                if ($28) {
                    label = 7;
                } else {
                    $29 = ($local_color_tables$0$|0)!=(0);
                    $30 = HEAP32[444>>2]|0;
                    $31 = ($30|0)>(0);
                    $or$cond = $29 & $31;
                    if ($or$cond) {
                        $32 = ((($last_gfi$017)) + 18|0);
                        $33 = HEAP8[$32>>0]|0;
                        $34 = ($33&255)>(1);
                        if ($34) {
                            label = 7;
                        } else {
                            $previous_data$2 = $previous_data$015;
                        }
                    } else {
                        $previous_data$2 = $previous_data$015;
                    }
                }
                if ((label|0) == 7) {
                    label = 0;
                    $35 = ($previous_data$015|0)==(0|0);
                    if ($35) {
                        $36 = (_Gif_Realloc(0,2,$2,7706,489)|0);
                        $previous_data$1 = $36;
                    } else {
                        $previous_data$1 = $previous_data$015;
                    }
                    $37 = HEAP32[428>>2]|0;
                    _memcpy(($previous_data$1|0),($37|0),($12|0))|0;
                    $previous_data$2 = $previous_data$1;
                }
                $38 = ($next_data_valid$016|0)==(0);
                $39 = HEAP32[428>>2]|0;
                if ($38) {
                    __ZL13apply_frame16PtP10Gif_StreamP9Gif_Imageii($39,$gfs,$21,$save_uncompressed);
                } else {
                    $40 = HEAP32[452>>2]|0;
                    HEAP32[428>>2] = $40;
                    HEAP32[452>>2] = $39;
                }
                $41 = ((($22)) + 12|0);
                $42 = ((($22)) + 24|0);
                $43 = ($local_color_tables$0$|0)!=(0);
                $44 = ((($last_gfi$017)) + 18|0);
                $45 = ((($last_gfi$017)) + 64|0);
                $46 = ((($22)) + 2|0);
                $47 = ((($22)) + 4|0);
                $48 = ((($22)) + 6|0);
                $next_data_valid$1 = 0;
                while(1) {
                    HEAP8[$41>>0] = 1;
                    $49 = HEAP32[444>>2]|0;
                    $50 = ($49|0)>(0);
                    if ($50) {
                        __ZL24find_difference_bounds16P11Gif_OptDataP9Gif_ImageS2_($22,$21,$last_gfi$017);
                    } else {
                        __ZL11safe_boundsP9Gif_Image($ob,$21);
                        $51 = HEAP32[$ob>>2]|0;
                        $52 = $51&65535;
                        HEAP16[$22>>1] = $52;
                        $53 = HEAP32[$16>>2]|0;
                        $54 = $53&65535;
                        HEAP16[$46>>1] = $54;
                        $55 = HEAP32[$17>>2]|0;
                        $56 = $55&65535;
                        HEAP16[$47>>1] = $56;
                        $57 = HEAP32[$18>>2]|0;
                        $58 = $57&65535;
                        HEAP16[$48>>1] = $58;
                    }
                    $59 = HEAP8[$26>>0]|0;
                    $60 = $59 & -2;
                    $switch = ($60<<24>>24)==(2);
                    if ($switch) {
                        $61 = HEAP32[444>>2]|0;
                        $62 = HEAP32[$8>>2]|0;
                        $63 = (($62) + -1)|0;
                        $64 = ($61|0)<($63|0);
                        if ($64) {
                            $65 = (($61) + 1)|0;
                            $66 = HEAP32[$gfs>>2]|0;
                            $67 = (($66) + ($65<<2)|0);
                            $68 = HEAP32[$67>>2]|0;
                            $69 = HEAP32[452>>2]|0;
                            $70 = HEAP32[428>>2]|0;
                            __ZL22apply_frame_disposal16PtS_S_P9Gif_Image($69,$70,$previous_data$2,$21);
                            $71 = HEAP32[452>>2]|0;
                            __ZL13apply_frame16PtP10Gif_StreamP9Gif_Imageii($71,$gfs,$68,$save_uncompressed);
                            $72 = (__ZL26expand_difference_bounds16P11Gif_OptDataP9Gif_Image($22,$21)|0);
                            $73 = ($72|0)==(0);
                            if ($73) {
                                $next_data_valid$2 = 1;
                            } else {
                                HEAP8[$41>>0] = 2;
                                $next_data_valid$2 = 1;
                            }
                        } else {
                            $next_data_valid$2 = $next_data_valid$1;
                        }
                    } else {
                        $next_data_valid$2 = $next_data_valid$1;
                    }
                    __ZL21fix_difference_boundsP11Gif_OptData($22);
                    $74 = HEAP32[444>>2]|0;
                    $75 = ($74|0)>(0);
                    $76 = $14 & $75;
                    $77 = $76&1;
                    $78 = HEAP32[416>>2]|0;
                    $79 = $78 | $74;
                    $80 = ($79|0)==(0);
                    $$ = $80 ? 2 : $77;
                    __ZL17get_used_colors16P11Gif_OptDatai($22,$$);
                    $81 = HEAP32[$42>>2]|0;
                    $82 = ($81>>>0)>(256);
                    if (!($82)) {
                        $next_data_valid$2$lcssa = $next_data_valid$2;
                        break;
                    }
                    $83 = HEAP32[444>>2]|0;
                    $84 = ($83|0)>(0);
                    $or$cond5 = $43 & $84;
                    if (!($or$cond5)) {
                        $$lcssa27 = $42;
                        label = 26;
                        break L5;
                    }
                    $85 = HEAP8[$44>>0]|0;
                    $86 = $85 & -2;
                    $switch7 = ($86<<24>>24)==(2);
                    if (!($switch7)) {
                        $$lcssa27 = $42;
                        label = 26;
                        break L5;
                    }
                    $87 = HEAP32[$45>>2]|0;
                    $88 = ((($87)) + 12|0);
                    $89 = HEAP8[$88>>0]|0;
                    $90 = ($89<<24>>24)==($85<<24>>24);
                    if ($90) {
                        $$lcssa27 = $42;
                        label = 26;
                        break L5;
                    }
                    HEAP8[$88>>0] = $85;
                    $91 = HEAP32[424>>2]|0;
                    _memcpy(($91|0),($previous_data$2|0),($15|0))|0;
                    $next_data_valid$1 = $next_data_valid$2;
                }
                $93 = ((($21)) + 64|0);
                HEAP32[$93>>2] = $22;
                $94 = HEAP8[$41>>0]|0;
                $95 = ($94<<24>>24)==(2);
                $96 = HEAP32[424>>2]|0;
                if ($95) {
                    __ZL26erase_data_area_subimage16PtP11Gif_OptData($96,$22);
                } else {
                    $97 = HEAP32[428>>2]|0;
                    __ZL25copy_data_area_subimage16PtS_P11Gif_OptData($96,$97,$22);
                }
                $98 = HEAP8[$26>>0]|0;
                switch ($98<<24>>24) {
                    case 2:  {
                        $99 = HEAP32[428>>2]|0;
                        __ZL17erase_data_area16PtP9Gif_Image($99,$21);
                        $previous_data$3 = $previous_data$2;
                        break;
                    }
                    case 3:  {
                        $100 = HEAP32[428>>2]|0;
                        HEAP32[428>>2] = $previous_data$2;
                        $previous_data$3 = $100;
                        break;
                    }
                    default: {
                        $previous_data$3 = $previous_data$2;
                    }
                }
                $101 = HEAP32[444>>2]|0;
                $102 = (($101) + 1)|0;
                HEAP32[444>>2] = $102;
                $103 = HEAP32[$8>>2]|0;
                $104 = ($102|0)<($103|0);
                if ($104) {
                    $last_gfi$017 = $21;$local_color_tables$014 = $local_color_tables$0$;$next_data_valid$016 = $next_data_valid$2$lcssa;$previous_data$015 = $previous_data$3;$storemerge13 = $102;
                } else {
                    $previous_data$3$lcssa = $previous_data$3;
                    label = 34;
                    break;
                }
            }
            if ((label|0) == 26) {
                $92 = HEAP32[$$lcssa27>>2]|0;
                HEAP32[$vararg_buffer>>2] = $92;
                __Z11fatal_errorPKcz(7792,$vararg_buffer);
                // unreachable;
            }
            else if ((label|0) == 34) {
                $105 = HEAP32[452>>2]|0;
                _free($105);
                $106 = ($previous_data$3$lcssa|0)==(0|0);
                if ($106) {
                    STACKTOP = sp;return;
                }
                _free($previous_data$3$lcssa);
                STACKTOP = sp;return;
            }
        }
        function __ZL23create_out_global_map16P10Gif_Stream($gfs) {
            $gfs = $gfs|0;
            var $$ = 0, $$lcssa = 0, $$promoted = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
            var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
            var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
            var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
            var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
            var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
            var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
            var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cur_ncol$017 = 0, $exitcond = 0;
            var $exitcond36 = 0, $i$031 = 0, $i$36 = 0, $imagei$028 = 0, $imagei$120 = 0, $imagei$28 = 0, $imagei$314 = 0, $permutation_changed$0$be = 0, $permutation_changed$016 = 0, $permutation_changed$1$lcssa = 0, $permutation_changed$17 = 0, $permutation_changed$2 = 0, $scevgep = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[412>>2]|0;
            $1 = HEAP32[$0>>2]|0;
            $2 = (_Gif_Realloc(0,4,$1,7706,611)|0);
            $3 = (_Gif_Realloc(0,2,$1,7706,612)|0);
            $4 = (_Gif_Realloc(0,2,$1,7706,613)|0);
            $5 = ($1|0)<(258);
            $6 = (($1) + -1)|0;
            $7 = $5 ? $6 : 256;
            $8 = ($1|0)>(1);
            if ($8) {
                $9 = (($1) + -1)|0;
                $i$031 = 0;
                while(1) {
                    $14 = (($i$031) + 1)|0;
                    $15 = $14&65535;
                    $16 = (($3) + ($i$031<<1)|0);
                    HEAP16[$16>>1] = $15;
                    $exitcond36 = ($14|0)==($9|0);
                    if ($exitcond36) {
                        break;
                    } else {
                        $i$031 = $14;
                    }
                }
            }
            $10 = ((($gfs)) + 4|0);
            $11 = HEAP32[$10>>2]|0;
            $12 = ($11|0)>(0);
            if ($12) {
                $13 = ($1|0)>(257);
                $imagei$028 = 0;
                while(1) {
                    $18 = HEAP32[$gfs>>2]|0;
                    $19 = (($18) + ($imagei$028<<2)|0);
                    $20 = HEAP32[$19>>2]|0;
                    $21 = ((($20)) + 64|0);
                    $22 = HEAP32[$21>>2]|0;
                    $23 = ((($22)) + 36|0);
                    HEAP32[$23>>2] = 1;
                    $24 = ((($22)) + 32|0);
                    HEAP32[$24>>2] = 1;
                    $25 = ((($22)) + 24|0);
                    $26 = HEAP32[$25>>2]|0;
                    $27 = ($26>>>0)>(2);
                    if ($27) {
                        $28 = HEAP32[$25>>2]|0;
                        $$promoted = HEAP32[$23>>2]|0;
                        $30 = $$promoted;$32 = 2;
                        while(1) {
                            $29 = ($30*3)|0;
                            $31 = $32 << 1;
                            $33 = $31 & 65532;
                            $34 = ($33>>>0)<($28>>>0);
                            if ($34) {
                                $30 = $29;$32 = $33;
                            } else {
                                $$lcssa = $29;
                                break;
                            }
                        }
                        HEAP32[$23>>2] = $$lcssa;
                    }
                    $$ = $13 ? $23 : $24;
                    $35 = HEAP32[$$>>2]|0;
                    $36 = ((($22)) + 28|0);
                    HEAP32[$36>>2] = $35;
                    $37 = (($imagei$028) + 1)|0;
                    $38 = HEAP32[$10>>2]|0;
                    $39 = ($37|0)<($38|0);
                    if ($39) {
                        $imagei$028 = $37;
                    } else {
                        break;
                    }
                }
            }
            $17 = ($1|0)>(1);
            if ($17) {
                $scevgep = ((($2)) + 4|0);
                $40 = $1 << 2;
                $41 = (($40) + -4)|0;
                _memset(($scevgep|0),0,($41|0))|0;
            }
            $42 = HEAP32[$10>>2]|0;
            $43 = ($42|0)>(0);
            if ($43) {
                $imagei$120 = 0;
                while(1) {
                    $47 = HEAP32[$gfs>>2]|0;
                    $48 = (($47) + ($imagei$120<<2)|0);
                    $49 = HEAP32[$48>>2]|0;
                    $50 = ((($49)) + 64|0);
                    $51 = HEAP32[$50>>2]|0;
                    $52 = ((($51)) + 28|0);
                    $53 = HEAP32[$52>>2]|0;
                    __ZL19increment_penaltiesP11Gif_OptDataPii($51,$2,$53);
                    $54 = (($imagei$120) + 1)|0;
                    $55 = HEAP32[$10>>2]|0;
                    $56 = ($54|0)<($55|0);
                    if ($56) {
                        $imagei$120 = $54;
                    } else {
                        break;
                    }
                }
            }
            $44 = ($6|0)==(0);
            if (!($44)) {
                $45 = ($1|0)>(0);
                $46 = $1 << 2;
                $cur_ncol$017 = $6;$permutation_changed$016 = 1;
                while(1) {
                    $57 = ($permutation_changed$016|0)==(0);
                    if (!($57)) {
                        __ZL18sort_permutation16PtiPii($3,$cur_ncol$017,$2);
                    }
                    $58 = (($cur_ncol$017) + -1)|0;
                    $59 = (($3) + ($58<<1)|0);
                    $60 = HEAP16[$59>>1]|0;
                    $61 = $58&65535;
                    $62 = $60&65535;
                    $63 = (($4) + ($62<<1)|0);
                    HEAP16[$63>>1] = $61;
                    $64 = HEAP32[$10>>2]|0;
                    $65 = ($64|0)>(0);
                    if ($65) {
                        $66 = ($cur_ncol$017|0)>(256);
                        $67 = $66 << 31 >> 31;
                        $imagei$28 = 0;$permutation_changed$17 = 0;
                        while(1) {
                            $68 = HEAP32[$gfs>>2]|0;
                            $69 = (($68) + ($imagei$28<<2)|0);
                            $70 = HEAP32[$69>>2]|0;
                            $71 = ((($70)) + 64|0);
                            $72 = HEAP32[$71>>2]|0;
                            $73 = ((($72)) + 32|0);
                            $74 = HEAP32[$73>>2]|0;
                            $75 = ($74|0)>(0);
                            if ($75) {
                                $76 = ((($72)) + 20|0);
                                $77 = HEAP32[$76>>2]|0;
                                $78 = (($77) + ($62)|0);
                                $79 = HEAP8[$78>>0]|0;
                                $80 = ($79<<24>>24)==(2);
                                if ($80) {
                                    $81 = ((($72)) + 28|0);
                                    $82 = HEAP32[$81>>2]|0;
                                    $83 = (0 - ($82))|0;
                                    __ZL19increment_penaltiesP11Gif_OptDataPii($72,$2,$83);
                                    HEAP32[$73>>2] = 0;
                                    $84 = ((($72)) + 36|0);
                                    HEAP32[$84>>2] = $67;
                                    $permutation_changed$2 = 1;
                                } else {
                                    $permutation_changed$2 = $permutation_changed$17;
                                }
                            } else {
                                $permutation_changed$2 = $permutation_changed$17;
                            }
                            $85 = (($imagei$28) + 1)|0;
                            $86 = HEAP32[$10>>2]|0;
                            $87 = ($85|0)<($86|0);
                            if ($87) {
                                $imagei$28 = $85;$permutation_changed$17 = $permutation_changed$2;
                            } else {
                                $permutation_changed$1$lcssa = $permutation_changed$2;
                                break;
                            }
                        }
                    } else {
                        $permutation_changed$1$lcssa = 0;
                    }
                    $88 = ($cur_ncol$017|0)==(257);
                    if ($88) {
                        if ($45) {
                            _memset(($2|0),0,($46|0))|0;
                        }
                        $90 = HEAP32[$10>>2]|0;
                        $91 = ($90|0)>(0);
                        if ($91) {
                            $imagei$314 = 0;
                            while(1) {
                                $92 = HEAP32[$gfs>>2]|0;
                                $93 = (($92) + ($imagei$314<<2)|0);
                                $94 = HEAP32[$93>>2]|0;
                                $95 = ((($94)) + 64|0);
                                $96 = HEAP32[$95>>2]|0;
                                $97 = ((($96)) + 32|0);
                                $98 = HEAP32[$97>>2]|0;
                                $99 = ((($96)) + 28|0);
                                HEAP32[$99>>2] = $98;
                                $100 = HEAP32[$97>>2]|0;
                                __ZL19increment_penaltiesP11Gif_OptDataPii($96,$2,$100);
                                $101 = (($imagei$314) + 1)|0;
                                $102 = HEAP32[$10>>2]|0;
                                $103 = ($101|0)<($102|0);
                                if ($103) {
                                    $imagei$314 = $101;
                                } else {
                                    $permutation_changed$0$be = 1;
                                    break;
                                }
                            }
                        } else {
                            $permutation_changed$0$be = 1;
                        }
                    } else {
                        $permutation_changed$0$be = $permutation_changed$1$lcssa;
                    }
                    $89 = ($58|0)==(0);
                    if ($89) {
                        break;
                    } else {
                        $cur_ncol$017 = $58;$permutation_changed$016 = $permutation_changed$0$be;
                    }
                }
            }
            $104 = HEAP32[416>>2]|0;
            $105 = ($104|0)==(0);
            if (!($105)) {
                $106 = (($4) + ($104<<1)|0);
                $107 = HEAP16[$106>>1]|0;
                $108 = ($107&65535)>(255);
                if ($108) {
                    $109 = ((($3)) + 510|0);
                    $110 = HEAP16[$109>>1]|0;
                    $111 = $110&65535;
                    $112 = (($4) + ($111<<1)|0);
                    HEAP16[$112>>1] = $107;
                    $113 = HEAP32[416>>2]|0;
                    $114 = (($4) + ($113<<1)|0);
                    HEAP16[$114>>1] = 255;
                }
            }
            $115 = (_Gif_NewFullColormap($7,256)|0);
            HEAP32[440>>2] = $115;
            $116 = ($1|0)>(1);
            if ($116) {
                $i$36 = 1;
                while(1) {
                    $117 = (($4) + ($i$36<<1)|0);
                    $118 = HEAP16[$117>>1]|0;
                    $119 = ($118&65535)<(256);
                    if ($119) {
                        $120 = $118&65535;
                        $121 = HEAP32[440>>2]|0;
                        $122 = ((($121)) + 16|0);
                        $123 = HEAP32[$122>>2]|0;
                        $124 = HEAP32[412>>2]|0;
                        $125 = ((($124)) + 16|0);
                        $126 = HEAP32[$125>>2]|0;
                        $127 = (($123) + ($120<<3)|0);
                        $128 = (($126) + ($i$36<<3)|0);
                        $129 = $128;
                        $130 = $129;
                        $131 = HEAP32[$130>>2]|0;
                        $132 = (($129) + 4)|0;
                        $133 = $132;
                        $134 = HEAP32[$133>>2]|0;
                        $135 = $127;
                        $136 = $135;
                        HEAP32[$136>>2] = $131;
                        $137 = (($135) + 4)|0;
                        $138 = $137;
                        HEAP32[$138>>2] = $134;
                        $139 = HEAP16[$117>>1]|0;
                        $140 = $139&65535;
                        $141 = HEAP32[412>>2]|0;
                        $142 = ((($141)) + 16|0);
                        $143 = HEAP32[$142>>2]|0;
                        $144 = (((($143) + ($i$36<<3)|0)) + 4|0);
                        HEAP32[$144>>2] = $140;
                    } else {
                        $145 = HEAP32[412>>2]|0;
                        $146 = ((($145)) + 16|0);
                        $147 = HEAP32[$146>>2]|0;
                        $148 = (((($147) + ($i$36<<3)|0)) + 4|0);
                        HEAP32[$148>>2] = 256;
                    }
                    $149 = (($i$36) + 1)|0;
                    $exitcond = ($149|0)==($1|0);
                    if ($exitcond) {
                        break;
                    } else {
                        $i$36 = $149;
                    }
                }
            }
            $150 = HEAP32[416>>2]|0;
            $151 = ($150|0)==(0);
            if ($151) {
                _free($2);
                _free($3);
                _free($4);
                return;
            }
            $152 = (($4) + ($150<<1)|0);
            $153 = HEAP16[$152>>1]|0;
            $154 = ((($gfs)) + 16|0);
            HEAP16[$154>>1] = $153;
            _free($2);
            _free($3);
            _free($4);
            return;
        }
        function __ZL23create_new_image_data16P10Gif_Streami($gfs,$optimize_flags) {
            $gfs = $gfs|0;
            $optimize_flags = $optimize_flags|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $brmerge = 0, $cur_unopt_gfi = 0, $gcinfo = 0, $or$cond = 0, $previous_data$04 = 0, $previous_data$1 = 0;
            var $previous_data$2 = 0, $previous_data$2$lcssa9 = 0, $storemerge3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 112|0;
            $cur_unopt_gfi = sp + 32|0;
            $gcinfo = sp;
            $0 = HEAP32[432>>2]|0;
            $1 = HEAP32[436>>2]|0;
            $2 = Math_imul($1, $0)|0;
            ;HEAP32[$gcinfo>>2]=HEAP32[780>>2]|0;HEAP32[$gcinfo+4>>2]=HEAP32[780+4>>2]|0;HEAP32[$gcinfo+8>>2]=HEAP32[780+8>>2]|0;HEAP32[$gcinfo+12>>2]=HEAP32[780+12>>2]|0;HEAP32[$gcinfo+16>>2]=HEAP32[780+16>>2]|0;HEAP32[$gcinfo+20>>2]=HEAP32[780+20>>2]|0;HEAP32[$gcinfo+24>>2]=HEAP32[780+24>>2]|0;HEAP32[$gcinfo+28>>2]=HEAP32[780+28>>2]|0;
            $3 = $optimize_flags & 65535;
            $4 = ($3>>>0)>(2);
            if ($4) {
                $5 = HEAP32[$gcinfo>>2]|0;
                $6 = $5 | 4;
                HEAP32[$gcinfo>>2] = $6;
            }
            $7 = HEAP32[440>>2]|0;
            $8 = ((($gfs)) + 12|0);
            HEAP32[$8>>2] = $7;
            $9 = HEAP32[424>>2]|0;
            __ZL14erase_screen16Pt($9);
            $10 = HEAP32[428>>2]|0;
            __ZL14erase_screen16Pt($10);
            HEAP32[444>>2] = 0;
            $11 = ((($gfs)) + 4|0);
            $12 = HEAP32[$11>>2]|0;
            $13 = ($12|0)>(0);
            if (!($13)) {
                STACKTOP = sp;return;
            }
            $14 = ($3>>>0)>(1);
            $15 = ((($cur_unopt_gfi)) + 18|0);
            $previous_data$04 = 0;$storemerge3 = 0;
            L7: while(1) {
                $16 = HEAP32[$gfs>>2]|0;
                $17 = (($16) + ($storemerge3<<2)|0);
                $18 = HEAP32[$17>>2]|0;
                $19 = ((($18)) + 64|0);
                $20 = HEAP32[$19>>2]|0;
                $21 = HEAP32[$18>>2]|0;
                $22 = ($21|0)==(0|0);
                $23 = ((($18)) + 18|0);
                $24 = HEAP8[$23>>0]|0;
                $25 = ($24<<24>>24)==(3);
                if ($25) {
                    $26 = ($previous_data$04|0)==(0|0);
                    if ($26) {
                        $27 = (_Gif_Realloc(0,2,$2,7706,883)|0);
                        $previous_data$1 = $27;
                    } else {
                        $previous_data$1 = $previous_data$04;
                    }
                    $28 = HEAP32[428>>2]|0;
                    __ZL16copy_data_area16PtS_P9Gif_Image($previous_data$1,$28,$18);
                    $previous_data$2 = $previous_data$1;
                } else {
                    $previous_data$2 = $previous_data$04;
                }
                $29 = HEAP32[428>>2]|0;
                __ZL13apply_frame16PtP10Gif_StreamP9Gif_Imageii($29,$gfs,$18,0);
                dest=$cur_unopt_gfi; src=$18; stop=dest+76|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
                _Gif_ReleaseUncompressedImage($18);
                $30 = HEAP16[$20>>1]|0;
                $31 = ((($18)) + 12|0);
                HEAP16[$31>>1] = $30;
                $32 = ((($20)) + 2|0);
                $33 = HEAP16[$32>>1]|0;
                $34 = ((($18)) + 14|0);
                HEAP16[$34>>1] = $33;
                $35 = ((($20)) + 4|0);
                $36 = HEAP16[$35>>1]|0;
                $37 = ((($18)) + 8|0);
                HEAP16[$37>>1] = $36;
                $38 = ((($20)) + 6|0);
                $39 = HEAP16[$38>>1]|0;
                $40 = ((($18)) + 10|0);
                HEAP16[$40>>1] = $39;
                $41 = ((($20)) + 12|0);
                $42 = HEAP8[$41>>0]|0;
                HEAP8[$23>>0] = $42;
                $43 = HEAP32[444>>2]|0;
                $44 = ($43|0)>(0);
                if ($44) {
                    $45 = ((($18)) + 19|0);
                    HEAP8[$45>>0] = 0;
                }
                $46 = ((($20)) + 20|0);
                $47 = HEAP32[$46>>2]|0;
                $48 = (__ZL16prepare_colormapP9Gif_ImagePh($18,$47)|0);
                $49 = HEAP16[$37>>1]|0;
                $50 = $49&65535;
                $51 = HEAP16[$40>>1]|0;
                $52 = $51&65535;
                $53 = Math_imul($52, $50)|0;
                $54 = (_Gif_Realloc(0,1,$53,7706,907)|0);
                (_Gif_SetUncompressedImage($18,$54,1,0)|0);
                $55 = HEAP32[444>>2]|0;
                $56 = ($55|0)>(0);
                $or$cond = $14 & $56;
                if ($or$cond) {
                    $57 = ((($18)) + 20|0);
                    $58 = HEAP16[$57>>1]|0;
                    $59 = ($58<<16>>16)>(-1);
                    if ($59) {
                        __ZL19transp_frame_data16P10Gif_StreamP9Gif_ImagePhiP16Gif_CompressInfo($gfs,$18,$48,$optimize_flags,$gcinfo);
                    } else {
                        label = 14;
                    }
                } else {
                    label = 14;
                }
                if ((label|0) == 14) {
                    label = 0;
                    __ZL19simple_frame_data16P9Gif_ImagePh($18,$48);
                }
                $60 = HEAP32[$18>>2]|0;
                $61 = ($60|0)==(0|0);
                do {
                    if (!($61)) {
                        $brmerge = $14 | $22;
                        if ($brmerge) {
                            (_Gif_FullCompressImage($gfs,$18,$gcinfo)|0);
                            _Gif_ReleaseUncompressedImage($18);
                            break;
                        } else {
                            _Gif_ReleaseCompressedImage($18);
                            break;
                        }
                    }
                } while(0);
                _free($48);
                __Z15delete_opt_dataP11Gif_OptData($20);
                HEAP32[$19>>2] = 0;
                $62 = HEAP8[$23>>0]|0;
                switch ($62<<24>>24) {
                    case 1: case 0:  {
                    $63 = HEAP32[424>>2]|0;
                    $64 = HEAP32[428>>2]|0;
                    __ZL16copy_data_area16PtS_P9Gif_Image($63,$64,$18);
                    break;
                }
                    case 2:  {
                        $65 = HEAP32[424>>2]|0;
                        __ZL17erase_data_area16PtP9Gif_Image($65,$18);
                        break;
                    }
                    case 3:  {
                        break;
                    }
                    default: {
                        label = 22;
                        break L7;
                    }
                }
                $66 = HEAP8[$15>>0]|0;
                switch ($66<<24>>24) {
                    case 2:  {
                        $67 = HEAP32[428>>2]|0;
                        __ZL17erase_data_area16PtP9Gif_Image($67,$cur_unopt_gfi);
                        break;
                    }
                    case 3:  {
                        $68 = HEAP32[428>>2]|0;
                        __ZL16copy_data_area16PtS_P9Gif_Image($68,$previous_data$2,$cur_unopt_gfi);
                        break;
                    }
                    default: {
                    }
                }
                $69 = HEAP32[444>>2]|0;
                $70 = (($69) + 1)|0;
                HEAP32[444>>2] = $70;
                $71 = HEAP32[$11>>2]|0;
                $72 = ($70|0)<($71|0);
                if ($72) {
                    $previous_data$04 = $previous_data$2;$storemerge3 = $70;
                } else {
                    $previous_data$2$lcssa9 = $previous_data$2;
                    break;
                }
            }
            if ((label|0) == 22) {
                ___assert_fail((7724|0),(7706|0),939,(7768|0));
                // unreachable;
            }
            $73 = ($previous_data$2$lcssa9|0)==(0|0);
            if ($73) {
                STACKTOP = sp;return;
            }
            _free($previous_data$2$lcssa9);
            STACKTOP = sp;return;
        }
        function __ZL25finalize_optimizer_data16v() {
            var $0 = 0, $1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[424>>2]|0;
            _free($0);
            $1 = HEAP32[428>>2]|0;
            _free($1);
            return;
        }
        function __ZL18finalize_optimizerP10Gif_Streami($gfs,$optimize_flags) {
            $gfs = $gfs|0;
            $optimize_flags = $optimize_flags|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
            var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $i$04 = 0, $i$1 = 0, $i$22 = 0, $or$cond = 0, $or$cond3 = 0, $switch = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[416>>2]|0;
            $1 = ($0|0)==(0);
            if ($1) {
                $2 = HEAP32[$gfs>>2]|0;
                $3 = HEAP32[$2>>2]|0;
                $4 = ((($3)) + 20|0);
                $5 = HEAP16[$4>>1]|0;
                $6 = $5 & 255;
                $7 = ((($gfs)) + 16|0);
                HEAP16[$7>>1] = $6;
            }
            $8 = ((($gfs)) + 4|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = ($9|0)>(1);
            $11 = $optimize_flags & 65536;
            $12 = ($11|0)==(0);
            $or$cond3 = $12 & $10;
            if ($or$cond3) {
                $i$04 = 1;
                while(1) {
                    $17 = HEAP32[$gfs>>2]|0;
                    $18 = (($17) + ($i$04<<2)|0);
                    $19 = HEAP32[$18>>2]|0;
                    $20 = ((($19)) + 8|0);
                    $21 = HEAP16[$20>>1]|0;
                    $22 = ($21<<16>>16)==(1);
                    L8: do {
                        if ($22) {
                            $23 = ((($19)) + 10|0);
                            $24 = HEAP16[$23>>1]|0;
                            $25 = ($24<<16>>16)==(1);
                            if ($25) {
                                $26 = ((($19)) + 20|0);
                                $27 = HEAP16[$26>>1]|0;
                                $28 = ($27<<16>>16)>(-1);
                                if ($28) {
                                    $29 = ((($19)) + 28|0);
                                    $30 = HEAP32[$29>>2]|0;
                                    $31 = ($30|0)==(0|0);
                                    if ($31) {
                                        $32 = ((($19)) + 32|0);
                                        $33 = HEAP32[$32>>2]|0;
                                        $34 = ($33|0)==(0|0);
                                        if ($34) {
                                            $35 = ((($19)) + 18|0);
                                            $36 = HEAP8[$35>>0]|0;
                                            switch ($36<<24>>24) {
                                                case 3: case 0: case 1:  {
                                                break;
                                            }
                                                default: {
                                                    $i$1 = $i$04;
                                                    break L8;
                                                }
                                            }
                                            $37 = ((($19)) + 16|0);
                                            $38 = HEAP16[$37>>1]|0;
                                            $39 = ($38<<16>>16)==(0);
                                            if ($39) {
                                                $i$1 = $i$04;
                                            } else {
                                                $40 = (($i$04) + -1)|0;
                                                $41 = HEAP32[$gfs>>2]|0;
                                                $42 = (($41) + ($40<<2)|0);
                                                $43 = HEAP32[$42>>2]|0;
                                                $44 = ((($43)) + 16|0);
                                                $45 = HEAP16[$44>>1]|0;
                                                $46 = ($45<<16>>16)==(0);
                                                if ($46) {
                                                    $i$1 = $i$04;
                                                } else {
                                                    (_Gif_FullUncompressImage($gfs,$19,0)|0);
                                                    $47 = HEAP32[$19>>2]|0;
                                                    $48 = HEAP32[$47>>2]|0;
                                                    $49 = HEAP8[$48>>0]|0;
                                                    $50 = $49&255;
                                                    $51 = HEAP16[$26>>1]|0;
                                                    $52 = $51 << 16 >> 16;
                                                    $53 = ($50|0)==($52|0);
                                                    if ($53) {
                                                        $54 = HEAP32[$gfs>>2]|0;
                                                        $55 = (($54) + ($40<<2)|0);
                                                        $56 = HEAP32[$55>>2]|0;
                                                        $57 = ((($56)) + 18|0);
                                                        $58 = HEAP8[$57>>0]|0;
                                                        $switch = ($58&255)<(2);
                                                        if ($switch) {
                                                            $59 = HEAP16[$37>>1]|0;
                                                            $60 = $59&65535;
                                                            $61 = ((($56)) + 16|0);
                                                            $62 = HEAP16[$61>>1]|0;
                                                            $63 = $62&65535;
                                                            $64 = (($63) + ($60))|0;
                                                            $65 = $64&65535;
                                                            HEAP16[$61>>1] = $65;
                                                            _Gif_DeleteImage($19);
                                                            $66 = HEAP32[$gfs>>2]|0;
                                                            $67 = (($66) + ($i$04<<2)|0);
                                                            $68 = (($i$04) + 1)|0;
                                                            $69 = (($66) + ($68<<2)|0);
                                                            $70 = HEAP32[$8>>2]|0;
                                                            $71 = (($70) - ($i$04))|0;
                                                            $72 = $71 << 2;
                                                            $73 = (($72) + -4)|0;
                                                            _memmove(($67|0),($69|0),($73|0))|0;
                                                            $74 = HEAP32[$8>>2]|0;
                                                            $75 = (($74) + -1)|0;
                                                            HEAP32[$8>>2] = $75;
                                                            $i$1 = $40;
                                                        } else {
                                                            $i$1 = $i$04;
                                                        }
                                                    } else {
                                                        $i$1 = $i$04;
                                                    }
                                                }
                                            }
                                        } else {
                                            $i$1 = $i$04;
                                        }
                                    } else {
                                        $i$1 = $i$04;
                                    }
                                } else {
                                    $i$1 = $i$04;
                                }
                            } else {
                                $i$1 = $i$04;
                            }
                        } else {
                            $i$1 = $i$04;
                        }
                    } while(0);
                    $76 = (($i$1) + 1)|0;
                    $77 = HEAP32[$8>>2]|0;
                    $78 = ($76|0)<($77|0);
                    $or$cond = $12 & $78;
                    if ($or$cond) {
                        $i$04 = $76;
                    } else {
                        $13 = $77;
                        break;
                    }
                }
            } else {
                $13 = $9;
            }
            $14 = ($13|0)>(0);
            if (!($14)) {
                $92 = HEAP32[420>>2]|0;
                _Gif_DeleteColormap($92);
                $93 = HEAP32[412>>2]|0;
                _Gif_DeleteColormap($93);
                return;
            }
            $15 = HEAP32[$gfs>>2]|0;
            $16 = HEAP32[$8>>2]|0;
            $i$22 = 0;
            while(1) {
                $79 = (($15) + ($i$22<<2)|0);
                $80 = HEAP32[$79>>2]|0;
                $81 = ((($80)) + 18|0);
                $82 = HEAP8[$81>>0]|0;
                $83 = ($82<<24>>24)==(1);
                if ($83) {
                    $84 = ((($80)) + 16|0);
                    $85 = HEAP16[$84>>1]|0;
                    $86 = ($85<<16>>16)==(0);
                    if ($86) {
                        $87 = ((($80)) + 20|0);
                        $88 = HEAP16[$87>>1]|0;
                        $89 = ($88<<16>>16)<(0);
                        if ($89) {
                            HEAP8[$81>>0] = 0;
                        }
                    }
                }
                $90 = (($i$22) + 1)|0;
                $91 = ($90|0)<($16|0);
                if ($91) {
                    $i$22 = $90;
                } else {
                    break;
                }
            }
            $92 = HEAP32[420>>2]|0;
            _Gif_DeleteColormap($92);
            $93 = HEAP32[412>>2]|0;
            _Gif_DeleteColormap($93);
            return;
        }
        function __ZL14erase_screen16Pt($dst) {
            $dst = $dst|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[432>>2]|0;
            $1 = HEAP32[436>>2]|0;
            $2 = Math_imul($1, $0)|0;
            $3 = ($2|0)==(0);
            if ($3) {
                return;
            }
            $4 = Math_imul($1, $0)|0;
            $5 = $4 << 1;
            _memset(($dst|0),0,($5|0))|0;
            return;
        }
        function __ZL16copy_data_area16PtS_P9Gif_Image($dst,$src,$area) {
            $dst = $dst|0;
            $src = $src|0;
            $area = $area|0;
            var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
            var $8 = 0, $9 = 0, $exitcond = 0, $y$04 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $0 = sp;
            $1 = ($area|0)==(0|0);
            if ($1) {
                STACKTOP = sp;return;
            }
            __ZL11safe_boundsP9Gif_Image($0,$area);
            $2 = HEAP32[$0>>2]|0;
            $3 = ((($0)) + 4|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ((($0)) + 12|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = HEAP32[432>>2]|0;
            $8 = Math_imul($7, $4)|0;
            $9 = (($8) + ($2))|0;
            $10 = ($6|0)>(0);
            if (!($10)) {
                STACKTOP = sp;return;
            }
            $11 = (($src) + ($9<<1)|0);
            $12 = (($dst) + ($9<<1)|0);
            $13 = ((($0)) + 8|0);
            $14 = HEAP32[$13>>2]|0;
            $15 = $14 << 1;
            $$012 = $11;$$03 = $12;$y$04 = 0;
            while(1) {
                _memcpy(($$03|0),($$012|0),($15|0))|0;
                $16 = HEAP32[432>>2]|0;
                $17 = (($$03) + ($16<<1)|0);
                $18 = (($$012) + ($16<<1)|0);
                $19 = (($y$04) + 1)|0;
                $exitcond = ($19|0)==($6|0);
                if ($exitcond) {
                    break;
                } else {
                    $$012 = $18;$$03 = $17;$y$04 = $19;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL13apply_frame16PtP10Gif_StreamP9Gif_Imageii($dst,$gfs,$gfi,$save_uncompressed) {
            $dst = $dst|0;
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $save_uncompressed = $save_uncompressed|0;
            var $$02 = 0, $$09 = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
            var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond22 = 0, $exitcond23 = 0, $i$017 = 0;
            var $i$113 = 0, $map = 0, $ob = 0, $or$cond = 0, $phitmp = 0, $was_compressed$0 = 0, $x$05 = 0, $x$16 = 0, $y$08 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 528|0;
            $map = sp + 16|0;
            $ob = sp;
            $0 = ((($gfi)) + 24|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            $3 = HEAP32[420>>2]|0;
            $4 = $2 ? $3 : $1;
            __ZL11safe_boundsP9Gif_Image($ob,$gfi);
            $5 = HEAP32[$gfi>>2]|0;
            $6 = ($5|0)==(0|0);
            if ($6) {
                (_Gif_FullUncompressImage($gfs,$gfi,0)|0);
                $was_compressed$0 = 1;
            } else {
                $was_compressed$0 = 0;
            }
            $7 = HEAP32[$4>>2]|0;
            $8 = ($7|0)>(0);
            if ($8) {
                $9 = ((($4)) + 16|0);
                $10 = HEAP32[$9>>2]|0;
                $11 = HEAP32[$4>>2]|0;
                $i$017 = 0;
                while(1) {
                    $12 = (((($10) + ($i$017<<3)|0)) + 4|0);
                    $13 = HEAP32[$12>>2]|0;
                    $14 = $13&65535;
                    $15 = (($map) + ($i$017<<1)|0);
                    HEAP16[$15>>1] = $14;
                    $16 = (($i$017) + 1)|0;
                    $17 = ($16|0)<($11|0);
                    if ($17) {
                        $i$017 = $16;
                    } else {
                        $$lcssa4 = $11;
                        break;
                    }
                }
            } else {
                $$lcssa4 = $7;
            }
            $18 = ($$lcssa4|0)==(0);
            if ($18) {
                $26 = 0;
            } else {
                $19 = ((($4)) + 16|0);
                $20 = HEAP32[$19>>2]|0;
                $21 = ((($20)) + 4|0);
                $22 = HEAP32[$21>>2]|0;
                $phitmp = $22&65535;
                $26 = $phitmp;
            }
            $23 = HEAP32[$4>>2]|0;
            $24 = ($23|0)<(256);
            if ($24) {
                $i$113 = $23;
                while(1) {
                    $25 = (($map) + ($i$113<<1)|0);
                    HEAP16[$25>>1] = $26;
                    $27 = (($i$113) + 1)|0;
                    $exitcond23 = ($27|0)==(256);
                    if ($exitcond23) {
                        break;
                    } else {
                        $i$113 = $27;
                    }
                }
            }
            $28 = ((($gfi)) + 20|0);
            $29 = HEAP16[$28>>1]|0;
            $30 = ($29&65535)<(256);
            if ($30) {
                $31 = $29 << 16 >> 16;
                $32 = (($map) + ($31<<1)|0);
                HEAP16[$32>>1] = 0;
                $$02 = 0;
            } else {
                $$02 = 1;
            }
            $33 = ((($ob)) + 12|0);
            $34 = HEAP32[$33>>2]|0;
            $35 = ($34|0)>(0);
            if ($35) {
                $36 = HEAP32[432>>2]|0;
                $37 = ((($ob)) + 4|0);
                $38 = HEAP32[$37>>2]|0;
                $39 = Math_imul($36, $38)|0;
                $40 = HEAP32[$ob>>2]|0;
                $41 = (($39) + ($40))|0;
                $42 = (($dst) + ($41<<1)|0);
                $43 = ($$02|0)==(0);
                $44 = HEAP32[$33>>2]|0;
                $45 = ((($ob)) + 8|0);
                $46 = HEAP32[$45>>2]|0;
                $47 = ($46|0)>(0);
                $48 = ($46|0)>(0);
                $$09 = $42;$y$08 = 0;
                while(1) {
                    $49 = HEAP32[$gfi>>2]|0;
                    $50 = (($49) + ($y$08<<2)|0);
                    $51 = HEAP32[$50>>2]|0;
                    if ($43) {
                        if ($47) {
                            $x$16 = 0;
                            while(1) {
                                $59 = (($51) + ($x$16)|0);
                                $60 = HEAP8[$59>>0]|0;
                                $61 = $60&255;
                                $62 = (($map) + ($61<<1)|0);
                                $63 = HEAP16[$62>>1]|0;
                                $64 = ($63<<16>>16)==(0);
                                if (!($64)) {
                                    $65 = (($$09) + ($x$16<<1)|0);
                                    HEAP16[$65>>1] = $63;
                                }
                                $66 = (($x$16) + 1)|0;
                                $exitcond22 = ($66|0)==($46|0);
                                if ($exitcond22) {
                                    break;
                                } else {
                                    $x$16 = $66;
                                }
                            }
                        }
                    } else {
                        if ($48) {
                            $x$05 = 0;
                            while(1) {
                                $52 = (($51) + ($x$05)|0);
                                $53 = HEAP8[$52>>0]|0;
                                $54 = $53&255;
                                $55 = (($map) + ($54<<1)|0);
                                $56 = HEAP16[$55>>1]|0;
                                $57 = (($$09) + ($x$05<<1)|0);
                                HEAP16[$57>>1] = $56;
                                $58 = (($x$05) + 1)|0;
                                $exitcond = ($58|0)==($46|0);
                                if ($exitcond) {
                                    break;
                                } else {
                                    $x$05 = $58;
                                }
                            }
                        }
                    }
                    $67 = HEAP32[432>>2]|0;
                    $68 = (($$09) + ($67<<1)|0);
                    $69 = (($y$08) + 1)|0;
                    $70 = ($69|0)<($44|0);
                    if ($70) {
                        $$09 = $68;$y$08 = $69;
                    } else {
                        break;
                    }
                }
            }
            $71 = ($was_compressed$0|0)==(0);
            $72 = ($save_uncompressed|0)!=(0);
            $or$cond = $72 | $71;
            if ($or$cond) {
                STACKTOP = sp;return;
            }
            _Gif_ReleaseUncompressedImage($gfi);
            STACKTOP = sp;return;
        }
        function __ZL16prepare_colormapP9Gif_ImagePh($gfi,$need) {
            $gfi = $gfi|0;
            $need = $need|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $map$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 24|0);
            $1 = HEAP32[$0>>2]|0;
            _Gif_DeleteColormap($1);
            HEAP32[$0>>2] = 0;
            $2 = HEAP32[440>>2]|0;
            $3 = (__ZL20prepare_colormap_mapP9Gif_ImageP12Gif_ColormapPh($gfi,$2,$need)|0);
            $4 = ($3|0)==(0|0);
            if (!($4)) {
                $map$0 = $3;
                return ($map$0|0);
            }
            $5 = (_Gif_NewFullColormap(0,256)|0);
            HEAP32[$0>>2] = $5;
            $6 = (__ZL20prepare_colormap_mapP9Gif_ImageP12Gif_ColormapPh($gfi,$5,$need)|0);
            $map$0 = $6;
            return ($map$0|0);
        }
        function __ZL19transp_frame_data16P10Gif_StreamP9Gif_ImagePhiP16Gif_CompressInfo($gfs,$gfi,$map,$optimize_flags,$gcinfo) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $map = $map|0;
            $optimize_flags = $optimize_flags|0;
            $gcinfo = $gcinfo|0;
            var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
            var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $begin_same$034 = 0, $begin_same$1$lcssa = 0, $begin_same$124 = 0, $begin_same$23 = 0, $begin_same$24 = 0, $cur$018 = 0;
            var $data$033 = 0, $data$1$lcssa = 0, $data$1$lcssa$lcssa = 0, $data$121 = 0, $last$017 = 0, $last_for_t2$036 = 0, $last_for_t2$1$lcssa = 0, $last_for_t2$1$lcssa$lcssa = 0, $last_for_t2$126 = 0, $last_for_t2$37 = 0, $last_for_t2$38 = 0, $nsame$037 = 0, $nsame$1$lcssa = 0, $nsame$127 = 0, $nsame$210 = 0, $nsame$29 = 0, $ob = 0, $or$cond = 0, $storemerge = 0, $t2_data$035 = 0;
            var $t2_data$1$lcssa = 0, $t2_data$1$lcssa$lcssa = 0, $t2_data$125 = 0, $t2_data$2 = 0, $t2_data$45 = 0, $t2_data$46 = 0, $x$016 = 0, $y$032 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ob = sp;
            __ZL11safe_boundsP9Gif_Image($ob,$gfi);
            $0 = ((($gfi)) + 20|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1 << 16 >> 16;
            __ZL19simple_frame_data16P9Gif_ImagePh($gfi,$map);
            (_Gif_FullCompressImage($gfs,$gfi,$gcinfo)|0);
            $3 = HEAP32[$gcinfo>>2]|0;
            $4 = $3 | 8;
            HEAP32[$gcinfo>>2] = $4;
            $5 = ((($gfi)) + 4|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = ((($ob)) + 12|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = ($8|0)>(0);
            if ($9) {
                $10 = ((($ob)) + 4|0);
                $11 = ((($ob)) + 8|0);
                $12 = $1&255;
                $13 = $1&255;
                $14 = $optimize_flags & 65535;
                $15 = ($14>>>0)>(2);
                $16 = $1&255;
                $begin_same$034 = $6;$data$033 = $6;$last_for_t2$036 = $6;$nsame$037 = 0;$t2_data$035 = 0;$y$032 = 0;
                while(1) {
                    $17 = HEAP32[432>>2]|0;
                    $18 = HEAP32[$10>>2]|0;
                    $19 = (($18) + ($y$032))|0;
                    $20 = Math_imul($19, $17)|0;
                    $21 = HEAP32[$ob>>2]|0;
                    $$sum = (($20) + ($21))|0;
                    $22 = HEAP32[$11>>2]|0;
                    $23 = ($22|0)>(0);
                    if ($23) {
                        $24 = HEAP32[428>>2]|0;
                        $25 = (($24) + ($$sum<<1)|0);
                        $26 = HEAP32[424>>2]|0;
                        $27 = (($26) + ($$sum<<1)|0);
                        $44 = $22;$begin_same$124 = $begin_same$034;$cur$018 = $25;$data$121 = $data$033;$last$017 = $27;$last_for_t2$126 = $last_for_t2$036;$nsame$127 = $nsame$037;$t2_data$125 = $t2_data$035;$x$016 = 0;
                        while(1) {
                            $28 = HEAP16[$cur$018>>1]|0;
                            $29 = HEAP16[$last$017>>1]|0;
                            $30 = ($28<<16>>16)==($29<<16>>16);
                            if ($30) {
                                label = 12;
                            } else {
                                $31 = $28&65535;
                                $32 = (($map) + ($31)|0);
                                $33 = HEAP8[$32>>0]|0;
                                $34 = $33&255;
                                $35 = ($34|0)==($2|0);
                                if ($35) {
                                    label = 12;
                                } else {
                                    $36 = ($nsame$127|0)==(1);
                                    if ($36) {
                                        $37 = ((($data$121)) + -1|0);
                                        $38 = HEAP8[$37>>0]|0;
                                        $39 = $38&255;
                                        $40 = ($39|0)!=($2|0);
                                        $or$cond = $15 & $40;
                                        if ($or$cond) {
                                            $41 = ($t2_data$125|0)==(0|0);
                                            if ($41) {
                                                $42 = HEAP32[$7>>2]|0;
                                                $43 = Math_imul($42, $44)|0;
                                                $45 = (_Gif_Realloc(0,1,$43,7706,803)|0);
                                                $t2_data$2 = $45;
                                            } else {
                                                $t2_data$2 = $t2_data$125;
                                            }
                                            $46 = HEAP32[$5>>2]|0;
                                            $47 = $last_for_t2$126;
                                            $48 = $46;
                                            $49 = (($47) - ($48))|0;
                                            $50 = (($t2_data$2) + ($49)|0);
                                            $51 = $begin_same$124;
                                            $52 = (($51) - ($47))|0;
                                            _memcpy(($50|0),($last_for_t2$126|0),($52|0))|0;
                                            $53 = HEAP32[$5>>2]|0;
                                            $54 = $53;
                                            $55 = (($51) - ($54))|0;
                                            $56 = (($t2_data$2) + ($55)|0);
                                            $57 = $data$121;
                                            $58 = (($57) - ($51))|0;
                                            _memset(($56|0),($16|0),($58|0))|0;
                                            $begin_same$24 = $begin_same$124;$last_for_t2$38 = $data$121;$nsame$210 = 0;$t2_data$46 = $t2_data$2;
                                            label = 16;
                                        } else {
                                            $begin_same$24 = $begin_same$124;$last_for_t2$38 = $last_for_t2$126;$nsame$210 = 0;$t2_data$46 = $t2_data$125;
                                            label = 16;
                                        }
                                    } else {
                                        $begin_same$24 = $begin_same$124;$last_for_t2$38 = $last_for_t2$126;$nsame$210 = 0;$t2_data$46 = $t2_data$125;
                                        label = 16;
                                    }
                                }
                            }
                            L17: do {
                                if ((label|0) == 12) {
                                    label = 0;
                                    switch ($nsame$127|0) {
                                        case 0:  {
                                            $begin_same$24 = $data$121;$last_for_t2$38 = $last_for_t2$126;$nsame$210 = 1;$t2_data$46 = $t2_data$125;
                                            label = 16;
                                            break L17;
                                            break;
                                        }
                                        case 1:  {
                                            break;
                                        }
                                        default: {
                                            $69 = ($nsame$127|0)>(1);
                                            if ($69) {
                                                $begin_same$23 = $begin_same$124;$last_for_t2$37 = $last_for_t2$126;$nsame$29 = $nsame$127;$storemerge = $12;$t2_data$45 = $t2_data$125;
                                                break L17;
                                            } else {
                                                $begin_same$24 = $begin_same$124;$last_for_t2$38 = $last_for_t2$126;$nsame$210 = $nsame$127;$t2_data$46 = $t2_data$125;
                                                label = 16;
                                                break L17;
                                            }
                                        }
                                    }
                                    $59 = HEAP16[$cur$018>>1]|0;
                                    $60 = $59&65535;
                                    $61 = (($map) + ($60)|0);
                                    $62 = HEAP8[$61>>0]|0;
                                    $63 = ((($data$121)) + -1|0);
                                    $64 = HEAP8[$63>>0]|0;
                                    $65 = ($62<<24>>24)==($64<<24>>24);
                                    if ($65) {
                                        $begin_same$24 = $begin_same$124;$last_for_t2$38 = $last_for_t2$126;$nsame$210 = 1;$t2_data$46 = $t2_data$125;
                                        label = 16;
                                    } else {
                                        $66 = $data$121;
                                        $67 = $begin_same$124;
                                        $68 = (($66) - ($67))|0;
                                        _memset(($begin_same$124|0),($13|0),($68|0))|0;
                                        $begin_same$23 = $begin_same$124;$last_for_t2$37 = $last_for_t2$126;$nsame$29 = 2;$storemerge = $12;$t2_data$45 = $t2_data$125;
                                    }
                                }
                            } while(0);
                            if ((label|0) == 16) {
                                label = 0;
                                $70 = HEAP16[$cur$018>>1]|0;
                                $71 = $70&65535;
                                $72 = (($map) + ($71)|0);
                                $73 = HEAP8[$72>>0]|0;
                                $begin_same$23 = $begin_same$24;$last_for_t2$37 = $last_for_t2$38;$nsame$29 = $nsame$210;$storemerge = $73;$t2_data$45 = $t2_data$46;
                            }
                            HEAP8[$data$121>>0] = $storemerge;
                            $74 = ((($data$121)) + 1|0);
                            $75 = ((($cur$018)) + 2|0);
                            $76 = ((($last$017)) + 2|0);
                            $77 = (($x$016) + 1)|0;
                            $78 = HEAP32[$11>>2]|0;
                            $79 = ($77|0)<($78|0);
                            if ($79) {
                                $44 = $78;$begin_same$124 = $begin_same$23;$cur$018 = $75;$data$121 = $74;$last$017 = $76;$last_for_t2$126 = $last_for_t2$37;$nsame$127 = $nsame$29;$t2_data$125 = $t2_data$45;$x$016 = $77;
                            } else {
                                $begin_same$1$lcssa = $begin_same$23;$data$1$lcssa = $74;$last_for_t2$1$lcssa = $last_for_t2$37;$nsame$1$lcssa = $nsame$29;$t2_data$1$lcssa = $t2_data$45;
                                break;
                            }
                        }
                    } else {
                        $begin_same$1$lcssa = $begin_same$034;$data$1$lcssa = $data$033;$last_for_t2$1$lcssa = $last_for_t2$036;$nsame$1$lcssa = $nsame$037;$t2_data$1$lcssa = $t2_data$035;
                    }
                    $80 = (($y$032) + 1)|0;
                    $81 = HEAP32[$7>>2]|0;
                    $82 = ($80|0)<($81|0);
                    if ($82) {
                        $begin_same$034 = $begin_same$1$lcssa;$data$033 = $data$1$lcssa;$last_for_t2$036 = $last_for_t2$1$lcssa;$nsame$037 = $nsame$1$lcssa;$t2_data$035 = $t2_data$1$lcssa;$y$032 = $80;
                    } else {
                        $data$1$lcssa$lcssa = $data$1$lcssa;$last_for_t2$1$lcssa$lcssa = $last_for_t2$1$lcssa;$t2_data$1$lcssa$lcssa = $t2_data$1$lcssa;
                        break;
                    }
                }
                $83 = ($t2_data$1$lcssa$lcssa|0)==(0|0);
                if (!($83)) {
                    $84 = HEAP32[$5>>2]|0;
                    $85 = $last_for_t2$1$lcssa$lcssa;
                    $86 = $84;
                    $87 = (($85) - ($86))|0;
                    $88 = (($t2_data$1$lcssa$lcssa) + ($87)|0);
                    $89 = $data$1$lcssa$lcssa;
                    $90 = (($89) - ($85))|0;
                    _memcpy(($88|0),($last_for_t2$1$lcssa$lcssa|0),($90|0))|0;
                    (_Gif_FullCompressImage($gfs,$gfi,$gcinfo)|0);
                    (_Gif_SetUncompressedImage($gfi,$t2_data$1$lcssa$lcssa,1,0)|0);
                    (_Gif_FullCompressImage($gfs,$gfi,$gcinfo)|0);
                    _Gif_ReleaseUncompressedImage($gfi);
                    $91 = HEAP32[$gcinfo>>2]|0;
                    $92 = $91 & -9;
                    HEAP32[$gcinfo>>2] = $92;
                    STACKTOP = sp;return;
                }
            }
            (_Gif_FullCompressImage($gfs,$gfi,$gcinfo)|0);
            _Gif_ReleaseUncompressedImage($gfi);
            $91 = HEAP32[$gcinfo>>2]|0;
            $92 = $91 & -9;
            HEAP32[$gcinfo>>2] = $92;
            STACKTOP = sp;return;
        }
        function __ZL19simple_frame_data16P9Gif_ImagePh($gfi,$map) {
            $gfi = $gfi|0;
            $map = $map|0;
            var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $from$02 = 0, $into$03 = 0, $ob = 0, $x$01 = 0, $y$04 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ob = sp;
            __ZL11safe_boundsP9Gif_Image($ob,$gfi);
            $0 = ((($gfi)) + 8|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($ob)) + 12|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)>(0);
            if (!($5)) {
                STACKTOP = sp;return;
            }
            $6 = ((($ob)) + 4|0);
            $7 = ((($gfi)) + 4|0);
            $8 = ((($ob)) + 8|0);
            $y$04 = 0;
            while(1) {
                $9 = HEAP32[$8>>2]|0;
                $10 = ($9|0)>(0);
                if ($10) {
                    $11 = HEAP32[$7>>2]|0;
                    $12 = Math_imul($y$04, $2)|0;
                    $13 = (($11) + ($12)|0);
                    $14 = HEAP32[428>>2]|0;
                    $15 = HEAP32[$6>>2]|0;
                    $16 = (($15) + ($y$04))|0;
                    $17 = HEAP32[432>>2]|0;
                    $18 = Math_imul($16, $17)|0;
                    $19 = HEAP32[$ob>>2]|0;
                    $$sum = (($18) + ($19))|0;
                    $20 = (($14) + ($$sum<<1)|0);
                    $from$02 = $20;$into$03 = $13;$x$01 = 0;
                    while(1) {
                        $21 = ((($from$02)) + 2|0);
                        $22 = HEAP16[$from$02>>1]|0;
                        $23 = $22&65535;
                        $24 = (($map) + ($23)|0);
                        $25 = HEAP8[$24>>0]|0;
                        $26 = ((($into$03)) + 1|0);
                        HEAP8[$into$03>>0] = $25;
                        $27 = (($x$01) + 1)|0;
                        $28 = HEAP32[$8>>2]|0;
                        $29 = ($27|0)<($28|0);
                        if ($29) {
                            $from$02 = $21;$into$03 = $26;$x$01 = $27;
                        } else {
                            break;
                        }
                    }
                }
                $30 = (($y$04) + 1)|0;
                $31 = HEAP32[$3>>2]|0;
                $32 = ($30|0)<($31|0);
                if ($32) {
                    $y$04 = $30;
                } else {
                    break;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL17erase_data_area16PtP9Gif_Image($dst,$area) {
            $dst = $dst|0;
            $area = $area|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ob = 0;
            var $scevgep = 0, $y$03 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ob = sp;
            __ZL11safe_boundsP9Gif_Image($ob,$area);
            $0 = ((($ob)) + 12|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)>(0);
            if (!($2)) {
                STACKTOP = sp;return;
            }
            $3 = HEAP32[432>>2]|0;
            $4 = ((($ob)) + 4|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = HEAP32[$ob>>2]|0;
            $7 = ((($ob)) + 8|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = ($8|0)>(0);
            $10 = HEAP32[432>>2]|0;
            $11 = HEAP32[$0>>2]|0;
            $12 = Math_imul($3, $5)|0;
            $13 = (($6) + ($12))|0;
            $14 = $8 << 1;
            $y$03 = 0;
            while(1) {
                if ($9) {
                    $15 = Math_imul($10, $y$03)|0;
                    $16 = (($13) + ($15))|0;
                    $scevgep = (($dst) + ($16<<1)|0);
                    _memset(($scevgep|0),0,($14|0))|0;
                }
                $17 = (($y$03) + 1)|0;
                $18 = ($17|0)<($11|0);
                if ($18) {
                    $y$03 = $17;
                } else {
                    break;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL11safe_boundsP9Gif_Image($agg$result,$area) {
            $agg$result = $agg$result|0;
            $area = $area|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($area)) + 12|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = HEAP32[432>>2]|0;
            $4 = (__ZL9constrainiii($2,$3)|0);
            HEAP32[$agg$result>>2] = $4;
            $5 = ((($area)) + 14|0);
            $6 = HEAP16[$5>>1]|0;
            $7 = $6&65535;
            $8 = HEAP32[436>>2]|0;
            $9 = (__ZL9constrainiii($7,$8)|0);
            $10 = ((($agg$result)) + 4|0);
            HEAP32[$10>>2] = $9;
            $11 = HEAP16[$0>>1]|0;
            $12 = $11&65535;
            $13 = ((($area)) + 8|0);
            $14 = HEAP16[$13>>1]|0;
            $15 = $14&65535;
            $16 = (($15) + ($12))|0;
            $17 = HEAP32[432>>2]|0;
            $18 = (__ZL9constrainiii($16,$17)|0);
            $19 = HEAP32[$agg$result>>2]|0;
            $20 = (($18) - ($19))|0;
            $21 = ((($agg$result)) + 8|0);
            HEAP32[$21>>2] = $20;
            $22 = HEAP16[$5>>1]|0;
            $23 = $22&65535;
            $24 = ((($area)) + 10|0);
            $25 = HEAP16[$24>>1]|0;
            $26 = $25&65535;
            $27 = (($26) + ($23))|0;
            $28 = HEAP32[436>>2]|0;
            $29 = (__ZL9constrainiii($27,$28)|0);
            $30 = HEAP32[$10>>2]|0;
            $31 = (($29) - ($30))|0;
            $32 = ((($agg$result)) + 12|0);
            HEAP32[$32>>2] = $31;
            return;
        }
        function __ZL9constrainiii($x,$high) {
            $x = $x|0;
            $high = $high|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($x|0)<(0);
            $1 = ($x|0)<($high|0);
            $2 = $1 ? $x : $high;
            $3 = $0 ? 0 : $2;
            return ($3|0);
        }
        function __ZL20prepare_colormap_mapP9Gif_ImageP12Gif_ColormapPh($gfi,$into,$need) {
            $gfi = $gfi|0;
            $into = $into|0;
            $need = $need|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond20 = 0, $i$114 = 0, $i$210 = 0, $i$38 = 0, $i$38$lcssa = 0;
            var $i$47 = 0, $into_used = 0, $ncol$0$lcssa = 0, $ncol$013 = 0, $ncol$1 = 0, $ncol$2 = 0, $transparent$1 = 0, $val$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 256|0;
            $into_used = sp;
            $0 = HEAP32[440>>2]|0;
            $1 = HEAP32[412>>2]|0;
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($1)) + 16|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = HEAP32[$into>>2]|0;
            $6 = ((($into)) + 16|0);
            $7 = HEAP32[$6>>2]|0;
            $8 = (_Gif_Realloc(0,1,$2,7693,210)|0);
            _memset(($into_used|0),0,256)|0;
            $9 = ($0|0)==($into|0);
            $10 = ($2|0)>(1);
            L1: do {
                if ($10) {
                    $i$114 = 1;$ncol$013 = $5;
                    while(1) {
                        $11 = (($need) + ($i$114)|0);
                        $12 = HEAP8[$11>>0]|0;
                        $13 = ($12<<24>>24)==(2);
                        if ($13) {
                            if ($9) {
                                $14 = (((($4) + ($i$114<<3)|0)) + 4|0);
                                $15 = HEAP32[$14>>2]|0;
                                $16 = ($15|0)<($ncol$013|0);
                                if ($16) {
                                    $ncol$1 = $ncol$013;$val$0 = $15;
                                } else {
                                    break L1;
                                }
                            } else {
                                $17 = ($ncol$013|0)==(256);
                                if ($17) {
                                    break L1;
                                }
                                $18 = (($7) + ($ncol$013<<3)|0);
                                $19 = (($4) + ($i$114<<3)|0);
                                $20 = $19;
                                $21 = $20;
                                $22 = HEAP32[$21>>2]|0;
                                $23 = (($20) + 4)|0;
                                $24 = $23;
                                $25 = HEAP32[$24>>2]|0;
                                $26 = $18;
                                $27 = $26;
                                HEAP32[$27>>2] = $22;
                                $28 = (($26) + 4)|0;
                                $29 = $28;
                                HEAP32[$29>>2] = $25;
                                $30 = (((($7) + ($ncol$013<<3)|0)) + 4|0);
                                HEAP32[$30>>2] = $i$114;
                                $31 = (($ncol$013) + 1)|0;
                                $ncol$1 = $31;$val$0 = $ncol$013;
                            }
                            $32 = $val$0&255;
                            $33 = (($8) + ($i$114)|0);
                            HEAP8[$33>>0] = $32;
                            $34 = (($into_used) + ($val$0)|0);
                            HEAP8[$34>>0] = 1;
                            $ncol$2 = $ncol$1;
                        } else {
                            $ncol$2 = $ncol$013;
                        }
                        $35 = (($i$114) + 1)|0;
                        $36 = ($35|0)<($2|0);
                        if ($36) {
                            $i$114 = $35;$ncol$013 = $ncol$2;
                        } else {
                            $ncol$0$lcssa = $ncol$2;
                            label = 9;
                            break;
                        }
                    }
                } else {
                    $ncol$0$lcssa = $5;
                    label = 9;
                }
            } while(0);
            L12: do {
                if ((label|0) == 9) {
                    if (!($9)) {
                        _qsort($7,$ncol$0$lcssa,8,4);
                        $37 = ($ncol$0$lcssa|0)>(0);
                        if ($37) {
                            $i$210 = 0;
                            while(1) {
                                $38 = $i$210&255;
                                $39 = (((($7) + ($i$210<<3)|0)) + 4|0);
                                $40 = HEAP32[$39>>2]|0;
                                $41 = (($8) + ($40)|0);
                                HEAP8[$41>>0] = $38;
                                $42 = (($i$210) + 1)|0;
                                $exitcond20 = ($42|0)==($ncol$0$lcssa|0);
                                if ($exitcond20) {
                                    break;
                                } else {
                                    $i$210 = $42;
                                }
                            }
                        }
                    }
                    $43 = ((($gfi)) + 20|0);
                    HEAP16[$43>>1] = -1;
                    $44 = HEAP8[$need>>0]|0;
                    $45 = ($44<<24>>24)==(0);
                    if (!($45)) {
                        $46 = ($ncol$0$lcssa|0)>(0);
                        do {
                            if ($46) {
                                $i$38 = 0;
                                while(1) {
                                    $47 = (($into_used) + ($i$38)|0);
                                    $48 = HEAP8[$47>>0]|0;
                                    $49 = ($48<<24>>24)==(0);
                                    if ($49) {
                                        $i$38$lcssa = $i$38;
                                        label = 16;
                                        break;
                                    }
                                    $50 = (($i$38) + 1)|0;
                                    $51 = ($50|0)<($ncol$0$lcssa|0);
                                    if ($51) {
                                        $i$38 = $50;
                                    } else {
                                        break;
                                    }
                                }
                                if ((label|0) == 16) {
                                    $52 = ($i$38$lcssa|0)<(0);
                                    if (!($52)) {
                                        $transparent$1 = $i$38$lcssa;
                                        break;
                                    }
                                }
                                $53 = ($ncol$0$lcssa|0)<(256);
                                if ($53) {
                                    label = 18;
                                } else {
                                    break L12;
                                }
                            } else {
                                label = 18;
                            }
                        } while(0);
                        if ((label|0) == 18) {
                            $54 = (($7) + ($ncol$0$lcssa<<3)|0);
                            $55 = $4;
                            $56 = $55;
                            $57 = HEAP32[$56>>2]|0;
                            $58 = (($55) + 4)|0;
                            $59 = $58;
                            $60 = HEAP32[$59>>2]|0;
                            $61 = $54;
                            $62 = $61;
                            HEAP32[$62>>2] = $57;
                            $63 = (($61) + 4)|0;
                            $64 = $63;
                            HEAP32[$64>>2] = $60;
                            $transparent$1 = $ncol$0$lcssa;
                        }
                        $65 = $transparent$1&255;
                        HEAP8[$8>>0] = $65;
                        $66 = ($2|0)>(1);
                        if ($66) {
                            $i$47 = 1;
                            while(1) {
                                $67 = (($need) + ($i$47)|0);
                                $68 = HEAP8[$67>>0]|0;
                                $69 = ($68<<24>>24)==(1);
                                if ($69) {
                                    $70 = (($8) + ($i$47)|0);
                                    HEAP8[$70>>0] = $65;
                                }
                                $71 = (($i$47) + 1)|0;
                                $exitcond = ($71|0)==($2|0);
                                if ($exitcond) {
                                    break;
                                } else {
                                    $i$47 = $71;
                                }
                            }
                        }
                        $72 = $transparent$1&65535;
                        HEAP16[$43>>1] = $72;
                    }
                    HEAP32[$into>>2] = $ncol$0$lcssa;
                    $$0 = $8;
                    STACKTOP = sp;return ($$0|0);
                }
            } while(0);
            _free($8);
            $$0 = 0;
            STACKTOP = sp;return ($$0|0);
        }
        function __ZL31colormap_rgb_permutation_sorterPKvS0_($v1,$v2) {
            $v1 = $v1|0;
            $v2 = $v2|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($v1)) + 1|0);
            $1 = HEAP8[$0>>0]|0;
            $2 = $1&255;
            $3 = $2 << 16;
            $4 = ((($v1)) + 2|0);
            $5 = HEAP8[$4>>0]|0;
            $6 = $5&255;
            $7 = $6 << 8;
            $8 = $7 | $3;
            $9 = ((($v1)) + 3|0);
            $10 = HEAP8[$9>>0]|0;
            $11 = $10&255;
            $12 = $8 | $11;
            $13 = ((($v2)) + 1|0);
            $14 = HEAP8[$13>>0]|0;
            $15 = $14&255;
            $16 = $15 << 16;
            $17 = ((($v2)) + 2|0);
            $18 = HEAP8[$17>>0]|0;
            $19 = $18&255;
            $20 = $19 << 8;
            $21 = $20 | $16;
            $22 = ((($v2)) + 3|0);
            $23 = HEAP8[$22>>0]|0;
            $24 = $23&255;
            $25 = $21 | $24;
            $26 = (($12) - ($25))|0;
            return ($26|0);
        }
        function __ZL19increment_penaltiesP11Gif_OptDataPii($opt,$penalty,$delta) {
            $opt = $opt|0;
            $penalty = $penalty|0;
            $delta = $delta|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[412>>2]|0;
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($opt)) + 20|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($1|0)>(1);
            if ($4) {
                $i$01 = 1;
            } else {
                return;
            }
            while(1) {
                $5 = (($3) + ($i$01)|0);
                $6 = HEAP8[$5>>0]|0;
                $7 = ($6<<24>>24)==(2);
                if ($7) {
                    $8 = (($penalty) + ($i$01<<2)|0);
                    $9 = HEAP32[$8>>2]|0;
                    $10 = (($9) + ($delta))|0;
                    HEAP32[$8>>2] = $10;
                }
                $11 = (($i$01) + 1)|0;
                $exitcond = ($11|0)==($1|0);
                if ($exitcond) {
                    break;
                } else {
                    $i$01 = $11;
                }
            }
            return;
        }
        function __ZL18sort_permutation16PtiPii($perm,$size,$values) {
            $perm = $perm|0;
            $size = $size|0;
            $values = $values|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            HEAP32[448>>2] = $values;
            _qsort($perm,$size,2,5);
            HEAP32[448>>2] = 0;
            return;
        }
        function __ZL23permuting_sorter_down16PKvS0_($v1,$v2) {
            $v1 = $v1|0;
            $v2 = $v2|0;
            var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP16[$v1>>1]|0;
            $1 = $0&65535;
            $2 = HEAP32[448>>2]|0;
            $3 = (($2) + ($1<<2)|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = HEAP16[$v2>>1]|0;
            $6 = $5&65535;
            $7 = (($2) + ($6<<2)|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = ($4|0)>($8|0);
            $not$ = ($4|0)!=($8|0);
            $$ = $not$&1;
            $$0 = $9 ? -1 : $$;
            return ($$0|0);
        }
        function __ZL24find_difference_bounds16P11Gif_OptDataP9Gif_ImageS2_($bounds,$gfi,$last) {
            $bounds = $bounds|0;
            $gfi = $gfi|0;
            $last = $last|0;
            var $$lcssa = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
            var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
            var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $bt$0$ph = 0, $bt$1$lcssa = 0, $bt$122 = 0, $bt$2 = 0, $lf$0$lcssa = 0, $lf$016 = 0, $lf$1 = 0, $lf_min$0$ph = 0, $rt$0$lcssa = 0, $rt$015 = 0, $rt$1 = 0;
            var $rt_max$0$ph = 0, $switch = 0, $tp$0$lcssa = 0, $tp$0$ph = 0, $tp$030 = 0, $tp$1 = 0, $x$0$lcssa = 0, $x$06 = 0, $x$1$lcssa = 0, $x$19 = 0, $y$014 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $0 = sp;
            $1 = ($last|0)==(0|0);
            if ($1) {
                label = 3;
            } else {
                $2 = ((($last)) + 18|0);
                $3 = HEAP8[$2>>0]|0;
                $switch = ($3&255)<(2);
                if ($switch) {
                    label = 3;
                } else {
                    $15 = HEAP32[432>>2]|0;
                    $16 = (($15) + -1)|0;
                    $17 = HEAP32[436>>2]|0;
                    $18 = (($17) + -1)|0;
                    $bt$0$ph = $18;$lf_min$0$ph = 0;$rt_max$0$ph = $16;$tp$0$ph = 0;
                }
            }
            if ((label|0) == 3) {
                __ZL11safe_boundsP9Gif_Image($0,$gfi);
                $4 = HEAP32[$0>>2]|0;
                $5 = ((($0)) + 4|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = ((($0)) + 8|0);
                $8 = HEAP32[$7>>2]|0;
                $9 = ((($0)) + 12|0);
                $10 = HEAP32[$9>>2]|0;
                $11 = (($4) + -1)|0;
                $12 = (($11) + ($8))|0;
                $13 = (($6) + -1)|0;
                $14 = (($13) + ($10))|0;
                $bt$0$ph = $14;$lf_min$0$ph = $4;$rt_max$0$ph = $12;$tp$0$ph = $6;
            }
            $19 = HEAP32[436>>2]|0;
            $20 = ($tp$0$ph|0)<($19|0);
            L7: do {
                if ($20) {
                    $21 = HEAP32[424>>2]|0;
                    $22 = HEAP32[432>>2]|0;
                    $23 = HEAP32[428>>2]|0;
                    $24 = $22 << 1;
                    $25 = HEAP32[436>>2]|0;
                    $tp$030 = $tp$0$ph;
                    while(1) {
                        $26 = Math_imul($22, $tp$030)|0;
                        $27 = (($21) + ($26<<1)|0);
                        $28 = (($23) + ($26<<1)|0);
                        $29 = (_memcmp($27,$28,$24)|0);
                        $30 = ($29|0)==(0);
                        if (!($30)) {
                            $tp$0$lcssa = $tp$030;
                            break L7;
                        }
                        $36 = (($tp$030) + 1)|0;
                        $37 = ($36|0)<($25|0);
                        if ($37) {
                            $tp$030 = $36;
                        } else {
                            $tp$0$lcssa = $36;
                            break;
                        }
                    }
                } else {
                    $tp$0$lcssa = $tp$0$ph;
                }
            } while(0);
            $31 = ($bt$0$ph|0)<($tp$0$lcssa|0);
            L13: do {
                if ($31) {
                    $$lcssa = 1;$bt$1$lcssa = $bt$0$ph;
                } else {
                    $32 = HEAP32[424>>2]|0;
                    $33 = HEAP32[432>>2]|0;
                    $34 = HEAP32[428>>2]|0;
                    $35 = $33 << 1;
                    $bt$122 = $bt$0$ph;
                    while(1) {
                        $38 = Math_imul($33, $bt$122)|0;
                        $39 = (($32) + ($38<<1)|0);
                        $40 = (($34) + ($38<<1)|0);
                        $41 = (_memcmp($39,$40,$35)|0);
                        $42 = ($41|0)==(0);
                        if (!($42)) {
                            $$lcssa = 0;$bt$1$lcssa = $bt$122;
                            break L13;
                        }
                        $43 = (($bt$122) + -1)|0;
                        $44 = ($bt$122|0)>($tp$0$lcssa|0);
                        if ($44) {
                            $bt$122 = $43;
                        } else {
                            $$lcssa = 1;$bt$1$lcssa = $43;
                            break;
                        }
                    }
                }
            } while(0);
            $45 = HEAP32[432>>2]|0;
            $46 = ($tp$0$lcssa|0)>($bt$1$lcssa|0);
            if ($46) {
                $lf$0$lcssa = $45;$rt$0$lcssa = 0;
            } else {
                $47 = HEAP32[424>>2]|0;
                $48 = HEAP32[432>>2]|0;
                $49 = HEAP32[428>>2]|0;
                $lf$016 = $45;$rt$015 = 0;$y$014 = $tp$0$lcssa;
                while(1) {
                    $50 = Math_imul($48, $y$014)|0;
                    $51 = ($lf_min$0$ph|0)<($lf$016|0);
                    L23: do {
                        if ($51) {
                            $x$06 = $lf_min$0$ph;
                            while(1) {
                                $$sum2 = (($x$06) + ($50))|0;
                                $53 = (($47) + ($$sum2<<1)|0);
                                $54 = HEAP16[$53>>1]|0;
                                $55 = (($49) + ($$sum2<<1)|0);
                                $56 = HEAP16[$55>>1]|0;
                                $57 = ($54<<16>>16)==($56<<16>>16);
                                if (!($57)) {
                                    $x$0$lcssa = $x$06;
                                    break L23;
                                }
                                $58 = (($x$06) + 1)|0;
                                $59 = ($58|0)<($lf$016|0);
                                if ($59) {
                                    $x$06 = $58;
                                } else {
                                    $x$0$lcssa = $58;
                                    break;
                                }
                            }
                        } else {
                            $x$0$lcssa = $lf_min$0$ph;
                        }
                    } while(0);
                    $52 = ($rt_max$0$ph|0)>($rt$015|0);
                    L28: do {
                        if ($52) {
                            $x$19 = $rt_max$0$ph;
                            while(1) {
                                $$sum = (($x$19) + ($50))|0;
                                $60 = (($47) + ($$sum<<1)|0);
                                $61 = HEAP16[$60>>1]|0;
                                $62 = (($49) + ($$sum<<1)|0);
                                $63 = HEAP16[$62>>1]|0;
                                $64 = ($61<<16>>16)==($63<<16>>16);
                                if (!($64)) {
                                    $x$1$lcssa = $x$19;
                                    break L28;
                                }
                                $65 = (($x$19) + -1)|0;
                                $66 = ($65|0)>($rt$015|0);
                                if ($66) {
                                    $x$19 = $65;
                                } else {
                                    $x$1$lcssa = $65;
                                    break;
                                }
                            }
                        } else {
                            $x$1$lcssa = $rt_max$0$ph;
                        }
                    } while(0);
                    $67 = (($y$014) + 1)|0;
                    $68 = ($y$014|0)<($bt$1$lcssa|0);
                    if ($68) {
                        $lf$016 = $x$0$lcssa;$rt$015 = $x$1$lcssa;$y$014 = $67;
                    } else {
                        $lf$0$lcssa = $x$0$lcssa;$rt$0$lcssa = $x$1$lcssa;
                        break;
                    }
                }
            }
            if (!($$lcssa)) {
                $bt$2 = $bt$1$lcssa;$lf$1 = $lf$0$lcssa;$rt$1 = $rt$0$lcssa;$tp$1 = $tp$0$lcssa;
                $75 = $lf$1&65535;
                HEAP16[$bounds>>1] = $75;
                $76 = $tp$1&65535;
                $77 = ((($bounds)) + 2|0);
                HEAP16[$77>>1] = $76;
                $78 = (($rt$1) + 1)|0;
                $79 = (($78) - ($lf$1))|0;
                $80 = $79&65535;
                $81 = ((($bounds)) + 4|0);
                HEAP16[$81>>1] = $80;
                $82 = (($bt$2) + 1)|0;
                $83 = (($82) - ($tp$1))|0;
                $84 = $83&65535;
                $85 = ((($bounds)) + 6|0);
                HEAP16[$85>>1] = $84;
                STACKTOP = sp;return;
            }
            $69 = ((($gfi)) + 14|0);
            $70 = HEAP16[$69>>1]|0;
            $71 = $70&65535;
            $72 = ((($gfi)) + 12|0);
            $73 = HEAP16[$72>>1]|0;
            $74 = $73&65535;
            $bt$2 = $71;$lf$1 = $74;$rt$1 = $74;$tp$1 = $71;
            $75 = $lf$1&65535;
            HEAP16[$bounds>>1] = $75;
            $76 = $tp$1&65535;
            $77 = ((($bounds)) + 2|0);
            HEAP16[$77>>1] = $76;
            $78 = (($rt$1) + 1)|0;
            $79 = (($78) - ($lf$1))|0;
            $80 = $79&65535;
            $81 = ((($bounds)) + 4|0);
            HEAP16[$81>>1] = $80;
            $82 = (($bt$2) + 1)|0;
            $83 = (($82) - ($tp$1))|0;
            $84 = $83&65535;
            $85 = ((($bounds)) + 6|0);
            HEAP16[$85>>1] = $84;
            STACKTOP = sp;return;
        }
        function __ZL22apply_frame_disposal16PtS_S_P9Gif_Image($into_data,$from_data,$previous_data,$gfi) {
            $into_data = $into_data|0;
            $from_data = $from_data|0;
            $previous_data = $previous_data|0;
            $gfi = $gfi|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[432>>2]|0;
            $1 = HEAP32[436>>2]|0;
            $2 = Math_imul($1, $0)|0;
            $3 = ((($gfi)) + 18|0);
            $4 = HEAP8[$3>>0]|0;
            $5 = ($4<<24>>24)==(3);
            if ($5) {
                $6 = $2 << 1;
                _memcpy(($into_data|0),($previous_data|0),($6|0))|0;
                return;
            }
            $7 = $2 << 1;
            _memcpy(($into_data|0),($from_data|0),($7|0))|0;
            $8 = HEAP8[$3>>0]|0;
            $9 = ($8<<24>>24)==(2);
            if (!($9)) {
                return;
            }
            __ZL17erase_data_area16PtP9Gif_Image($into_data,$gfi);
            return;
        }
        function __ZL26expand_difference_bounds16P11Gif_OptDataP9Gif_Image($bounds,$this_bounds) {
            $bounds = $bounds|0;
            $this_bounds = $this_bounds|0;
            var $$sum = 0, $$sum10 = 0, $$sum12 = 0, $$sum2 = 0, $$sum3 = 0, $$sum6 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
            var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
            var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
            var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
            var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
            var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
            var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
            var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
            var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
            var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
            var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
            var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $expanded$0$ph = 0, $expanded$1$ph = 0, $expanded$2$ph = 0, $expanded$425 = 0, $expanded$5 = 0, $expanded$6 = 0, $ob = 0, $x$046 = 0, $x$141 = 0, $x$222 = 0, $y$036 = 0;
            var $y$130 = 0, $y$226 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ob = sp;
            __ZL11safe_boundsP9Gif_Image($ob,$this_bounds);
            $0 = ((($bounds)) + 4|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = ($1<<16>>16)==(0);
            if ($2) {
                label = 3;
            } else {
                $3 = ((($bounds)) + 6|0);
                $4 = HEAP16[$3>>1]|0;
                $5 = ($4<<16>>16)==(0);
                if ($5) {
                    label = 3;
                }
            }
            if ((label|0) == 3) {
                $6 = ((($bounds)) + 2|0);
                HEAP16[$6>>1] = 0;
                HEAP16[$bounds>>1] = 0;
                $7 = HEAP32[432>>2]|0;
                $8 = $7&65535;
                HEAP16[$0>>1] = $8;
                $9 = HEAP32[436>>2]|0;
                $10 = $9&65535;
                $11 = ((($bounds)) + 6|0);
                HEAP16[$11>>1] = $10;
            }
            $12 = HEAP32[$ob>>2]|0;
            $13 = HEAP16[$bounds>>1]|0;
            $14 = $13&65535;
            $15 = ($12|0)>($14|0);
            if ($15) {
                $16 = ((($ob)) + 8|0);
                $17 = HEAP32[$16>>2]|0;
                $18 = (($12) - ($14))|0;
                $19 = (($18) + ($17))|0;
                HEAP32[$16>>2] = $19;
                $20 = HEAP16[$bounds>>1]|0;
                $21 = $20&65535;
                HEAP32[$ob>>2] = $21;
            }
            $22 = ((($ob)) + 4|0);
            $23 = HEAP32[$22>>2]|0;
            $24 = ((($bounds)) + 2|0);
            $25 = HEAP16[$24>>1]|0;
            $26 = $25&65535;
            $27 = ($23|0)>($26|0);
            if ($27) {
                $28 = ((($ob)) + 12|0);
                $29 = HEAP32[$28>>2]|0;
                $30 = (($23) - ($26))|0;
                $31 = (($30) + ($29))|0;
                HEAP32[$28>>2] = $31;
                $32 = HEAP16[$24>>1]|0;
                $33 = $32&65535;
                HEAP32[$22>>2] = $33;
            }
            $34 = HEAP32[$ob>>2]|0;
            $35 = ((($ob)) + 8|0);
            $36 = HEAP32[$35>>2]|0;
            $37 = (($36) + ($34))|0;
            $38 = HEAP16[$bounds>>1]|0;
            $39 = $38&65535;
            $40 = HEAP16[$0>>1]|0;
            $41 = $40&65535;
            $42 = (($41) + ($39))|0;
            $43 = ($37|0)<($42|0);
            if ($43) {
                $44 = (($42) - ($34))|0;
                HEAP32[$35>>2] = $44;
            }
            $45 = HEAP32[$22>>2]|0;
            $46 = ((($ob)) + 12|0);
            $47 = HEAP32[$46>>2]|0;
            $48 = (($47) + ($45))|0;
            $49 = HEAP16[$24>>1]|0;
            $50 = $49&65535;
            $51 = ((($bounds)) + 6|0);
            $52 = HEAP16[$51>>1]|0;
            $53 = $52&65535;
            $54 = (($53) + ($50))|0;
            $55 = ($48|0)<($54|0);
            if ($55) {
                $56 = (($54) - ($45))|0;
                HEAP32[$46>>2] = $56;
            }
            $57 = HEAP32[$22>>2]|0;
            $58 = HEAP16[$24>>1]|0;
            $59 = $58&65535;
            $60 = ($57|0)<($59|0);
            L18: do {
                if ($60) {
                    $61 = HEAP32[428>>2]|0;
                    $62 = HEAP32[432>>2]|0;
                    $63 = HEAP32[452>>2]|0;
                    $64 = HEAP32[$ob>>2]|0;
                    $65 = HEAP32[$35>>2]|0;
                    $66 = ($65|0)>(0);
                    $67 = (($65) + ($64))|0;
                    $69 = $57;
                    while(1) {
                        $68 = Math_imul($62, $69)|0;
                        if ($66) {
                            $x$046 = $64;
                            while(1) {
                                $$sum12 = (($x$046) + ($68))|0;
                                $70 = (($61) + ($$sum12<<1)|0);
                                $71 = HEAP16[$70>>1]|0;
                                $72 = ($71<<16>>16)==(0);
                                if (!($72)) {
                                    $73 = (($63) + ($$sum12<<1)|0);
                                    $74 = HEAP16[$73>>1]|0;
                                    $75 = ($74<<16>>16)==(0);
                                    if ($75) {
                                        $expanded$0$ph = 1;
                                        break L18;
                                    }
                                }
                                $93 = (($x$046) + 1)|0;
                                $94 = ($93|0)<($67|0);
                                if ($94) {
                                    $x$046 = $93;
                                } else {
                                    break;
                                }
                            }
                        }
                        $95 = HEAP32[$22>>2]|0;
                        $96 = (($95) + 1)|0;
                        HEAP32[$22>>2] = $96;
                        $97 = HEAP32[$46>>2]|0;
                        $98 = (($97) + -1)|0;
                        HEAP32[$46>>2] = $98;
                        $99 = HEAP32[$22>>2]|0;
                        $100 = HEAP16[$24>>1]|0;
                        $101 = $100&65535;
                        $102 = ($99|0)<($101|0);
                        if ($102) {
                            $69 = $99;
                        } else {
                            $expanded$0$ph = 0;
                            break;
                        }
                    }
                } else {
                    $expanded$0$ph = 0;
                }
            } while(0);
            $76 = HEAP32[$22>>2]|0;
            $77 = HEAP32[$46>>2]|0;
            $78 = (($77) + ($76))|0;
            $79 = HEAP16[$24>>1]|0;
            $80 = $79&65535;
            $81 = HEAP16[$51>>1]|0;
            $82 = $81&65535;
            $83 = (($82) + ($80))|0;
            $84 = ($78|0)>($83|0);
            L30: do {
                if ($84) {
                    $85 = HEAP32[428>>2]|0;
                    $86 = HEAP32[432>>2]|0;
                    $87 = HEAP32[452>>2]|0;
                    $88 = HEAP32[$ob>>2]|0;
                    $89 = HEAP32[$35>>2]|0;
                    $90 = ($89|0)>(0);
                    $91 = HEAP32[$22>>2]|0;
                    $92 = (($89) + ($88))|0;
                    $104 = $78;
                    while(1) {
                        $103 = (($104) + -1)|0;
                        $105 = Math_imul($86, $103)|0;
                        if ($90) {
                            $x$141 = $88;
                            while(1) {
                                $$sum10 = (($x$141) + ($105))|0;
                                $106 = (($85) + ($$sum10<<1)|0);
                                $107 = HEAP16[$106>>1]|0;
                                $108 = ($107<<16>>16)==(0);
                                if (!($108)) {
                                    $109 = (($87) + ($$sum10<<1)|0);
                                    $110 = HEAP16[$109>>1]|0;
                                    $111 = ($110<<16>>16)==(0);
                                    if ($111) {
                                        $expanded$1$ph = 1;
                                        break L30;
                                    }
                                }
                                $123 = (($x$141) + 1)|0;
                                $124 = ($123|0)<($92|0);
                                if ($124) {
                                    $x$141 = $123;
                                } else {
                                    break;
                                }
                            }
                        }
                        $125 = HEAP32[$46>>2]|0;
                        $126 = (($125) + -1)|0;
                        HEAP32[$46>>2] = $126;
                        $127 = (($126) + ($91))|0;
                        $128 = HEAP16[$24>>1]|0;
                        $129 = $128&65535;
                        $130 = HEAP16[$51>>1]|0;
                        $131 = $130&65535;
                        $132 = (($131) + ($129))|0;
                        $133 = ($127|0)>($132|0);
                        if ($133) {
                            $104 = $127;
                        } else {
                            $expanded$1$ph = $expanded$0$ph;
                            break;
                        }
                    }
                } else {
                    $expanded$1$ph = $expanded$0$ph;
                }
            } while(0);
            $112 = HEAP32[$ob>>2]|0;
            $113 = HEAP16[$bounds>>1]|0;
            $114 = $113&65535;
            $115 = ($112|0)<($114|0);
            L42: do {
                if ($115) {
                    $116 = HEAP32[428>>2]|0;
                    $117 = HEAP32[452>>2]|0;
                    $118 = HEAP32[$22>>2]|0;
                    $119 = HEAP32[$46>>2]|0;
                    $120 = ($119|0)>(0);
                    $121 = HEAP32[432>>2]|0;
                    $122 = (($119) + ($118))|0;
                    $135 = $112;
                    while(1) {
                        if ($120) {
                            $y$036 = $118;
                            while(1) {
                                $134 = Math_imul($121, $y$036)|0;
                                $$sum8 = (($134) + ($135))|0;
                                $136 = (($116) + ($$sum8<<1)|0);
                                $137 = HEAP16[$136>>1]|0;
                                $138 = ($137<<16>>16)==(0);
                                if (!($138)) {
                                    $139 = (($117) + ($$sum8<<1)|0);
                                    $140 = HEAP16[$139>>1]|0;
                                    $141 = ($140<<16>>16)==(0);
                                    if ($141) {
                                        $expanded$2$ph = 1;
                                        break L42;
                                    }
                                }
                                $159 = (($y$036) + 1)|0;
                                $160 = ($159|0)<($122|0);
                                if ($160) {
                                    $y$036 = $159;
                                } else {
                                    break;
                                }
                            }
                        }
                        $161 = HEAP32[$ob>>2]|0;
                        $162 = (($161) + 1)|0;
                        HEAP32[$ob>>2] = $162;
                        $163 = HEAP32[$35>>2]|0;
                        $164 = (($163) + -1)|0;
                        HEAP32[$35>>2] = $164;
                        $165 = HEAP32[$ob>>2]|0;
                        $166 = HEAP16[$bounds>>1]|0;
                        $167 = $166&65535;
                        $168 = ($165|0)<($167|0);
                        if ($168) {
                            $135 = $165;
                        } else {
                            $expanded$2$ph = $expanded$1$ph;
                            break;
                        }
                    }
                } else {
                    $expanded$2$ph = $expanded$1$ph;
                }
            } while(0);
            $142 = HEAP32[$ob>>2]|0;
            $143 = HEAP32[$35>>2]|0;
            $144 = (($143) + ($142))|0;
            $145 = HEAP16[$bounds>>1]|0;
            $146 = $145&65535;
            $147 = HEAP16[$0>>1]|0;
            $148 = $147&65535;
            $149 = (($148) + ($146))|0;
            $150 = ($144|0)>($149|0);
            L54: do {
                if ($150) {
                    $151 = HEAP32[428>>2]|0;
                    $152 = HEAP32[452>>2]|0;
                    $153 = HEAP32[$22>>2]|0;
                    $154 = HEAP32[$46>>2]|0;
                    $155 = ($154|0)>(0);
                    $156 = HEAP32[$ob>>2]|0;
                    $157 = HEAP32[432>>2]|0;
                    $158 = (($154) + ($153))|0;
                    $169 = $142;$170 = $143;
                    L56: while(1) {
                        if ($155) {
                            $$sum2 = (($169) + -1)|0;
                            $$sum3 = (($$sum2) + ($170))|0;
                            $y$130 = $153;
                            while(1) {
                                $171 = Math_imul($157, $y$130)|0;
                                $$sum6 = (($$sum3) + ($171))|0;
                                $172 = (($151) + ($$sum6<<1)|0);
                                $173 = HEAP16[$172>>1]|0;
                                $174 = ($173<<16>>16)==(0);
                                if (!($174)) {
                                    $175 = (($152) + ($$sum6<<1)|0);
                                    $176 = HEAP16[$175>>1]|0;
                                    $177 = ($176<<16>>16)==(0);
                                    if ($177) {
                                        $expanded$6 = 1;
                                        break L56;
                                    }
                                }
                                $178 = (($y$130) + 1)|0;
                                $179 = ($178|0)<($158|0);
                                if ($179) {
                                    $y$130 = $178;
                                } else {
                                    break;
                                }
                            }
                        }
                        $180 = HEAP32[$35>>2]|0;
                        $181 = (($180) + -1)|0;
                        HEAP32[$35>>2] = $181;
                        $182 = (($181) + ($156))|0;
                        $183 = HEAP16[$bounds>>1]|0;
                        $184 = $183&65535;
                        $185 = HEAP16[$0>>1]|0;
                        $186 = $185&65535;
                        $187 = (($186) + ($184))|0;
                        $188 = ($182|0)>($187|0);
                        if ($188) {
                            $169 = $156;$170 = $181;
                        } else {
                            break L54;
                        }
                    }
                    $214 = HEAP32[$ob>>2]|0;
                    $215 = $214&65535;
                    HEAP16[$bounds>>1] = $215;
                    $216 = HEAP32[$22>>2]|0;
                    $217 = $216&65535;
                    HEAP16[$24>>1] = $217;
                    $218 = HEAP32[$35>>2]|0;
                    $219 = $218&65535;
                    HEAP16[$0>>1] = $219;
                    $220 = HEAP32[$46>>2]|0;
                    $221 = $220&65535;
                    HEAP16[$51>>1] = $221;
                    STACKTOP = sp;return ($expanded$6|0);
                }
            } while(0);
            $189 = ($expanded$2$ph|0)==(0);
            if (!($189)) {
                $expanded$6 = $expanded$2$ph;
                $214 = HEAP32[$ob>>2]|0;
                $215 = $214&65535;
                HEAP16[$bounds>>1] = $215;
                $216 = HEAP32[$22>>2]|0;
                $217 = $216&65535;
                HEAP16[$24>>1] = $217;
                $218 = HEAP32[$35>>2]|0;
                $219 = $218&65535;
                HEAP16[$0>>1] = $219;
                $220 = HEAP32[$46>>2]|0;
                $221 = $220&65535;
                HEAP16[$51>>1] = $221;
                STACKTOP = sp;return ($expanded$6|0);
            }
            $190 = HEAP32[$46>>2]|0;
            $191 = ($190|0)>(0);
            if (!($191)) {
                $expanded$6 = 0;
                $214 = HEAP32[$ob>>2]|0;
                $215 = $214&65535;
                HEAP16[$bounds>>1] = $215;
                $216 = HEAP32[$22>>2]|0;
                $217 = $216&65535;
                HEAP16[$24>>1] = $217;
                $218 = HEAP32[$35>>2]|0;
                $219 = $218&65535;
                HEAP16[$0>>1] = $219;
                $220 = HEAP32[$46>>2]|0;
                $221 = $220&65535;
                HEAP16[$51>>1] = $221;
                STACKTOP = sp;return ($expanded$6|0);
            }
            $192 = HEAP32[$22>>2]|0;
            $193 = HEAP32[428>>2]|0;
            $194 = HEAP32[432>>2]|0;
            $195 = HEAP32[452>>2]|0;
            $196 = HEAP32[$ob>>2]|0;
            $197 = HEAP32[$35>>2]|0;
            $198 = ($197|0)>(0);
            $199 = HEAP32[$22>>2]|0;
            $200 = HEAP32[$46>>2]|0;
            $201 = (($200) + ($199))|0;
            $202 = (($197) + ($196))|0;
            $expanded$425 = 0;$y$226 = $192;
            while(1) {
                $203 = Math_imul($194, $y$226)|0;
                L76: do {
                    if ($198) {
                        $x$222 = $196;
                        while(1) {
                            $$sum = (($x$222) + ($203))|0;
                            $204 = (($193) + ($$sum<<1)|0);
                            $205 = HEAP16[$204>>1]|0;
                            $206 = ($205<<16>>16)==(0);
                            if (!($206)) {
                                $207 = (($195) + ($$sum<<1)|0);
                                $208 = HEAP16[$207>>1]|0;
                                $209 = ($208<<16>>16)==(0);
                                if ($209) {
                                    $expanded$5 = 1;
                                    break L76;
                                }
                            }
                            $210 = (($x$222) + 1)|0;
                            $211 = ($210|0)<($202|0);
                            if ($211) {
                                $x$222 = $210;
                            } else {
                                $expanded$5 = $expanded$425;
                                break;
                            }
                        }
                    } else {
                        $expanded$5 = $expanded$425;
                    }
                } while(0);
                $212 = (($y$226) + 1)|0;
                $213 = ($212|0)<($201|0);
                if ($213) {
                    $expanded$425 = $expanded$5;$y$226 = $212;
                } else {
                    $expanded$6 = $expanded$5;
                    break;
                }
            }
            $214 = HEAP32[$ob>>2]|0;
            $215 = $214&65535;
            HEAP16[$bounds>>1] = $215;
            $216 = HEAP32[$22>>2]|0;
            $217 = $216&65535;
            HEAP16[$24>>1] = $217;
            $218 = HEAP32[$35>>2]|0;
            $219 = $218&65535;
            HEAP16[$0>>1] = $219;
            $220 = HEAP32[$46>>2]|0;
            $221 = $220&65535;
            HEAP16[$51>>1] = $221;
            STACKTOP = sp;return ($expanded$6|0);
        }
        function __ZL21fix_difference_boundsP11Gif_OptData($bounds) {
            $bounds = $bounds|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
            var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($bounds)) + 4|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = ($1<<16>>16)==(0);
            if ($2) {
                label = 3;
            } else {
                $3 = ((($bounds)) + 6|0);
                $4 = HEAP16[$3>>1]|0;
                $5 = ($4<<16>>16)==(0);
                if ($5) {
                    label = 3;
                }
            }
            if ((label|0) == 3) {
                $6 = ((($bounds)) + 2|0);
                HEAP16[$6>>1] = 0;
                HEAP16[$bounds>>1] = 0;
                HEAP16[$0>>1] = 1;
                $7 = ((($bounds)) + 6|0);
                HEAP16[$7>>1] = 1;
            }
            $8 = ((($bounds)) + 2|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = $9&65535;
            $11 = HEAP32[436>>2]|0;
            $12 = ($10|0)<($11|0);
            if ($12) {
                $13 = HEAP16[$bounds>>1]|0;
                $14 = $13&65535;
                $15 = HEAP32[432>>2]|0;
                $16 = ($14|0)<($15|0);
                if ($16) {
                    $17 = ((($bounds)) + 6|0);
                    $18 = HEAP16[$17>>1]|0;
                    $19 = $18&65535;
                    $20 = (($19) + ($10))|0;
                    $21 = ($20|0)>($11|0);
                    if (!($21)) {
                        $22 = HEAP16[$0>>1]|0;
                        $23 = $22&65535;
                        $24 = (($23) + ($14))|0;
                        $25 = ($24|0)>($15|0);
                        if (!($25)) {
                            return;
                        }
                    }
                }
            }
            ___assert_fail((7835|0),(7693|0),154,(7991|0));
            // unreachable;
        }
        function __ZL17get_used_colors16P11Gif_OptDatai($bounds,$use_transparency) {
            $bounds = $bounds|0;
            $use_transparency = $use_transparency|0;
            var $$sum = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
            var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
            var $8 = 0, $80 = 0, $9 = 0, $count = 0, $exitcond = 0, $exitcond25 = 0, $exitcond26 = 0, $i$111 = 0, $i$210 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond8 = 0, $x$015 = 0, $y$019 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $count = sp;
            $0 = ((($bounds)) + 2|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($bounds)) + 4|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = ((($bounds)) + 6|0);
            $6 = HEAP16[$5>>1]|0;
            $7 = $6&65535;
            $8 = HEAP32[412>>2]|0;
            $9 = HEAP32[$8>>2]|0;
            $10 = (_Gif_Realloc(0,1,$9,7706,385)|0);
            $11 = ($9|0)>(0);
            if ($11) {
                _memset(($10|0),0,($9|0))|0;
            }
            $12 = (($7) + ($2))|0;
            $13 = ($6<<16>>16)==(0);
            if (!($13)) {
                $14 = ($4<<16>>16)==(0);
                $15 = $4&65535;
                $y$019 = $2;
                while(1) {
                    $16 = HEAP32[428>>2]|0;
                    $17 = HEAP32[432>>2]|0;
                    $18 = Math_imul($17, $y$019)|0;
                    $19 = HEAP16[$bounds>>1]|0;
                    $20 = $19&65535;
                    $$sum = (($20) + ($18))|0;
                    $21 = HEAP32[424>>2]|0;
                    if (!($14)) {
                        $x$015 = 0;
                        while(1) {
                            $$sum5 = (($$sum) + ($x$015))|0;
                            $22 = (($16) + ($$sum5<<1)|0);
                            $23 = HEAP16[$22>>1]|0;
                            $24 = $23&65535;
                            $25 = (($21) + ($$sum5<<1)|0);
                            $26 = HEAP16[$25>>1]|0;
                            $27 = ($23<<16>>16)==($26<<16>>16);
                            $28 = (($10) + ($24)|0);
                            if ($27) {
                                $29 = HEAP8[$28>>0]|0;
                                $30 = ($29<<24>>24)==(0);
                                if ($30) {
                                    HEAP8[$28>>0] = 1;
                                }
                            } else {
                                HEAP8[$28>>0] = 2;
                            }
                            $31 = (($x$015) + 1)|0;
                            $exitcond26 = ($31|0)==($15|0);
                            if ($exitcond26) {
                                break;
                            } else {
                                $x$015 = $31;
                            }
                        }
                    }
                    $32 = (($y$019) + 1)|0;
                    $33 = ($32|0)<($12|0);
                    if ($33) {
                        $y$019 = $32;
                    } else {
                        break;
                    }
                }
            }
            $34 = HEAP8[$10>>0]|0;
            $35 = ($34<<24>>24)==(0);
            if (!($35)) {
                HEAP8[$10>>0] = 2;
            }
            $36 = ((($count)) + 8|0);
            HEAP32[$36>>2] = 0;
            $37 = ((($count)) + 4|0);
            HEAP32[$37>>2] = 0;
            HEAP32[$count>>2] = 0;
            $38 = ($9|0)>(0);
            if ($38) {
                $i$111 = 0;
                while(1) {
                    $39 = (($10) + ($i$111)|0);
                    $40 = HEAP8[$39>>0]|0;
                    $41 = $40&255;
                    $42 = (($count) + ($41<<2)|0);
                    $43 = HEAP32[$42>>2]|0;
                    $44 = (($43) + 1)|0;
                    HEAP32[$42>>2] = $44;
                    $45 = (($i$111) + 1)|0;
                    $exitcond25 = ($45|0)==($9|0);
                    if ($exitcond25) {
                        break;
                    } else {
                        $i$111 = $45;
                    }
                }
            }
            $46 = ($use_transparency|0)>(1);
            if ($46) {
                $47 = HEAP8[$10>>0]|0;
                $48 = ($47<<24>>24)==(0);
                $49 = HEAP32[$36>>2]|0;
                $50 = ($49|0)<(256);
                $or$cond8 = $48 & $50;
                if ($or$cond8) {
                    HEAP8[$10>>0] = 2;
                    $51 = HEAP32[$36>>2]|0;
                    $52 = (($51) + 1)|0;
                    HEAP32[$36>>2] = $52;
                }
            }
            $53 = HEAP32[$37>>2]|0;
            $54 = HEAP32[$36>>2]|0;
            $55 = (($54) + ($53))|0;
            $56 = ($55|0)>(256);
            $57 = ($53|0)>(0);
            $58 = ($use_transparency|0)!=(0);
            $59 = $58 | $56;
            $or$cond = $57 & $59;
            if ($or$cond) {
                $60 = HEAP8[$10>>0]|0;
                $61 = ($60<<24>>24)==(0);
                if ($61) {
                    HEAP8[$10>>0] = 2;
                    $62 = HEAP32[$36>>2]|0;
                    $63 = (($62) + 1)|0;
                    HEAP32[$36>>2] = $63;
                }
            }
            if (!($59)) {
                $64 = ($9|0)>(0);
                if ($64) {
                    $i$210 = 0;
                    while(1) {
                        $65 = (($10) + ($i$210)|0);
                        $66 = HEAP8[$65>>0]|0;
                        $67 = ($66<<24>>24)==(1);
                        if ($67) {
                            HEAP8[$65>>0] = 2;
                        }
                        $68 = (($i$210) + 1)|0;
                        $exitcond = ($68|0)==($9|0);
                        if ($exitcond) {
                            break;
                        } else {
                            $i$210 = $68;
                        }
                    }
                }
                $69 = HEAP32[$37>>2]|0;
                $70 = HEAP32[$36>>2]|0;
                $71 = (($70) + ($69))|0;
                HEAP32[$36>>2] = $71;
            }
            $72 = HEAP32[$36>>2]|0;
            $73 = ($72|0)<(256);
            $or$cond3 = $59 & $73;
            if (!($or$cond3)) {
                $78 = HEAP32[$36>>2]|0;
                $79 = ((($bounds)) + 24|0);
                HEAP32[$79>>2] = $78;
                $80 = ((($bounds)) + 20|0);
                HEAP32[$80>>2] = $10;
                STACKTOP = sp;return;
            }
            $74 = HEAP8[$10>>0]|0;
            $75 = ($74<<24>>24)==(0);
            if (!($75)) {
                $78 = HEAP32[$36>>2]|0;
                $79 = ((($bounds)) + 24|0);
                HEAP32[$79>>2] = $78;
                $80 = ((($bounds)) + 20|0);
                HEAP32[$80>>2] = $10;
                STACKTOP = sp;return;
            }
            HEAP8[$10>>0] = 2;
            $76 = HEAP32[$36>>2]|0;
            $77 = (($76) + 1)|0;
            HEAP32[$36>>2] = $77;
            $78 = HEAP32[$36>>2]|0;
            $79 = ((($bounds)) + 24|0);
            HEAP32[$79>>2] = $78;
            $80 = ((($bounds)) + 20|0);
            HEAP32[$80>>2] = $10;
            STACKTOP = sp;return;
        }
        function __ZL26erase_data_area_subimage16PtP11Gif_OptData($dst,$area) {
            $dst = $dst|0;
            $area = $area|0;
            var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $img = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 80|0;
            $img = sp;
            $0 = HEAP16[$area>>1]|0;
            $1 = ((($img)) + 12|0);
            HEAP16[$1>>1] = $0;
            $2 = ((($area)) + 2|0);
            $3 = HEAP16[$2>>1]|0;
            $4 = ((($img)) + 14|0);
            HEAP16[$4>>1] = $3;
            $5 = ((($area)) + 4|0);
            $6 = HEAP16[$5>>1]|0;
            $7 = ((($img)) + 8|0);
            HEAP16[$7>>1] = $6;
            $8 = ((($area)) + 6|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = ((($img)) + 10|0);
            HEAP16[$10>>1] = $9;
            __ZL17erase_data_area16PtP9Gif_Image($dst,$img);
            STACKTOP = sp;return;
        }
        function __ZL25copy_data_area_subimage16PtS_P11Gif_OptData($dst,$src,$area) {
            $dst = $dst|0;
            $src = $src|0;
            $area = $area|0;
            var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $img = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 80|0;
            $img = sp;
            $0 = HEAP16[$area>>1]|0;
            $1 = ((($img)) + 12|0);
            HEAP16[$1>>1] = $0;
            $2 = ((($area)) + 2|0);
            $3 = HEAP16[$2>>1]|0;
            $4 = ((($img)) + 14|0);
            HEAP16[$4>>1] = $3;
            $5 = ((($area)) + 4|0);
            $6 = HEAP16[$5>>1]|0;
            $7 = ((($img)) + 8|0);
            HEAP16[$7>>1] = $6;
            $8 = ((($area)) + 6|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = ((($img)) + 10|0);
            HEAP16[$10>>1] = $9;
            __ZL16copy_data_area16PtS_P9Gif_Image($dst,$src,$img);
            STACKTOP = sp;return;
        }
        function __ZL14erase_screen32Pj($dst) {
            $dst = $dst|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[432>>2]|0;
            $1 = HEAP32[436>>2]|0;
            $2 = Math_imul($1, $0)|0;
            $3 = ($2|0)==(0);
            if ($3) {
                return;
            }
            $4 = Math_imul($1, $0)|0;
            $5 = $4 << 2;
            _memset(($dst|0),0,($5|0))|0;
            return;
        }
        function __ZL16copy_data_area32PjS_P9Gif_Image($dst,$src,$area) {
            $dst = $dst|0;
            $src = $src|0;
            $area = $area|0;
            var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
            var $8 = 0, $9 = 0, $exitcond = 0, $y$04 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $0 = sp;
            $1 = ($area|0)==(0|0);
            if ($1) {
                STACKTOP = sp;return;
            }
            __ZL11safe_boundsP9Gif_Image($0,$area);
            $2 = HEAP32[$0>>2]|0;
            $3 = ((($0)) + 4|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ((($0)) + 12|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = HEAP32[432>>2]|0;
            $8 = Math_imul($7, $4)|0;
            $9 = (($8) + ($2))|0;
            $10 = ($6|0)>(0);
            if (!($10)) {
                STACKTOP = sp;return;
            }
            $11 = (($src) + ($9<<2)|0);
            $12 = (($dst) + ($9<<2)|0);
            $13 = ((($0)) + 8|0);
            $14 = HEAP32[$13>>2]|0;
            $15 = $14 << 2;
            $$012 = $11;$$03 = $12;$y$04 = 0;
            while(1) {
                _memcpy(($$03|0),($$012|0),($15|0))|0;
                $16 = HEAP32[432>>2]|0;
                $17 = (($$03) + ($16<<2)|0);
                $18 = (($$012) + ($16<<2)|0);
                $19 = (($y$04) + 1)|0;
                $exitcond = ($19|0)==($6|0);
                if ($exitcond) {
                    break;
                } else {
                    $$012 = $18;$$03 = $17;$y$04 = $19;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL13apply_frame32PjP10Gif_StreamP9Gif_Imageii($dst,$gfs,$gfi,$save_uncompressed) {
            $dst = $dst|0;
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $save_uncompressed = $save_uncompressed|0;
            var $$02 = 0, $$09 = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
            var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0;
            var $9 = 0, $exitcond = 0, $i$017 = 0, $i$113 = 0, $map = 0, $ob = 0, $or$cond = 0, $was_compressed$0 = 0, $x$05 = 0, $x$16 = 0, $y$08 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 1040|0;
            $map = sp + 16|0;
            $ob = sp;
            $0 = ((($gfi)) + 24|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            $3 = HEAP32[420>>2]|0;
            $4 = $2 ? $3 : $1;
            __ZL11safe_boundsP9Gif_Image($ob,$gfi);
            $5 = HEAP32[$gfi>>2]|0;
            $6 = ($5|0)==(0|0);
            if ($6) {
                (_Gif_FullUncompressImage($gfs,$gfi,0)|0);
                $was_compressed$0 = 1;
            } else {
                $was_compressed$0 = 0;
            }
            $7 = HEAP32[$4>>2]|0;
            $8 = ($7|0)>(0);
            if ($8) {
                $9 = ((($4)) + 16|0);
                $10 = HEAP32[$9>>2]|0;
                $11 = HEAP32[$4>>2]|0;
                $i$017 = 0;
                while(1) {
                    $12 = (((($10) + ($i$017<<3)|0)) + 4|0);
                    $13 = HEAP32[$12>>2]|0;
                    $14 = (($map) + ($i$017<<2)|0);
                    HEAP32[$14>>2] = $13;
                    $15 = (($i$017) + 1)|0;
                    $16 = ($15|0)<($11|0);
                    if ($16) {
                        $i$017 = $15;
                    } else {
                        $$lcssa4 = $11;
                        break;
                    }
                }
            } else {
                $$lcssa4 = $7;
            }
            $17 = ($$lcssa4|0)==(0);
            if ($17) {
                $25 = 0;
            } else {
                $18 = ((($4)) + 16|0);
                $19 = HEAP32[$18>>2]|0;
                $20 = ((($19)) + 4|0);
                $21 = HEAP32[$20>>2]|0;
                $25 = $21;
            }
            $22 = HEAP32[$4>>2]|0;
            $23 = ($22|0)<(256);
            if ($23) {
                $i$113 = $22;
                while(1) {
                    $24 = (($map) + ($i$113<<2)|0);
                    HEAP32[$24>>2] = $25;
                    $26 = (($i$113) + 1)|0;
                    $exitcond = ($26|0)==(256);
                    if ($exitcond) {
                        break;
                    } else {
                        $i$113 = $26;
                    }
                }
            }
            $27 = ((($gfi)) + 20|0);
            $28 = HEAP16[$27>>1]|0;
            $29 = ($28&65535)<(256);
            if ($29) {
                $30 = $28 << 16 >> 16;
                $31 = (($map) + ($30<<2)|0);
                HEAP32[$31>>2] = 0;
                $$02 = 0;
            } else {
                $$02 = 1;
            }
            $32 = ((($ob)) + 12|0);
            $33 = HEAP32[$32>>2]|0;
            $34 = ($33|0)>(0);
            if ($34) {
                $35 = HEAP32[432>>2]|0;
                $36 = ((($ob)) + 4|0);
                $37 = HEAP32[$36>>2]|0;
                $38 = Math_imul($35, $37)|0;
                $39 = HEAP32[$ob>>2]|0;
                $40 = (($38) + ($39))|0;
                $41 = (($dst) + ($40<<2)|0);
                $42 = ($$02|0)==(0);
                $43 = ((($ob)) + 8|0);
                $44 = ((($ob)) + 8|0);
                $$09 = $41;$y$08 = 0;
                while(1) {
                    $45 = HEAP32[$gfi>>2]|0;
                    $46 = (($45) + ($y$08<<2)|0);
                    $47 = HEAP32[$46>>2]|0;
                    if ($42) {
                        $50 = HEAP32[$43>>2]|0;
                        $51 = ($50|0)>(0);
                        if ($51) {
                            $x$16 = 0;
                            while(1) {
                                $61 = (($47) + ($x$16)|0);
                                $62 = HEAP8[$61>>0]|0;
                                $63 = $62&255;
                                $64 = (($map) + ($63<<2)|0);
                                $65 = HEAP32[$64>>2]|0;
                                $66 = ($65|0)==(0);
                                if (!($66)) {
                                    $67 = (($$09) + ($x$16<<2)|0);
                                    HEAP32[$67>>2] = $65;
                                }
                                $68 = (($x$16) + 1)|0;
                                $69 = HEAP32[$43>>2]|0;
                                $70 = ($68|0)<($69|0);
                                if ($70) {
                                    $x$16 = $68;
                                } else {
                                    break;
                                }
                            }
                        }
                    } else {
                        $48 = HEAP32[$44>>2]|0;
                        $49 = ($48|0)>(0);
                        if ($49) {
                            $x$05 = 0;
                            while(1) {
                                $52 = (($47) + ($x$05)|0);
                                $53 = HEAP8[$52>>0]|0;
                                $54 = $53&255;
                                $55 = (($map) + ($54<<2)|0);
                                $56 = HEAP32[$55>>2]|0;
                                $57 = (($$09) + ($x$05<<2)|0);
                                HEAP32[$57>>2] = $56;
                                $58 = (($x$05) + 1)|0;
                                $59 = HEAP32[$44>>2]|0;
                                $60 = ($58|0)<($59|0);
                                if ($60) {
                                    $x$05 = $58;
                                } else {
                                    break;
                                }
                            }
                        }
                    }
                    $71 = HEAP32[432>>2]|0;
                    $72 = (($$09) + ($71<<2)|0);
                    $73 = (($y$08) + 1)|0;
                    $74 = HEAP32[$32>>2]|0;
                    $75 = ($73|0)<($74|0);
                    if ($75) {
                        $$09 = $72;$y$08 = $73;
                    } else {
                        break;
                    }
                }
            }
            $76 = ($was_compressed$0|0)==(0);
            $77 = ($save_uncompressed|0)!=(0);
            $or$cond = $77 | $76;
            if ($or$cond) {
                STACKTOP = sp;return;
            }
            _Gif_ReleaseUncompressedImage($gfi);
            STACKTOP = sp;return;
        }
        function __ZL19transp_frame_data32P10Gif_StreamP9Gif_ImagePhiP16Gif_CompressInfo($gfs,$gfi,$map,$optimize_flags,$gcinfo) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $map = $map|0;
            $optimize_flags = $optimize_flags|0;
            $gcinfo = $gcinfo|0;
            var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
            var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $begin_same$034 = 0, $begin_same$1$lcssa = 0, $begin_same$124 = 0, $begin_same$23 = 0, $begin_same$24 = 0, $cur$018 = 0, $data$033 = 0, $data$1$lcssa = 0, $data$1$lcssa$lcssa = 0;
            var $data$121 = 0, $last$017 = 0, $last_for_t2$036 = 0, $last_for_t2$1$lcssa = 0, $last_for_t2$1$lcssa$lcssa = 0, $last_for_t2$126 = 0, $last_for_t2$37 = 0, $last_for_t2$38 = 0, $nsame$037 = 0, $nsame$1$lcssa = 0, $nsame$127 = 0, $nsame$210 = 0, $nsame$29 = 0, $ob = 0, $or$cond = 0, $storemerge = 0, $t2_data$035 = 0, $t2_data$1$lcssa = 0, $t2_data$1$lcssa$lcssa = 0, $t2_data$125 = 0;
            var $t2_data$2 = 0, $t2_data$45 = 0, $t2_data$46 = 0, $x$016 = 0, $y$032 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ob = sp;
            __ZL11safe_boundsP9Gif_Image($ob,$gfi);
            $0 = ((($gfi)) + 20|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1 << 16 >> 16;
            __ZL19simple_frame_data32P9Gif_ImagePh($gfi,$map);
            (_Gif_FullCompressImage($gfs,$gfi,$gcinfo)|0);
            $3 = HEAP32[$gcinfo>>2]|0;
            $4 = $3 | 8;
            HEAP32[$gcinfo>>2] = $4;
            $5 = ((($gfi)) + 4|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = ((($ob)) + 12|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = ($8|0)>(0);
            if ($9) {
                $10 = ((($ob)) + 4|0);
                $11 = ((($ob)) + 8|0);
                $12 = $1&255;
                $13 = $1&255;
                $14 = $optimize_flags & 65535;
                $15 = ($14>>>0)>(2);
                $16 = $1&255;
                $begin_same$034 = $6;$data$033 = $6;$last_for_t2$036 = $6;$nsame$037 = 0;$t2_data$035 = 0;$y$032 = 0;
                while(1) {
                    $17 = HEAP32[432>>2]|0;
                    $18 = HEAP32[$10>>2]|0;
                    $19 = (($18) + ($y$032))|0;
                    $20 = Math_imul($19, $17)|0;
                    $21 = HEAP32[$ob>>2]|0;
                    $$sum = (($20) + ($21))|0;
                    $22 = HEAP32[$11>>2]|0;
                    $23 = ($22|0)>(0);
                    if ($23) {
                        $24 = HEAP32[460>>2]|0;
                        $25 = (($24) + ($$sum<<2)|0);
                        $26 = HEAP32[456>>2]|0;
                        $27 = (($26) + ($$sum<<2)|0);
                        $43 = $22;$begin_same$124 = $begin_same$034;$cur$018 = $25;$data$121 = $data$033;$last$017 = $27;$last_for_t2$126 = $last_for_t2$036;$nsame$127 = $nsame$037;$t2_data$125 = $t2_data$035;$x$016 = 0;
                        while(1) {
                            $28 = HEAP32[$cur$018>>2]|0;
                            $29 = HEAP32[$last$017>>2]|0;
                            $30 = ($28|0)==($29|0);
                            if ($30) {
                                label = 12;
                            } else {
                                $31 = (($map) + ($28)|0);
                                $32 = HEAP8[$31>>0]|0;
                                $33 = $32&255;
                                $34 = ($33|0)==($2|0);
                                if ($34) {
                                    label = 12;
                                } else {
                                    $35 = ($nsame$127|0)==(1);
                                    if ($35) {
                                        $36 = ((($data$121)) + -1|0);
                                        $37 = HEAP8[$36>>0]|0;
                                        $38 = $37&255;
                                        $39 = ($38|0)!=($2|0);
                                        $or$cond = $15 & $39;
                                        if ($or$cond) {
                                            $40 = ($t2_data$125|0)==(0|0);
                                            if ($40) {
                                                $41 = HEAP32[$7>>2]|0;
                                                $42 = Math_imul($41, $43)|0;
                                                $44 = (_Gif_Realloc(0,1,$42,7706,803)|0);
                                                $t2_data$2 = $44;
                                            } else {
                                                $t2_data$2 = $t2_data$125;
                                            }
                                            $45 = HEAP32[$5>>2]|0;
                                            $46 = $last_for_t2$126;
                                            $47 = $45;
                                            $48 = (($46) - ($47))|0;
                                            $49 = (($t2_data$2) + ($48)|0);
                                            $50 = $begin_same$124;
                                            $51 = (($50) - ($46))|0;
                                            _memcpy(($49|0),($last_for_t2$126|0),($51|0))|0;
                                            $52 = HEAP32[$5>>2]|0;
                                            $53 = $52;
                                            $54 = (($50) - ($53))|0;
                                            $55 = (($t2_data$2) + ($54)|0);
                                            $56 = $data$121;
                                            $57 = (($56) - ($50))|0;
                                            _memset(($55|0),($16|0),($57|0))|0;
                                            $begin_same$24 = $begin_same$124;$last_for_t2$38 = $data$121;$nsame$210 = 0;$t2_data$46 = $t2_data$2;
                                            label = 16;
                                        } else {
                                            $begin_same$24 = $begin_same$124;$last_for_t2$38 = $last_for_t2$126;$nsame$210 = 0;$t2_data$46 = $t2_data$125;
                                            label = 16;
                                        }
                                    } else {
                                        $begin_same$24 = $begin_same$124;$last_for_t2$38 = $last_for_t2$126;$nsame$210 = 0;$t2_data$46 = $t2_data$125;
                                        label = 16;
                                    }
                                }
                            }
                            L17: do {
                                if ((label|0) == 12) {
                                    label = 0;
                                    switch ($nsame$127|0) {
                                        case 0:  {
                                            $begin_same$24 = $data$121;$last_for_t2$38 = $last_for_t2$126;$nsame$210 = 1;$t2_data$46 = $t2_data$125;
                                            label = 16;
                                            break L17;
                                            break;
                                        }
                                        case 1:  {
                                            break;
                                        }
                                        default: {
                                            $67 = ($nsame$127|0)>(1);
                                            if ($67) {
                                                $begin_same$23 = $begin_same$124;$last_for_t2$37 = $last_for_t2$126;$nsame$29 = $nsame$127;$storemerge = $12;$t2_data$45 = $t2_data$125;
                                                break L17;
                                            } else {
                                                $begin_same$24 = $begin_same$124;$last_for_t2$38 = $last_for_t2$126;$nsame$210 = $nsame$127;$t2_data$46 = $t2_data$125;
                                                label = 16;
                                                break L17;
                                            }
                                        }
                                    }
                                    $58 = HEAP32[$cur$018>>2]|0;
                                    $59 = (($map) + ($58)|0);
                                    $60 = HEAP8[$59>>0]|0;
                                    $61 = ((($data$121)) + -1|0);
                                    $62 = HEAP8[$61>>0]|0;
                                    $63 = ($60<<24>>24)==($62<<24>>24);
                                    if ($63) {
                                        $begin_same$24 = $begin_same$124;$last_for_t2$38 = $last_for_t2$126;$nsame$210 = 1;$t2_data$46 = $t2_data$125;
                                        label = 16;
                                    } else {
                                        $64 = $data$121;
                                        $65 = $begin_same$124;
                                        $66 = (($64) - ($65))|0;
                                        _memset(($begin_same$124|0),($13|0),($66|0))|0;
                                        $begin_same$23 = $begin_same$124;$last_for_t2$37 = $last_for_t2$126;$nsame$29 = 2;$storemerge = $12;$t2_data$45 = $t2_data$125;
                                    }
                                }
                            } while(0);
                            if ((label|0) == 16) {
                                label = 0;
                                $68 = HEAP32[$cur$018>>2]|0;
                                $69 = (($map) + ($68)|0);
                                $70 = HEAP8[$69>>0]|0;
                                $begin_same$23 = $begin_same$24;$last_for_t2$37 = $last_for_t2$38;$nsame$29 = $nsame$210;$storemerge = $70;$t2_data$45 = $t2_data$46;
                            }
                            HEAP8[$data$121>>0] = $storemerge;
                            $71 = ((($data$121)) + 1|0);
                            $72 = ((($cur$018)) + 4|0);
                            $73 = ((($last$017)) + 4|0);
                            $74 = (($x$016) + 1)|0;
                            $75 = HEAP32[$11>>2]|0;
                            $76 = ($74|0)<($75|0);
                            if ($76) {
                                $43 = $75;$begin_same$124 = $begin_same$23;$cur$018 = $72;$data$121 = $71;$last$017 = $73;$last_for_t2$126 = $last_for_t2$37;$nsame$127 = $nsame$29;$t2_data$125 = $t2_data$45;$x$016 = $74;
                            } else {
                                $begin_same$1$lcssa = $begin_same$23;$data$1$lcssa = $71;$last_for_t2$1$lcssa = $last_for_t2$37;$nsame$1$lcssa = $nsame$29;$t2_data$1$lcssa = $t2_data$45;
                                break;
                            }
                        }
                    } else {
                        $begin_same$1$lcssa = $begin_same$034;$data$1$lcssa = $data$033;$last_for_t2$1$lcssa = $last_for_t2$036;$nsame$1$lcssa = $nsame$037;$t2_data$1$lcssa = $t2_data$035;
                    }
                    $77 = (($y$032) + 1)|0;
                    $78 = HEAP32[$7>>2]|0;
                    $79 = ($77|0)<($78|0);
                    if ($79) {
                        $begin_same$034 = $begin_same$1$lcssa;$data$033 = $data$1$lcssa;$last_for_t2$036 = $last_for_t2$1$lcssa;$nsame$037 = $nsame$1$lcssa;$t2_data$035 = $t2_data$1$lcssa;$y$032 = $77;
                    } else {
                        $data$1$lcssa$lcssa = $data$1$lcssa;$last_for_t2$1$lcssa$lcssa = $last_for_t2$1$lcssa;$t2_data$1$lcssa$lcssa = $t2_data$1$lcssa;
                        break;
                    }
                }
                $80 = ($t2_data$1$lcssa$lcssa|0)==(0|0);
                if (!($80)) {
                    $81 = HEAP32[$5>>2]|0;
                    $82 = $last_for_t2$1$lcssa$lcssa;
                    $83 = $81;
                    $84 = (($82) - ($83))|0;
                    $85 = (($t2_data$1$lcssa$lcssa) + ($84)|0);
                    $86 = $data$1$lcssa$lcssa;
                    $87 = (($86) - ($82))|0;
                    _memcpy(($85|0),($last_for_t2$1$lcssa$lcssa|0),($87|0))|0;
                    (_Gif_FullCompressImage($gfs,$gfi,$gcinfo)|0);
                    (_Gif_SetUncompressedImage($gfi,$t2_data$1$lcssa$lcssa,1,0)|0);
                    (_Gif_FullCompressImage($gfs,$gfi,$gcinfo)|0);
                    _Gif_ReleaseUncompressedImage($gfi);
                    $88 = HEAP32[$gcinfo>>2]|0;
                    $89 = $88 & -9;
                    HEAP32[$gcinfo>>2] = $89;
                    STACKTOP = sp;return;
                }
            }
            (_Gif_FullCompressImage($gfs,$gfi,$gcinfo)|0);
            _Gif_ReleaseUncompressedImage($gfi);
            $88 = HEAP32[$gcinfo>>2]|0;
            $89 = $88 & -9;
            HEAP32[$gcinfo>>2] = $89;
            STACKTOP = sp;return;
        }
        function __ZL19simple_frame_data32P9Gif_ImagePh($gfi,$map) {
            $gfi = $gfi|0;
            $map = $map|0;
            var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $from$02 = 0, $into$03 = 0, $ob = 0, $x$01 = 0, $y$04 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ob = sp;
            __ZL11safe_boundsP9Gif_Image($ob,$gfi);
            $0 = ((($gfi)) + 8|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($ob)) + 12|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)>(0);
            if (!($5)) {
                STACKTOP = sp;return;
            }
            $6 = ((($ob)) + 4|0);
            $7 = ((($gfi)) + 4|0);
            $8 = ((($ob)) + 8|0);
            $y$04 = 0;
            while(1) {
                $9 = HEAP32[$8>>2]|0;
                $10 = ($9|0)>(0);
                if ($10) {
                    $11 = HEAP32[$7>>2]|0;
                    $12 = Math_imul($y$04, $2)|0;
                    $13 = (($11) + ($12)|0);
                    $14 = HEAP32[460>>2]|0;
                    $15 = HEAP32[$6>>2]|0;
                    $16 = (($15) + ($y$04))|0;
                    $17 = HEAP32[432>>2]|0;
                    $18 = Math_imul($16, $17)|0;
                    $19 = HEAP32[$ob>>2]|0;
                    $$sum = (($18) + ($19))|0;
                    $20 = (($14) + ($$sum<<2)|0);
                    $from$02 = $20;$into$03 = $13;$x$01 = 0;
                    while(1) {
                        $21 = ((($from$02)) + 4|0);
                        $22 = HEAP32[$from$02>>2]|0;
                        $23 = (($map) + ($22)|0);
                        $24 = HEAP8[$23>>0]|0;
                        $25 = ((($into$03)) + 1|0);
                        HEAP8[$into$03>>0] = $24;
                        $26 = (($x$01) + 1)|0;
                        $27 = HEAP32[$8>>2]|0;
                        $28 = ($26|0)<($27|0);
                        if ($28) {
                            $from$02 = $21;$into$03 = $25;$x$01 = $26;
                        } else {
                            break;
                        }
                    }
                }
                $29 = (($y$04) + 1)|0;
                $30 = HEAP32[$3>>2]|0;
                $31 = ($29|0)<($30|0);
                if ($31) {
                    $y$04 = $29;
                } else {
                    break;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL17erase_data_area32PjP9Gif_Image($dst,$area) {
            $dst = $dst|0;
            $area = $area|0;
            var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
            var $7 = 0, $8 = 0, $9 = 0, $ob = 0, $x$01 = 0, $y$03 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ob = sp;
            __ZL11safe_boundsP9Gif_Image($ob,$area);
            $0 = ((($ob)) + 12|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)>(0);
            if (!($2)) {
                STACKTOP = sp;return;
            }
            $3 = HEAP32[432>>2]|0;
            $4 = ((($ob)) + 4|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = Math_imul($3, $5)|0;
            $7 = HEAP32[$ob>>2]|0;
            $8 = (($6) + ($7))|0;
            $9 = (($dst) + ($8<<2)|0);
            $10 = ((($ob)) + 8|0);
            $$02 = $9;$y$03 = 0;
            while(1) {
                $11 = HEAP32[$10>>2]|0;
                $12 = ($11|0)>(0);
                if ($12) {
                    $x$01 = 0;
                    while(1) {
                        $13 = (($$02) + ($x$01<<2)|0);
                        HEAP32[$13>>2] = 0;
                        $14 = (($x$01) + 1)|0;
                        $15 = HEAP32[$10>>2]|0;
                        $16 = ($14|0)<($15|0);
                        if ($16) {
                            $x$01 = $14;
                        } else {
                            break;
                        }
                    }
                }
                $17 = HEAP32[432>>2]|0;
                $18 = (($$02) + ($17<<2)|0);
                $19 = (($y$03) + 1)|0;
                $20 = HEAP32[$0>>2]|0;
                $21 = ($19|0)<($20|0);
                if ($21) {
                    $$02 = $18;$y$03 = $19;
                } else {
                    break;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL18sort_permutation32PjiPii($perm,$size,$values) {
            $perm = $perm|0;
            $size = $size|0;
            $values = $values|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            HEAP32[448>>2] = $values;
            _qsort($perm,$size,4,6);
            HEAP32[448>>2] = 0;
            return;
        }
        function __ZL23permuting_sorter_down32PKvS0_($v1,$v2) {
            $v1 = $v1|0;
            $v2 = $v2|0;
            var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $not$ = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$v1>>2]|0;
            $1 = HEAP32[448>>2]|0;
            $2 = (($1) + ($0<<2)|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = HEAP32[$v2>>2]|0;
            $5 = (($1) + ($4<<2)|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = ($3|0)>($6|0);
            $not$ = ($3|0)!=($6|0);
            $$ = $not$&1;
            $$0 = $7 ? -1 : $$;
            return ($$0|0);
        }
        function __ZL24find_difference_bounds32P11Gif_OptDataP9Gif_ImageS2_($bounds,$gfi,$last) {
            $bounds = $bounds|0;
            $gfi = $gfi|0;
            $last = $last|0;
            var $$lcssa = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
            var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
            var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $bt$0$ph = 0, $bt$1$lcssa = 0, $bt$122 = 0, $bt$2 = 0, $lf$0$lcssa = 0, $lf$016 = 0, $lf$1 = 0, $lf_min$0$ph = 0, $rt$0$lcssa = 0, $rt$015 = 0, $rt$1 = 0;
            var $rt_max$0$ph = 0, $switch = 0, $tp$0$lcssa = 0, $tp$0$ph = 0, $tp$030 = 0, $tp$1 = 0, $x$0$lcssa = 0, $x$06 = 0, $x$1$lcssa = 0, $x$19 = 0, $y$014 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $0 = sp;
            $1 = ($last|0)==(0|0);
            if ($1) {
                label = 3;
            } else {
                $2 = ((($last)) + 18|0);
                $3 = HEAP8[$2>>0]|0;
                $switch = ($3&255)<(2);
                if ($switch) {
                    label = 3;
                } else {
                    $15 = HEAP32[432>>2]|0;
                    $16 = (($15) + -1)|0;
                    $17 = HEAP32[436>>2]|0;
                    $18 = (($17) + -1)|0;
                    $bt$0$ph = $18;$lf_min$0$ph = 0;$rt_max$0$ph = $16;$tp$0$ph = 0;
                }
            }
            if ((label|0) == 3) {
                __ZL11safe_boundsP9Gif_Image($0,$gfi);
                $4 = HEAP32[$0>>2]|0;
                $5 = ((($0)) + 4|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = ((($0)) + 8|0);
                $8 = HEAP32[$7>>2]|0;
                $9 = ((($0)) + 12|0);
                $10 = HEAP32[$9>>2]|0;
                $11 = (($4) + -1)|0;
                $12 = (($11) + ($8))|0;
                $13 = (($6) + -1)|0;
                $14 = (($13) + ($10))|0;
                $bt$0$ph = $14;$lf_min$0$ph = $4;$rt_max$0$ph = $12;$tp$0$ph = $6;
            }
            $19 = HEAP32[436>>2]|0;
            $20 = ($tp$0$ph|0)<($19|0);
            L7: do {
                if ($20) {
                    $21 = HEAP32[456>>2]|0;
                    $22 = HEAP32[432>>2]|0;
                    $23 = HEAP32[460>>2]|0;
                    $24 = $22 << 2;
                    $25 = HEAP32[436>>2]|0;
                    $tp$030 = $tp$0$ph;
                    while(1) {
                        $26 = Math_imul($22, $tp$030)|0;
                        $27 = (($21) + ($26<<2)|0);
                        $28 = (($23) + ($26<<2)|0);
                        $29 = (_memcmp($27,$28,$24)|0);
                        $30 = ($29|0)==(0);
                        if (!($30)) {
                            $tp$0$lcssa = $tp$030;
                            break L7;
                        }
                        $36 = (($tp$030) + 1)|0;
                        $37 = ($36|0)<($25|0);
                        if ($37) {
                            $tp$030 = $36;
                        } else {
                            $tp$0$lcssa = $36;
                            break;
                        }
                    }
                } else {
                    $tp$0$lcssa = $tp$0$ph;
                }
            } while(0);
            $31 = ($bt$0$ph|0)<($tp$0$lcssa|0);
            L13: do {
                if ($31) {
                    $$lcssa = 1;$bt$1$lcssa = $bt$0$ph;
                } else {
                    $32 = HEAP32[456>>2]|0;
                    $33 = HEAP32[432>>2]|0;
                    $34 = HEAP32[460>>2]|0;
                    $35 = $33 << 2;
                    $bt$122 = $bt$0$ph;
                    while(1) {
                        $38 = Math_imul($33, $bt$122)|0;
                        $39 = (($32) + ($38<<2)|0);
                        $40 = (($34) + ($38<<2)|0);
                        $41 = (_memcmp($39,$40,$35)|0);
                        $42 = ($41|0)==(0);
                        if (!($42)) {
                            $$lcssa = 0;$bt$1$lcssa = $bt$122;
                            break L13;
                        }
                        $43 = (($bt$122) + -1)|0;
                        $44 = ($bt$122|0)>($tp$0$lcssa|0);
                        if ($44) {
                            $bt$122 = $43;
                        } else {
                            $$lcssa = 1;$bt$1$lcssa = $43;
                            break;
                        }
                    }
                }
            } while(0);
            $45 = HEAP32[432>>2]|0;
            $46 = ($tp$0$lcssa|0)>($bt$1$lcssa|0);
            if ($46) {
                $lf$0$lcssa = $45;$rt$0$lcssa = 0;
            } else {
                $47 = HEAP32[456>>2]|0;
                $48 = HEAP32[432>>2]|0;
                $49 = HEAP32[460>>2]|0;
                $lf$016 = $45;$rt$015 = 0;$y$014 = $tp$0$lcssa;
                while(1) {
                    $50 = Math_imul($48, $y$014)|0;
                    $51 = ($lf_min$0$ph|0)<($lf$016|0);
                    L23: do {
                        if ($51) {
                            $x$06 = $lf_min$0$ph;
                            while(1) {
                                $$sum2 = (($x$06) + ($50))|0;
                                $53 = (($47) + ($$sum2<<2)|0);
                                $54 = HEAP32[$53>>2]|0;
                                $55 = (($49) + ($$sum2<<2)|0);
                                $56 = HEAP32[$55>>2]|0;
                                $57 = ($54|0)==($56|0);
                                if (!($57)) {
                                    $x$0$lcssa = $x$06;
                                    break L23;
                                }
                                $58 = (($x$06) + 1)|0;
                                $59 = ($58|0)<($lf$016|0);
                                if ($59) {
                                    $x$06 = $58;
                                } else {
                                    $x$0$lcssa = $58;
                                    break;
                                }
                            }
                        } else {
                            $x$0$lcssa = $lf_min$0$ph;
                        }
                    } while(0);
                    $52 = ($rt_max$0$ph|0)>($rt$015|0);
                    L28: do {
                        if ($52) {
                            $x$19 = $rt_max$0$ph;
                            while(1) {
                                $$sum = (($x$19) + ($50))|0;
                                $60 = (($47) + ($$sum<<2)|0);
                                $61 = HEAP32[$60>>2]|0;
                                $62 = (($49) + ($$sum<<2)|0);
                                $63 = HEAP32[$62>>2]|0;
                                $64 = ($61|0)==($63|0);
                                if (!($64)) {
                                    $x$1$lcssa = $x$19;
                                    break L28;
                                }
                                $65 = (($x$19) + -1)|0;
                                $66 = ($65|0)>($rt$015|0);
                                if ($66) {
                                    $x$19 = $65;
                                } else {
                                    $x$1$lcssa = $65;
                                    break;
                                }
                            }
                        } else {
                            $x$1$lcssa = $rt_max$0$ph;
                        }
                    } while(0);
                    $67 = (($y$014) + 1)|0;
                    $68 = ($y$014|0)<($bt$1$lcssa|0);
                    if ($68) {
                        $lf$016 = $x$0$lcssa;$rt$015 = $x$1$lcssa;$y$014 = $67;
                    } else {
                        $lf$0$lcssa = $x$0$lcssa;$rt$0$lcssa = $x$1$lcssa;
                        break;
                    }
                }
            }
            if (!($$lcssa)) {
                $bt$2 = $bt$1$lcssa;$lf$1 = $lf$0$lcssa;$rt$1 = $rt$0$lcssa;$tp$1 = $tp$0$lcssa;
                $75 = $lf$1&65535;
                HEAP16[$bounds>>1] = $75;
                $76 = $tp$1&65535;
                $77 = ((($bounds)) + 2|0);
                HEAP16[$77>>1] = $76;
                $78 = (($rt$1) + 1)|0;
                $79 = (($78) - ($lf$1))|0;
                $80 = $79&65535;
                $81 = ((($bounds)) + 4|0);
                HEAP16[$81>>1] = $80;
                $82 = (($bt$2) + 1)|0;
                $83 = (($82) - ($tp$1))|0;
                $84 = $83&65535;
                $85 = ((($bounds)) + 6|0);
                HEAP16[$85>>1] = $84;
                STACKTOP = sp;return;
            }
            $69 = ((($gfi)) + 14|0);
            $70 = HEAP16[$69>>1]|0;
            $71 = $70&65535;
            $72 = ((($gfi)) + 12|0);
            $73 = HEAP16[$72>>1]|0;
            $74 = $73&65535;
            $bt$2 = $71;$lf$1 = $74;$rt$1 = $74;$tp$1 = $71;
            $75 = $lf$1&65535;
            HEAP16[$bounds>>1] = $75;
            $76 = $tp$1&65535;
            $77 = ((($bounds)) + 2|0);
            HEAP16[$77>>1] = $76;
            $78 = (($rt$1) + 1)|0;
            $79 = (($78) - ($lf$1))|0;
            $80 = $79&65535;
            $81 = ((($bounds)) + 4|0);
            HEAP16[$81>>1] = $80;
            $82 = (($bt$2) + 1)|0;
            $83 = (($82) - ($tp$1))|0;
            $84 = $83&65535;
            $85 = ((($bounds)) + 6|0);
            HEAP16[$85>>1] = $84;
            STACKTOP = sp;return;
        }
        function __ZL22apply_frame_disposal32PjS_S_P9Gif_Image($into_data,$from_data,$previous_data,$gfi) {
            $into_data = $into_data|0;
            $from_data = $from_data|0;
            $previous_data = $previous_data|0;
            $gfi = $gfi|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[432>>2]|0;
            $1 = HEAP32[436>>2]|0;
            $2 = Math_imul($1, $0)|0;
            $3 = ((($gfi)) + 18|0);
            $4 = HEAP8[$3>>0]|0;
            $5 = ($4<<24>>24)==(3);
            if ($5) {
                $6 = $2 << 2;
                _memcpy(($into_data|0),($previous_data|0),($6|0))|0;
                return;
            }
            $7 = $2 << 2;
            _memcpy(($into_data|0),($from_data|0),($7|0))|0;
            $8 = HEAP8[$3>>0]|0;
            $9 = ($8<<24>>24)==(2);
            if (!($9)) {
                return;
            }
            __ZL17erase_data_area32PjP9Gif_Image($into_data,$gfi);
            return;
        }
        function __ZL26expand_difference_bounds32P11Gif_OptDataP9Gif_Image($bounds,$this_bounds) {
            $bounds = $bounds|0;
            $this_bounds = $this_bounds|0;
            var $$sum = 0, $$sum10 = 0, $$sum12 = 0, $$sum2 = 0, $$sum3 = 0, $$sum6 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
            var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
            var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
            var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
            var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
            var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
            var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
            var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
            var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
            var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
            var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
            var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $expanded$0$ph = 0, $expanded$1$ph = 0, $expanded$2$ph = 0, $expanded$425 = 0, $expanded$5 = 0, $expanded$6 = 0, $ob = 0, $x$046 = 0, $x$141 = 0, $x$222 = 0, $y$036 = 0;
            var $y$130 = 0, $y$226 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ob = sp;
            __ZL11safe_boundsP9Gif_Image($ob,$this_bounds);
            $0 = ((($bounds)) + 4|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = ($1<<16>>16)==(0);
            if ($2) {
                label = 3;
            } else {
                $3 = ((($bounds)) + 6|0);
                $4 = HEAP16[$3>>1]|0;
                $5 = ($4<<16>>16)==(0);
                if ($5) {
                    label = 3;
                }
            }
            if ((label|0) == 3) {
                $6 = ((($bounds)) + 2|0);
                HEAP16[$6>>1] = 0;
                HEAP16[$bounds>>1] = 0;
                $7 = HEAP32[432>>2]|0;
                $8 = $7&65535;
                HEAP16[$0>>1] = $8;
                $9 = HEAP32[436>>2]|0;
                $10 = $9&65535;
                $11 = ((($bounds)) + 6|0);
                HEAP16[$11>>1] = $10;
            }
            $12 = HEAP32[$ob>>2]|0;
            $13 = HEAP16[$bounds>>1]|0;
            $14 = $13&65535;
            $15 = ($12|0)>($14|0);
            if ($15) {
                $16 = ((($ob)) + 8|0);
                $17 = HEAP32[$16>>2]|0;
                $18 = (($12) - ($14))|0;
                $19 = (($18) + ($17))|0;
                HEAP32[$16>>2] = $19;
                $20 = HEAP16[$bounds>>1]|0;
                $21 = $20&65535;
                HEAP32[$ob>>2] = $21;
            }
            $22 = ((($ob)) + 4|0);
            $23 = HEAP32[$22>>2]|0;
            $24 = ((($bounds)) + 2|0);
            $25 = HEAP16[$24>>1]|0;
            $26 = $25&65535;
            $27 = ($23|0)>($26|0);
            if ($27) {
                $28 = ((($ob)) + 12|0);
                $29 = HEAP32[$28>>2]|0;
                $30 = (($23) - ($26))|0;
                $31 = (($30) + ($29))|0;
                HEAP32[$28>>2] = $31;
                $32 = HEAP16[$24>>1]|0;
                $33 = $32&65535;
                HEAP32[$22>>2] = $33;
            }
            $34 = HEAP32[$ob>>2]|0;
            $35 = ((($ob)) + 8|0);
            $36 = HEAP32[$35>>2]|0;
            $37 = (($36) + ($34))|0;
            $38 = HEAP16[$bounds>>1]|0;
            $39 = $38&65535;
            $40 = HEAP16[$0>>1]|0;
            $41 = $40&65535;
            $42 = (($41) + ($39))|0;
            $43 = ($37|0)<($42|0);
            if ($43) {
                $44 = (($42) - ($34))|0;
                HEAP32[$35>>2] = $44;
            }
            $45 = HEAP32[$22>>2]|0;
            $46 = ((($ob)) + 12|0);
            $47 = HEAP32[$46>>2]|0;
            $48 = (($47) + ($45))|0;
            $49 = HEAP16[$24>>1]|0;
            $50 = $49&65535;
            $51 = ((($bounds)) + 6|0);
            $52 = HEAP16[$51>>1]|0;
            $53 = $52&65535;
            $54 = (($53) + ($50))|0;
            $55 = ($48|0)<($54|0);
            if ($55) {
                $56 = (($54) - ($45))|0;
                HEAP32[$46>>2] = $56;
            }
            $57 = HEAP32[$22>>2]|0;
            $58 = HEAP16[$24>>1]|0;
            $59 = $58&65535;
            $60 = ($57|0)<($59|0);
            L18: do {
                if ($60) {
                    $61 = HEAP32[460>>2]|0;
                    $62 = HEAP32[432>>2]|0;
                    $63 = HEAP32[464>>2]|0;
                    $64 = HEAP32[$ob>>2]|0;
                    $65 = HEAP32[$35>>2]|0;
                    $66 = ($65|0)>(0);
                    $67 = (($65) + ($64))|0;
                    $69 = $57;
                    while(1) {
                        $68 = Math_imul($62, $69)|0;
                        if ($66) {
                            $x$046 = $64;
                            while(1) {
                                $$sum12 = (($x$046) + ($68))|0;
                                $70 = (($61) + ($$sum12<<2)|0);
                                $71 = HEAP32[$70>>2]|0;
                                $72 = ($71|0)==(0);
                                if (!($72)) {
                                    $73 = (($63) + ($$sum12<<2)|0);
                                    $74 = HEAP32[$73>>2]|0;
                                    $75 = ($74|0)==(0);
                                    if ($75) {
                                        $expanded$0$ph = 1;
                                        break L18;
                                    }
                                }
                                $93 = (($x$046) + 1)|0;
                                $94 = ($93|0)<($67|0);
                                if ($94) {
                                    $x$046 = $93;
                                } else {
                                    break;
                                }
                            }
                        }
                        $95 = HEAP32[$22>>2]|0;
                        $96 = (($95) + 1)|0;
                        HEAP32[$22>>2] = $96;
                        $97 = HEAP32[$46>>2]|0;
                        $98 = (($97) + -1)|0;
                        HEAP32[$46>>2] = $98;
                        $99 = HEAP32[$22>>2]|0;
                        $100 = HEAP16[$24>>1]|0;
                        $101 = $100&65535;
                        $102 = ($99|0)<($101|0);
                        if ($102) {
                            $69 = $99;
                        } else {
                            $expanded$0$ph = 0;
                            break;
                        }
                    }
                } else {
                    $expanded$0$ph = 0;
                }
            } while(0);
            $76 = HEAP32[$22>>2]|0;
            $77 = HEAP32[$46>>2]|0;
            $78 = (($77) + ($76))|0;
            $79 = HEAP16[$24>>1]|0;
            $80 = $79&65535;
            $81 = HEAP16[$51>>1]|0;
            $82 = $81&65535;
            $83 = (($82) + ($80))|0;
            $84 = ($78|0)>($83|0);
            L30: do {
                if ($84) {
                    $85 = HEAP32[460>>2]|0;
                    $86 = HEAP32[432>>2]|0;
                    $87 = HEAP32[464>>2]|0;
                    $88 = HEAP32[$ob>>2]|0;
                    $89 = HEAP32[$35>>2]|0;
                    $90 = ($89|0)>(0);
                    $91 = HEAP32[$22>>2]|0;
                    $92 = (($89) + ($88))|0;
                    $104 = $78;
                    while(1) {
                        $103 = (($104) + -1)|0;
                        $105 = Math_imul($86, $103)|0;
                        if ($90) {
                            $x$141 = $88;
                            while(1) {
                                $$sum10 = (($x$141) + ($105))|0;
                                $106 = (($85) + ($$sum10<<2)|0);
                                $107 = HEAP32[$106>>2]|0;
                                $108 = ($107|0)==(0);
                                if (!($108)) {
                                    $109 = (($87) + ($$sum10<<2)|0);
                                    $110 = HEAP32[$109>>2]|0;
                                    $111 = ($110|0)==(0);
                                    if ($111) {
                                        $expanded$1$ph = 1;
                                        break L30;
                                    }
                                }
                                $123 = (($x$141) + 1)|0;
                                $124 = ($123|0)<($92|0);
                                if ($124) {
                                    $x$141 = $123;
                                } else {
                                    break;
                                }
                            }
                        }
                        $125 = HEAP32[$46>>2]|0;
                        $126 = (($125) + -1)|0;
                        HEAP32[$46>>2] = $126;
                        $127 = (($126) + ($91))|0;
                        $128 = HEAP16[$24>>1]|0;
                        $129 = $128&65535;
                        $130 = HEAP16[$51>>1]|0;
                        $131 = $130&65535;
                        $132 = (($131) + ($129))|0;
                        $133 = ($127|0)>($132|0);
                        if ($133) {
                            $104 = $127;
                        } else {
                            $expanded$1$ph = $expanded$0$ph;
                            break;
                        }
                    }
                } else {
                    $expanded$1$ph = $expanded$0$ph;
                }
            } while(0);
            $112 = HEAP32[$ob>>2]|0;
            $113 = HEAP16[$bounds>>1]|0;
            $114 = $113&65535;
            $115 = ($112|0)<($114|0);
            L42: do {
                if ($115) {
                    $116 = HEAP32[460>>2]|0;
                    $117 = HEAP32[464>>2]|0;
                    $118 = HEAP32[$22>>2]|0;
                    $119 = HEAP32[$46>>2]|0;
                    $120 = ($119|0)>(0);
                    $121 = HEAP32[432>>2]|0;
                    $122 = (($119) + ($118))|0;
                    $135 = $112;
                    while(1) {
                        if ($120) {
                            $y$036 = $118;
                            while(1) {
                                $134 = Math_imul($121, $y$036)|0;
                                $$sum8 = (($134) + ($135))|0;
                                $136 = (($116) + ($$sum8<<2)|0);
                                $137 = HEAP32[$136>>2]|0;
                                $138 = ($137|0)==(0);
                                if (!($138)) {
                                    $139 = (($117) + ($$sum8<<2)|0);
                                    $140 = HEAP32[$139>>2]|0;
                                    $141 = ($140|0)==(0);
                                    if ($141) {
                                        $expanded$2$ph = 1;
                                        break L42;
                                    }
                                }
                                $159 = (($y$036) + 1)|0;
                                $160 = ($159|0)<($122|0);
                                if ($160) {
                                    $y$036 = $159;
                                } else {
                                    break;
                                }
                            }
                        }
                        $161 = HEAP32[$ob>>2]|0;
                        $162 = (($161) + 1)|0;
                        HEAP32[$ob>>2] = $162;
                        $163 = HEAP32[$35>>2]|0;
                        $164 = (($163) + -1)|0;
                        HEAP32[$35>>2] = $164;
                        $165 = HEAP32[$ob>>2]|0;
                        $166 = HEAP16[$bounds>>1]|0;
                        $167 = $166&65535;
                        $168 = ($165|0)<($167|0);
                        if ($168) {
                            $135 = $165;
                        } else {
                            $expanded$2$ph = $expanded$1$ph;
                            break;
                        }
                    }
                } else {
                    $expanded$2$ph = $expanded$1$ph;
                }
            } while(0);
            $142 = HEAP32[$ob>>2]|0;
            $143 = HEAP32[$35>>2]|0;
            $144 = (($143) + ($142))|0;
            $145 = HEAP16[$bounds>>1]|0;
            $146 = $145&65535;
            $147 = HEAP16[$0>>1]|0;
            $148 = $147&65535;
            $149 = (($148) + ($146))|0;
            $150 = ($144|0)>($149|0);
            L54: do {
                if ($150) {
                    $151 = HEAP32[460>>2]|0;
                    $152 = HEAP32[464>>2]|0;
                    $153 = HEAP32[$22>>2]|0;
                    $154 = HEAP32[$46>>2]|0;
                    $155 = ($154|0)>(0);
                    $156 = HEAP32[$ob>>2]|0;
                    $157 = HEAP32[432>>2]|0;
                    $158 = (($154) + ($153))|0;
                    $169 = $142;$170 = $143;
                    L56: while(1) {
                        if ($155) {
                            $$sum2 = (($169) + -1)|0;
                            $$sum3 = (($$sum2) + ($170))|0;
                            $y$130 = $153;
                            while(1) {
                                $171 = Math_imul($157, $y$130)|0;
                                $$sum6 = (($$sum3) + ($171))|0;
                                $172 = (($151) + ($$sum6<<2)|0);
                                $173 = HEAP32[$172>>2]|0;
                                $174 = ($173|0)==(0);
                                if (!($174)) {
                                    $175 = (($152) + ($$sum6<<2)|0);
                                    $176 = HEAP32[$175>>2]|0;
                                    $177 = ($176|0)==(0);
                                    if ($177) {
                                        $expanded$6 = 1;
                                        break L56;
                                    }
                                }
                                $178 = (($y$130) + 1)|0;
                                $179 = ($178|0)<($158|0);
                                if ($179) {
                                    $y$130 = $178;
                                } else {
                                    break;
                                }
                            }
                        }
                        $180 = HEAP32[$35>>2]|0;
                        $181 = (($180) + -1)|0;
                        HEAP32[$35>>2] = $181;
                        $182 = (($181) + ($156))|0;
                        $183 = HEAP16[$bounds>>1]|0;
                        $184 = $183&65535;
                        $185 = HEAP16[$0>>1]|0;
                        $186 = $185&65535;
                        $187 = (($186) + ($184))|0;
                        $188 = ($182|0)>($187|0);
                        if ($188) {
                            $169 = $156;$170 = $181;
                        } else {
                            break L54;
                        }
                    }
                    $214 = HEAP32[$ob>>2]|0;
                    $215 = $214&65535;
                    HEAP16[$bounds>>1] = $215;
                    $216 = HEAP32[$22>>2]|0;
                    $217 = $216&65535;
                    HEAP16[$24>>1] = $217;
                    $218 = HEAP32[$35>>2]|0;
                    $219 = $218&65535;
                    HEAP16[$0>>1] = $219;
                    $220 = HEAP32[$46>>2]|0;
                    $221 = $220&65535;
                    HEAP16[$51>>1] = $221;
                    STACKTOP = sp;return ($expanded$6|0);
                }
            } while(0);
            $189 = ($expanded$2$ph|0)==(0);
            if (!($189)) {
                $expanded$6 = $expanded$2$ph;
                $214 = HEAP32[$ob>>2]|0;
                $215 = $214&65535;
                HEAP16[$bounds>>1] = $215;
                $216 = HEAP32[$22>>2]|0;
                $217 = $216&65535;
                HEAP16[$24>>1] = $217;
                $218 = HEAP32[$35>>2]|0;
                $219 = $218&65535;
                HEAP16[$0>>1] = $219;
                $220 = HEAP32[$46>>2]|0;
                $221 = $220&65535;
                HEAP16[$51>>1] = $221;
                STACKTOP = sp;return ($expanded$6|0);
            }
            $190 = HEAP32[$46>>2]|0;
            $191 = ($190|0)>(0);
            if (!($191)) {
                $expanded$6 = 0;
                $214 = HEAP32[$ob>>2]|0;
                $215 = $214&65535;
                HEAP16[$bounds>>1] = $215;
                $216 = HEAP32[$22>>2]|0;
                $217 = $216&65535;
                HEAP16[$24>>1] = $217;
                $218 = HEAP32[$35>>2]|0;
                $219 = $218&65535;
                HEAP16[$0>>1] = $219;
                $220 = HEAP32[$46>>2]|0;
                $221 = $220&65535;
                HEAP16[$51>>1] = $221;
                STACKTOP = sp;return ($expanded$6|0);
            }
            $192 = HEAP32[$22>>2]|0;
            $193 = HEAP32[460>>2]|0;
            $194 = HEAP32[432>>2]|0;
            $195 = HEAP32[464>>2]|0;
            $196 = HEAP32[$ob>>2]|0;
            $197 = HEAP32[$35>>2]|0;
            $198 = ($197|0)>(0);
            $199 = HEAP32[$22>>2]|0;
            $200 = HEAP32[$46>>2]|0;
            $201 = (($200) + ($199))|0;
            $202 = (($197) + ($196))|0;
            $expanded$425 = 0;$y$226 = $192;
            while(1) {
                $203 = Math_imul($194, $y$226)|0;
                L76: do {
                    if ($198) {
                        $x$222 = $196;
                        while(1) {
                            $$sum = (($x$222) + ($203))|0;
                            $204 = (($193) + ($$sum<<2)|0);
                            $205 = HEAP32[$204>>2]|0;
                            $206 = ($205|0)==(0);
                            if (!($206)) {
                                $207 = (($195) + ($$sum<<2)|0);
                                $208 = HEAP32[$207>>2]|0;
                                $209 = ($208|0)==(0);
                                if ($209) {
                                    $expanded$5 = 1;
                                    break L76;
                                }
                            }
                            $210 = (($x$222) + 1)|0;
                            $211 = ($210|0)<($202|0);
                            if ($211) {
                                $x$222 = $210;
                            } else {
                                $expanded$5 = $expanded$425;
                                break;
                            }
                        }
                    } else {
                        $expanded$5 = $expanded$425;
                    }
                } while(0);
                $212 = (($y$226) + 1)|0;
                $213 = ($212|0)<($201|0);
                if ($213) {
                    $expanded$425 = $expanded$5;$y$226 = $212;
                } else {
                    $expanded$6 = $expanded$5;
                    break;
                }
            }
            $214 = HEAP32[$ob>>2]|0;
            $215 = $214&65535;
            HEAP16[$bounds>>1] = $215;
            $216 = HEAP32[$22>>2]|0;
            $217 = $216&65535;
            HEAP16[$24>>1] = $217;
            $218 = HEAP32[$35>>2]|0;
            $219 = $218&65535;
            HEAP16[$0>>1] = $219;
            $220 = HEAP32[$46>>2]|0;
            $221 = $220&65535;
            HEAP16[$51>>1] = $221;
            STACKTOP = sp;return ($expanded$6|0);
        }
        function __ZL17get_used_colors32P11Gif_OptDatai($bounds,$use_transparency) {
            $bounds = $bounds|0;
            $use_transparency = $use_transparency|0;
            var $$sum = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
            var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
            var $8 = 0, $9 = 0, $count = 0, $exitcond = 0, $exitcond25 = 0, $exitcond26 = 0, $i$111 = 0, $i$210 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond8 = 0, $x$015 = 0, $y$019 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $count = sp;
            $0 = ((($bounds)) + 2|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($bounds)) + 4|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = ((($bounds)) + 6|0);
            $6 = HEAP16[$5>>1]|0;
            $7 = $6&65535;
            $8 = HEAP32[412>>2]|0;
            $9 = HEAP32[$8>>2]|0;
            $10 = (_Gif_Realloc(0,1,$9,7706,385)|0);
            $11 = ($9|0)>(0);
            if ($11) {
                _memset(($10|0),0,($9|0))|0;
            }
            $12 = (($7) + ($2))|0;
            $13 = ($6<<16>>16)==(0);
            if (!($13)) {
                $14 = ($4<<16>>16)==(0);
                $15 = $4&65535;
                $y$019 = $2;
                while(1) {
                    $16 = HEAP32[460>>2]|0;
                    $17 = HEAP32[432>>2]|0;
                    $18 = Math_imul($17, $y$019)|0;
                    $19 = HEAP16[$bounds>>1]|0;
                    $20 = $19&65535;
                    $$sum = (($20) + ($18))|0;
                    $21 = HEAP32[456>>2]|0;
                    if (!($14)) {
                        $x$015 = 0;
                        while(1) {
                            $$sum5 = (($$sum) + ($x$015))|0;
                            $22 = (($16) + ($$sum5<<2)|0);
                            $23 = HEAP32[$22>>2]|0;
                            $24 = (($21) + ($$sum5<<2)|0);
                            $25 = HEAP32[$24>>2]|0;
                            $26 = ($23|0)==($25|0);
                            $27 = (($10) + ($23)|0);
                            if ($26) {
                                $28 = HEAP8[$27>>0]|0;
                                $29 = ($28<<24>>24)==(0);
                                if ($29) {
                                    HEAP8[$27>>0] = 1;
                                }
                            } else {
                                HEAP8[$27>>0] = 2;
                            }
                            $30 = (($x$015) + 1)|0;
                            $exitcond26 = ($30|0)==($15|0);
                            if ($exitcond26) {
                                break;
                            } else {
                                $x$015 = $30;
                            }
                        }
                    }
                    $31 = (($y$019) + 1)|0;
                    $32 = ($31|0)<($12|0);
                    if ($32) {
                        $y$019 = $31;
                    } else {
                        break;
                    }
                }
            }
            $33 = HEAP8[$10>>0]|0;
            $34 = ($33<<24>>24)==(0);
            if (!($34)) {
                HEAP8[$10>>0] = 2;
            }
            $35 = ((($count)) + 8|0);
            HEAP32[$35>>2] = 0;
            $36 = ((($count)) + 4|0);
            HEAP32[$36>>2] = 0;
            HEAP32[$count>>2] = 0;
            $37 = ($9|0)>(0);
            if ($37) {
                $i$111 = 0;
                while(1) {
                    $38 = (($10) + ($i$111)|0);
                    $39 = HEAP8[$38>>0]|0;
                    $40 = $39&255;
                    $41 = (($count) + ($40<<2)|0);
                    $42 = HEAP32[$41>>2]|0;
                    $43 = (($42) + 1)|0;
                    HEAP32[$41>>2] = $43;
                    $44 = (($i$111) + 1)|0;
                    $exitcond25 = ($44|0)==($9|0);
                    if ($exitcond25) {
                        break;
                    } else {
                        $i$111 = $44;
                    }
                }
            }
            $45 = ($use_transparency|0)>(1);
            if ($45) {
                $46 = HEAP8[$10>>0]|0;
                $47 = ($46<<24>>24)==(0);
                $48 = HEAP32[$35>>2]|0;
                $49 = ($48|0)<(256);
                $or$cond8 = $47 & $49;
                if ($or$cond8) {
                    HEAP8[$10>>0] = 2;
                    $50 = HEAP32[$35>>2]|0;
                    $51 = (($50) + 1)|0;
                    HEAP32[$35>>2] = $51;
                }
            }
            $52 = HEAP32[$36>>2]|0;
            $53 = HEAP32[$35>>2]|0;
            $54 = (($53) + ($52))|0;
            $55 = ($54|0)>(256);
            $56 = ($52|0)>(0);
            $57 = ($use_transparency|0)!=(0);
            $58 = $57 | $55;
            $or$cond = $56 & $58;
            if ($or$cond) {
                $59 = HEAP8[$10>>0]|0;
                $60 = ($59<<24>>24)==(0);
                if ($60) {
                    HEAP8[$10>>0] = 2;
                    $61 = HEAP32[$35>>2]|0;
                    $62 = (($61) + 1)|0;
                    HEAP32[$35>>2] = $62;
                }
            }
            if (!($58)) {
                $63 = ($9|0)>(0);
                if ($63) {
                    $i$210 = 0;
                    while(1) {
                        $64 = (($10) + ($i$210)|0);
                        $65 = HEAP8[$64>>0]|0;
                        $66 = ($65<<24>>24)==(1);
                        if ($66) {
                            HEAP8[$64>>0] = 2;
                        }
                        $67 = (($i$210) + 1)|0;
                        $exitcond = ($67|0)==($9|0);
                        if ($exitcond) {
                            break;
                        } else {
                            $i$210 = $67;
                        }
                    }
                }
                $68 = HEAP32[$36>>2]|0;
                $69 = HEAP32[$35>>2]|0;
                $70 = (($69) + ($68))|0;
                HEAP32[$35>>2] = $70;
            }
            $71 = HEAP32[$35>>2]|0;
            $72 = ($71|0)<(256);
            $or$cond3 = $58 & $72;
            if (!($or$cond3)) {
                $77 = HEAP32[$35>>2]|0;
                $78 = ((($bounds)) + 24|0);
                HEAP32[$78>>2] = $77;
                $79 = ((($bounds)) + 20|0);
                HEAP32[$79>>2] = $10;
                STACKTOP = sp;return;
            }
            $73 = HEAP8[$10>>0]|0;
            $74 = ($73<<24>>24)==(0);
            if (!($74)) {
                $77 = HEAP32[$35>>2]|0;
                $78 = ((($bounds)) + 24|0);
                HEAP32[$78>>2] = $77;
                $79 = ((($bounds)) + 20|0);
                HEAP32[$79>>2] = $10;
                STACKTOP = sp;return;
            }
            HEAP8[$10>>0] = 2;
            $75 = HEAP32[$35>>2]|0;
            $76 = (($75) + 1)|0;
            HEAP32[$35>>2] = $76;
            $77 = HEAP32[$35>>2]|0;
            $78 = ((($bounds)) + 24|0);
            HEAP32[$78>>2] = $77;
            $79 = ((($bounds)) + 20|0);
            HEAP32[$79>>2] = $10;
            STACKTOP = sp;return;
        }
        function __ZL26erase_data_area_subimage32PjP11Gif_OptData($dst,$area) {
            $dst = $dst|0;
            $area = $area|0;
            var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $img = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 80|0;
            $img = sp;
            $0 = HEAP16[$area>>1]|0;
            $1 = ((($img)) + 12|0);
            HEAP16[$1>>1] = $0;
            $2 = ((($area)) + 2|0);
            $3 = HEAP16[$2>>1]|0;
            $4 = ((($img)) + 14|0);
            HEAP16[$4>>1] = $3;
            $5 = ((($area)) + 4|0);
            $6 = HEAP16[$5>>1]|0;
            $7 = ((($img)) + 8|0);
            HEAP16[$7>>1] = $6;
            $8 = ((($area)) + 6|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = ((($img)) + 10|0);
            HEAP16[$10>>1] = $9;
            __ZL17erase_data_area32PjP9Gif_Image($dst,$img);
            STACKTOP = sp;return;
        }
        function __ZL25copy_data_area_subimage32PjS_P11Gif_OptData($dst,$src,$area) {
            $dst = $dst|0;
            $src = $src|0;
            $area = $area|0;
            var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $img = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 80|0;
            $img = sp;
            $0 = HEAP16[$area>>1]|0;
            $1 = ((($img)) + 12|0);
            HEAP16[$1>>1] = $0;
            $2 = ((($area)) + 2|0);
            $3 = HEAP16[$2>>1]|0;
            $4 = ((($img)) + 14|0);
            HEAP16[$4>>1] = $3;
            $5 = ((($area)) + 4|0);
            $6 = HEAP16[$5>>1]|0;
            $7 = ((($img)) + 8|0);
            HEAP16[$7>>1] = $6;
            $8 = ((($area)) + 6|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = ((($img)) + 10|0);
            HEAP16[$10>>1] = $9;
            __ZL16copy_data_area32PjS_P9Gif_Image($dst,$src,$img);
            STACKTOP = sp;return;
        }
        function __ZL16all_colormap_addPK12Gif_Colormap($src) {
            $src = $src|0;
            var $$byval_copy = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
            var $9 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $$byval_copy = sp + 6|0;
            $0 = sp;
            $1 = HEAP32[412>>2]|0;
            $2 = HEAP32[$1>>2]|0;
            $3 = HEAP32[$src>>2]|0;
            $4 = (($3) + ($2))|0;
            $5 = ((($1)) + 4|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = ($4|0)<($6|0);
            if ($7) {
                $17 = $3;
            } else {
                $8 = $6 << 1;
                HEAP32[$5>>2] = $8;
                $9 = HEAP32[412>>2]|0;
                $10 = ((($9)) + 16|0);
                $11 = HEAP32[$10>>2]|0;
                $12 = ((($9)) + 4|0);
                $13 = HEAP32[$12>>2]|0;
                $14 = (_Gif_Realloc($11,8,$13,7693,102)|0);
                $15 = HEAP32[412>>2]|0;
                $16 = ((($15)) + 16|0);
                HEAP32[$16>>2] = $14;
                $$pr = HEAP32[$src>>2]|0;
                $17 = $$pr;
            }
            $18 = ($17|0)>(0);
            if (!($18)) {
                STACKTOP = sp;return;
            }
            $19 = ((($src)) + 16|0);
            $i$01 = 0;
            while(1) {
                $20 = HEAP32[$19>>2]|0;
                $21 = (($20) + ($i$01<<3)|0);
                __ZL12kc_makegfcngPK9Gif_Color($0,$21);
                ;HEAP16[$$byval_copy>>1]=HEAP16[$0>>1]|0;HEAP16[$$byval_copy+2>>1]=HEAP16[$0+2>>1]|0;HEAP16[$$byval_copy+4>>1]=HEAP16[$0+4>>1]|0;
                $22 = (__Z10kchist_addP6kchist6kcolorj(468,$$byval_copy,0)|0);
                $23 = ((($22)) + 8|0);
                $24 = HEAP32[$23>>2]|0;
                $25 = ($24|0)==(0);
                if ($25) {
                    $26 = HEAP32[412>>2]|0;
                    $27 = HEAP32[$26>>2]|0;
                    $28 = ((($26)) + 16|0);
                    $29 = HEAP32[$28>>2]|0;
                    $30 = HEAP32[$19>>2]|0;
                    $31 = (($29) + ($27<<3)|0);
                    $32 = (($30) + ($i$01<<3)|0);
                    $33 = $32;
                    $34 = $33;
                    $35 = HEAP32[$34>>2]|0;
                    $36 = (($33) + 4)|0;
                    $37 = $36;
                    $38 = HEAP32[$37>>2]|0;
                    $39 = $31;
                    $40 = $39;
                    HEAP32[$40>>2] = $35;
                    $41 = (($39) + 4)|0;
                    $42 = $41;
                    HEAP32[$42>>2] = $38;
                    $43 = HEAP32[412>>2]|0;
                    $44 = HEAP32[$43>>2]|0;
                    $45 = ((($43)) + 16|0);
                    $46 = HEAP32[$45>>2]|0;
                    $47 = (((($46) + ($44<<3)|0)) + 4|0);
                    HEAP32[$47>>2] = 0;
                    $48 = HEAP32[412>>2]|0;
                    $49 = HEAP32[$48>>2]|0;
                    HEAP32[$23>>2] = $49;
                    $50 = HEAP32[412>>2]|0;
                    $51 = HEAP32[$50>>2]|0;
                    $52 = (($51) + 1)|0;
                    HEAP32[$50>>2] = $52;
                }
                $53 = HEAP32[$23>>2]|0;
                $54 = HEAP32[$19>>2]|0;
                $55 = (((($54) + ($i$01<<3)|0)) + 4|0);
                HEAP32[$55>>2] = $53;
                $56 = (($i$01) + 1)|0;
                $57 = HEAP32[$src>>2]|0;
                $58 = ($56|0)<($57|0);
                if ($58) {
                    $i$01 = $56;
                } else {
                    break;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL12kc_makegfcngPK9Gif_Color($agg$result,$gfc) {
            $agg$result = $agg$result|0;
            $gfc = $gfc|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfc)) + 1|0);
            $1 = HEAP8[$0>>0]|0;
            $2 = $1&255;
            $3 = ((($gfc)) + 2|0);
            $4 = HEAP8[$3>>0]|0;
            $5 = $4&255;
            $6 = ((($gfc)) + 3|0);
            $7 = HEAP8[$6>>0]|0;
            $8 = $7&255;
            __ZL10kc_make8ngiii($agg$result,$2,$5,$8);
            return;
        }
        function __ZL10kc_make8ngiii($agg$result,$a0,$a1,$a2) {
            $agg$result = $agg$result|0;
            $a0 = $a0|0;
            $a1 = $a1|0;
            $a2 = $a2|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = $a0 << 7;
            $1 = $a0 >>> 1;
            $2 = (($0) + ($1))|0;
            $3 = $2&65535;
            HEAP16[$agg$result>>1] = $3;
            $4 = $a1 << 7;
            $5 = $a1 >>> 1;
            $6 = (($4) + ($5))|0;
            $7 = $6&65535;
            $8 = ((($agg$result)) + 2|0);
            HEAP16[$8>>1] = $7;
            $9 = $a2 << 7;
            $10 = $a2 >>> 1;
            $11 = (($9) + ($10))|0;
            $12 = $11&65535;
            $13 = ((($agg$result)) + 4|0);
            HEAP16[$13>>1] = $12;
            return;
        }
        function __Z21kc_revgamma_transformP6kcolor($x) {
            $x = $x|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$0$1 = 0, $c$0$1$lcssa = 0, $c$0$2 = 0, $c$0$2$lcssa = 0, $c$0$lcssa = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[(484)>>2]|0;
            $1 = HEAP32[480>>2]|0;
            $2 = HEAP16[$x>>1]|0;
            $3 = $2 << 16 >> 16;
            $4 = $3 >> 7;
            $5 = (($0) + ($4<<1)|0);
            $6 = HEAP16[$5>>1]|0;
            $7 = $6&65535;
            $c$0 = $7;
            while(1) {
                $8 = ($c$0|0)<(32640);
                if (!($8)) {
                    $c$0$lcssa = $c$0;
                    break;
                }
                $9 = HEAP16[$x>>1]|0;
                $10 = $9 << 16 >> 16;
                $11 = (($c$0) + 128)|0;
                $12 = $11 >> 7;
                $13 = (($1) + ($12<<1)|0);
                $14 = HEAP16[$13>>1]|0;
                $15 = $14&65535;
                $16 = ($10|0)<($15|0);
                if ($16) {
                    $c$0$lcssa = $c$0;
                    break;
                } else {
                    $c$0 = $11;
                }
            }
            $17 = $c$0$lcssa&65535;
            HEAP16[$x>>1] = $17;
            $18 = ((($x)) + 2|0);
            $19 = HEAP16[$18>>1]|0;
            $20 = $19 << 16 >> 16;
            $21 = $20 >> 7;
            $22 = (($0) + ($21<<1)|0);
            $23 = HEAP16[$22>>1]|0;
            $24 = $23&65535;
            $c$0$1 = $24;
            while(1) {
                $25 = ($c$0$1|0)<(32640);
                if (!($25)) {
                    $c$0$1$lcssa = $c$0$1;
                    break;
                }
                $26 = HEAP16[$18>>1]|0;
                $27 = $26 << 16 >> 16;
                $28 = (($c$0$1) + 128)|0;
                $29 = $28 >> 7;
                $30 = (($1) + ($29<<1)|0);
                $31 = HEAP16[$30>>1]|0;
                $32 = $31&65535;
                $33 = ($27|0)<($32|0);
                if ($33) {
                    $c$0$1$lcssa = $c$0$1;
                    break;
                } else {
                    $c$0$1 = $28;
                }
            }
            $34 = $c$0$1$lcssa&65535;
            HEAP16[$18>>1] = $34;
            $35 = ((($x)) + 4|0);
            $36 = HEAP16[$35>>1]|0;
            $37 = $36 << 16 >> 16;
            $38 = $37 >> 7;
            $39 = (($0) + ($38<<1)|0);
            $40 = HEAP16[$39>>1]|0;
            $41 = $40&65535;
            $c$0$2 = $41;
            while(1) {
                $42 = ($c$0$2|0)<(32640);
                if (!($42)) {
                    $c$0$2$lcssa = $c$0$2;
                    label = 10;
                    break;
                }
                $43 = HEAP16[$35>>1]|0;
                $44 = $43 << 16 >> 16;
                $45 = (($c$0$2) + 128)|0;
                $46 = $45 >> 7;
                $47 = (($1) + ($46<<1)|0);
                $48 = HEAP16[$47>>1]|0;
                $49 = $48&65535;
                $50 = ($44|0)<($49|0);
                if ($50) {
                    $c$0$2$lcssa = $c$0$2;
                    label = 10;
                    break;
                } else {
                    $c$0$2 = $45;
                }
            }
            if ((label|0) == 10) {
                $51 = $c$0$2$lcssa&65535;
                HEAP16[$35>>1] = $51;
                return;
            }
        }
        function __Z12kc_set_gammaid($type,$gamma) {
            $type = $type|0;
            $gamma = +$gamma;
            var $$lcssa = 0, $$lcssa12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0;
            var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$07 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond3$1 = 0, $or$cond3$110 = 0;
            var $or$cond39 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[488>>2]|0;
            $1 = ($0|0)==($type|0);
            if ($1) {
                $2 = ($type|0)!=(1);
                $3 = +HEAPF64[8>>3];
                $4 = $3 == $gamma;
                $or$cond = $2 | $4;
                if ($or$cond) {
                    return;
                }
            }
            $5 = ($type|0)==(0);
            $6 = HEAP32[480>>2]|0;
            $7 = ($6|0)==(4476|0);
            if ($5) {
                if (!($7)) {
                    _free($6);
                    $8 = HEAP32[(484)>>2]|0;
                    _free($8);
                }
                HEAP32[480>>2] = 4476;
                HEAP32[(484)>>2] = 4988;
            } else {
                if ($7) {
                    $9 = (_Gif_Realloc(0,2,256,8037,131)|0);
                    HEAP32[480>>2] = $9;
                    $10 = (_Gif_Realloc(0,2,256,8037,132)|0);
                    HEAP32[(484)>>2] = $10;
                }
                $11 = HEAP32[480>>2]|0;
                $12 = 1.0 / $gamma;
                $13 = HEAP32[(484)>>2]|0;
                $j$07 = 0;
                while(1) {
                    $14 = (+($j$07|0));
                    $15 = $14 / 255.0;
                    $16 = (+Math_pow((+$15),(+$gamma)));
                    $17 = $16 * 32767.0;
                    $18 = $17 + 0.5;
                    $19 = (~~(($18)));
                    $20 = $19&65535;
                    $21 = (($11) + ($j$07<<1)|0);
                    HEAP16[$21>>1] = $20;
                    $22 = $14 * 0.00390625;
                    $23 = (+Math_pow((+$22),(+$12)));
                    $24 = $23 * 32767.0;
                    $25 = $24 + 0.5;
                    $26 = (~~(($25)));
                    $27 = $26&65535;
                    $28 = (($13) + ($j$07<<1)|0);
                    HEAP16[$28>>1] = $27;
                    $29 = ($j$07|0)==(0);
                    $30 = (($j$07) + -1)|0;
                    if ($29) {
                        $j$07 = 1;
                        continue;
                    }
                    $31 = (($11) + ($j$07<<1)|0);
                    $32 = (($11) + ($30<<1)|0);
                    $33 = HEAP16[$32>>1]|0;
                    $34 = HEAP16[$31>>1]|0;
                    $35 = ($34&65535)<=($33&65535);
                    $36 = ($34&65535)<(32767);
                    $or$cond39 = $36 & $35;
                    if ($or$cond39) {
                        $38 = $34;
                        while(1) {
                            $37 = (($38) + 1)<<16>>16;
                            $39 = ($37&65535)<=($33&65535);
                            $40 = ($37&65535)<(32767);
                            $or$cond3 = $40 & $39;
                            if ($or$cond3) {
                                $38 = $37;
                            } else {
                                $$lcssa = $37;
                                break;
                            }
                        }
                        HEAP16[$31>>1] = $$lcssa;
                    }
                    $41 = (($13) + ($j$07<<1)|0);
                    $42 = (($13) + ($30<<1)|0);
                    $43 = HEAP16[$42>>1]|0;
                    $44 = HEAP16[$41>>1]|0;
                    $45 = ($44&65535)<=($43&65535);
                    $46 = ($44&65535)<(32767);
                    $or$cond3$110 = $46 & $45;
                    if ($or$cond3$110) {
                        $48 = $44;
                        while(1) {
                            $47 = (($48) + 1)<<16>>16;
                            $49 = ($47&65535)<=($43&65535);
                            $50 = ($47&65535)<(32767);
                            $or$cond3$1 = $50 & $49;
                            if ($or$cond3$1) {
                                $48 = $47;
                            } else {
                                $$lcssa12 = $47;
                                break;
                            }
                        }
                        HEAP16[$41>>1] = $$lcssa12;
                    }
                    $51 = (($j$07) + 1)|0;
                    $52 = ($51|0)==(256);
                    if ($52) {
                        break;
                    } else {
                        $j$07 = $51;
                    }
                }
            }
            HEAP32[488>>2] = $type;
            HEAPF64[8>>3] = $gamma;
            return;
        }
        function __Z11kchist_initP6kchist($kch) {
            $kch = $kch|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Gif_Realloc(0,12,4093,8037,198)|0);
            HEAP32[$kch>>2] = $0;
            $1 = ((($kch)) + 4|0);
            HEAP32[$1>>2] = 0;
            $2 = ((($kch)) + 8|0);
            HEAP32[$2>>2] = 4093;
            $3 = HEAP32[$kch>>2]|0;
            $i$01 = 0;
            while(1) {
                $4 = (((($3) + (($i$01*12)|0)|0)) + 8|0);
                HEAP32[$4>>2] = 0;
                $5 = (($i$01) + 1)|0;
                $6 = ($5|0)==(4093);
                if ($6) {
                    break;
                } else {
                    $i$01 = $5;
                }
            }
            return;
        }
        function __Z14kchist_cleanupP6kchist($kch) {
            $kch = $kch|0;
            var $0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$kch>>2]|0;
            _free($0);
            HEAP32[$kch>>2] = 0;
            return;
        }
        function __Z10kchist_addP6kchist6kcolorj($kch,$k,$count) {
            $kch = $kch|0;
            $k = $k|0;
            $count = $count|0;
            var $$ = 0, $$1 = 0, $$lcssa = 0, $$lcssa30 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
            var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
            var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
            var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
            var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $hash1$06 = 0, $hash2$05 = 0, $hash2$1 = 0, $ka = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ka = sp;
            ;HEAP16[$ka>>1]=HEAP16[$k>>1]|0;HEAP16[$ka+2>>1]=HEAP16[$k+2>>1]|0;HEAP16[$ka+4>>1]=HEAP16[$k+4>>1]|0;
            $0 = ((($ka)) + 6|0);
            HEAP16[$0>>1] = 0;
            $1 = ((($kch)) + 8|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)==(0);
            if ($3) {
                label = 3;
            } else {
                $4 = ((($kch)) + 4|0);
                $5 = HEAP32[$4>>2]|0;
                $6 = ($2*3)|0;
                $7 = $6 >> 4;
                $8 = ($5|0)>($7|0);
                if ($8) {
                    label = 3;
                }
            }
            if ((label|0) == 3) {
                __ZL11kchist_growP6kchist($kch);
            }
            $9 = HEAP16[$ka>>1]|0;
            $10 = $9&65535;
            $11 = $10 << 15;
            $12 = $11 & 1072693248;
            $13 = ((($ka)) + 2|0);
            $14 = HEAP16[$13>>1]|0;
            $15 = $14&65535;
            $16 = $15 << 5;
            $17 = $16 & 1047552;
            $18 = $17 | $12;
            $19 = ((($ka)) + 4|0);
            $20 = HEAP16[$19>>1]|0;
            $21 = $20&65535;
            $22 = $21 >>> 5;
            $23 = $22 & 1023;
            $24 = $18 | $23;
            $25 = HEAP32[$1>>2]|0;
            $26 = (($24|0) % ($25|0))&-1;
            $27 = HEAP32[$kch>>2]|0;
            $28 = (($27) + (($26*12)|0)|0);
            $29 = (((($27) + (($26*12)|0)|0)) + 8|0);
            $30 = HEAP32[$29>>2]|0;
            $31 = ($30|0)==(0);
            L6: do {
                if ($31) {
                    $69 = $28;$82 = $29;
                } else {
                    $32 = HEAP16[$ka>>1]|0;
                    $33 = $32&65535;
                    $34 = $33 << 20;
                    $35 = $34 & 1072693248;
                    $36 = HEAP16[$13>>1]|0;
                    $37 = $36&65535;
                    $38 = $37 << 10;
                    $39 = $38 & 1047552;
                    $40 = $39 | $35;
                    $41 = HEAP16[$19>>1]|0;
                    $42 = $41&65535;
                    $43 = $42 & 1023;
                    $44 = $40 | $43;
                    $45 = $28;$83 = $29;$hash1$06 = $26;$hash2$05 = 0;
                    while(1) {
                        $46 = (_memcmp($45,$ka,8)|0);
                        $47 = ($46|0)==(0);
                        if ($47) {
                            $$lcssa = $83;$$lcssa30 = $45;
                            break;
                        }
                        $48 = ($hash2$05|0)==(0);
                        if ($48) {
                            $49 = HEAP32[$1>>2]|0;
                            $50 = (($44|0) % ($49|0))&-1;
                            $51 = ($50|0)!=(0);
                            $52 = $51 ? $50 : 1;
                            $hash2$1 = $52;
                        } else {
                            $hash2$1 = $hash2$05;
                        }
                        $53 = (($hash2$1) + ($hash1$06))|0;
                        $54 = HEAP32[$1>>2]|0;
                        $55 = ($53>>>0)<($54>>>0);
                        $56 = $55 ? 0 : $54;
                        $$ = (($53) - ($56))|0;
                        $57 = HEAP32[$kch>>2]|0;
                        $58 = (($57) + (($$*12)|0)|0);
                        $59 = (((($57) + (($$*12)|0)|0)) + 8|0);
                        $60 = HEAP32[$59>>2]|0;
                        $61 = ($60|0)==(0);
                        if ($61) {
                            $69 = $58;$82 = $59;
                            break L6;
                        } else {
                            $45 = $58;$83 = $59;$hash1$06 = $$;$hash2$05 = $hash2$1;
                        }
                    }
                    $$pr = HEAP32[$$lcssa>>2]|0;
                    $62 = ($$pr|0)==(0);
                    if ($62) {
                        $69 = $$lcssa30;$82 = $$lcssa;
                    } else {
                        $78 = $$lcssa;$81 = $$lcssa30;
                        $77 = HEAP32[$78>>2]|0;
                        $79 = (($77) + ($count))|0;
                        $80 = ($79>>>0)<($count>>>0);
                        $$1 = $80 ? -1 : $79;
                        HEAP32[$78>>2] = $$1;
                        STACKTOP = sp;return ($81|0);
                    }
                }
            } while(0);
            $63 = $ka;
            $64 = $63;
            $65 = HEAP32[$64>>2]|0;
            $66 = (($63) + 4)|0;
            $67 = $66;
            $68 = HEAP32[$67>>2]|0;
            $70 = $69;
            $71 = $70;
            HEAP16[$71>>1]=$65&65535;HEAP16[$71+2>>1]=$65>>>16;
            $72 = (($70) + 4)|0;
            $73 = $72;
            HEAP16[$73>>1]=$68&65535;HEAP16[$73+2>>1]=$68>>>16;
            $74 = ((($kch)) + 4|0);
            $75 = HEAP32[$74>>2]|0;
            $76 = (($75) + 1)|0;
            HEAP32[$74>>2] = $76;
            $78 = $82;$81 = $69;
            $77 = HEAP32[$78>>2]|0;
            $79 = (($77) + ($count))|0;
            $80 = ($79>>>0)<($count>>>0);
            $$1 = $80 ? -1 : $79;
            HEAP32[$78>>2] = $$1;
            STACKTOP = sp;return ($81|0);
        }
        function __Z15kchist_compressP6kchist($kch) {
            $kch = $kch|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
            var $i$0$ph$be = 0, $i$0$ph6 = 0, $j$0$ph$be = 0, $j$0$ph7 = 0, $j$05 = 0, $j$05$lcssa19 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($kch)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0);
            if ($2) {
                $19 = ((($kch)) + 8|0);
                HEAP32[$19>>2] = 0;
                return;
            }
            $3 = HEAP32[$0>>2]|0;
            $i$0$ph6 = 0;$j$0$ph7 = $3;
            L4: while(1) {
                $4 = HEAP32[$kch>>2]|0;
                $5 = (((($4) + (($i$0$ph6*12)|0)|0)) + 8|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = ($6|0)==(0);
                $j$05 = $j$0$ph7;
                while(1) {
                    if (!($7)) {
                        $j$0$ph$be = $j$05;
                        break;
                    }
                    $10 = (((($4) + (($j$05*12)|0)|0)) + 8|0);
                    $11 = HEAP32[$10>>2]|0;
                    $12 = ($11|0)==(0);
                    if (!($12)) {
                        $j$05$lcssa19 = $j$05;
                        label = 7;
                        break;
                    }
                    $16 = (($j$05) + 1)|0;
                    $17 = HEAP32[$0>>2]|0;
                    $18 = ($i$0$ph6|0)==($17|0);
                    if ($18) {
                        label = 9;
                        break L4;
                    } else {
                        $j$05 = $16;
                    }
                }
                if ((label|0) == 7) {
                    label = 0;
                    $13 = (($4) + (($i$0$ph6*12)|0)|0);
                    $14 = (($4) + (($j$05$lcssa19*12)|0)|0);
                    ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;
                    $15 = (($j$05$lcssa19) + 1)|0;
                    $j$0$ph$be = $15;
                }
                $i$0$ph$be = (($i$0$ph6) + 1)|0;
                $8 = HEAP32[$0>>2]|0;
                $9 = ($i$0$ph$be|0)==($8|0);
                if ($9) {
                    label = 9;
                    break;
                } else {
                    $i$0$ph6 = $i$0$ph$be;$j$0$ph7 = $j$0$ph$be;
                }
            }
            if ((label|0) == 9) {
                $19 = ((($kch)) + 8|0);
                HEAP32[$19>>2] = 0;
                return;
            }
        }
        function __Z11kchist_makeP6kchistP10Gif_StreamPj($kch,$gfs,$ntransp_store) {
            $kch = $kch|0;
            $gfs = $gfs|0;
            $ntransp_store = $ntransp_store|0;
            var $$byval_copy1 = 0, $$lcssa13 = 0, $$ph = 0, $$ph10 = 0, $$ph9 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
            var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
            var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
            var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
            var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
            var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
            var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data$017 = 0, $gcount = 0, $i$222 = 0, $i$314 = 0, $imagei$024 = 0, $lcount = 0, $lcount$gcount = 0, $lcount$gcount23 = 0, $lcount$gcount24$ph = 0;
            var $nbackground$0$lcssa = 0, $nbackground$026 = 0, $nbackground$1 = 0, $nbackground$2 = 0, $ntransparent$0$lcssa = 0, $ntransparent$025 = 0, $ntransparent$1 = 0, $ntransparent$2 = 0, $ntransparent$3 = 0, $old_transparent_count$0 = 0, $x$016 = 0, $y$019 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 2080|0;
            $$byval_copy1 = sp + 2060|0;
            $gcount = sp + 1024|0;
            $lcount = sp;
            $0 = sp + 2054|0;
            $1 = sp + 2048|0;
            __Z11kchist_initP6kchist($kch);
            _memset(($gcount|0),0,1024)|0;
            $2 = ((($gfs)) + 4|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($3|0)>(0);
            $5 = HEAP32[$gfs>>2]|0;
            if ($4) {
                $6 = ((($gfs)) + 12|0);
                $8 = $5;$imagei$024 = 0;$nbackground$026 = 0;$ntransparent$025 = 0;
                while(1) {
                    $7 = (($8) + ($imagei$024<<2)|0);
                    $9 = HEAP32[$7>>2]|0;
                    $10 = ((($9)) + 24|0);
                    $11 = HEAP32[$10>>2]|0;
                    $12 = ($11|0)==(0|0);
                    if ($12) {
                        $15 = HEAP32[$6>>2]|0;
                        $$pr = HEAP32[$10>>2]|0;
                        $16 = ($$pr|0)!=(0|0);
                        $lcount$gcount = $16 ? $lcount : $gcount;
                        $17 = HEAP32[$9>>2]|0;
                        $18 = ($17|0)==(0|0);
                        $19 = ($15|0)==(0|0);
                        if ($19) {
                            $nbackground$2 = $nbackground$026;$ntransparent$2 = $ntransparent$025;
                        } else {
                            if ($16) {
                                $$ph = $15;$$ph10 = $18;$$ph9 = $9;$lcount$gcount24$ph = $lcount$gcount;
                                label = 7;
                            } else {
                                $124 = $18;$33 = $9;$53 = $15;$lcount$gcount23 = $lcount$gcount;
                                label = 8;
                            }
                        }
                    } else {
                        $13 = HEAP32[$9>>2]|0;
                        $14 = ($13|0)==(0|0);
                        $$ph = $11;$$ph10 = $14;$$ph9 = $9;$lcount$gcount24$ph = $lcount;
                        label = 7;
                    }
                    if ((label|0) == 7) {
                        label = 0;
                        _memset(($lcount$gcount24$ph|0),0,1024)|0;
                        $124 = $$ph10;$33 = $$ph9;$53 = $$ph;$lcount$gcount23 = $lcount$gcount24$ph;
                        label = 8;
                    }
                    if ((label|0) == 8) {
                        label = 0;
                        $20 = ((($9)) + 20|0);
                        $21 = HEAP16[$20>>1]|0;
                        $22 = ($21<<16>>16)>(-1);
                        if ($22) {
                            $23 = $21 << 16 >> 16;
                            $24 = (($lcount$gcount23) + ($23<<2)|0);
                            $25 = HEAP32[$24>>2]|0;
                            $old_transparent_count$0 = $25;
                        } else {
                            $old_transparent_count$0 = 0;
                        }
                        if ($124) {
                            (_Gif_FullUncompressImage($gfs,$9,0)|0);
                        }
                        $26 = ((($9)) + 10|0);
                        $27 = HEAP16[$26>>1]|0;
                        $28 = ($27<<16>>16)==(0);
                        if (!($28)) {
                            $29 = ((($9)) + 8|0);
                            $y$019 = 0;
                            while(1) {
                                $30 = HEAP16[$29>>1]|0;
                                $31 = ($30<<16>>16)==(0);
                                if (!($31)) {
                                    $32 = HEAP32[$33>>2]|0;
                                    $34 = (($32) + ($y$019<<2)|0);
                                    $35 = HEAP32[$34>>2]|0;
                                    $data$017 = $35;$x$016 = 0;
                                    while(1) {
                                        $36 = HEAP8[$data$017>>0]|0;
                                        $37 = $36&255;
                                        $38 = (($lcount$gcount23) + ($37<<2)|0);
                                        $39 = HEAP32[$38>>2]|0;
                                        $40 = (($39) + 1)|0;
                                        HEAP32[$38>>2] = $40;
                                        $41 = (($x$016) + 1)|0;
                                        $42 = ((($data$017)) + 1|0);
                                        $43 = HEAP16[$29>>1]|0;
                                        $44 = $43&65535;
                                        $45 = ($41|0)<($44|0);
                                        if ($45) {
                                            $data$017 = $42;$x$016 = $41;
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                $46 = (($y$019) + 1)|0;
                                $47 = HEAP16[$26>>1]|0;
                                $48 = $47&65535;
                                $49 = ($46|0)<($48|0);
                                if ($49) {
                                    $y$019 = $46;
                                } else {
                                    break;
                                }
                            }
                        }
                        $50 = HEAP32[$10>>2]|0;
                        $51 = ($50|0)==(0|0);
                        if (!($51)) {
                            $52 = HEAP32[$53>>2]|0;
                            $54 = ($52|0)==(0);
                            if (!($54)) {
                                $55 = ((($53)) + 16|0);
                                $i$222 = 0;
                                while(1) {
                                    $56 = (($lcount$gcount23) + ($i$222<<2)|0);
                                    $57 = HEAP32[$56>>2]|0;
                                    $58 = ($57|0)==(0);
                                    if (!($58)) {
                                        $59 = HEAP16[$20>>1]|0;
                                        $60 = $59 << 16 >> 16;
                                        $61 = ($i$222|0)==($60|0);
                                        if (!($61)) {
                                            $62 = HEAP32[$55>>2]|0;
                                            $63 = (($62) + ($i$222<<3)|0);
                                            __ZL11kc_makegfcgPK9Gif_Color($0,$63);
                                            $64 = HEAP32[$56>>2]|0;
                                            ;HEAP16[$$byval_copy1>>1]=HEAP16[$0>>1]|0;HEAP16[$$byval_copy1+2>>1]=HEAP16[$0+2>>1]|0;HEAP16[$$byval_copy1+4>>1]=HEAP16[$0+4>>1]|0;
                                            (__Z10kchist_addP6kchist6kcolorj($kch,$$byval_copy1,$64)|0);
                                        }
                                    }
                                    $65 = (($i$222) + 1)|0;
                                    $66 = HEAP32[$53>>2]|0;
                                    $67 = ($65|0)==($66|0);
                                    if ($67) {
                                        break;
                                    } else {
                                        $i$222 = $65;
                                    }
                                }
                            }
                        }
                        $68 = HEAP16[$20>>1]|0;
                        $69 = ($68<<16>>16)>(-1);
                        if ($69) {
                            $70 = $68 << 16 >> 16;
                            $71 = (($lcount$gcount23) + ($70<<2)|0);
                            $72 = HEAP32[$71>>2]|0;
                            $73 = ($72|0)==($old_transparent_count$0|0);
                            if ($73) {
                                $ntransparent$1 = $ntransparent$025;
                            } else {
                                $74 = (($ntransparent$025) - ($old_transparent_count$0))|0;
                                $75 = (($74) + ($72))|0;
                                HEAP32[$71>>2] = $old_transparent_count$0;
                                $ntransparent$1 = $75;
                            }
                        } else {
                            $ntransparent$1 = $ntransparent$025;
                        }
                        $76 = ((($9)) + 18|0);
                        $77 = HEAP8[$76>>0]|0;
                        $78 = ($77<<24>>24)==(2);
                        if ($78) {
                            $79 = ((($9)) + 8|0);
                            $80 = HEAP16[$79>>1]|0;
                            $81 = $80&65535;
                            $82 = HEAP16[$26>>1]|0;
                            $83 = $82&65535;
                            $84 = Math_imul($83, $81)|0;
                            $85 = (($84) + ($nbackground$026))|0;
                            $nbackground$1 = $85;
                        } else {
                            $nbackground$1 = $nbackground$026;
                        }
                        if ($124) {
                            _Gif_ReleaseUncompressedImage($9);
                            $nbackground$2 = $nbackground$1;$ntransparent$2 = $ntransparent$1;
                        } else {
                            $nbackground$2 = $nbackground$1;$ntransparent$2 = $ntransparent$1;
                        }
                    }
                    $86 = (($imagei$024) + 1)|0;
                    $87 = HEAP32[$2>>2]|0;
                    $88 = ($86|0)<($87|0);
                    $89 = HEAP32[$gfs>>2]|0;
                    if ($88) {
                        $8 = $89;$imagei$024 = $86;$nbackground$026 = $nbackground$2;$ntransparent$025 = $ntransparent$2;
                    } else {
                        $$lcssa13 = $89;$nbackground$0$lcssa = $nbackground$2;$ntransparent$0$lcssa = $ntransparent$2;
                        break;
                    }
                }
            } else {
                $$lcssa13 = $5;$nbackground$0$lcssa = 0;$ntransparent$0$lcssa = 0;
            }
            $90 = HEAP32[$$lcssa13>>2]|0;
            $91 = ((($90)) + 20|0);
            $92 = HEAP16[$91>>1]|0;
            $93 = ($92<<16>>16)<(0);
            if ($93) {
                $94 = ((($gfs)) + 12|0);
                $95 = HEAP32[$94>>2]|0;
                $96 = ($95|0)==(0|0);
                if ($96) {
                    label = 37;
                } else {
                    $97 = ((($gfs)) + 16|0);
                    $98 = HEAP16[$97>>1]|0;
                    $99 = $98&65535;
                    $100 = HEAP32[$95>>2]|0;
                    $101 = ($99|0)<($100|0);
                    if ($101) {
                        $102 = (($gcount) + ($99<<2)|0);
                        $103 = HEAP32[$102>>2]|0;
                        $104 = (($103) + ($nbackground$0$lcssa))|0;
                        HEAP32[$102>>2] = $104;
                        $ntransparent$3 = $ntransparent$0$lcssa;
                    } else {
                        label = 37;
                    }
                }
            } else {
                label = 37;
            }
            if ((label|0) == 37) {
                $105 = (($nbackground$0$lcssa) + ($ntransparent$0$lcssa))|0;
                $ntransparent$3 = $105;
            }
            $106 = ((($gfs)) + 12|0);
            $107 = HEAP32[$106>>2]|0;
            $108 = ($107|0)==(0|0);
            if ($108) {
                __Z15kchist_compressP6kchist($kch);
                HEAP32[$ntransp_store>>2] = $ntransparent$3;
                STACKTOP = sp;return;
            }
            $109 = HEAP32[$106>>2]|0;
            $110 = HEAP32[$109>>2]|0;
            $111 = ($110|0)==(0);
            if ($111) {
                __Z15kchist_compressP6kchist($kch);
                HEAP32[$ntransp_store>>2] = $ntransparent$3;
                STACKTOP = sp;return;
            } else {
                $116 = $109;$i$314 = 0;
            }
            while(1) {
                $112 = (($gcount) + ($i$314<<2)|0);
                $113 = HEAP32[$112>>2]|0;
                $114 = ($113|0)==(0);
                if (!($114)) {
                    $115 = ((($116)) + 16|0);
                    $117 = HEAP32[$115>>2]|0;
                    $118 = (($117) + ($i$314<<3)|0);
                    __ZL11kc_makegfcgPK9Gif_Color($1,$118);
                    $119 = HEAP32[$112>>2]|0;
                    ;HEAP16[$$byval_copy1>>1]=HEAP16[$1>>1]|0;HEAP16[$$byval_copy1+2>>1]=HEAP16[$1+2>>1]|0;HEAP16[$$byval_copy1+4>>1]=HEAP16[$1+4>>1]|0;
                    (__Z10kchist_addP6kchist6kcolorj($kch,$$byval_copy1,$119)|0);
                }
                $120 = (($i$314) + 1)|0;
                $121 = HEAP32[$106>>2]|0;
                $122 = HEAP32[$121>>2]|0;
                $123 = ($120|0)==($122|0);
                if ($123) {
                    break;
                } else {
                    $116 = $121;$i$314 = $120;
                }
            }
            __Z15kchist_compressP6kchist($kch);
            HEAP32[$ntransp_store>>2] = $ntransparent$3;
            STACKTOP = sp;return;
        }
        function __Z19colormap_median_cutP6kchistP13Gt_OutputData($kch,$od) {
            $kch = $kch|0;
            $od = $od|0;
            var $$ = 0, $$$ = 0, $$8 = 0, $$8$1 = 0, $$8$2 = 0, $$i$3 = 0, $$lcssa = 0.0, $$lcssa16 = 0, $$lcssa72 = 0.0, $$lcssa73 = 0.0, $$lcssa76 = 0, $$off = 0, $$pixel_accum$0 = 0, $$promoted = 0, $$promoted56 = 0.0, $$promoted58 = 0.0, $$promoted60 = 0.0, $$split$0 = 0, $$split_pixel$0 = 0, $$sum = 0;
            var $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
            var $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
            var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
            var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0;
            var $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0;
            var $186 = 0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0;
            var $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
            var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
            var $99 = 0, $adapt_size$1 = 0, $exitcond = 0, $exitcond51 = 0, $i$043 = 0, $i$123 = 0, $i$228 = 0, $i$3$lcssa = 0, $i$334 = 0, $i$519 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $j$018 = 0, $kc = 0, $maxc = 0, $minc = 0, $nadapt$0$lcssa = 0, $nadapt$0$lcssa52 = 0, $nadapt$0$lcssa53 = 0, $not$ = 0;
            var $or$cond = 0, $or$cond10 = 0, $or$cond1032 = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond9 = 0, $pixel_accum$0$lcssa = 0, $pixel_accum$033 = 0, $px = 0, $split$022 = 0, $split$1 = 0, $split$1$lcssa = 0, $split_pixel$021 = 0, $split_pixel$1 = 0, $trav$027 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 80|0;
            $vararg_buffer1 = sp + 40|0;
            $vararg_buffer = sp + 32|0;
            $minc = sp + 60|0;
            $maxc = sp + 54|0;
            $px = sp + 8|0;
            $kc = sp + 48|0;
            $0 = sp;
            $1 = ((($od)) + 28|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = (_Gif_Realloc(0,12,$2,8037,394)|0);
            $4 = (_Gif_NewFullColormap($2,256)|0);
            $5 = ((($4)) + 16|0);
            $6 = HEAP32[$5>>2]|0;
            $$off = (($2) + -2)|0;
            $7 = ($$off>>>0)>(254);
            if ($7) {
                __Z11fatal_errorPKcz(8050,$vararg_buffer);
                // unreachable;
            }
            $8 = ((($kch)) + 4|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = ($2|0)<($9|0);
            if (!($10)) {
                $11 = ((($od)) + 32|0);
                $12 = HEAP32[$11>>2]|0;
                $13 = ($12|0)==(0|0);
                if ($13) {
                    $14 = ($9|0)==(1);
                    $15 = $14 ? 8098 : 22368;
                    HEAP32[$vararg_buffer1>>2] = $9;
                    $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
                    HEAP32[$vararg_ptr3>>2] = $15;
                    __Z7warningiPKcz(1,8104,$vararg_buffer1);
                }
            }
            $16 = HEAP32[$8>>2]|0;
            $17 = ($2|0)<($16|0);
            $$ = $17 ? $2 : $16;
            $18 = ($$|0)>(2);
            $19 = ($16|0)<(266);
            $or$cond = $17 & $19;
            $or$cond11 = $or$cond & $18;
            if ($or$cond11) {
                $20 = ((($od)) + 40|0);
                $21 = HEAP32[$20>>2]|0;
                $not$ = ($21|0)!=(0);
                $22 = $not$ << 31 >> 31;
                $$$ = (($22) + ($$))|0;
                $adapt_size$1 = $$$;
            } else {
                $adapt_size$1 = $$;
            }
            HEAP32[$3>>2] = 0;
            $23 = HEAP32[$8>>2]|0;
            $24 = ((($3)) + 4|0);
            HEAP32[$24>>2] = $23;
            $25 = ((($3)) + 8|0);
            HEAP32[$25>>2] = 0;
            $26 = HEAP32[$8>>2]|0;
            $27 = ($26|0)>(0);
            if ($27) {
                $28 = HEAP32[$kch>>2]|0;
                $29 = HEAP32[$8>>2]|0;
                $$promoted = HEAP32[$25>>2]|0;
                $42 = $$promoted;$i$043 = 0;
                while(1) {
                    $39 = (((($28) + (($i$043*12)|0)|0)) + 8|0);
                    $40 = HEAP32[$39>>2]|0;
                    $41 = (($42) + ($40))|0;
                    $43 = (($i$043) + 1)|0;
                    $44 = ($43|0)<($29|0);
                    if ($44) {
                        $42 = $41;$i$043 = $43;
                    } else {
                        $$lcssa76 = $41;
                        break;
                    }
                }
                HEAP32[$25>>2] = $$lcssa76;
            }
            $30 = ($adapt_size$1|0)>(1);
            if ($30) {
                $31 = ((($maxc)) + 2|0);
                $32 = ((($minc)) + 2|0);
                $33 = ((($maxc)) + 4|0);
                $34 = ((($minc)) + 4|0);
                $35 = ((($minc)) + 2|0);
                $36 = ((($maxc)) + 2|0);
                $37 = ((($minc)) + 4|0);
                $38 = ((($maxc)) + 4|0);
                $indvars$iv = 1;
                while(1) {
                    $i$123 = 0;$split$022 = 0;$split_pixel$021 = 0;
                    while(1) {
                        $52 = (((($3) + (($i$123*12)|0)|0)) + 4|0);
                        $53 = HEAP32[$52>>2]|0;
                        $54 = ($53|0)>(1);
                        if ($54) {
                            $55 = (($3) + (($i$123*12)|0)|0);
                            $56 = (((($3) + (($i$123*12)|0)|0)) + 8|0);
                            $57 = HEAP32[$56>>2]|0;
                            $58 = ($57>>>0)>($split_pixel$021>>>0);
                            $$split_pixel$0 = $58 ? $57 : $split_pixel$021;
                            $$split$0 = $58 ? $55 : $split$022;
                            $split$1 = $$split$0;$split_pixel$1 = $$split_pixel$0;
                        } else {
                            $split$1 = $split$022;$split_pixel$1 = $split_pixel$021;
                        }
                        $59 = (($i$123) + 1)|0;
                        $exitcond51 = ($59|0)==($indvars$iv|0);
                        if ($exitcond51) {
                            $split$1$lcssa = $split$1;
                            break;
                        } else {
                            $i$123 = $59;$split$022 = $split$1;$split_pixel$021 = $split_pixel$1;
                        }
                    }
                    $60 = ($split$1$lcssa|0)==(0|0);
                    if ($60) {
                        $nadapt$0$lcssa = $indvars$iv;
                        break;
                    }
                    $61 = HEAP32[$split$1$lcssa>>2]|0;
                    $62 = HEAP32[$kch>>2]|0;
                    $63 = (($62) + (($61*12)|0)|0);
                    ;HEAP16[$maxc>>1]=HEAP16[$63>>1]|0;HEAP16[$maxc+2>>1]=HEAP16[$63+2>>1]|0;HEAP16[$maxc+4>>1]=HEAP16[$63+4>>1]|0;
                    ;HEAP16[$minc>>1]=HEAP16[$63>>1]|0;HEAP16[$minc+2>>1]=HEAP16[$63+2>>1]|0;HEAP16[$minc+4>>1]=HEAP16[$63+4>>1]|0;
                    $64 = ((($split$1$lcssa)) + 4|0);
                    $65 = HEAP32[$64>>2]|0;
                    $66 = ($65|0)>(1);
                    if ($66) {
                        $$sum4 = (($61) + 1)|0;
                        $67 = (($62) + (($$sum4*12)|0)|0);
                        $68 = HEAP32[$64>>2]|0;
                        $i$228 = 1;$trav$027 = $67;
                        while(1) {
                            $69 = HEAP16[$minc>>1]|0;
                            $70 = HEAP16[$trav$027>>1]|0;
                            $71 = ($69<<16>>16)<($70<<16>>16);
                            $$8 = $71 ? $69 : $70;
                            HEAP16[$minc>>1] = $$8;
                            $72 = HEAP16[$maxc>>1]|0;
                            $73 = HEAP16[$trav$027>>1]|0;
                            $74 = ($72<<16>>16)>($73<<16>>16);
                            $75 = $74 ? $72 : $73;
                            HEAP16[$maxc>>1] = $75;
                            $76 = HEAP16[$35>>1]|0;
                            $77 = ((($trav$027)) + 2|0);
                            $78 = HEAP16[$77>>1]|0;
                            $79 = ($76<<16>>16)<($78<<16>>16);
                            $$8$1 = $79 ? $76 : $78;
                            HEAP16[$35>>1] = $$8$1;
                            $80 = HEAP16[$36>>1]|0;
                            $81 = HEAP16[$77>>1]|0;
                            $82 = ($80<<16>>16)>($81<<16>>16);
                            $83 = $82 ? $80 : $81;
                            HEAP16[$36>>1] = $83;
                            $84 = HEAP16[$37>>1]|0;
                            $85 = ((($trav$027)) + 4|0);
                            $86 = HEAP16[$85>>1]|0;
                            $87 = ($84<<16>>16)<($86<<16>>16);
                            $$8$2 = $87 ? $84 : $86;
                            HEAP16[$37>>1] = $$8$2;
                            $88 = HEAP16[$38>>1]|0;
                            $89 = HEAP16[$85>>1]|0;
                            $90 = ($88<<16>>16)>($89<<16>>16);
                            $91 = $90 ? $88 : $89;
                            HEAP16[$38>>1] = $91;
                            $92 = (($i$228) + 1)|0;
                            $93 = ((($trav$027)) + 12|0);
                            $94 = ($92|0)<($68|0);
                            if ($94) {
                                $i$228 = $92;$trav$027 = $93;
                            } else {
                                $$lcssa16 = $68;
                                break;
                            }
                        }
                    } else {
                        $$lcssa16 = $65;
                    }
                    $95 = HEAP16[$maxc>>1]|0;
                    $96 = $95 << 16 >> 16;
                    $97 = HEAP16[$minc>>1]|0;
                    $98 = $97 << 16 >> 16;
                    $99 = (($96) - ($98))|0;
                    $100 = (+($99|0));
                    $101 = $100 * 0.29899999999999999;
                    $102 = HEAP16[$31>>1]|0;
                    $103 = $102 << 16 >> 16;
                    $104 = HEAP16[$32>>1]|0;
                    $105 = $104 << 16 >> 16;
                    $106 = (($103) - ($105))|0;
                    $107 = (+($106|0));
                    $108 = $107 * 0.58699999999999997;
                    $109 = HEAP16[$33>>1]|0;
                    $110 = $109 << 16 >> 16;
                    $111 = HEAP16[$34>>1]|0;
                    $112 = $111 << 16 >> 16;
                    $113 = (($110) - ($112))|0;
                    $114 = (+($113|0));
                    $115 = $114 * 0.114;
                    $116 = !($101 >= $108);
                    $117 = !($101 >= $115);
                    $or$cond9 = $116 | $117;
                    do {
                        if ($or$cond9) {
                            $118 = !($108 >= $115);
                            if ($118) {
                                _qsort($63,$$lcssa16,12,9);
                                break;
                            } else {
                                _qsort($63,$$lcssa16,12,8);
                                break;
                            }
                        } else {
                            _qsort($63,$$lcssa16,12,7);
                        }
                    } while(0);
                    $119 = ((($split$1$lcssa)) + 8|0);
                    $120 = HEAP32[$119>>2]|0;
                    $121 = $120 >>> 1;
                    $122 = (((($62) + (($61*12)|0)|0)) + 8|0);
                    $123 = HEAP32[$122>>2]|0;
                    $124 = HEAP32[$64>>2]|0;
                    $125 = (($124) + -1)|0;
                    $126 = ($125|0)>(1);
                    $127 = ($123>>>0)<($121>>>0);
                    $or$cond1032 = $127 & $126;
                    if ($or$cond1032) {
                        $128 = HEAP32[$64>>2]|0;
                        $129 = (($128) + -1)|0;
                        $i$334 = 1;$pixel_accum$033 = $123;
                        while(1) {
                            $$sum7 = (($i$334) + ($61))|0;
                            $130 = (((($62) + (($$sum7*12)|0)|0)) + 8|0);
                            $131 = HEAP32[$130>>2]|0;
                            $132 = (($131) + ($pixel_accum$033))|0;
                            $133 = (($i$334) + 1)|0;
                            $134 = ($133|0)<($129|0);
                            $135 = ($132>>>0)<($121>>>0);
                            $or$cond10 = $135 & $134;
                            if ($or$cond10) {
                                $i$334 = $133;$pixel_accum$033 = $132;
                            } else {
                                $i$3$lcssa = $133;$pixel_accum$0$lcssa = $132;
                                break;
                            }
                        }
                    } else {
                        $i$3$lcssa = 1;$pixel_accum$0$lcssa = $123;
                    }
                    $136 = $pixel_accum$0$lcssa << 1;
                    $137 = HEAP32[$119>>2]|0;
                    $138 = (($136) - ($137))|0;
                    $139 = (($i$3$lcssa) + -1)|0;
                    $$sum5 = (($139) + ($61))|0;
                    $140 = (((($62) + (($$sum5*12)|0)|0)) + 8|0);
                    $141 = HEAP32[$140>>2]|0;
                    $142 = (($pixel_accum$0$lcssa) - ($141))|0;
                    $143 = $142 << 1;
                    $144 = (($137) - ($143))|0;
                    $145 = ($144>>>0)<($138>>>0);
                    $146 = ($i$3$lcssa|0)>(1);
                    $or$cond3 = $146 & $145;
                    $$pixel_accum$0 = $or$cond3 ? $142 : $pixel_accum$0$lcssa;
                    $$i$3 = $or$cond3 ? $139 : $i$3$lcssa;
                    $147 = HEAP32[$split$1$lcssa>>2]|0;
                    $148 = (($$i$3) + ($147))|0;
                    $149 = (($3) + (($indvars$iv*12)|0)|0);
                    HEAP32[$149>>2] = $148;
                    $150 = HEAP32[$64>>2]|0;
                    $151 = (($150) - ($$i$3))|0;
                    $152 = (((($3) + (($indvars$iv*12)|0)|0)) + 4|0);
                    HEAP32[$152>>2] = $151;
                    $153 = HEAP32[$119>>2]|0;
                    $154 = (($153) - ($$pixel_accum$0))|0;
                    $155 = (((($3) + (($indvars$iv*12)|0)|0)) + 8|0);
                    HEAP32[$155>>2] = $154;
                    HEAP32[$64>>2] = $$i$3;
                    HEAP32[$119>>2] = $$pixel_accum$0;
                    $indvars$iv$next = (($indvars$iv) + 1)|0;
                    $156 = ($indvars$iv$next|0)<($adapt_size$1|0);
                    if ($156) {
                        $indvars$iv = $indvars$iv$next;
                    } else {
                        $nadapt$0$lcssa = $indvars$iv$next;
                        break;
                    }
                }
                $45 = ($nadapt$0$lcssa|0)>(0);
                if ($45) {
                    $nadapt$0$lcssa53 = $nadapt$0$lcssa;
                } else {
                    $nadapt$0$lcssa52 = $nadapt$0$lcssa;
                    _free($3);
                    HEAP32[$4>>2] = $nadapt$0$lcssa52;
                    STACKTOP = sp;return ($4|0);
                }
            } else {
                $nadapt$0$lcssa53 = 1;
            }
            $46 = ((($px)) + 16|0);
            $47 = ((($px)) + 8|0);
            $48 = ((($kc)) + 2|0);
            $49 = ((($kc)) + 4|0);
            $50 = ((($px)) + 8|0);
            $51 = ((($px)) + 16|0);
            $i$519 = 0;
            while(1) {
                $157 = (($3) + (($i$519*12)|0)|0);
                $158 = HEAP32[$157>>2]|0;
                $159 = HEAP32[$kch>>2]|0;
                $160 = (((($3) + (($i$519*12)|0)|0)) + 4|0);
                ;HEAP32[$px>>2]=0|0;HEAP32[$px+4>>2]=0|0;HEAP32[$px+8>>2]=0|0;HEAP32[$px+12>>2]=0|0;HEAP32[$px+16>>2]=0|0;HEAP32[$px+20>>2]=0|0;
                $161 = HEAP32[$160>>2]|0;
                $162 = ($161|0)==(0);
                if (!($162)) {
                    $163 = HEAP32[$160>>2]|0;
                    $$promoted56 = +HEAPF64[$px>>3];
                    $$promoted58 = +HEAPF64[$50>>3];
                    $$promoted60 = +HEAPF64[$51>>3];
                    $172 = $$promoted56;$178 = $$promoted58;$184 = $$promoted60;$j$018 = 0;
                    while(1) {
                        $$sum = (($j$018) + ($158))|0;
                        $164 = (((($159) + (($$sum*12)|0)|0)) + 8|0);
                        $165 = HEAP32[$164>>2]|0;
                        $166 = (+($165>>>0));
                        $167 = (($159) + (($$sum*12)|0)|0);
                        $168 = HEAP16[$167>>1]|0;
                        $169 = (+($168<<16>>16));
                        $170 = $169 * $166;
                        $171 = $172 + $170;
                        $173 = (((($159) + (($$sum*12)|0)|0)) + 2|0);
                        $174 = HEAP16[$173>>1]|0;
                        $175 = (+($174<<16>>16));
                        $176 = $175 * $166;
                        $177 = $178 + $176;
                        $179 = (((($159) + (($$sum*12)|0)|0)) + 4|0);
                        $180 = HEAP16[$179>>1]|0;
                        $181 = (+($180<<16>>16));
                        $182 = $181 * $166;
                        $183 = $184 + $182;
                        $185 = (($j$018) + 1)|0;
                        $186 = ($185|0)==($163|0);
                        if ($186) {
                            $$lcssa = $171;$$lcssa72 = $177;$$lcssa73 = $183;
                            break;
                        } else {
                            $172 = $171;$178 = $177;$184 = $183;$j$018 = $185;
                        }
                    }
                    HEAPF64[$px>>3] = $$lcssa;
                    HEAPF64[$50>>3] = $$lcssa72;
                    HEAPF64[$51>>3] = $$lcssa73;
                }
                $187 = +HEAPF64[$px>>3];
                $188 = (((($3) + (($i$519*12)|0)|0)) + 8|0);
                $189 = HEAP32[$188>>2]|0;
                $190 = (+($189>>>0));
                $191 = $187 / $190;
                $192 = (~~(($191)));
                $193 = $192&65535;
                HEAP16[$kc>>1] = $193;
                $194 = +HEAPF64[$47>>3];
                $195 = HEAP32[$188>>2]|0;
                $196 = (+($195>>>0));
                $197 = $194 / $196;
                $198 = (~~(($197)));
                $199 = $198&65535;
                HEAP16[$48>>1] = $199;
                $200 = +HEAPF64[$46>>3];
                $201 = HEAP32[$188>>2]|0;
                $202 = (+($201>>>0));
                $203 = $200 / $202;
                $204 = (~~(($203)));
                $205 = $204&65535;
                HEAP16[$49>>1] = $205;
                __ZL9kc_togfcgPK6kcolor($0,$kc);
                $206 = (($6) + ($i$519<<3)|0);
                $207 = $0;
                $208 = $207;
                $209 = HEAP32[$208>>2]|0;
                $210 = (($207) + 4)|0;
                $211 = $210;
                $212 = HEAP32[$211>>2]|0;
                $213 = $206;
                $214 = $213;
                HEAP32[$214>>2] = $209;
                $215 = (($213) + 4)|0;
                $216 = $215;
                HEAP32[$216>>2] = $212;
                $217 = (($i$519) + 1)|0;
                $exitcond = ($217|0)==($nadapt$0$lcssa53|0);
                if ($exitcond) {
                    $nadapt$0$lcssa52 = $nadapt$0$lcssa53;
                    break;
                } else {
                    $i$519 = $217;
                }
            }
            _free($3);
            HEAP32[$4>>2] = $nadapt$0$lcssa52;
            STACKTOP = sp;return ($4|0);
        }
        function __Z16kcdiversity_initP11kcdiversityP6kchisti($div,$kch,$dodither) {
            $div = $div|0;
            $kch = $kch|0;
            $dodither = $dodither|0;
            var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $i$11 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            HEAP32[$div>>2] = $kch;
            $0 = HEAP32[$kch>>2]|0;
            $1 = ((($kch)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            _qsort($0,$2,12,10);
            $3 = HEAP32[$1>>2]|0;
            $4 = (_Gif_Realloc(0,4,$3,8037,520)|0);
            $5 = ((($div)) + 4|0);
            HEAP32[$5>>2] = $4;
            $6 = HEAP32[$1>>2]|0;
            $7 = (_Gif_Realloc(0,4,$6,8037,521)|0);
            $8 = ((($div)) + 8|0);
            HEAP32[$8>>2] = $7;
            $9 = HEAP32[$1>>2]|0;
            $10 = ($9|0)==(0);
            if ($10) {
                $$lcssa = 0;
            } else {
                $11 = HEAP32[$8>>2]|0;
                $i$02 = 0;
                while(1) {
                    $12 = (($11) + ($i$02<<2)|0);
                    HEAP32[$12>>2] = -1;
                    $13 = (($i$02) + 1)|0;
                    $14 = HEAP32[$1>>2]|0;
                    $15 = ($13|0)==($14|0);
                    if ($15) {
                        $$lcssa = $14;
                        break;
                    } else {
                        $i$02 = $13;
                    }
                }
            }
            $16 = ($dodither|0)==(0);
            if ($16) {
                $26 = ((($div)) + 12|0);
                HEAP32[$26>>2] = 0;
            } else {
                $17 = (_Gif_Realloc(0,4,$$lcssa,8037,525)|0);
                $18 = ((($div)) + 12|0);
                HEAP32[$18>>2] = $17;
                $19 = HEAP32[$1>>2]|0;
                $20 = ($19|0)==(0);
                if (!($20)) {
                    $21 = HEAP32[$18>>2]|0;
                    $i$11 = 0;
                    while(1) {
                        $22 = (($21) + ($i$11<<2)|0);
                        HEAP32[$22>>2] = -1;
                        $23 = (($i$11) + 1)|0;
                        $24 = HEAP32[$1>>2]|0;
                        $25 = ($23|0)==($24|0);
                        if ($25) {
                            break;
                        } else {
                            $i$11 = $23;
                        }
                    }
                }
            }
            $27 = HEAP32[$1>>2]|0;
            $28 = (_Gif_Realloc(0,4,$27,8037,530)|0);
            $29 = ((($div)) + 16|0);
            HEAP32[$29>>2] = $28;
            $30 = ((($div)) + 20|0);
            HEAP32[$30>>2] = 0;
            return;
        }
        function __Z19kcdiversity_cleanupP11kcdiversity($div) {
            $div = $div|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($div)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            _free($1);
            $2 = ((($div)) + 8|0);
            $3 = HEAP32[$2>>2]|0;
            _free($3);
            $4 = ((($div)) + 12|0);
            $5 = HEAP32[$4>>2]|0;
            _free($5);
            $6 = ((($div)) + 16|0);
            $7 = HEAP32[$6>>2]|0;
            _free($7);
            return;
        }
        function __Z24kcdiversity_find_popularP11kcdiversity($div) {
            $div = $div|0;
            var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$div>>2]|0;
            $1 = ((($0)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)==(0);
            if ($3) {
                $i$0$lcssa = 0;
                return ($i$0$lcssa|0);
            }
            $4 = ((($div)) + 8|0);
            $5 = HEAP32[$4>>2]|0;
            $i$01 = 0;
            while(1) {
                $6 = (($5) + ($i$01<<2)|0);
                $7 = HEAP32[$6>>2]|0;
                $8 = ($7|0)==(0);
                if (!($8)) {
                    $i$0$lcssa = $i$01;
                    label = 5;
                    break;
                }
                $9 = (($i$01) + 1)|0;
                $10 = ($9|0)==($2|0);
                if ($10) {
                    $i$0$lcssa = $9;
                    label = 5;
                    break;
                } else {
                    $i$01 = $9;
                }
            }
            if ((label|0) == 5) {
                return ($i$0$lcssa|0);
            }
            return (0)|0;
        }
        function __Z24kcdiversity_find_diverseP11kcdiversityd($div,$ditherweight) {
            $div = $div|0;
            $ditherweight = +$ditherweight;
            var $$lcssa = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0;
            var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $chosen$04 = 0, $chosen$2$ph12 = 0, $chosen$4 = 0, $i$0 = 0, $i$0$chosen$0 = 0, $i$03 = 0, $i$05 = 0, $i$1 = 0, $i$16 = 0, $i$1611 = 0, $i$1614 = 0, $i$17 = 0, $i$17$lcssa = 0, $max_dist$0$ph13 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$div>>2]|0;
            $1 = ((($0)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = (__Z24kcdiversity_find_popularP11kcdiversity($div)|0);
            $4 = ($3|0)==($2|0);
            if ($4) {
                $chosen$4 = $3;
                return ($chosen$4|0);
            }
            $5 = $ditherweight != 0.0;
            if ($5) {
                $6 = ((($div)) + 12|0);
                $7 = HEAP32[$6>>2]|0;
                $8 = ($7|0)==(0|0);
                if (!($8)) {
                    $18 = ((($div)) + 8|0);
                    $i$1611 = (($3) + 1)|0;
                    $19 = ($i$1611|0)==($2|0);
                    if ($19) {
                        $chosen$4 = $3;
                        return ($chosen$4|0);
                    }
                    $20 = HEAP32[$18>>2]|0;
                    $21 = (($20) + ($3<<2)|0);
                    $22 = HEAP32[$21>>2]|0;
                    $23 = (+($22>>>0));
                    $24 = (($7) + ($3<<2)|0);
                    $25 = HEAP32[$24>>2]|0;
                    $26 = (+($25>>>0));
                    $27 = $26 * $ditherweight;
                    $28 = $23 + $27;
                    $29 = HEAP32[$18>>2]|0;
                    $chosen$2$ph12 = $3;$i$1614 = $i$1611;$max_dist$0$ph13 = $28;
                    L10: while(1) {
                        $i$17 = $i$1614;
                        while(1) {
                            $30 = (($29) + ($i$17<<2)|0);
                            $31 = HEAP32[$30>>2]|0;
                            $32 = ($31|0)==(0);
                            if (!($32)) {
                                $34 = (+($31>>>0));
                                $35 = HEAP32[$6>>2]|0;
                                $36 = (($35) + ($i$17<<2)|0);
                                $37 = HEAP32[$36>>2]|0;
                                $38 = (+($37>>>0));
                                $39 = $38 * $ditherweight;
                                $40 = $34 + $39;
                                $41 = $40 > $max_dist$0$ph13;
                                if ($41) {
                                    $$lcssa = $40;$i$17$lcssa = $i$17;
                                    break;
                                }
                            }
                            $i$1 = (($i$17) + 1)|0;
                            $33 = ($i$1|0)==($2|0);
                            if ($33) {
                                $chosen$4 = $chosen$2$ph12;
                                label = 14;
                                break L10;
                            } else {
                                $i$17 = $i$1;
                            }
                        }
                        $i$16 = (($i$17$lcssa) + 1)|0;
                        $42 = ($i$16|0)==($2|0);
                        if ($42) {
                            $chosen$4 = $i$17$lcssa;
                            label = 14;
                            break;
                        } else {
                            $chosen$2$ph12 = $i$17$lcssa;$i$1614 = $i$16;$max_dist$0$ph13 = $$lcssa;
                        }
                    }
                    if ((label|0) == 14) {
                        return ($chosen$4|0);
                    }
                }
            }
            $i$03 = (($3) + 1)|0;
            $9 = ($i$03|0)==($2|0);
            if ($9) {
                $chosen$4 = $3;
                return ($chosen$4|0);
            }
            $10 = ((($div)) + 8|0);
            $11 = HEAP32[$10>>2]|0;
            $chosen$04 = $3;$i$05 = $i$03;
            while(1) {
                $12 = (($11) + ($i$05<<2)|0);
                $13 = HEAP32[$12>>2]|0;
                $14 = (($11) + ($chosen$04<<2)|0);
                $15 = HEAP32[$14>>2]|0;
                $16 = ($13>>>0)>($15>>>0);
                $i$0$chosen$0 = $16 ? $i$05 : $chosen$04;
                $i$0 = (($i$05) + 1)|0;
                $17 = ($i$0|0)==($2|0);
                if ($17) {
                    $chosen$4 = $i$0$chosen$0;
                    break;
                } else {
                    $chosen$04 = $i$0$chosen$0;$i$05 = $i$0;
                }
            }
            return ($chosen$4|0);
        }
        function __Z18kcdiversity_chooseP11kcdiversityii($div,$chosen,$dodither) {
            $div = $div|0;
            $chosen = $chosen|0;
            $dodither = $dodither|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0;
            var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
            var $i$06 = 0, $i$14 = 0, $ispos = 0, $j$03 = 0, $neg = 0, $x = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $x = sp;
            $0 = HEAP32[$div>>2]|0;
            $1 = ((($0)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = HEAP32[$0>>2]|0;
            $4 = ((($div)) + 8|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = (($5) + ($chosen<<2)|0);
            HEAP32[$6>>2] = 0;
            $7 = ((($div)) + 12|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = ($8|0)==(0|0);
            if (!($9)) {
                $10 = (($8) + ($chosen<<2)|0);
                HEAP32[$10>>2] = 0;
            }
            $11 = ((($div)) + 4|0);
            $12 = HEAP32[$11>>2]|0;
            $13 = (($12) + ($chosen<<2)|0);
            HEAP32[$13>>2] = $chosen;
            $14 = ($2|0)==(0);
            if (!($14)) {
                $15 = (($3) + (($chosen*12)|0)|0);
                $i$06 = 0;
                while(1) {
                    $16 = HEAP32[$4>>2]|0;
                    $17 = (($16) + ($i$06<<2)|0);
                    $18 = HEAP32[$17>>2]|0;
                    $19 = ($18|0)==(0);
                    if (!($19)) {
                        $20 = (($3) + (($i$06*12)|0)|0);
                        $21 = (__ZL11kc_distancePK6kcolorS1_($20,$15)|0);
                        $22 = ($21>>>0)<($18>>>0);
                        if ($22) {
                            HEAP32[$17>>2] = $21;
                            $23 = HEAP32[$11>>2]|0;
                            $24 = (($23) + ($i$06<<2)|0);
                            HEAP32[$24>>2] = $chosen;
                        }
                    }
                    $25 = (($i$06) + 1)|0;
                    $26 = ($25|0)==($2|0);
                    if ($26) {
                        break;
                    } else {
                        $i$06 = $25;
                    }
                }
            }
            $27 = ($dodither|0)==(0);
            if (!($27)) {
                $28 = HEAP32[$7>>2]|0;
                $29 = ($28|0)==(0|0);
                if (!($29)) {
                    $30 = ((($div)) + 20|0);
                    $31 = HEAP32[$30>>2]|0;
                    $32 = ($31|0)==(0);
                    if (!($32)) {
                        $33 = (($3) + (($chosen*12)|0)|0);
                        $34 = ((($div)) + 16|0);
                        $35 = ($2|0)==(0);
                        $36 = ((($x)) + 2|0);
                        $37 = ((($x)) + 4|0);
                        $i$14 = 0;
                        while(1) {
                            ;HEAP16[$x>>1]=HEAP16[$33>>1]|0;HEAP16[$x+2>>1]=HEAP16[$33+2>>1]|0;HEAP16[$x+4>>1]=HEAP16[$33+4>>1]|0;
                            $38 = HEAP32[$34>>2]|0;
                            $39 = (($38) + ($i$14<<2)|0);
                            $40 = HEAP32[$39>>2]|0;
                            $41 = (($3) + (($40*12)|0)|0);
                            $42 = (__ZL12kc_luminancePK6kcolor($x)|0);
                            $43 = (__ZL12kc_luminancePK6kcolor($41)|0);
                            $44 = (($42) - ($43))|0;
                            $ispos = ($44|0)>(-1);
                            $neg = (0 - ($44))|0;
                            $45 = $ispos ? $44 : $neg;
                            $46 = ($45|0)>(8192);
                            if ($46) {
                                $47 = (+($45|0));
                                $48 = $47 * 4.0;
                                $49 = $48 / 32767.0;
                                $81 = $49;
                            } else {
                                $81 = 1.0;
                            }
                            $50 = HEAP16[$x>>1]|0;
                            $51 = $50 << 16 >> 16;
                            $52 = HEAP16[$41>>1]|0;
                            $53 = $52 << 16 >> 16;
                            $54 = (($53) + ($51))|0;
                            $55 = $54 >>> 1;
                            $56 = $55&65535;
                            HEAP16[$x>>1] = $56;
                            $57 = HEAP16[$36>>1]|0;
                            $58 = $57 << 16 >> 16;
                            $59 = (((($3) + (($40*12)|0)|0)) + 2|0);
                            $60 = HEAP16[$59>>1]|0;
                            $61 = $60 << 16 >> 16;
                            $62 = (($61) + ($58))|0;
                            $63 = $62 >>> 1;
                            $64 = $63&65535;
                            HEAP16[$36>>1] = $64;
                            $65 = HEAP16[$37>>1]|0;
                            $66 = $65 << 16 >> 16;
                            $67 = (((($3) + (($40*12)|0)|0)) + 4|0);
                            $68 = HEAP16[$67>>1]|0;
                            $69 = $68 << 16 >> 16;
                            $70 = (($69) + ($66))|0;
                            $71 = $70 >>> 1;
                            $72 = $71&65535;
                            HEAP16[$37>>1] = $72;
                            if (!($35)) {
                                $j$03 = 0;
                                while(1) {
                                    $73 = HEAP32[$4>>2]|0;
                                    $74 = (($73) + ($j$03<<2)|0);
                                    $75 = HEAP32[$74>>2]|0;
                                    $76 = ($75|0)==(0);
                                    if (!($76)) {
                                        $77 = (($3) + (($j$03*12)|0)|0);
                                        $78 = (__ZL11kc_distancePK6kcolorS1_($77,$x)|0);
                                        $79 = (+($78>>>0));
                                        $80 = $81 * $79;
                                        $82 = HEAP32[$7>>2]|0;
                                        $83 = (($82) + ($j$03<<2)|0);
                                        $84 = HEAP32[$83>>2]|0;
                                        $85 = (+($84>>>0));
                                        $86 = $80 < $85;
                                        if ($86) {
                                            $87 = (~~(($80))>>>0);
                                            HEAP32[$83>>2] = $87;
                                        }
                                    }
                                    $88 = (($j$03) + 1)|0;
                                    $89 = ($88|0)==($2|0);
                                    if ($89) {
                                        break;
                                    } else {
                                        $j$03 = $88;
                                    }
                                }
                            }
                            $90 = (($i$14) + 1)|0;
                            $91 = HEAP32[$30>>2]|0;
                            $92 = ($90|0)==($91|0);
                            if ($92) {
                                break;
                            } else {
                                $i$14 = $90;
                            }
                        }
                    }
                }
            }
            $93 = ((($div)) + 20|0);
            $94 = HEAP32[$93>>2]|0;
            $95 = ((($div)) + 16|0);
            $96 = HEAP32[$95>>2]|0;
            $97 = (($96) + ($94<<2)|0);
            HEAP32[$97>>2] = $chosen;
            $98 = HEAP32[$93>>2]|0;
            $99 = (($98) + 1)|0;
            HEAP32[$93>>2] = $99;
            STACKTOP = sp;return ($chosen|0);
        }
        function __Z24colormap_blend_diversityP6kchistP13Gt_OutputData($kch,$od) {
            $kch = $kch|0;
            $od = $od|0;
            var $0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (__ZL18colormap_diversityP6kchistP13Gt_OutputDatai($kch,$od,1)|0);
            return ($0|0);
        }
        function __Z23colormap_flat_diversityP6kchistP13Gt_OutputData($kch,$od) {
            $kch = $kch|0;
            $od = $od|0;
            var $0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (__ZL18colormap_diversityP6kchistP13Gt_OutputDatai($kch,$od,0)|0);
            return ($0|0);
        }
        function __Z8kd3_initP8kd3_treePFvP6kcolorE($kd3,$transform) {
            $kd3 = $kd3|0;
            $transform = $transform|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            HEAP32[$kd3>>2] = 0;
            $0 = (_Gif_Realloc(0,6,256,8037,742)|0);
            $1 = ((($kd3)) + 12|0);
            HEAP32[$1>>2] = $0;
            $2 = ((($kd3)) + 16|0);
            HEAP32[$2>>2] = 0;
            $3 = ((($kd3)) + 20|0);
            HEAP32[$3>>2] = 256;
            $4 = ((($kd3)) + 28|0);
            HEAP32[$4>>2] = $transform;
            $5 = ((($kd3)) + 32|0);
            HEAP32[$5>>2] = 0;
            $6 = ((($kd3)) + 8|0);
            HEAP32[$6>>2] = -1;
            return;
        }
        function __Z11kd3_cleanupP8kd3_tree($kd3) {
            $kd3 = $kd3|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$kd3>>2]|0;
            _free($0);
            $1 = ((($kd3)) + 12|0);
            $2 = HEAP32[$1>>2]|0;
            _free($2);
            $3 = ((($kd3)) + 32|0);
            $4 = HEAP32[$3>>2]|0;
            _free($4);
            return;
        }
        function __Z19kd3_add_transformedP8kd3_treePK6kcolor($kd3,$k) {
            $kd3 = $kd3|0;
            $k = $k|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            $0 = ((($kd3)) + 16|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($kd3)) + 20|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($1|0)==($3|0);
            if ($4) {
                $5 = $3 << 1;
                HEAP32[$2>>2] = $5;
                $6 = ((($kd3)) + 12|0);
                $7 = HEAP32[$6>>2]|0;
                $8 = (_Gif_Realloc($7,6,$5,8037,759)|0);
                HEAP32[$6>>2] = $8;
            }
            $9 = HEAP32[$0>>2]|0;
            $10 = ((($kd3)) + 12|0);
            $11 = HEAP32[$10>>2]|0;
            $12 = (($11) + (($9*6)|0)|0);
            ;HEAP16[$12>>1]=HEAP16[$k>>1]|0;HEAP16[$12+2>>1]=HEAP16[$k+2>>1]|0;HEAP16[$12+4>>1]=HEAP16[$k+4>>1]|0;
            $13 = HEAP32[$0>>2]|0;
            $14 = (($13) + 1)|0;
            HEAP32[$0>>2] = $14;
            $15 = HEAP32[$kd3>>2]|0;
            $16 = ($15|0)==(0|0);
            if ($16) {
                return;
            }
            _free($15);
            $17 = ((($kd3)) + 32|0);
            $18 = HEAP32[$17>>2]|0;
            _free($18);
            HEAP32[$kd3>>2] = 0;
            HEAP32[$17>>2] = 0;
            return;
        }
        function __Z9kd3_add8gP8kd3_treeiii($kd3,$a0,$a1,$a2) {
            $kd3 = $kd3|0;
            $a0 = $a0|0;
            $a1 = $a1|0;
            $a2 = $a2|0;
            var $0 = 0, $1 = 0, $2 = 0, $k = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $k = sp;
            __ZL8kc_set8gP6kcoloriii($k,$a0,$a1,$a2);
            $0 = ((($kd3)) + 28|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            if (!($2)) {
                FUNCTION_TABLE_vi[$1 & 7]($k);
            }
            __Z19kd3_add_transformedP8kd3_treePK6kcolor($kd3,$k);
            STACKTOP = sp;return;
        }
        function __Z17kd3_build_xradiusP8kd3_tree($kd3) {
            $kd3 = $kd3|0;
            var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05 = 0, $i$13 = 0, $j$02 = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($kd3)) + 32|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            if (!($2)) {
                return;
            }
            $3 = ((($kd3)) + 16|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = (_Gif_Realloc(0,4,$4,8037,901)|0);
            HEAP32[$0>>2] = $5;
            $6 = HEAP32[$3>>2]|0;
            $7 = ($6|0)==(0);
            if ($7) {
                return;
            }
            $8 = HEAP32[$0>>2]|0;
            $i$05 = 0;
            while(1) {
                $11 = (($8) + ($i$05<<2)|0);
                HEAP32[$11>>2] = -1;
                $12 = (($i$05) + 1)|0;
                $13 = HEAP32[$3>>2]|0;
                $14 = ($12|0)==($13|0);
                if ($14) {
                    $$lcssa = $13;
                    break;
                } else {
                    $i$05 = $12;
                }
            }
            $9 = ($$lcssa|0)==(0);
            if ($9) {
                return;
            }
            $10 = ((($kd3)) + 12|0);
            $i$13 = 0;
            while(1) {
                $16 = (($i$13) + 1)|0;
                $18 = HEAP32[$3>>2]|0;
                $19 = ($16|0)==($18|0);
                if (!($19)) {
                    $j$02 = $16;
                    while(1) {
                        $20 = HEAP32[$10>>2]|0;
                        $21 = (($20) + (($i$13*6)|0)|0);
                        $22 = (($20) + (($j$02*6)|0)|0);
                        $23 = (__ZL11kc_distancePK6kcolorS1_($21,$22)|0);
                        $24 = $23 >>> 2;
                        $25 = HEAP32[$0>>2]|0;
                        $26 = (($25) + ($i$13<<2)|0);
                        $27 = HEAP32[$26>>2]|0;
                        $28 = ($24>>>0)<($27>>>0);
                        if ($28) {
                            HEAP32[$26>>2] = $24;
                        }
                        $29 = HEAP32[$0>>2]|0;
                        $30 = (($29) + ($j$02<<2)|0);
                        $31 = HEAP32[$30>>2]|0;
                        $32 = ($24>>>0)<($31>>>0);
                        if ($32) {
                            HEAP32[$30>>2] = $24;
                        }
                        $33 = (($j$02) + 1)|0;
                        $34 = HEAP32[$3>>2]|0;
                        $35 = ($33|0)==($34|0);
                        if ($35) {
                            break;
                        } else {
                            $j$02 = $33;
                        }
                    }
                }
                $15 = HEAP32[$3>>2]|0;
                $17 = ($16|0)==($15|0);
                if ($17) {
                    break;
                } else {
                    $i$13 = $16;
                }
            }
            return;
        }
        function __Z9kd3_buildP8kd3_tree($kd3) {
            $kd3 = $kd3|0;
            var $$lcssa = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
            var $8 = 0, $9 = 0, $delta$0$lcssa = 0, $delta$01 = 0, $delta$1 = 0, $i$04 = 0, $i$12 = 0, $i$2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$kd3>>2]|0;
            $1 = ($0|0)==(0|0);
            if (!($1)) {
                ___assert_fail((8152|0),(8037|0),917,(8163|0));
                // unreachable;
            }
            $2 = (_Gif_Realloc(0,8,256,8037,920)|0);
            HEAP32[$kd3>>2] = $2;
            $3 = ((($kd3)) + 4|0);
            HEAP32[$3>>2] = 256;
            $4 = ((($kd3)) + 24|0);
            HEAP32[$4>>2] = 0;
            $5 = ((($kd3)) + 16|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = (_Gif_Realloc(0,4,$6,8037,925)|0);
            $8 = HEAP32[$5>>2]|0;
            $9 = ($8|0)==(0);
            if (!($9)) {
                $i$04 = 0;
                while(1) {
                    $10 = (($7) + ($i$04<<2)|0);
                    HEAP32[$10>>2] = $i$04;
                    $11 = (($i$04) + 1)|0;
                    $12 = HEAP32[$5>>2]|0;
                    $13 = ($11|0)==($12|0);
                    if ($13) {
                        break;
                    } else {
                        $i$04 = $11;
                    }
                }
            }
            HEAP32[492>>2] = $kd3;
            $14 = HEAP32[$5>>2]|0;
            _qsort($7,$14,4,11);
            $15 = HEAP32[$5>>2]|0;
            $16 = ($15|0)>(1);
            if ($16) {
                $17 = ((($kd3)) + 12|0);
                $23 = 1;$delta$01 = 1;$i$12 = 0;
                while(1) {
                    $18 = (($7) + ($i$12<<2)|0);
                    $19 = HEAP32[$18>>2]|0;
                    $20 = HEAP32[$17>>2]|0;
                    $21 = (($20) + (($19*6)|0)|0);
                    $22 = (($7) + ($23<<2)|0);
                    $24 = HEAP32[$22>>2]|0;
                    $25 = (($20) + (($24*6)|0)|0);
                    $26 = (_memcmp($21,$25,6)|0);
                    $27 = ($26|0)==(0);
                    if ($27) {
                        $28 = (($delta$01) + 1)|0;
                        $29 = (($i$12) + -1)|0;
                        $delta$1 = $28;$i$2 = $29;
                    } else {
                        $30 = ($delta$01|0)>(1);
                        if ($30) {
                            $31 = (($i$12) + 1)|0;
                            $32 = (($7) + ($31<<2)|0);
                            HEAP32[$32>>2] = $24;
                            $delta$1 = $delta$01;$i$2 = $i$12;
                        } else {
                            $delta$1 = $delta$01;$i$2 = $i$12;
                        }
                    }
                    $33 = (($i$2) + 1)|0;
                    $34 = (($33) + ($delta$1))|0;
                    $35 = HEAP32[$5>>2]|0;
                    $36 = ($34|0)<($35|0);
                    if ($36) {
                        $23 = $34;$delta$01 = $delta$1;$i$12 = $33;
                    } else {
                        $$lcssa = $35;$delta$0$lcssa = $delta$1;
                        break;
                    }
                }
            } else {
                $$lcssa = $15;$delta$0$lcssa = 1;
            }
            $$neg = (1 - ($delta$0$lcssa))|0;
            $37 = (($$neg) + ($$lcssa))|0;
            (__ZL15kd3_build_rangePiiii($7,$37,0,0)|0);
            $38 = HEAP32[$4>>2]|0;
            $39 = ($38|0)<(32);
            if ($39) {
                _free($7);
                return;
            } else {
                ___assert_fail((8173|0),(8037|0),947,(8163|0));
                // unreachable;
            }
        }
        function __Z14kd3_init_buildP8kd3_treePFvP6kcolorEPK12Gif_Colormap($kd3,$transform,$gfcm) {
            $kd3 = $kd3|0;
            $transform = $transform|0;
            $gfcm = $gfcm|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            __Z8kd3_initP8kd3_treePFvP6kcolorE($kd3,$transform);
            $0 = HEAP32[$gfcm>>2]|0;
            $1 = ($0|0)>(0);
            if (!($1)) {
                __Z9kd3_buildP8kd3_tree($kd3);
                return;
            }
            $2 = ((($gfcm)) + 16|0);
            $i$01 = 0;
            while(1) {
                $3 = HEAP32[$2>>2]|0;
                $4 = (((($3) + ($i$01<<3)|0)) + 1|0);
                $5 = HEAP8[$4>>0]|0;
                $6 = $5&255;
                $7 = (((($3) + ($i$01<<3)|0)) + 2|0);
                $8 = HEAP8[$7>>0]|0;
                $9 = $8&255;
                $10 = (((($3) + ($i$01<<3)|0)) + 3|0);
                $11 = HEAP8[$10>>0]|0;
                $12 = $11&255;
                __Z9kd3_add8gP8kd3_treeiii($kd3,$6,$9,$12);
                $13 = (($i$01) + 1)|0;
                $14 = HEAP32[$gfcm>>2]|0;
                $15 = ($13|0)<($14|0);
                if ($15) {
                    $i$01 = $13;
                } else {
                    break;
                }
            }
            __Z9kd3_buildP8kd3_tree($kd3);
            return;
        }
        function __Z23kd3_closest_transformedP8kd3_treePK6kcolorPj($kd3,$k,$dist_store) {
            $kd3 = $kd3|0;
            $k = $k|0;
            $dist_store = $dist_store|0;
            var $$lcssa = 0, $$mindist$0 = 0, $$result$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
            var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $mindist$0$ph$lcssa4 = 0, $mindist$0$ph10 = 0, $mindist$1 = 0, $or$cond = 0, $result$0$ph$lcssa5 = 0, $result$0$ph11 = 0, $result$1 = 0, $stack = 0, $stackpos$0$be = 0, $stackpos$0$ph12 = 0, $stackpos$06 = 0, $stackpos$06$lcssa43 = 0, $state = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 160|0;
            $stack = sp;
            $state = sp + 128|0;
            $0 = HEAP32[$kd3>>2]|0;
            $1 = ($0|0)==(0|0);
            if ($1) {
                __Z9kd3_buildP8kd3_tree($kd3);
            }
            $2 = HEAP32[$kd3>>2]|0;
            HEAP32[$stack>>2] = $2;
            HEAP8[$state>>0] = 0;
            $3 = ((($kd3)) + 8|0);
            $4 = ((($kd3)) + 12|0);
            $mindist$0$ph10 = -1;$result$0$ph11 = -1;$stackpos$0$ph12 = 0;
            L4: while(1) {
                $stackpos$06 = $stackpos$0$ph12;
                while(1) {
                    $5 = ($stackpos$06|0)<(32);
                    if (!($5)) {
                        label = 6;
                        break L4;
                    }
                    $6 = (($stack) + ($stackpos$06<<2)|0);
                    $7 = HEAP32[$6>>2]|0;
                    $8 = ((($7)) + 4|0);
                    $9 = HEAP32[$8>>2]|0;
                    $10 = ($9|0)<(0);
                    if ($10) {
                        $$lcssa = $7;$stackpos$06$lcssa43 = $stackpos$06;
                        break;
                    }
                    $24 = (($state) + ($stackpos$06)|0);
                    $25 = HEAP8[$24>>0]|0;
                    $26 = ($25<<24>>24)==(0);
                    $27 = (($stackpos$06|0) % 3)&-1;
                    $28 = (($k) + ($27<<1)|0);
                    $29 = HEAP16[$28>>1]|0;
                    $30 = $29 << 16 >> 16;
                    $31 = HEAP32[$7>>2]|0;
                    do {
                        if ($26) {
                            $32 = ($30|0)<($31|0);
                            if ($32) {
                                $33 = ((($7)) + 8|0);
                                $34 = (($stackpos$06) + 1)|0;
                                $35 = (($stack) + ($34<<2)|0);
                                HEAP32[$35>>2] = $33;
                            } else {
                                $36 = (($7) + ($9<<3)|0);
                                $37 = (($stackpos$06) + 1)|0;
                                $38 = (($stack) + ($37<<2)|0);
                                HEAP32[$38>>2] = $36;
                            }
                            $39 = (($stackpos$06) + 1)|0;
                            $40 = (($state) + ($39)|0);
                            HEAP8[$40>>0] = 0;
                            $stackpos$0$be = $39;
                        } else {
                            $42 = (($30) - ($31))|0;
                            $43 = ($25<<24>>24)==(1);
                            $44 = Math_imul($42, $42)|0;
                            $45 = ($44>>>0)<($mindist$0$ph10>>>0);
                            $or$cond = $43 & $45;
                            if (!($or$cond)) {
                                $55 = (($stackpos$06) + -1)|0;
                                $56 = ($stackpos$06|0)>(0);
                                if (!($56)) {
                                    $stackpos$0$be = $55;
                                    break;
                                }
                                $57 = (($state) + ($55)|0);
                                $58 = HEAP8[$57>>0]|0;
                                $59 = (($58) + 1)<<24>>24;
                                HEAP8[$57>>0] = $59;
                                $stackpos$0$be = $55;
                                break;
                            }
                            $46 = ($42|0)<(0);
                            if ($46) {
                                $47 = (($7) + ($9<<3)|0);
                                $48 = (($stackpos$06) + 1)|0;
                                $49 = (($stack) + ($48<<2)|0);
                                HEAP32[$49>>2] = $47;
                            } else {
                                $50 = ((($7)) + 8|0);
                                $51 = (($stackpos$06) + 1)|0;
                                $52 = (($stack) + ($51<<2)|0);
                                HEAP32[$52>>2] = $50;
                            }
                            $53 = (($stackpos$06) + 1)|0;
                            $54 = (($state) + ($53)|0);
                            HEAP8[$54>>0] = 0;
                            $stackpos$0$be = $53;
                        }
                    } while(0);
                    $41 = ($stackpos$0$be|0)>(-1);
                    if ($41) {
                        $stackpos$06 = $stackpos$0$be;
                    } else {
                        $mindist$0$ph$lcssa4 = $mindist$0$ph10;$result$0$ph$lcssa5 = $result$0$ph11;
                        break L4;
                    }
                }
                $11 = HEAP32[$$lcssa>>2]|0;
                $12 = ($11|0)>(-1);
                if ($12) {
                    $13 = HEAP32[$3>>2]|0;
                    $14 = ($13|0)==($11|0);
                    if ($14) {
                        $mindist$1 = $mindist$0$ph10;$result$1 = $result$0$ph11;
                    } else {
                        $15 = HEAP32[$4>>2]|0;
                        $16 = (($15) + (($11*6)|0)|0);
                        $17 = (__ZL11kc_distancePK6kcolorS1_($16,$k)|0);
                        $18 = ($17>>>0)<($mindist$0$ph10>>>0);
                        $$mindist$0 = $18 ? $17 : $mindist$0$ph10;
                        $$result$0 = $18 ? $11 : $result$0$ph11;
                        $mindist$1 = $$mindist$0;$result$1 = $$result$0;
                    }
                } else {
                    $mindist$1 = $mindist$0$ph10;$result$1 = $result$0$ph11;
                }
                $19 = (($stackpos$06$lcssa43) + -1)|0;
                $20 = ($stackpos$06$lcssa43|0)>(0);
                if (!($20)) {
                    $mindist$0$ph$lcssa4 = $mindist$1;$result$0$ph$lcssa5 = $result$1;
                    break;
                }
                $21 = (($state) + ($19)|0);
                $22 = HEAP8[$21>>0]|0;
                $23 = (($22) + 1)<<24>>24;
                HEAP8[$21>>0] = $23;
                $mindist$0$ph10 = $mindist$1;$result$0$ph11 = $result$1;$stackpos$0$ph12 = $19;
            }
            if ((label|0) == 6) {
                ___assert_fail((8192|0),(8037|0),981,(8206|0));
                // unreachable;
            }
            $60 = ($dist_store|0)==(0|0);
            if ($60) {
                STACKTOP = sp;return ($result$0$ph$lcssa5|0);
            }
            HEAP32[$dist_store>>2] = $mindist$0$ph$lcssa4;
            STACKTOP = sp;return ($result$0$ph$lcssa5|0);
        }
        function __Z13kd3_closest8gP8kd3_treeiii($kd3,$a0,$a1,$a2) {
            $kd3 = $kd3|0;
            $a0 = $a0|0;
            $a1 = $a1|0;
            $a2 = $a2|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $k = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $k = sp;
            __ZL8kc_set8gP6kcoloriii($k,$a0,$a1,$a2);
            $0 = ((($kd3)) + 28|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            if (!($2)) {
                FUNCTION_TABLE_vi[$1 & 7]($k);
            }
            $3 = (__Z23kd3_closest_transformedP8kd3_treePK6kcolorPj($kd3,$k,0)|0);
            STACKTOP = sp;return ($3|0);
        }
        function __Z24colormap_image_posterizeP9Gif_ImagePhP12Gif_ColormapP8kd3_treePj($gfi,$new_data,$old_cm,$kd3,$histogram) {
            $gfi = $gfi|0;
            $new_data = $new_data|0;
            $old_cm = $old_cm|0;
            $kd3 = $kd3|0;
            $histogram = $histogram|0;
            var $$05 = 0, $$1$lcssa = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data$03 = 0, $exitcond = 0, $i$08 = 0, $i$11 = 0, $j$04 = 0, $map = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 1024|0;
            $map = sp;
            $0 = HEAP32[$old_cm>>2]|0;
            $1 = ((($old_cm)) + 16|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($gfi)) + 20|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4 << 16 >> 16;
            $6 = ($0|0)>(0);
            if ($6) {
                $i$08 = 0;
                while(1) {
                    $11 = (((($2) + ($i$08<<3)|0)) + 1|0);
                    $12 = HEAP8[$11>>0]|0;
                    $13 = $12&255;
                    $14 = (((($2) + ($i$08<<3)|0)) + 2|0);
                    $15 = HEAP8[$14>>0]|0;
                    $16 = $15&255;
                    $17 = (((($2) + ($i$08<<3)|0)) + 3|0);
                    $18 = HEAP8[$17>>0]|0;
                    $19 = $18&255;
                    $20 = (__Z13kd3_closest8gP8kd3_treeiii($kd3,$13,$16,$19)|0);
                    $21 = (((($2) + ($i$08<<3)|0)) + 4|0);
                    HEAP32[$21>>2] = $20;
                    $22 = (($map) + ($i$08<<2)|0);
                    HEAP32[$22>>2] = $20;
                    $23 = (($2) + ($i$08<<3)|0);
                    HEAP8[$23>>0] = 1;
                    $24 = (($i$08) + 1)|0;
                    $exitcond = ($24|0)==($0|0);
                    if ($exitcond) {
                        break;
                    } else {
                        $i$08 = $24;
                    }
                }
            }
            $7 = ((($gfi)) + 10|0);
            $8 = HEAP16[$7>>1]|0;
            $9 = ($8<<16>>16)==(0);
            if ($9) {
                STACKTOP = sp;return;
            }
            $10 = ((($gfi)) + 8|0);
            $$05 = $new_data;$j$04 = 0;
            while(1) {
                $25 = HEAP16[$10>>1]|0;
                $26 = ($25<<16>>16)==(0);
                if ($26) {
                    $$1$lcssa = $$05;
                } else {
                    $27 = HEAP32[$gfi>>2]|0;
                    $28 = (($27) + ($j$04<<2)|0);
                    $29 = HEAP32[$28>>2]|0;
                    $$12 = $$05;$data$03 = $29;$i$11 = 0;
                    while(1) {
                        $30 = HEAP8[$data$03>>0]|0;
                        $31 = $30&255;
                        $32 = ($31|0)==($5|0);
                        if (!($32)) {
                            $33 = (($map) + ($31<<2)|0);
                            $34 = HEAP32[$33>>2]|0;
                            $35 = $34&255;
                            HEAP8[$$12>>0] = $35;
                            $36 = $34 & 255;
                            $37 = (($histogram) + ($36<<2)|0);
                            $38 = HEAP32[$37>>2]|0;
                            $39 = (($38) + 1)|0;
                            HEAP32[$37>>2] = $39;
                        }
                        $40 = (($i$11) + 1)|0;
                        $41 = ((($data$03)) + 1|0);
                        $42 = ((($$12)) + 1|0);
                        $43 = HEAP16[$10>>1]|0;
                        $44 = $43&65535;
                        $45 = ($40|0)<($44|0);
                        if ($45) {
                            $$12 = $42;$data$03 = $41;$i$11 = $40;
                        } else {
                            $$1$lcssa = $42;
                            break;
                        }
                    }
                }
                $46 = (($j$04) + 1)|0;
                $47 = HEAP16[$7>>1]|0;
                $48 = $47&65535;
                $49 = ($46|0)<($48|0);
                if ($49) {
                    $$05 = $$1$lcssa;$j$04 = $46;
                } else {
                    break;
                }
            }
            STACKTOP = sp;return;
        }
        function __Z30colormap_image_floyd_steinbergP9Gif_ImagePhP12Gif_ColormapP8kd3_treePj($gfi,$all_new_data,$old_cm,$kd3,$histogram) {
            $gfi = $gfi|0;
            $all_new_data = $all_new_data|0;
            $old_cm = $old_cm|0;
            $kd3 = $kd3|0;
            $histogram = $histogram|0;
            var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
            var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
            var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
            var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
            var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
            var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
            var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
            var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
            var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
            var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
            var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
            var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
            var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
            var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d0$0 = 0, $d1$0 = 0, $data$0$be = 0, $data$06 = 0, $dither_direction$015 = 0, $err$0$lcssa = 0, $err$012 = 0;
            var $err$012$phi = 0, $err1$0$lcssa = 0, $err1$013 = 0, $err1$013$phi = 0, $exitcond = 0, $exitcond29 = 0, $exitcond30 = 0, $i$021 = 0, $i$120 = 0, $i$219 = 0, $i$33 = 0, $j$014 = 0, $new_data$0$be = 0, $new_data$08 = 0, $storemerge = 0, $storemerge$in = 0, $use = 0, $x$0 = 0, $x$1$be = 0, $x$1$be$v = 0;
            var $x$110 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $use = sp;
            $0 = ((($gfi)) + 8|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($gfi)) + 20|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4 << 16 >> 16;
            $6 = HEAP32[$old_cm>>2]|0;
            $7 = ($6|0)>(0);
            if ($7) {
                $8 = ((($old_cm)) + 16|0);
                $i$021 = 0;
                while(1) {
                    $9 = HEAP32[$8>>2]|0;
                    $10 = (((($9) + ($i$021<<3)|0)) + 1|0);
                    $11 = HEAP8[$10>>0]|0;
                    $12 = $11&255;
                    $13 = (((($9) + ($i$021<<3)|0)) + 2|0);
                    $14 = HEAP8[$13>>0]|0;
                    $15 = $14&255;
                    $16 = (((($9) + ($i$021<<3)|0)) + 3|0);
                    $17 = HEAP8[$16>>0]|0;
                    $18 = $17&255;
                    $19 = (__Z13kd3_closest8gP8kd3_treeiii($kd3,$12,$15,$18)|0);
                    $20 = (((($9) + ($i$021<<3)|0)) + 4|0);
                    HEAP32[$20>>2] = $19;
                    $21 = (($9) + ($i$021<<3)|0);
                    HEAP8[$21>>0] = 1;
                    $22 = (($i$021) + 1)|0;
                    $23 = HEAP32[$old_cm>>2]|0;
                    $24 = ($22|0)<($23|0);
                    if ($24) {
                        $i$021 = $22;
                    } else {
                        break;
                    }
                }
            }
            $25 = (($2) + 2)|0;
            $26 = (_Gif_Realloc(0,12,$25,8037,1090)|0);
            $27 = (_Gif_Realloc(0,12,$25,8037,1091)|0);
            $28 = HEAP32[496>>2]|0;
            $29 = ($28|0)==(0|0);
            if ($29) {
                $30 = (_Gif_Realloc(0,4,512,8037,1095)|0);
                HEAP32[496>>2] = $30;
                $i$120 = 0;
                while(1) {
                    $38 = (_rand()|0);
                    $39 = (($38|0) % 2046)&-1;
                    $40 = (($39) + -1023)|0;
                    $41 = HEAP32[496>>2]|0;
                    $42 = (($41) + ($i$120<<2)|0);
                    HEAP32[$42>>2] = $40;
                    $43 = (($i$120) + 1)|0;
                    $exitcond30 = ($43|0)==(512);
                    if ($exitcond30) {
                        break;
                    } else {
                        $i$120 = $43;
                    }
                }
            }
            $31 = ((($gfi)) + 12|0);
            $32 = HEAP16[$31>>1]|0;
            $33 = $32&65535;
            $34 = HEAP32[496>>2]|0;
            $35 = HEAP16[$0>>1]|0;
            $36 = $35&65535;
            $37 = (($36) + 1)|0;
            $i$219 = 0;
            while(1) {
                $44 = (($33) + ($i$219))|0;
                $45 = ($44*3)|0;
                $46 = (($45|0) % 512)&-1;
                $47 = (($34) + ($46<<2)|0);
                $48 = HEAP32[$47>>2]|0;
                $49 = (($26) + (($i$219*12)|0)|0);
                HEAP32[$49>>2] = $48;
                $50 = (($45) + 1)|0;
                $51 = (($50|0) % 512)&-1;
                $52 = (($34) + ($51<<2)|0);
                $53 = HEAP32[$52>>2]|0;
                $54 = (((($26) + (($i$219*12)|0)|0)) + 4|0);
                HEAP32[$54>>2] = $53;
                $55 = (($45) + 2)|0;
                $56 = (($55|0) % 512)&-1;
                $57 = (($34) + ($56<<2)|0);
                $58 = HEAP32[$57>>2]|0;
                $59 = (((($26) + (($i$219*12)|0)|0)) + 8|0);
                HEAP32[$59>>2] = $58;
                $60 = (($i$219) + 1)|0;
                $exitcond29 = ($i$219|0)==($37|0);
                if ($exitcond29) {
                    break;
                } else {
                    $i$219 = $60;
                }
            }
            __Z17kd3_build_xradiusP8kd3_tree($kd3);
            $61 = ((($gfi)) + 10|0);
            $62 = HEAP16[$61>>1]|0;
            $63 = ($62<<16>>16)==(0);
            if ($63) {
                $err$0$lcssa = $26;$err1$0$lcssa = $27;
                _free($err$0$lcssa);
                _free($err1$0$lcssa);
                STACKTOP = sp;return;
            }
            $64 = (($2) + -1)|0;
            $65 = ((($old_cm)) + 16|0);
            $66 = ((($kd3)) + 28|0);
            $67 = ((($kd3)) + 12|0);
            $68 = ((($kd3)) + 32|0);
            $69 = $1&65535;
            $70 = (($69) + 1)|0;
            $71 = ((($use)) + 2|0);
            $72 = ((($use)) + 4|0);
            $73 = ((($use)) + 2|0);
            $74 = ((($use)) + 4|0);
            $dither_direction$015 = 0;$err$012 = $26;$err1$013 = $27;$j$014 = 0;
            while(1) {
                $75 = ($dither_direction$015|0)!=(0);
                $d0$0 = $75 ? 0 : 2;
                $x$0 = $75 ? $64 : 0;
                $76 = HEAP32[$gfi>>2]|0;
                $77 = (($76) + ($j$014<<2)|0);
                $78 = HEAP32[$77>>2]|0;
                $79 = Math_imul($j$014, $2)|0;
                $$sum = (($x$0) + ($79))|0;
                $i$33 = 0;
                while(1) {
                    $83 = (((($err1$013) + (($i$33*12)|0)|0)) + 8|0);
                    HEAP32[$83>>2] = 0;
                    $84 = (((($err1$013) + (($i$33*12)|0)|0)) + 4|0);
                    HEAP32[$84>>2] = 0;
                    $85 = (($err1$013) + (($i$33*12)|0)|0);
                    HEAP32[$85>>2] = 0;
                    $86 = (($i$33) + 1)|0;
                    $exitcond = ($i$33|0)==($70|0);
                    if ($exitcond) {
                        break;
                    } else {
                        $i$33 = $86;
                    }
                }
                $d1$0 = $75 ? 2 : 0;
                $80 = ($x$0>>>0)<($2>>>0);
                if ($80) {
                    $81 = (($all_new_data) + ($$sum)|0);
                    $82 = (($78) + ($x$0)|0);
                    $x$1$be$v = $75 ? -1 : 1;
                    $data$06 = $82;$new_data$08 = $81;$x$110 = $x$0;
                    while(1) {
                        $87 = HEAP8[$data$06>>0]|0;
                        $88 = $87&255;
                        $89 = ($88|0)==($5|0);
                        if (!($89)) {
                            $90 = HEAP32[$65>>2]|0;
                            $91 = (((($90) + ($88<<3)|0)) + 1|0);
                            $92 = HEAP8[$91>>0]|0;
                            $93 = $92&255;
                            $94 = (((($90) + ($88<<3)|0)) + 2|0);
                            $95 = HEAP8[$94>>0]|0;
                            $96 = $95&255;
                            $97 = (((($90) + ($88<<3)|0)) + 3|0);
                            $98 = HEAP8[$97>>0]|0;
                            $99 = $98&255;
                            __ZL8kc_set8gP6kcoloriii($use,$93,$96,$99);
                            $100 = HEAP32[$66>>2]|0;
                            $101 = ($100|0)==(0|0);
                            if (!($101)) {
                                FUNCTION_TABLE_vi[$100 & 7]($use);
                            }
                            $102 = (($x$110) + 1)|0;
                            $103 = HEAP16[$use>>1]|0;
                            $104 = $103 << 16 >> 16;
                            $105 = (($err$012) + (($102*12)|0)|0);
                            $106 = HEAP32[$105>>2]|0;
                            $107 = $106 & -8;
                            $108 = (($107|0) / 8)&-1;
                            $109 = (($108) + ($104))|0;
                            $110 = ($109|0)<(32767);
                            $111 = $110 ? $109 : 32767;
                            $112 = ($111|0)<(0);
                            $113 = $111&65535;
                            $114 = $112 ? 0 : $113;
                            HEAP16[$use>>1] = $114;
                            $115 = HEAP16[$71>>1]|0;
                            $116 = $115 << 16 >> 16;
                            $117 = (((($err$012) + (($102*12)|0)|0)) + 4|0);
                            $118 = HEAP32[$117>>2]|0;
                            $119 = $118 & -8;
                            $120 = (($119|0) / 8)&-1;
                            $121 = (($120) + ($116))|0;
                            $122 = ($121|0)<(32767);
                            $123 = $122 ? $121 : 32767;
                            $124 = ($123|0)<(0);
                            $125 = $123&65535;
                            $126 = $124 ? 0 : $125;
                            HEAP16[$71>>1] = $126;
                            $127 = HEAP16[$72>>1]|0;
                            $128 = $127 << 16 >> 16;
                            $129 = (((($err$012) + (($102*12)|0)|0)) + 8|0);
                            $130 = HEAP32[$129>>2]|0;
                            $131 = $130 & -8;
                            $132 = (($131|0) / 8)&-1;
                            $133 = (($132) + ($128))|0;
                            $134 = ($133|0)<(32767);
                            $135 = $134 ? $133 : 32767;
                            $136 = ($135|0)<(0);
                            $137 = $135&65535;
                            $138 = $136 ? 0 : $137;
                            HEAP16[$72>>1] = $138;
                            $139 = HEAP8[$data$06>>0]|0;
                            $140 = $139&255;
                            $141 = HEAP32[$65>>2]|0;
                            $142 = (((($141) + ($140<<3)|0)) + 4|0);
                            $143 = HEAP32[$142>>2]|0;
                            $144 = HEAP32[$67>>2]|0;
                            $145 = (($144) + (($143*6)|0)|0);
                            $146 = (__ZL11kc_distancePK6kcolorS1_($145,$use)|0);
                            $147 = HEAP32[$68>>2]|0;
                            $148 = (($147) + ($143<<2)|0);
                            $149 = HEAP32[$148>>2]|0;
                            $150 = ($146>>>0)<($149>>>0);
                            if ($150) {
                                $storemerge$in = $143;
                            } else {
                                $151 = (__Z23kd3_closest_transformedP8kd3_treePK6kcolorPj($kd3,$use,0)|0);
                                $storemerge$in = $151;
                            }
                            $storemerge = $storemerge$in&255;
                            HEAP8[$new_data$08>>0] = $storemerge;
                            $152 = $storemerge$in & 255;
                            $153 = (($histogram) + ($152<<2)|0);
                            $154 = HEAP32[$153>>2]|0;
                            $155 = (($154) + 1)|0;
                            HEAP32[$153>>2] = $155;
                            $156 = (($x$110) + ($d0$0))|0;
                            $157 = (($x$110) + ($d1$0))|0;
                            $158 = (($x$110) + 1)|0;
                            $159 = HEAP16[$use>>1]|0;
                            $160 = $159 << 16 >> 16;
                            $161 = HEAP8[$new_data$08>>0]|0;
                            $162 = $161&255;
                            $163 = HEAP32[$67>>2]|0;
                            $164 = (($163) + (($162*6)|0)|0);
                            $165 = HEAP16[$164>>1]|0;
                            $166 = $165 << 16 >> 16;
                            $167 = (($160) - ($166))|0;
                            $168 = ($159<<16>>16)==($165<<16>>16);
                            if (!($168)) {
                                $169 = $167 << 3;
                                $170 = ($167*56)|0;
                                $171 = $170 & -16;
                                $172 = (($171|0) / 16)&-1;
                                $173 = (($err$012) + (($156*12)|0)|0);
                                $174 = HEAP32[$173>>2]|0;
                                $175 = (($174) + ($172))|0;
                                HEAP32[$173>>2] = $175;
                                $176 = ($167*24)|0;
                                $177 = $176 & -16;
                                $178 = (($177|0) / 16)&-1;
                                $179 = (($err1$013) + (($157*12)|0)|0);
                                $180 = HEAP32[$179>>2]|0;
                                $181 = (($180) + ($178))|0;
                                HEAP32[$179>>2] = $181;
                                $182 = ($167*40)|0;
                                $183 = $182 & -16;
                                $184 = (($183|0) / 16)&-1;
                                $185 = (($err1$013) + (($158*12)|0)|0);
                                $186 = HEAP32[$185>>2]|0;
                                $187 = (($186) + ($184))|0;
                                HEAP32[$185>>2] = $187;
                                $188 = $169 & -16;
                                $189 = (($188|0) / 16)&-1;
                                $190 = (($err1$013) + (($156*12)|0)|0);
                                $191 = HEAP32[$190>>2]|0;
                                $192 = (($191) + ($189))|0;
                                HEAP32[$190>>2] = $192;
                            }
                            $193 = HEAP16[$73>>1]|0;
                            $194 = $193 << 16 >> 16;
                            $195 = HEAP8[$new_data$08>>0]|0;
                            $196 = $195&255;
                            $197 = HEAP32[$67>>2]|0;
                            $198 = (((($197) + (($196*6)|0)|0)) + 2|0);
                            $199 = HEAP16[$198>>1]|0;
                            $200 = $199 << 16 >> 16;
                            $201 = (($194) - ($200))|0;
                            $202 = ($193<<16>>16)==($199<<16>>16);
                            if (!($202)) {
                                $214 = $201 << 3;
                                $215 = ($201*56)|0;
                                $216 = $215 & -16;
                                $217 = (($216|0) / 16)&-1;
                                $218 = (((($err$012) + (($156*12)|0)|0)) + 4|0);
                                $219 = HEAP32[$218>>2]|0;
                                $220 = (($219) + ($217))|0;
                                HEAP32[$218>>2] = $220;
                                $221 = ($201*24)|0;
                                $222 = $221 & -16;
                                $223 = (($222|0) / 16)&-1;
                                $224 = (((($err1$013) + (($157*12)|0)|0)) + 4|0);
                                $225 = HEAP32[$224>>2]|0;
                                $226 = (($225) + ($223))|0;
                                HEAP32[$224>>2] = $226;
                                $227 = ($201*40)|0;
                                $228 = $227 & -16;
                                $229 = (($228|0) / 16)&-1;
                                $230 = (((($err1$013) + (($158*12)|0)|0)) + 4|0);
                                $231 = HEAP32[$230>>2]|0;
                                $232 = (($231) + ($229))|0;
                                HEAP32[$230>>2] = $232;
                                $233 = $214 & -16;
                                $234 = (($233|0) / 16)&-1;
                                $235 = (((($err1$013) + (($156*12)|0)|0)) + 4|0);
                                $236 = HEAP32[$235>>2]|0;
                                $237 = (($236) + ($234))|0;
                                HEAP32[$235>>2] = $237;
                            }
                            $238 = HEAP16[$74>>1]|0;
                            $239 = $238 << 16 >> 16;
                            $240 = HEAP8[$new_data$08>>0]|0;
                            $241 = $240&255;
                            $242 = HEAP32[$67>>2]|0;
                            $243 = (((($242) + (($241*6)|0)|0)) + 4|0);
                            $244 = HEAP16[$243>>1]|0;
                            $245 = $244 << 16 >> 16;
                            $246 = (($239) - ($245))|0;
                            $247 = ($238<<16>>16)==($244<<16>>16);
                            if (!($247)) {
                                $248 = $246 << 3;
                                $249 = ($246*56)|0;
                                $250 = $249 & -16;
                                $251 = (($250|0) / 16)&-1;
                                $252 = (((($err$012) + (($156*12)|0)|0)) + 8|0);
                                $253 = HEAP32[$252>>2]|0;
                                $254 = (($253) + ($251))|0;
                                HEAP32[$252>>2] = $254;
                                $255 = ($246*24)|0;
                                $256 = $255 & -16;
                                $257 = (($256|0) / 16)&-1;
                                $258 = (((($err1$013) + (($157*12)|0)|0)) + 8|0);
                                $259 = HEAP32[$258>>2]|0;
                                $260 = (($259) + ($257))|0;
                                HEAP32[$258>>2] = $260;
                                $261 = ($246*40)|0;
                                $262 = $261 & -16;
                                $263 = (($262|0) / 16)&-1;
                                $264 = (((($err1$013) + (($158*12)|0)|0)) + 8|0);
                                $265 = HEAP32[$264>>2]|0;
                                $266 = (($265) + ($263))|0;
                                HEAP32[$264>>2] = $266;
                                $267 = $248 & -16;
                                $268 = (($267|0) / 16)&-1;
                                $269 = (((($err1$013) + (($156*12)|0)|0)) + 8|0);
                                $270 = HEAP32[$269>>2]|0;
                                $271 = (($270) + ($268))|0;
                                HEAP32[$269>>2] = $271;
                            }
                        }
                        $203 = ((($data$06)) + -1|0);
                        $204 = ((($new_data$08)) + -1|0);
                        $205 = ((($data$06)) + 1|0);
                        $206 = ((($new_data$08)) + 1|0);
                        $data$0$be = $75 ? $203 : $205;
                        $new_data$0$be = $75 ? $204 : $206;
                        $x$1$be = (($x$110) + ($x$1$be$v))|0;
                        $207 = ($x$1$be>>>0)<($2>>>0);
                        if ($207) {
                            $data$06 = $data$0$be;$new_data$08 = $new_data$0$be;$x$110 = $x$1$be;
                        } else {
                            break;
                        }
                    }
                }
                $208 = $75&1;
                $209 = $208 ^ 1;
                $210 = (($j$014) + 1)|0;
                $211 = HEAP16[$61>>1]|0;
                $212 = $211&65535;
                $213 = ($210|0)<($212|0);
                if ($213) {
                    $err1$013$phi = $err$012;$err$012$phi = $err1$013;$dither_direction$015 = $209;$j$014 = $210;$err1$013 = $err1$013$phi;$err$012 = $err$012$phi;
                } else {
                    $err$0$lcssa = $err1$013;$err1$0$lcssa = $err$012;
                    break;
                }
            }
            _free($err$0$lcssa);
            _free($err1$0$lcssa);
            STACKTOP = sp;return;
        }
        function __Z15colormap_streamP10Gif_StreamP12Gif_ColormapP13Gt_OutputData($gfs,$new_cm,$od) {
            $gfs = $gfs|0;
            $new_cm = $new_cm|0;
            $od = $od|0;
            var $$in = 0, $$lcssa = 0, $$lcssa13 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
            var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
            var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
            var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
            var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
            var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
            var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
            var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
            var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
            var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
            var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $compress_new_cm$0$lcssa = 0, $compress_new_cm$033 = 0, $compress_new_cm$1 = 0, $data$015 = 0, $exitcond = 0, $exitcond43 = 0;
            var $histogram = 0, $imagei$034 = 0, $imagei$116 = 0, $j$041 = 0, $j$13948 = 0, $j$2 = 0, $j$332 = 0, $j$428 = 0, $j$5 = 0, $j$624 = 0, $j$721 = 0, $j$819 = 0, $j$819$lcssa = 0, $kd3 = 0, $new_col$0$ph = 0, $new_ncol = 0, $size$014 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 1072|0;
            $kd3 = sp + 1032|0;
            $new_ncol = sp;
            $histogram = sp + 8|0;
            $0 = ((($new_cm)) + 16|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = HEAP32[$new_cm>>2]|0;
            HEAP32[$new_ncol>>2] = $2;
            $3 = ((($new_cm)) + 4|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)<(256);
            if ($5) {
                $6 = (_Gif_Realloc(0,8,256,8037,1574)|0);
                $7 = HEAP32[$new_ncol>>2]|0;
                $8 = $7 << 3;
                _memcpy(($6|0),($1|0),($8|0))|0;
                _free($1);
                HEAP32[$0>>2] = $6;
                HEAP32[$3>>2] = 256;
                $new_col$0$ph = $6;
            } else {
                $new_col$0$ph = $1;
            }
            $j$041 = 0;
            while(1) {
                $11 = (((($new_col$0$ph) + ($j$041<<3)|0)) + 4|0);
                HEAP32[$11>>2] = 0;
                $12 = (($j$041) + 1)|0;
                $exitcond43 = ($12|0)==(256);
                if ($exitcond43) {
                    break;
                } else {
                    $j$041 = $12;
                }
            }
            $9 = HEAP32[$new_cm>>2]|0;
            $10 = ($9|0)>(0);
            L7: do {
                if ($10) {
                    $j$13948 = 0;
                    while(1) {
                        $15 = (((($new_col$0$ph) + ($j$13948<<3)|0)) + 1|0);
                        $16 = HEAP8[$15>>0]|0;
                        $17 = (((($new_col$0$ph) + ($j$13948<<3)|0)) + 2|0);
                        $18 = HEAP8[$17>>0]|0;
                        $19 = ($16<<24>>24)==($18<<24>>24);
                        if (!($19)) {
                            $$lcssa13 = 0;
                            break L7;
                        }
                        $20 = (((($new_col$0$ph) + ($j$13948<<3)|0)) + 3|0);
                        $21 = HEAP8[$20>>0]|0;
                        $22 = ($16<<24>>24)==($21<<24>>24);
                        $13 = (($j$13948) + 1)|0;
                        if (!($22)) {
                            $$lcssa13 = 0;
                            break L7;
                        }
                        $14 = ($13|0)<($9|0);
                        if ($14) {
                            $j$13948 = $13;
                        } else {
                            $$lcssa13 = 2;
                            break;
                        }
                    }
                } else {
                    $$lcssa13 = 2;
                }
            } while(0);
            __Z14kd3_init_buildP8kd3_treePFvP6kcolorEPK12Gif_Colormap($kd3,$$lcssa13,$new_cm);
            $23 = ((($gfs)) + 4|0);
            $24 = HEAP32[$23>>2]|0;
            $25 = ($24|0)>(0);
            if ($25) {
                $26 = ((($gfs)) + 12|0);
                $compress_new_cm$033 = 1;$imagei$034 = 0;
                while(1) {
                    $27 = HEAP32[$gfs>>2]|0;
                    $28 = (($27) + ($imagei$034<<2)|0);
                    $29 = HEAP32[$28>>2]|0;
                    $30 = ((($29)) + 24|0);
                    $31 = HEAP32[$30>>2]|0;
                    $32 = ($31|0)==(0|0);
                    if ($32) {
                        $33 = HEAP32[$26>>2]|0;
                        $34 = ($33|0)==(0|0);
                        if ($34) {
                            $compress_new_cm$1 = 0;
                        } else {
                            $44 = $33;
                            label = 13;
                        }
                    } else {
                        $44 = $31;
                        label = 13;
                    }
                    if ((label|0) == 13) {
                        label = 0;
                        $$in = HEAP32[$29>>2]|0;
                        $35 = ($$in|0)==(0|0);
                        $36 = ((($29)) + 8|0);
                        $37 = HEAP16[$36>>1]|0;
                        $38 = $37&65535;
                        $39 = ((($29)) + 10|0);
                        $40 = HEAP16[$39>>1]|0;
                        $41 = $40&65535;
                        $42 = Math_imul($41, $38)|0;
                        $43 = (_Gif_Realloc(0,1,$42,8037,1601)|0);
                        __Z13unmark_colorsP12Gif_Colormap($new_cm);
                        __Z13unmark_colorsP12Gif_Colormap($44);
                        if ($35) {
                            (_Gif_FullUncompressImage($gfs,$29,0)|0);
                        }
                        __ZL14kd3_enable_allP8kd3_tree($kd3);
                        $j$2 = 0;
                        while(1) {
                            $45 = ($j$2|0)<(256);
                            if ($45) {
                                $46 = (($histogram) + ($j$2<<2)|0);
                                HEAP32[$46>>2] = 0;
                                $47 = (($j$2) + 1)|0;
                                $j$2 = $47;
                                continue;
                            } else {
                                __ZL6ditherP9Gif_ImagePhP12Gif_ColormapP8kd3_treePjP13Gt_OutputData($29,$43,$44,$kd3,$histogram,$od);
                                $48 = (__ZL23try_assign_transparencyP9Gif_ImageP12Gif_ColormapPhS2_PiP8kd3_treePj($29,$44,$43,$new_cm,$new_ncol,$kd3,$histogram)|0);
                                $49 = ($48|0)==(0);
                                if ($49) {
                                    break;
                                } else {
                                    $j$2 = 0;
                                    continue;
                                }
                            }
                        }
                        _Gif_ReleaseUncompressedImage($29);
                        _Gif_ReleaseCompressedImage($29);
                        (_Gif_SetUncompressedImage($29,$43,1,0)|0);
                        if ($35) {
                            (_Gif_FullCompressImage($gfs,$29,780)|0);
                            _Gif_ReleaseUncompressedImage($29);
                            $j$332 = 0;
                        } else {
                            $j$332 = 0;
                        }
                        while(1) {
                            $50 = (($histogram) + ($j$332<<2)|0);
                            $51 = HEAP32[$50>>2]|0;
                            $52 = (((($new_col$0$ph) + ($j$332<<3)|0)) + 4|0);
                            $53 = HEAP32[$52>>2]|0;
                            $54 = (($53) + ($51))|0;
                            HEAP32[$52>>2] = $54;
                            $55 = (($j$332) + 1)|0;
                            $exitcond = ($55|0)==(256);
                            if ($exitcond) {
                                break;
                            } else {
                                $j$332 = $55;
                            }
                        }
                        $56 = ((($29)) + 20|0);
                        $57 = HEAP16[$56>>1]|0;
                        $58 = ($57<<16>>16)>(-1);
                        if ($58) {
                            $59 = $57 << 16 >> 16;
                            $60 = HEAP16[$36>>1]|0;
                            $61 = $60&65535;
                            $62 = HEAP16[$39>>1]|0;
                            $63 = $62&65535;
                            $64 = Math_imul($63, $61)|0;
                            $65 = $64 >>> 3;
                            $66 = (((($new_col$0$ph) + ($59<<3)|0)) + 4|0);
                            $67 = HEAP32[$66>>2]|0;
                            $68 = (($65) + ($67))|0;
                            HEAP32[$66>>2] = $68;
                        }
                        $compress_new_cm$1 = $compress_new_cm$033;
                    }
                    $69 = HEAP32[$30>>2]|0;
                    $70 = ($69|0)==(0|0);
                    if (!($70)) {
                        _Gif_DeleteColormap($69);
                        HEAP32[$30>>2] = 0;
                    }
                    $71 = (($imagei$034) + 1)|0;
                    $72 = HEAP32[$23>>2]|0;
                    $73 = ($71|0)<($72|0);
                    if ($73) {
                        $compress_new_cm$033 = $compress_new_cm$1;$imagei$034 = $71;
                    } else {
                        $compress_new_cm$0$lcssa = $compress_new_cm$1;
                        break;
                    }
                }
            } else {
                $compress_new_cm$0$lcssa = 1;
            }
            $74 = HEAP32[$new_ncol>>2]|0;
            HEAP32[$new_cm>>2] = $74;
            $75 = HEAP32[$23>>2]|0;
            $76 = ($75|0)==(0);
            if ($76) {
                label = 30;
            } else {
                $77 = HEAP32[$gfs>>2]|0;
                $78 = HEAP32[$77>>2]|0;
                $79 = ((($78)) + 20|0);
                $80 = HEAP16[$79>>1]|0;
                $81 = ($80<<16>>16)<(0);
                if ($81) {
                    label = 30;
                } else {
                    label = 33;
                }
            }
            if ((label|0) == 30) {
                $82 = ((($gfs)) + 12|0);
                $83 = HEAP32[$82>>2]|0;
                $84 = ($83|0)==(0|0);
                if ($84) {
                    label = 33;
                } else {
                    $85 = ((($gfs)) + 16|0);
                    $86 = HEAP16[$85>>1]|0;
                    $87 = $86&65535;
                    $88 = HEAP32[$83>>2]|0;
                    $89 = ($87|0)<($88|0);
                    if ($89) {
                        $90 = ((($83)) + 16|0);
                        $91 = HEAP32[$90>>2]|0;
                        $92 = (((($91) + ($87<<3)|0)) + 1|0);
                        $93 = HEAP8[$92>>0]|0;
                        $94 = $93&255;
                        $95 = (((($91) + ($87<<3)|0)) + 2|0);
                        $96 = HEAP8[$95>>0]|0;
                        $97 = $96&255;
                        $98 = (((($91) + ($87<<3)|0)) + 3|0);
                        $99 = HEAP8[$98>>0]|0;
                        $100 = $99&255;
                        $101 = (__Z13kd3_closest8gP8kd3_treeiii($kd3,$94,$97,$100)|0);
                        $102 = $101&65535;
                        HEAP16[$85>>1] = $102;
                        $103 = $101 & 65535;
                        $104 = (((($new_col$0$ph) + ($103<<3)|0)) + 4|0);
                        $105 = HEAP32[$104>>2]|0;
                        $106 = (($105) + 1)|0;
                        HEAP32[$104>>2] = $106;
                    } else {
                        label = 33;
                    }
                }
            }
            do {
                if ((label|0) == 33) {
                    $107 = HEAP32[$23>>2]|0;
                    $108 = ($107|0)>(0);
                    if ($108) {
                        $109 = HEAP32[$gfs>>2]|0;
                        $110 = HEAP32[$109>>2]|0;
                        $111 = ((($110)) + 20|0);
                        $112 = HEAP16[$111>>1]|0;
                        $113 = ($112<<16>>16)>(-1);
                        if ($113) {
                            $114 = ((($gfs)) + 16|0);
                            HEAP16[$114>>1] = $112;
                            break;
                        }
                    }
                    $115 = ((($gfs)) + 16|0);
                    HEAP16[$115>>1] = 0;
                }
            } while(0);
            $116 = ((($gfs)) + 12|0);
            $117 = HEAP32[$116>>2]|0;
            _Gif_DeleteColormap($117);
            __Z11kd3_cleanupP8kd3_tree($kd3);
            $118 = (_Gif_CopyColormap($new_cm)|0);
            HEAP32[$116>>2] = $118;
            $119 = HEAP32[$new_cm>>2]|0;
            $120 = ($119|0)>(0);
            if ($120) {
                $121 = HEAP32[$116>>2]|0;
                $122 = ((($121)) + 16|0);
                $123 = HEAP32[$122>>2]|0;
                $124 = HEAP32[$new_cm>>2]|0;
                $j$428 = 0;
                while(1) {
                    $125 = (($123) + ($j$428<<3)|0);
                    HEAP8[$125>>0] = 0;
                    $126 = (($j$428) + 1)|0;
                    $127 = ($126|0)<($124|0);
                    if ($127) {
                        $j$428 = $126;
                    } else {
                        break;
                    }
                }
            }
            $128 = ($compress_new_cm$0$lcssa|0)==(0);
            if ($128) {
                STACKTOP = sp;return;
            }
            $129 = HEAP32[$new_cm>>2]|0;
            $130 = (($129) + -1)|0;
            $j$5 = 0;
            while(1) {
                $131 = ($j$5|0)<($130|0);
                if (!($131)) {
                    label = 70;
                    break;
                }
                $132 = (((($new_col$0$ph) + ($j$5<<3)|0)) + 4|0);
                $133 = HEAP32[$132>>2]|0;
                $134 = ($133|0)==(0);
                if ($134) {
                    break;
                }
                $135 = (($j$5) + 1)|0;
                $136 = (((($new_col$0$ph) + ($135<<3)|0)) + 4|0);
                $137 = HEAP32[$136>>2]|0;
                $138 = ($133>>>0)<($137>>>0);
                if ($138) {
                    break;
                } else {
                    $j$5 = $135;
                }
            }
            if ((label|0) == 70) {
                STACKTOP = sp;return;
            }
            $139 = HEAP32[$116>>2]|0;
            $140 = ((($139)) + 16|0);
            $141 = HEAP32[$140>>2]|0;
            $142 = HEAP32[$new_cm>>2]|0;
            $143 = ($142|0)>(0);
            if ($143) {
                $144 = HEAP32[$new_cm>>2]|0;
                $j$624 = 0;
                while(1) {
                    $145 = $j$624&255;
                    $146 = (($141) + ($j$624<<3)|0);
                    HEAP8[$146>>0] = $145;
                    $147 = (($j$624) + 1)|0;
                    $148 = ($147|0)<($144|0);
                    if ($148) {
                        $j$624 = $147;
                    } else {
                        $$lcssa = $144;
                        break;
                    }
                }
            } else {
                $$lcssa = $142;
            }
            _qsort($141,$$lcssa,8,12);
            $149 = HEAP32[$new_cm>>2]|0;
            $150 = ($149|0)>(0);
            L76: do {
                if ($150) {
                    $151 = HEAP32[$new_cm>>2]|0;
                    $j$721 = 0;
                    while(1) {
                        $153 = (($141) + ($j$721<<3)|0);
                        $154 = HEAP8[$153>>0]|0;
                        $155 = $154&255;
                        $156 = (($histogram) + ($155<<2)|0);
                        HEAP32[$156>>2] = $j$721;
                        $157 = (($j$721) + 1)|0;
                        $158 = ($157|0)<($151|0);
                        if ($158) {
                            $j$721 = $157;
                        } else {
                            break;
                        }
                    }
                    $$pr = HEAP32[$new_cm>>2]|0;
                    $152 = ($$pr|0)>(0);
                    if ($152) {
                        $j$819 = 0;
                        while(1) {
                            $159 = (((($141) + ($j$819<<3)|0)) + 4|0);
                            $160 = HEAP32[$159>>2]|0;
                            $161 = ($160|0)==(0);
                            if ($161) {
                                $j$819$lcssa = $j$819;
                                break;
                            }
                            $163 = (($j$819) + 1)|0;
                            $164 = HEAP32[$new_cm>>2]|0;
                            $165 = ($163|0)<($164|0);
                            if ($165) {
                                $j$819 = $163;
                            } else {
                                break L76;
                            }
                        }
                        $162 = HEAP32[$116>>2]|0;
                        HEAP32[$162>>2] = $j$819$lcssa;
                    }
                }
            } while(0);
            $166 = ((($gfs)) + 16|0);
            $167 = HEAP16[$166>>1]|0;
            $168 = $167&65535;
            $169 = HEAP32[$116>>2]|0;
            $170 = HEAP32[$169>>2]|0;
            $171 = ($168|0)<($170|0);
            if ($171) {
                $172 = (($histogram) + ($168<<2)|0);
                $173 = HEAP32[$172>>2]|0;
                $174 = $173&65535;
                HEAP16[$166>>1] = $174;
            }
            $175 = HEAP32[$23>>2]|0;
            $176 = ($175|0)>(0);
            if ($176) {
                $imagei$116 = 0;
                while(1) {
                    $177 = HEAP32[$gfs>>2]|0;
                    $178 = (($177) + ($imagei$116<<2)|0);
                    $179 = HEAP32[$178>>2]|0;
                    $180 = HEAP32[$179>>2]|0;
                    $181 = ($180|0)==(0|0);
                    if ($181) {
                        (_Gif_FullUncompressImage($gfs,$179,0)|0);
                    }
                    $182 = ((($179)) + 8|0);
                    $183 = HEAP16[$182>>1]|0;
                    $184 = $183&65535;
                    $185 = ((($179)) + 10|0);
                    $186 = HEAP16[$185>>1]|0;
                    $187 = $186&65535;
                    $188 = Math_imul($187, $184)|0;
                    $189 = ($188|0)==(0);
                    if (!($189)) {
                        $190 = ((($179)) + 4|0);
                        $191 = HEAP32[$190>>2]|0;
                        $data$015 = $191;$size$014 = $188;
                        while(1) {
                            $192 = HEAP8[$data$015>>0]|0;
                            $193 = $192&255;
                            $194 = (($histogram) + ($193<<2)|0);
                            $195 = HEAP32[$194>>2]|0;
                            $196 = $195&255;
                            HEAP8[$data$015>>0] = $196;
                            $197 = (($size$014) + -1)|0;
                            $198 = ((($data$015)) + 1|0);
                            $199 = ($197|0)==(0);
                            if ($199) {
                                break;
                            } else {
                                $data$015 = $198;$size$014 = $197;
                            }
                        }
                    }
                    $200 = ((($179)) + 20|0);
                    $201 = HEAP16[$200>>1]|0;
                    $202 = ($201<<16>>16)>(-1);
                    if ($202) {
                        $203 = $201 << 16 >> 16;
                        $204 = (($histogram) + ($203<<2)|0);
                        $205 = HEAP32[$204>>2]|0;
                        $206 = $205&65535;
                        HEAP16[$200>>1] = $206;
                    }
                    if ($181) {
                        (_Gif_FullCompressImage($gfs,$179,780)|0);
                        _Gif_ReleaseUncompressedImage($179);
                    }
                    $207 = (($imagei$116) + 1)|0;
                    $208 = HEAP32[$23>>2]|0;
                    $209 = ($207|0)<($208|0);
                    if ($209) {
                        $imagei$116 = $207;
                    } else {
                        break;
                    }
                }
            }
            STACKTOP = sp;return;
        }
        function __Z15set_dither_typeP13Gt_OutputDataPKc($od,$name) {
            $od = $od|0;
            $name = $name|0;
            var $$ = 0, $$0 = 0, $$09$ph = 0, $$0923 = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
            var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
            var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0;
            var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
            var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
            var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
            var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
            var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $buf = 0, $comma = 0, $isdigit = 0, $isdigittmp = 0, $nparm$0$lcssa = 0, $nparm$015 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond8 = 0;
            var $parm = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 288|0;
            $parm = sp + 8|0;
            $comma = sp;
            $buf = sp + 24|0;
            $0 = (_strchr($name,44)|0);
            HEAP32[$comma>>2] = $0;
            $1 = HEAP32[$comma>>2]|0;
            $2 = ($1|0)==(0|0);
            L1: do {
                if ($2) {
                    $$0923 = $name;$nparm$0$lcssa = 0;
                } else {
                    $3 = $1;
                    $4 = $name;
                    $5 = (($3) - ($4))|0;
                    $6 = ($5>>>0)<(256);
                    if ($6) {
                        _memcpy(($buf|0),($name|0),($5|0))|0;
                        $7 = HEAP32[$comma>>2]|0;
                        $8 = $7;
                        $9 = (($8) - ($4))|0;
                        $10 = (($buf) + ($9)|0);
                        HEAP8[$10>>0] = 0;
                        $$09$ph = $buf;
                    } else {
                        $$09$ph = $name;
                    }
                    $$pr = HEAP32[$comma>>2]|0;
                    $11 = ($$pr|0)==(0|0);
                    if ($11) {
                        $$0923 = $$09$ph;$nparm$0$lcssa = 0;
                    } else {
                        $13 = $$pr;$nparm$015 = 0;
                        while(1) {
                            $12 = HEAP8[$13>>0]|0;
                            $14 = ($12<<24>>24)==(0);
                            if ($14) {
                                $$0923 = $$09$ph;$nparm$0$lcssa = $nparm$015;
                                break L1;
                            }
                            $15 = ((($13)) + 1|0);
                            $16 = HEAP8[$15>>0]|0;
                            $17 = $16&255;
                            $isdigittmp = (($17) + -48)|0;
                            $isdigit = ($isdigittmp>>>0)<(10);
                            if (!($isdigit)) {
                                $$0923 = $$09$ph;$nparm$0$lcssa = $nparm$015;
                                break L1;
                            }
                            $18 = (_strtol($15,$comma,10)|0);
                            $19 = (($parm) + ($nparm$015<<2)|0);
                            HEAP32[$19>>2] = $18;
                            $20 = (($nparm$015) + 1)|0;
                            $21 = HEAP32[$comma>>2]|0;
                            $22 = ($21|0)==(0|0);
                            if ($22) {
                                $$0923 = $$09$ph;$nparm$0$lcssa = $20;
                                break;
                            } else {
                                $13 = $21;$nparm$015 = $20;
                            }
                        }
                    }
                }
            } while(0);
            $23 = ((($od)) + 44|0);
            $24 = HEAP32[$23>>2]|0;
            $25 = ($24|0)==(4);
            if ($25) {
                $26 = ((($od)) + 48|0);
                $27 = HEAP32[$26>>2]|0;
                _free($27);
            }
            HEAP32[$23>>2] = 0;
            $28 = (_strcmp($$0923,20839)|0);
            $29 = ($28|0)==(0);
            L14: do {
                if (!($29)) {
                    $30 = (_strcmp($$0923,21184)|0);
                    $31 = ($30|0)==(0);
                    if (!($31)) {
                        $32 = (_strcmp($$0923,21176)|0);
                        $33 = ($32|0)==(0);
                        if ($33) {
                            HEAP32[$23>>2] = 1;
                            break;
                        }
                        $34 = (_strcmp($$0923,8230)|0);
                        $35 = ($34|0)==(0);
                        if (!($35)) {
                            $36 = (_strcmp($$0923,8246)|0);
                            $37 = ($36|0)==(0);
                            if (!($37)) {
                                $38 = (_strcmp($$0923,8249)|0);
                                $39 = ($38|0)==(0);
                                do {
                                    if (!($39)) {
                                        $40 = (_strcmp($$0923,8252)|0);
                                        $41 = ($40|0)==(0);
                                        if (!($41)) {
                                            $42 = (_strcmp($$0923,8257)|0);
                                            $43 = ($42|0)==(0);
                                            $44 = ($nparm$0$lcssa|0)>(0);
                                            $or$cond = $44 & $43;
                                            if ($or$cond) {
                                                $45 = HEAP32[$parm>>2]|0;
                                                $46 = ($45|0)==(3);
                                                if ($46) {
                                                    break;
                                                }
                                            }
                                            $48 = (_strcmp($$0923,8272)|0);
                                            $49 = ($48|0)==(0);
                                            do {
                                                if (!($49)) {
                                                    $50 = (_strcmp($$0923,8275)|0);
                                                    $51 = ($50|0)==(0);
                                                    if (!($51)) {
                                                        $52 = (_strcmp($$0923,8257)|0);
                                                        $53 = ($52|0)==(0);
                                                        $or$cond4 = $44 & $53;
                                                        if ($or$cond4) {
                                                            $54 = HEAP32[$parm>>2]|0;
                                                            $55 = ($54|0)==(4);
                                                            if ($55) {
                                                                break;
                                                            }
                                                        }
                                                        $57 = (_strcmp($$0923,8300)|0);
                                                        $58 = ($57|0)==(0);
                                                        do {
                                                            if (!($58)) {
                                                                $59 = (_strcmp($$0923,8303)|0);
                                                                $60 = ($59|0)==(0);
                                                                if (!($60)) {
                                                                    $61 = (_strcmp($$0923,8257)|0);
                                                                    $62 = ($61|0)==(0);
                                                                    $or$cond6 = $44 & $62;
                                                                    if ($or$cond6) {
                                                                        $63 = HEAP32[$parm>>2]|0;
                                                                        $64 = ($63|0)==(8);
                                                                        if ($64) {
                                                                            break;
                                                                        }
                                                                    }
                                                                    $66 = (_strcmp($$0923,8376)|0);
                                                                    $67 = ($66|0)==(0);
                                                                    do {
                                                                        if (!($67)) {
                                                                            $68 = (_strcmp($$0923,8381)|0);
                                                                            $69 = ($68|0)==(0);
                                                                            if ($69) {
                                                                                break;
                                                                            }
                                                                            $70 = (_strcmp($$0923,8257)|0);
                                                                            $71 = ($70|0)==(0);
                                                                            if ($71) {
                                                                                break;
                                                                            }
                                                                            $72 = (_strcmp($$0923,8389)|0);
                                                                            $73 = ($72|0)==(0);
                                                                            if ($73) {
                                                                                break;
                                                                            }
                                                                            $75 = (_strcmp($$0923,12497)|0);
                                                                            $76 = ($75|0)==(0);
                                                                            do {
                                                                                if (!($76)) {
                                                                                    $77 = (_strcmp($$0923,12504)|0);
                                                                                    $78 = ($77|0)==(0);
                                                                                    if ($78) {
                                                                                        break;
                                                                                    }
                                                                                    $80 = (_strcmp($$0923,12581)|0);
                                                                                    $81 = ($80|0)==(0);
                                                                                    do {
                                                                                        if (!($81)) {
                                                                                            $82 = (_strcmp($$0923,12590)|0);
                                                                                            $83 = ($82|0)==(0);
                                                                                            if ($83) {
                                                                                                break;
                                                                                            }
                                                                                            $84 = (_strcmp($$0923,12595)|0);
                                                                                            $85 = ($84|0)==(0);
                                                                                            if ($85) {
                                                                                                break;
                                                                                            }
                                                                                            $86 = (_strcmp($$0923,12607)|0);
                                                                                            $87 = ($86|0)==(0);
                                                                                            if ($87) {
                                                                                                break;
                                                                                            }
                                                                                            $102 = (_strcmp($$0923,12615)|0);
                                                                                            $103 = ($102|0)==(0);
                                                                                            do {
                                                                                                if (!($103)) {
                                                                                                    $104 = (_strcmp($$0923,12626)|0);
                                                                                                    $105 = ($104|0)==(0);
                                                                                                    if ($105) {
                                                                                                        break;
                                                                                                    }
                                                                                                    $106 = (_strcmp($$0923,12633)|0);
                                                                                                    $107 = ($106|0)==(0);
                                                                                                    if ($107) {
                                                                                                        break;
                                                                                                    } else {
                                                                                                        $$0 = -1;
                                                                                                    }
                                                                                                    STACKTOP = sp;return ($$0|0);
                                                                                                }
                                                                                            } while(0);
                                                                                            do {
                                                                                                if ($44) {
                                                                                                    $108 = HEAP32[$parm>>2]|0;
                                                                                                    $109 = ($108|0)>(0);
                                                                                                    $$11 = $109 ? $108 : 6;
                                                                                                    $110 = ($nparm$0$lcssa|0)>(1);
                                                                                                    if (!($110)) {
                                                                                                        $114 = $$11;$115 = 2;
                                                                                                        break;
                                                                                                    }
                                                                                                    $111 = ((($parm)) + 4|0);
                                                                                                    $112 = HEAP32[$111>>2]|0;
                                                                                                    $113 = ($112|0)<(2);
                                                                                                    $$12 = $113 ? 2 : $112;
                                                                                                    $114 = $$11;$115 = $$12;
                                                                                                } else {
                                                                                                    $114 = 6;$115 = 2;
                                                                                                }
                                                                                            } while(0);
                                                                                            HEAP32[$23>>2] = 4;
                                                                                            $116 = (__ZL27make_halftone_matrix_squareiii($114,$114,$115)|0);
                                                                                            $117 = ((($od)) + 48|0);
                                                                                            HEAP32[$117>>2] = $116;
                                                                                            break L14;
                                                                                        }
                                                                                    } while(0);
                                                                                    do {
                                                                                        if ($44) {
                                                                                            $88 = HEAP32[$parm>>2]|0;
                                                                                            $89 = ($88|0)>(0);
                                                                                            $$ = $89 ? $88 : 6;
                                                                                            $90 = ($nparm$0$lcssa|0)>(1);
                                                                                            if (!($90)) {
                                                                                                $95 = $$;$99 = 2;
                                                                                                break;
                                                                                            }
                                                                                            $91 = ((($parm)) + 4|0);
                                                                                            $92 = HEAP32[$91>>2]|0;
                                                                                            $93 = ($92|0)<(2);
                                                                                            $$10 = $93 ? 2 : $92;
                                                                                            $95 = $$;$99 = $$10;
                                                                                        } else {
                                                                                            $95 = 6;$99 = 2;
                                                                                        }
                                                                                    } while(0);
                                                                                    HEAP32[$23>>2] = 4;
                                                                                    $94 = (+($95|0));
                                                                                    $96 = $94 * 1.7320508075688772;
                                                                                    $97 = $96 + 0.5;
                                                                                    $98 = (~~(($97)));
                                                                                    $100 = (__ZL31make_halftone_matrix_triangulariii($95,$98,$99)|0);
                                                                                    $101 = ((($od)) + 48|0);
                                                                                    HEAP32[$101>>2] = $100;
                                                                                    break L14;
                                                                                }
                                                                            } while(0);
                                                                            HEAP32[$23>>2] = 3;
                                                                            $79 = ((($od)) + 48|0);
                                                                            HEAP32[$79>>2] = 12513;
                                                                            break L14;
                                                                        }
                                                                    } while(0);
                                                                    HEAP32[$23>>2] = 3;
                                                                    $74 = ((($od)) + 48|0);
                                                                    HEAP32[$74>>2] = 8397;
                                                                    break L14;
                                                                }
                                                            }
                                                        } while(0);
                                                        HEAP32[$23>>2] = 3;
                                                        $65 = ((($od)) + 48|0);
                                                        HEAP32[$65>>2] = 8308;
                                                        break L14;
                                                    }
                                                }
                                            } while(0);
                                            HEAP32[$23>>2] = 3;
                                            $56 = ((($od)) + 48|0);
                                            HEAP32[$56>>2] = 8280;
                                            break L14;
                                        }
                                    }
                                } while(0);
                                HEAP32[$23>>2] = 3;
                                $47 = ((($od)) + 48|0);
                                HEAP32[$47>>2] = 8259;
                                break;
                            }
                        }
                        HEAP32[$23>>2] = 2;
                    }
                }
            } while(0);
            $118 = HEAP32[$23>>2]|0;
            $119 = ($118|0)==(3);
            $120 = ($nparm$0$lcssa|0)>(1);
            $or$cond8 = $120 & $119;
            if (!($or$cond8)) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $121 = ((($parm)) + 4|0);
            $122 = HEAP32[$121>>2]|0;
            $123 = ($122|0)>(1);
            if (!($123)) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $124 = ((($od)) + 48|0);
            $125 = HEAP32[$124>>2]|0;
            $126 = ((($125)) + 3|0);
            $127 = HEAP8[$126>>0]|0;
            $128 = $127&255;
            $129 = ($122|0)==($128|0);
            if ($129) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $130 = HEAP8[$125>>0]|0;
            $131 = $130&255;
            $132 = ((($125)) + 1|0);
            $133 = HEAP8[$132>>0]|0;
            $134 = $133&255;
            $135 = Math_imul($134, $131)|0;
            $136 = (($135) + 4)|0;
            $137 = (_Gif_Realloc(0,1,$136,8037,1998)|0);
            $138 = HEAP32[$124>>2]|0;
            _memcpy(($137|0),($138|0),($136|0))|0;
            $139 = HEAP32[$121>>2]|0;
            $140 = $139&255;
            $141 = ((($137)) + 3|0);
            HEAP8[$141>>0] = $140;
            HEAP32[$124>>2] = $137;
            HEAP32[$23>>2] = 4;
            $$0 = 0;
            STACKTOP = sp;return ($$0|0);
        }
        function __ZL11kchist_growP6kchist($kch) {
            $kch = $kch|0;
            var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$12 = 0, $i$21 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $tmpcast$byval_copy = sp;
            $0 = HEAP32[$kch>>2]|0;
            $1 = ((($kch)) + 8|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)==(0);
            if ($3) {
                $4 = ((($kch)) + 4|0);
                $5 = HEAP32[$4>>2]|0;
                $9 = $5;
            } else {
                $9 = $2;
            }
            $i$0 = 0;
            while(1) {
                $6 = (516 + ($i$0<<2)|0);
                $7 = HEAP32[$6>>2]|0;
                $8 = ($7|0)>($9|0);
                $10 = (($i$0) + 1)|0;
                if ($8) {
                    $$lcssa = $7;
                    break;
                } else {
                    $i$0 = $10;
                }
            }
            HEAP32[$1>>2] = $$lcssa;
            $11 = (_Gif_Realloc(0,12,$$lcssa,8037,256)|0);
            HEAP32[$kch>>2] = $11;
            $12 = ((($kch)) + 4|0);
            HEAP32[$12>>2] = 0;
            $13 = HEAP32[$1>>2]|0;
            $14 = ($13|0)==(0);
            if (!($14)) {
                $15 = HEAP32[$kch>>2]|0;
                $16 = HEAP32[$1>>2]|0;
                $i$12 = 0;
                while(1) {
                    $18 = (((($15) + (($i$12*12)|0)|0)) + 8|0);
                    HEAP32[$18>>2] = 0;
                    $19 = (($i$12) + 1)|0;
                    $20 = ($19|0)==($16|0);
                    if ($20) {
                        break;
                    } else {
                        $i$12 = $19;
                    }
                }
            }
            $17 = ($9|0)==(0);
            if ($17) {
                _free($0);
                STACKTOP = sp;return;
            } else {
                $i$21 = 0;
            }
            while(1) {
                $21 = (((($0) + (($i$21*12)|0)|0)) + 8|0);
                $22 = HEAP32[$21>>2]|0;
                $23 = ($22|0)==(0);
                if (!($23)) {
                    $24 = (($0) + (($i$21*12)|0)|0);
                    $25 = HEAP32[$21>>2]|0;
                    ;HEAP16[$tmpcast$byval_copy>>1]=HEAP16[$24>>1]|0;HEAP16[$tmpcast$byval_copy+2>>1]=HEAP16[$24+2>>1]|0;HEAP16[$tmpcast$byval_copy+4>>1]=HEAP16[$24+4>>1]|0;
                    (__Z10kchist_addP6kchist6kcolorj($kch,$tmpcast$byval_copy,$25)|0);
                }
                $26 = (($i$21) + 1)|0;
                $27 = ($26|0)==($9|0);
                if ($27) {
                    break;
                } else {
                    $i$21 = $26;
                }
            }
            _free($0);
            STACKTOP = sp;return;
        }
        function __ZL11kc_makegfcgPK9Gif_Color($agg$result,$gfc) {
            $agg$result = $agg$result|0;
            $gfc = $gfc|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfc)) + 1|0);
            $1 = HEAP8[$0>>0]|0;
            $2 = $1&255;
            $3 = ((($gfc)) + 2|0);
            $4 = HEAP8[$3>>0]|0;
            $5 = $4&255;
            $6 = ((($gfc)) + 3|0);
            $7 = HEAP8[$6>>0]|0;
            $8 = $7&255;
            __ZL9kc_make8giii($agg$result,$2,$5,$8);
            return;
        }
        function __ZL22red_kchistitem_comparePKvS0_($va,$vb) {
            $va = $va|0;
            $vb = $vb|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP16[$va>>1]|0;
            $1 = $0 << 16 >> 16;
            $2 = HEAP16[$vb>>1]|0;
            $3 = $2 << 16 >> 16;
            $4 = (($1) - ($3))|0;
            return ($4|0);
        }
        function __ZL24green_kchistitem_comparePKvS0_($va,$vb) {
            $va = $va|0;
            $vb = $vb|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($va)) + 2|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1 << 16 >> 16;
            $3 = ((($vb)) + 2|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4 << 16 >> 16;
            $6 = (($2) - ($5))|0;
            return ($6|0);
        }
        function __ZL23blue_kchistitem_comparePKvS0_($va,$vb) {
            $va = $va|0;
            $vb = $vb|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($va)) + 4|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1 << 16 >> 16;
            $3 = ((($vb)) + 4|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4 << 16 >> 16;
            $6 = (($2) - ($5))|0;
            return ($6|0);
        }
        function __ZL9kc_togfcgPK6kcolor($agg$result,$x) {
            $agg$result = $agg$result|0;
            $x = $x|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $xx = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $xx = sp;
            ;HEAP16[$xx>>1]=HEAP16[$x>>1]|0;HEAP16[$xx+2>>1]=HEAP16[$x+2>>1]|0;HEAP16[$xx+4>>1]=HEAP16[$x+4>>1]|0;
            __Z21kc_revgamma_transformP6kcolor($xx);
            $0 = HEAP16[$xx>>1]|0;
            $1 = ($0&65535) >>> 7;
            $2 = $1&255;
            $3 = ((($agg$result)) + 1|0);
            HEAP8[$3>>0] = $2;
            $4 = ((($xx)) + 2|0);
            $5 = HEAP16[$4>>1]|0;
            $6 = ($5&65535) >>> 7;
            $7 = $6&255;
            $8 = ((($agg$result)) + 2|0);
            HEAP8[$8>>0] = $7;
            $9 = ((($xx)) + 4|0);
            $10 = HEAP16[$9>>1]|0;
            $11 = ($10&65535) >>> 7;
            $12 = $11&255;
            $13 = ((($agg$result)) + 3|0);
            HEAP8[$13>>0] = $12;
            HEAP8[$agg$result>>0] = 0;
            STACKTOP = sp;return;
        }
        function __ZL29popularity_kchistitem_comparePKvS0_($va,$vb) {
            $va = $va|0;
            $vb = $vb|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($va)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($vb)) + 8|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($1>>>0)>($3>>>0);
            $5 = ($1|0)!=($3|0);
            $6 = $5&1;
            $7 = $4 ? -1 : $6;
            return ($7|0);
        }
        function __ZL11kc_distancePK6kcolorS1_($x,$y) {
            $x = $x|0;
            $y = $y|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP16[$x>>1]|0;
            $1 = $0 << 16 >> 16;
            $2 = HEAP16[$y>>1]|0;
            $3 = $2 << 16 >> 16;
            $4 = (($1) - ($3))|0;
            $5 = ((($x)) + 2|0);
            $6 = HEAP16[$5>>1]|0;
            $7 = $6 << 16 >> 16;
            $8 = ((($y)) + 2|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = $9 << 16 >> 16;
            $11 = (($7) - ($10))|0;
            $12 = ((($x)) + 4|0);
            $13 = HEAP16[$12>>1]|0;
            $14 = $13 << 16 >> 16;
            $15 = ((($y)) + 4|0);
            $16 = HEAP16[$15>>1]|0;
            $17 = $16 << 16 >> 16;
            $18 = (($14) - ($17))|0;
            $19 = Math_imul($4, $4)|0;
            $20 = Math_imul($11, $11)|0;
            $21 = (($20) + ($19))|0;
            $22 = Math_imul($18, $18)|0;
            $23 = (($21) + ($22))|0;
            return ($23|0);
        }
        function __ZL12kc_luminancePK6kcolor($x) {
            $x = $x|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP16[$x>>1]|0;
            $1 = $0 << 16 >> 16;
            $2 = ($1*55)|0;
            $3 = ((($x)) + 2|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4 << 16 >> 16;
            $6 = ($5*183)|0;
            $7 = (($6) + ($2))|0;
            $8 = ((($x)) + 4|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = $9 << 16 >> 16;
            $11 = ($10*19)|0;
            $12 = (($7) + ($11))|0;
            $13 = $12 >> 8;
            return ($13|0);
        }
        function __ZL18colormap_diversityP6kchistP13Gt_OutputDatai($kch,$od,$blend) {
            $kch = $kch|0;
            $od = $od|0;
            $blend = $blend|0;
            var $$ = 0, $$$ = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
            var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $adapt_size$1 = 0, $chosen$0 = 0, $div = 0, $exitcond = 0;
            var $nadapt$0$off = 0, $nadapt$08 = 0, $nadapt$1$lcssa = 0, $nadapt$17 = 0, $not$ = 0, $or$cond = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 48|0;
            $vararg_buffer1 = sp + 16|0;
            $vararg_buffer = sp + 8|0;
            $div = sp + 24|0;
            $0 = sp;
            $1 = ((($od)) + 28|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = (_Gif_NewFullColormap($2,256)|0);
            $$off = (($2) + -2)|0;
            $4 = ($$off>>>0)>(254);
            if ($4) {
                __Z11fatal_errorPKcz(8050,$vararg_buffer);
                // unreachable;
            }
            $5 = ((($kch)) + 4|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = ($2|0)>($6|0);
            if ($7) {
                $8 = ((($od)) + 32|0);
                $9 = HEAP32[$8>>2]|0;
                $10 = ($9|0)==(0|0);
                if ($10) {
                    HEAP32[$vararg_buffer1>>2] = $6;
                    __Z7warningiPKcz(1,23378,$vararg_buffer1);
                }
            }
            $11 = HEAP32[$5>>2]|0;
            $12 = ($2|0)>($11|0);
            $$ = $12 ? $11 : $2;
            $13 = ($$|0)>(2);
            if ($13) {
                $14 = ($$|0)<($11|0);
                $15 = ($11|0)<(266);
                $or$cond = $15 & $14;
                if ($or$cond) {
                    $16 = ((($od)) + 40|0);
                    $17 = HEAP32[$16>>2]|0;
                    $not$ = ($17|0)!=(0);
                    $18 = $not$ << 31 >> 31;
                    $$$ = (($18) + ($$))|0;
                    $adapt_size$1 = $$$;
                } else {
                    $adapt_size$1 = $$;
                }
            } else {
                $adapt_size$1 = $$;
            }
            $19 = ($adapt_size$1|0)<(4);
            $20 = ((($od)) + 44|0);
            $21 = HEAP32[$20>>2]|0;
            $22 = ($21|0)!=(0);
            $23 = $22&1;
            __Z16kcdiversity_initP11kcdiversityP6kchisti($div,$kch,$23);
            $24 = ($adapt_size$1|0)>(0);
            if ($24) {
                $nadapt$08 = 0;
                while(1) {
                    $25 = ($nadapt$08|0)==(0);
                    do {
                        if ($25) {
                            label = 12;
                        } else {
                            $26 = ($nadapt$08|0)>(9);
                            $27 = $nadapt$08 & 1;
                            $28 = ($27|0)==(0);
                            $or$cond5 = $26 & $28;
                            if ($or$cond5) {
                                label = 12;
                            } else {
                                $30 = HEAP32[$20>>2]|0;
                                $31 = ($30|0)==(0);
                                if ($31) {
                                    $32 = (__Z24kcdiversity_find_diverseP11kcdiversityd($div,0.0)|0);
                                    $chosen$0 = $32;
                                    break;
                                } else {
                                    $33 = (($nadapt$08) + -1)|0;
                                    $34 = (+($33|0));
                                    $35 = $34 / 3.0;
                                    $36 = $35 + 1.0;
                                    $37 = (+Math_pow(0.25,(+$36)));
                                    $38 = $37 + 0.050000000000000003;
                                    $39 = (__Z24kcdiversity_find_diverseP11kcdiversityd($div,$38)|0);
                                    $chosen$0 = $39;
                                    break;
                                }
                            }
                        }
                    } while(0);
                    if ((label|0) == 12) {
                        label = 0;
                        $29 = (__Z24kcdiversity_find_popularP11kcdiversity($div)|0);
                        $chosen$0 = $29;
                    }
                    $40 = HEAP32[$20>>2]|0;
                    $41 = ($40|0)!=(0);
                    $nadapt$0$off = (($nadapt$08) + -1)|0;
                    $42 = ($nadapt$0$off>>>0)<(63);
                    $43 = $42 & $41;
                    $44 = $43&1;
                    (__Z18kcdiversity_chooseP11kcdiversityii($div,$chosen$0,$44)|0);
                    $45 = (($nadapt$08) + 1)|0;
                    $exitcond = ($45|0)==($adapt_size$1|0);
                    if ($exitcond) {
                        break;
                    } else {
                        $nadapt$08 = $45;
                    }
                }
            }
            $46 = ($blend|0)==(0);
            $47 = $46 | $19;
            if (!($47)) {
                __ZL27colormap_diversity_do_blendP11kcdiversity($div);
            }
            $48 = ((($div)) + 20|0);
            $49 = HEAP32[$48>>2]|0;
            $50 = ($49|0)==(0);
            if ($50) {
                $nadapt$1$lcssa = 0;
                HEAP32[$3>>2] = $nadapt$1$lcssa;
                __Z19kcdiversity_cleanupP11kcdiversity($div);
                STACKTOP = sp;return ($3|0);
            }
            $51 = ((($3)) + 16|0);
            $52 = ((($div)) + 16|0);
            $53 = HEAP32[$52>>2]|0;
            $54 = HEAP32[$48>>2]|0;
            $nadapt$17 = 0;
            while(1) {
                $55 = HEAP32[$51>>2]|0;
                $56 = (($53) + ($nadapt$17<<2)|0);
                $57 = HEAP32[$56>>2]|0;
                $58 = HEAP32[$kch>>2]|0;
                $59 = (($58) + (($57*12)|0)|0);
                __ZL9kc_togfcgPK6kcolor($0,$59);
                $60 = (($55) + ($nadapt$17<<3)|0);
                $61 = $0;
                $62 = $61;
                $63 = HEAP32[$62>>2]|0;
                $64 = (($61) + 4)|0;
                $65 = $64;
                $66 = HEAP32[$65>>2]|0;
                $67 = $60;
                $68 = $67;
                HEAP32[$68>>2] = $63;
                $69 = (($67) + 4)|0;
                $70 = $69;
                HEAP32[$70>>2] = $66;
                $71 = (($nadapt$17) + 1)|0;
                $72 = ($71|0)==($54|0);
                if ($72) {
                    $nadapt$1$lcssa = $54;
                    break;
                } else {
                    $nadapt$17 = $71;
                }
            }
            HEAP32[$3>>2] = $nadapt$1$lcssa;
            __Z19kcdiversity_cleanupP11kcdiversity($div);
            STACKTOP = sp;return ($3|0);
        }
        function __ZL8kc_set8gP6kcoloriii($kc,$a0,$a1,$a2) {
            $kc = $kc|0;
            $a0 = $a0|0;
            $a1 = $a1|0;
            $a2 = $a2|0;
            var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[480>>2]|0;
            $1 = (($0) + ($a0<<1)|0);
            $2 = HEAP16[$1>>1]|0;
            HEAP16[$kc>>1] = $2;
            $3 = HEAP32[480>>2]|0;
            $4 = (($3) + ($a1<<1)|0);
            $5 = HEAP16[$4>>1]|0;
            $6 = ((($kc)) + 2|0);
            HEAP16[$6>>1] = $5;
            $7 = HEAP32[480>>2]|0;
            $8 = (($7) + ($a2<<1)|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = ((($kc)) + 4|0);
            HEAP16[$10>>1] = $9;
            return;
        }
        function __ZL19kd3_item_all_comparPKvS0_($a,$b) {
            $a = $a|0;
            $b = $b|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$a>>2]|0;
            $1 = HEAP32[492>>2]|0;
            $2 = ((($1)) + 12|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = (($3) + (($0*6)|0)|0);
            $5 = HEAP32[$b>>2]|0;
            $6 = (($3) + (($5*6)|0)|0);
            $7 = (_memcmp($4,$6,6)|0);
            return ($7|0);
        }
        function __ZL15kd3_build_rangePiiii($perm,$nperm,$n,$depth) {
            $perm = $perm|0;
            $nperm = $nperm|0;
            $n = $n|0;
            $depth = $depth|0;
            var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
            var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $accumulator$tr = 0, $accumulator$tr$lcssa = 0, $depth$tr = 0, $m$0 = 0, $m$0$lcssa = 0, $m$1$lcssa = 0;
            var $m$15 = 0, $m$22 = 0, $m$23 = 0, $n$tr = 0, $n$tr$lcssa = 0, $nperm$tr = 0, $nperm$tr$lcssa = 0, $perm$tr = 0, $perm$tr$lcssa = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $accumulator$tr = 2;$depth$tr = $depth;$n$tr = $n;$nperm$tr = $nperm;$perm$tr = $perm;
            while(1) {
                $0 = HEAP32[492>>2]|0;
                $1 = (($depth$tr|0) % 3)&-1;
                $2 = ((($0)) + 24|0);
                $3 = HEAP32[$2>>2]|0;
                $4 = ($3|0)<($depth$tr|0);
                if ($4) {
                    HEAP32[$2>>2] = $depth$tr;
                }
                $5 = ((($0)) + 4|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = ($6|0)>($n$tr|0);
                if (!($7)) {
                    $9 = $6;
                    while(1) {
                        $8 = $9 << 1;
                        HEAP32[$5>>2] = $8;
                        $10 = HEAP32[$0>>2]|0;
                        $11 = (_Gif_Realloc($10,8,$8,8037,812)|0);
                        HEAP32[$0>>2] = $11;
                        $12 = HEAP32[$5>>2]|0;
                        $13 = ($12|0)>($n$tr|0);
                        if ($13) {
                            break;
                        } else {
                            $9 = $12;
                        }
                    }
                }
                $14 = ($nperm$tr|0)<(2);
                if ($14) {
                    $$lcssa = $0;$accumulator$tr$lcssa = $accumulator$tr;$n$tr$lcssa = $n$tr;$nperm$tr$lcssa = $nperm$tr;$perm$tr$lcssa = $perm$tr;
                    break;
                }
                $22 = (504 + ($1<<2)|0);
                $23 = HEAP32[$22>>2]|0;
                _qsort($perm$tr,$nperm$tr,4,$23);
                $24 = $nperm$tr >> 1;
                $25 = ((($0)) + 12|0);
                $m$0 = $24;
                while(1) {
                    $26 = ($m$0|0)>(0);
                    if (!($26)) {
                        $m$0$lcssa = $m$0;
                        break;
                    }
                    $27 = (($perm$tr) + ($m$0<<2)|0);
                    $28 = HEAP32[$27>>2]|0;
                    $29 = HEAP32[$25>>2]|0;
                    $30 = ((($29) + (($28*6)|0)|0) + ($1<<1)|0);
                    $31 = HEAP16[$30>>1]|0;
                    $32 = (($m$0) + -1)|0;
                    $33 = (($perm$tr) + ($32<<2)|0);
                    $34 = HEAP32[$33>>2]|0;
                    $35 = ((($29) + (($34*6)|0)|0) + ($1<<1)|0);
                    $36 = HEAP16[$35>>1]|0;
                    $37 = ($31<<16>>16)==($36<<16>>16);
                    if ($37) {
                        $m$0 = $32;
                    } else {
                        $m$0$lcssa = $m$0;
                        break;
                    }
                }
                $38 = ($m$0$lcssa|0)==(0);
                if ($38) {
                    $39 = (($nperm$tr) + -1)|0;
                    $40 = ($24|0)<($39|0);
                    L18: do {
                        if ($40) {
                            $41 = ((($0)) + 12|0);
                            $42 = HEAP32[$41>>2]|0;
                            $m$15 = $24;
                            while(1) {
                                $43 = (($perm$tr) + ($m$15<<2)|0);
                                $44 = HEAP32[$43>>2]|0;
                                $45 = ((($42) + (($44*6)|0)|0) + ($1<<1)|0);
                                $46 = HEAP16[$45>>1]|0;
                                $47 = (($m$15) + -1)|0;
                                $48 = (($perm$tr) + ($47<<2)|0);
                                $49 = HEAP32[$48>>2]|0;
                                $50 = ((($42) + (($49*6)|0)|0) + ($1<<1)|0);
                                $51 = HEAP16[$50>>1]|0;
                                $52 = ($46<<16>>16)==($51<<16>>16);
                                if (!($52)) {
                                    $m$1$lcssa = $m$15;
                                    break L18;
                                }
                                $53 = (($m$15) + 1)|0;
                                $54 = ($53|0)<($39|0);
                                if ($54) {
                                    $m$15 = $53;
                                } else {
                                    $m$1$lcssa = $53;
                                    break;
                                }
                            }
                        } else {
                            $m$1$lcssa = $24;
                        }
                    } while(0);
                    $55 = ($m$1$lcssa|0)==(0);
                    if ($55) {
                        $56 = (($perm$tr) + ($m$1$lcssa<<2)|0);
                        $57 = HEAP32[$56>>2]|0;
                        $58 = ((($0)) + 12|0);
                        $59 = HEAP32[$58>>2]|0;
                        $60 = ((($59) + (($57*6)|0)|0) + ($1<<1)|0);
                        $61 = HEAP16[$60>>1]|0;
                        $62 = $61 << 16 >> 16;
                        $63 = HEAP32[$0>>2]|0;
                        $64 = (($63) + ($n$tr<<3)|0);
                        HEAP32[$64>>2] = $62;
                        $m$22 = 0;
                    } else {
                        $m$23 = $m$1$lcssa;
                        label = 21;
                    }
                } else {
                    $m$23 = $m$0$lcssa;
                    label = 21;
                }
                if ((label|0) == 21) {
                    label = 0;
                    $65 = (($m$23) + -1)|0;
                    $66 = (($perm$tr) + ($65<<2)|0);
                    $67 = HEAP32[$66>>2]|0;
                    $68 = ((($0)) + 12|0);
                    $69 = HEAP32[$68>>2]|0;
                    $70 = ((($69) + (($67*6)|0)|0) + ($1<<1)|0);
                    $71 = HEAP16[$70>>1]|0;
                    $72 = $71 << 16 >> 16;
                    $73 = (($perm$tr) + ($m$23<<2)|0);
                    $74 = HEAP32[$73>>2]|0;
                    $75 = ((($69) + (($74*6)|0)|0) + ($1<<1)|0);
                    $76 = HEAP16[$75>>1]|0;
                    $77 = $76 << 16 >> 16;
                    $78 = (($77) - ($72))|0;
                    $79 = $78 >> 1;
                    $80 = (($79) + ($72))|0;
                    $81 = HEAP32[$0>>2]|0;
                    $82 = (($81) + ($n$tr<<3)|0);
                    HEAP32[$82>>2] = $80;
                    $m$22 = $m$23;
                }
                $83 = (($n$tr) + 1)|0;
                $84 = (($depth$tr) + 1)|0;
                $85 = (__ZL15kd3_build_rangePiiii($perm$tr,$m$22,$83,$84)|0);
                $86 = (($85) + 1)|0;
                $87 = HEAP32[$0>>2]|0;
                $88 = (((($87) + ($n$tr<<3)|0)) + 4|0);
                HEAP32[$88>>2] = $86;
                $89 = (($perm$tr) + ($m$22<<2)|0);
                $90 = (($nperm$tr) - ($m$22))|0;
                $91 = (($85) + ($83))|0;
                $92 = (($86) + ($accumulator$tr))|0;
                $accumulator$tr = $92;$depth$tr = $84;$n$tr = $91;$nperm$tr = $90;$perm$tr = $89;
            }
            $15 = ($nperm$tr$lcssa|0)==(0);
            if ($15) {
                $19 = -1;
                $17 = HEAP32[$$lcssa>>2]|0;
                $18 = (($17) + ($n$tr$lcssa<<3)|0);
                HEAP32[$18>>2] = $19;
                $20 = HEAP32[$$lcssa>>2]|0;
                $21 = (((($20) + ($n$tr$lcssa<<3)|0)) + 4|0);
                HEAP32[$21>>2] = -1;
                return ($accumulator$tr$lcssa|0);
            }
            $16 = HEAP32[$perm$tr$lcssa>>2]|0;
            $19 = $16;
            $17 = HEAP32[$$lcssa>>2]|0;
            $18 = (($17) + ($n$tr$lcssa<<3)|0);
            HEAP32[$18>>2] = $19;
            $20 = HEAP32[$$lcssa>>2]|0;
            $21 = (((($20) + ($n$tr$lcssa<<3)|0)) + 4|0);
            HEAP32[$21>>2] = -1;
            return ($accumulator$tr$lcssa|0);
        }
        function __ZL22kc_luminance_transformP6kcolor($x) {
            $x = $x|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (__ZL12kc_luminancePK6kcolor($x)|0);
            $1 = $0&65535;
            $2 = ((($x)) + 4|0);
            HEAP16[$2>>1] = $1;
            $3 = ((($x)) + 2|0);
            HEAP16[$3>>1] = $1;
            HEAP16[$x>>1] = $1;
            return;
        }
        function __ZL14kd3_enable_allP8kd3_tree($kd3) {
            $kd3 = $kd3|0;
            var $0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($kd3)) + 8|0);
            HEAP32[$0>>2] = -1;
            return;
        }
        function __ZL6ditherP9Gif_ImagePhP12Gif_ColormapP8kd3_treePjP13Gt_OutputData($gfi,$new_data,$old_cm,$kd3,$histogram,$od) {
            $gfi = $gfi|0;
            $new_data = $new_data|0;
            $old_cm = $old_cm|0;
            $kd3 = $kd3|0;
            $histogram = $histogram|0;
            $od = $od|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($od)) + 44|0);
            $1 = HEAP32[$0>>2]|0;
            switch ($1|0) {
                case 2: case 1:  {
                __Z30colormap_image_floyd_steinbergP9Gif_ImagePhP12Gif_ColormapP8kd3_treePj($gfi,$new_data,$old_cm,$kd3,$histogram);
                return;
                break;
            }
                case 4: case 3:  {
                $2 = ((($od)) + 48|0);
                $3 = HEAP32[$2>>2]|0;
                __ZL22colormap_image_orderedP9Gif_ImagePhP12Gif_ColormapP8kd3_treePjPKh($gfi,$new_data,$old_cm,$kd3,$histogram,$3);
                return;
                break;
            }
                default: {
                    __Z24colormap_image_posterizeP9Gif_ImagePhP12Gif_ColormapP8kd3_treePj($gfi,$new_data,$old_cm,$kd3,$histogram);
                    return;
                }
            }
        }
        function __ZL23try_assign_transparencyP9Gif_ImageP12Gif_ColormapPhS2_PiP8kd3_treePj($gfi,$old_cm,$new_data,$new_cm,$new_ncol,$kd3,$histogram) {
            $gfi = $gfi|0;
            $old_cm = $old_cm|0;
            $new_data = $new_data|0;
            $new_cm = $new_cm|0;
            $new_ncol = $new_ncol|0;
            $kd3 = $kd3|0;
            $histogram = $histogram|0;
            var $$0 = 0, $$0112 = 0, $$1$lcssa = 0, $$19 = 0, $$lcssa32 = 0, $$lcssa47 = 0, $$min_used$0 = 0, $$pr = 0, $$pr$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
            var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
            var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
            var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
            var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $data$011 = 0, $exitcond = 0, $i$024 = 0, $i$120 = 0, $i$2$new_transparent$0 = 0, $i$2$new_transparent$0$lcssa = 0, $i$218 = 0;
            var $i$310 = 0, $j$013 = 0, $min_used$017 = 0, $new_transparent$019 = 0, $new_transparent$2 = 0, $transp_value$sroa$0$0 = 0, $transp_value$sroa$2$0 = 0, $transp_value$sroa$4$0 = 0, $transp_value$sroa$6$0 = 0, $transp_value$sroa$8$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 20|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1 << 16 >> 16;
            $3 = ($1<<16>>16)<(0);
            if ($3) {
                $$0 = 0;
                return ($$0|0);
            }
            $4 = ($old_cm|0)==(0|0);
            if ($4) {
                $transp_value$sroa$0$0 = 0;$transp_value$sroa$2$0 = 0;$transp_value$sroa$4$0 = 0;$transp_value$sroa$6$0 = 0;$transp_value$sroa$8$0 = 0;
            } else {
                $5 = ((($old_cm)) + 16|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = (($6) + ($2<<3)|0);
                $8 = HEAP8[$7>>0]|0;
                $9 = (((($6) + ($2<<3)|0)) + 1|0);
                $10 = HEAP8[$9>>0]|0;
                $11 = (((($6) + ($2<<3)|0)) + 2|0);
                $12 = HEAP8[$11>>0]|0;
                $13 = (((($6) + ($2<<3)|0)) + 3|0);
                $14 = HEAP8[$13>>0]|0;
                $15 = (((($6) + ($2<<3)|0)) + 4|0);
                $16 = HEAP32[$15>>2]|0;
                $transp_value$sroa$0$0 = $8;$transp_value$sroa$2$0 = $10;$transp_value$sroa$4$0 = $12;$transp_value$sroa$6$0 = $14;$transp_value$sroa$8$0 = $16;
            }
            $17 = HEAP32[$new_ncol>>2]|0;
            $18 = ($17|0)>(0);
            L7: do {
                if ($18) {
                    $19 = ((($new_cm)) + 16|0);
                    $i$024 = 0;
                    while(1) {
                        $21 = (($histogram) + ($i$024<<2)|0);
                        $22 = HEAP32[$21>>2]|0;
                        $23 = ($22|0)==(0);
                        if ($23) {
                            $24 = HEAP32[$19>>2]|0;
                            $25 = (((($24) + ($i$024<<3)|0)) + 1|0);
                            $26 = HEAP8[$25>>0]|0;
                            $27 = ($transp_value$sroa$2$0<<24>>24)==($26<<24>>24);
                            if ($27) {
                                $28 = (((($24) + ($i$024<<3)|0)) + 2|0);
                                $29 = HEAP8[$28>>0]|0;
                                $30 = ($transp_value$sroa$4$0<<24>>24)==($29<<24>>24);
                                if ($30) {
                                    $31 = (((($24) + ($i$024<<3)|0)) + 3|0);
                                    $32 = HEAP8[$31>>0]|0;
                                    $33 = ($transp_value$sroa$6$0<<24>>24)==($32<<24>>24);
                                    if ($33) {
                                        $new_transparent$2 = $i$024;
                                        break L7;
                                    }
                                }
                            }
                        }
                        $34 = (($i$024) + 1)|0;
                        $35 = HEAP32[$new_ncol>>2]|0;
                        $36 = ($34|0)<($35|0);
                        if ($36) {
                            $i$024 = $34;
                        } else {
                            $$lcssa47 = $35;
                            break;
                        }
                    }
                    $20 = ($$lcssa47|0)>(0);
                    if ($20) {
                        $i$120 = 0;
                        while(1) {
                            $37 = (($histogram) + ($i$120<<2)|0);
                            $38 = HEAP32[$37>>2]|0;
                            $39 = ($38|0)==(0);
                            if ($39) {
                                $new_transparent$2 = $i$120;
                                break L7;
                            }
                            $40 = (($i$120) + 1)|0;
                            $$pr = HEAP32[$new_ncol>>2]|0;
                            $41 = ($40|0)<($$pr|0);
                            if ($41) {
                                $i$120 = $40;
                            } else {
                                $$pr$lcssa = $$pr;
                                break;
                            }
                        }
                        $42 = ($$pr$lcssa|0)<(256);
                        if ($42) {
                            $$lcssa32 = $$pr$lcssa;
                            label = 15;
                        } else {
                            $55 = ($$pr$lcssa|0)==(256);
                            if ($55) {
                                $i$218 = 0;$min_used$017 = -1;$new_transparent$019 = -1;
                            } else {
                                ___assert_fail((12701|0),(8037|0),1541,(12677|0));
                                // unreachable;
                            }
                            while(1) {
                                $56 = (($histogram) + ($i$218<<2)|0);
                                $57 = HEAP32[$56>>2]|0;
                                $58 = ($57>>>0)<($min_used$017>>>0);
                                $$min_used$0 = $58 ? $57 : $min_used$017;
                                $i$2$new_transparent$0 = $58 ? $i$218 : $new_transparent$019;
                                $59 = (($i$218) + 1)|0;
                                $exitcond = ($59|0)==(256);
                                if ($exitcond) {
                                    $i$2$new_transparent$0$lcssa = $i$2$new_transparent$0;
                                    break;
                                } else {
                                    $i$218 = $59;$min_used$017 = $$min_used$0;$new_transparent$019 = $i$2$new_transparent$0;
                                }
                            }
                            __ZL11kd3_disableP8kd3_treei($kd3,$i$2$new_transparent$0$lcssa);
                            $$0 = 1;
                            return ($$0|0);
                        }
                    } else {
                        $$lcssa32 = $$lcssa47;
                        label = 15;
                    }
                } else {
                    $$lcssa32 = $17;
                    label = 15;
                }
            } while(0);
            do {
                if ((label|0) == 15) {
                    $43 = ((($new_cm)) + 4|0);
                    $44 = HEAP32[$43>>2]|0;
                    $45 = ($$lcssa32|0)<($44|0);
                    if ($45) {
                        $46 = ((($new_cm)) + 16|0);
                        $47 = HEAP32[$46>>2]|0;
                        $48 = (($47) + ($$lcssa32<<3)|0);
                        HEAP8[$48>>0] = $transp_value$sroa$0$0;
                        $49 = (((($47) + ($$lcssa32<<3)|0)) + 1|0);
                        HEAP8[$49>>0] = $transp_value$sroa$2$0;
                        $50 = (((($47) + ($$lcssa32<<3)|0)) + 2|0);
                        HEAP8[$50>>0] = $transp_value$sroa$4$0;
                        $51 = (((($47) + ($$lcssa32<<3)|0)) + 3|0);
                        HEAP8[$51>>0] = $transp_value$sroa$6$0;
                        $52 = (((($47) + ($$lcssa32<<3)|0)) + 4|0);
                        HEAP32[$52>>2] = $transp_value$sroa$8$0;
                        $53 = HEAP32[$new_ncol>>2]|0;
                        $54 = (($53) + 1)|0;
                        HEAP32[$new_ncol>>2] = $54;
                        $new_transparent$2 = $$lcssa32;
                        break;
                    } else {
                        ___assert_fail((12648|0),(8037|0),1532,(12677|0));
                        // unreachable;
                    }
                }
            } while(0);
            $60 = ((($gfi)) + 10|0);
            $61 = HEAP16[$60>>1]|0;
            $62 = ($61<<16>>16)==(0);
            if (!($62)) {
                $63 = ((($gfi)) + 8|0);
                $64 = $new_transparent$2&255;
                $$0112 = $new_data;$j$013 = 0;
                while(1) {
                    $65 = HEAP16[$63>>1]|0;
                    $66 = ($65<<16>>16)==(0);
                    if ($66) {
                        $$1$lcssa = $$0112;
                    } else {
                        $67 = HEAP32[$gfi>>2]|0;
                        $68 = (($67) + ($j$013<<2)|0);
                        $69 = HEAP32[$68>>2]|0;
                        $$19 = $$0112;$data$011 = $69;$i$310 = 0;
                        while(1) {
                            $70 = HEAP8[$data$011>>0]|0;
                            $71 = $70&255;
                            $72 = ($71|0)==($2|0);
                            if ($72) {
                                HEAP8[$$19>>0] = $64;
                            }
                            $73 = (($i$310) + 1)|0;
                            $74 = ((($data$011)) + 1|0);
                            $75 = ((($$19)) + 1|0);
                            $76 = HEAP16[$63>>1]|0;
                            $77 = $76&65535;
                            $78 = ($73|0)<($77|0);
                            if ($78) {
                                $$19 = $75;$data$011 = $74;$i$310 = $73;
                            } else {
                                $$1$lcssa = $75;
                                break;
                            }
                        }
                    }
                    $79 = (($j$013) + 1)|0;
                    $80 = HEAP16[$60>>1]|0;
                    $81 = $80&65535;
                    $82 = ($79|0)<($81|0);
                    if ($82) {
                        $$0112 = $$1$lcssa;$j$013 = $79;
                    } else {
                        break;
                    }
                }
            }
            $83 = $new_transparent$2&65535;
            HEAP16[$0>>1] = $83;
            $$0 = 0;
            return ($$0|0);
        }
        function __ZL23popularity_sort_comparePKvS0_($va,$vb) {
            $va = $va|0;
            $vb = $vb|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($va)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($vb)) + 4|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($1>>>0)>($3>>>0);
            $5 = ($1|0)!=($3|0);
            $6 = $5&1;
            $7 = $4 ? -1 : $6;
            return ($7|0);
        }
        function __ZL31make_halftone_matrix_triangulariii($w,$h,$nc) {
            $w = $w|0;
            $h = $h|0;
            $nc = $nc|0;
            var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (__ZL19halftone_pixel_makeii($w,$h)|0);
            $1 = Math_imul($h, $w)|0;
            $2 = ($1|0)==(0);
            if ($2) {
                _qsort($0,$1,24,13);
                $16 = (__ZL21halftone_pixel_matrixP18halftone_pixelinfoiii($0,$w,$h,$nc)|0);
                return ($16|0);
            }
            $3 = (($w) + -1)|0;
            $4 = (+($3|0));
            $5 = $4 * 0.5;
            $6 = (($h) + -1)|0;
            $7 = (+($6|0));
            $8 = $7 * 0.5;
            $9 = (+($w|0));
            $10 = $9 + -0.5;
            $11 = (+($h|0));
            $12 = $11 + -0.5;
            $i$01 = 0;
            while(1) {
                $13 = (($0) + (($i$01*24)|0)|0);
                __ZL22halftone_pixel_combineP18halftone_pixelinfodd($13,$5,$8);
                __ZL22halftone_pixel_combineP18halftone_pixelinfodd($13,-0.5,-0.5);
                __ZL22halftone_pixel_combineP18halftone_pixelinfodd($13,$10,-0.5);
                __ZL22halftone_pixel_combineP18halftone_pixelinfodd($13,-0.5,$12);
                __ZL22halftone_pixel_combineP18halftone_pixelinfodd($13,$10,$12);
                $14 = (($i$01) + 1)|0;
                $15 = ($14|0)==($1|0);
                if ($15) {
                    break;
                } else {
                    $i$01 = $14;
                }
            }
            _qsort($0,$1,24,13);
            $16 = (__ZL21halftone_pixel_matrixP18halftone_pixelinfoiii($0,$w,$h,$nc)|0);
            return ($16|0);
        }
        function __ZL27make_halftone_matrix_squareiii($w,$h,$nc) {
            $w = $w|0;
            $h = $h|0;
            $nc = $nc|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (__ZL19halftone_pixel_makeii($w,$h)|0);
            $1 = Math_imul($h, $w)|0;
            $2 = ($1|0)==(0);
            if (!($2)) {
                $3 = (($w) + -1)|0;
                $4 = (+($3|0));
                $5 = $4 * 0.5;
                $6 = (($h) + -1)|0;
                $7 = (+($6|0));
                $8 = $7 * 0.5;
                $i$01 = 0;
                while(1) {
                    $9 = (($0) + (($i$01*24)|0)|0);
                    __ZL22halftone_pixel_combineP18halftone_pixelinfodd($9,$5,$8);
                    $10 = (($i$01) + 1)|0;
                    $11 = ($10|0)==($1|0);
                    if ($11) {
                        break;
                    } else {
                        $i$01 = $10;
                    }
                }
            }
            _qsort($0,$1,24,13);
            $12 = (__ZL21halftone_pixel_matrixP18halftone_pixelinfoiii($0,$w,$h,$nc)|0);
            return ($12|0);
        }
        function __ZL19halftone_pixel_makeii($w,$h) {
            $w = $w|0;
            $h = $h|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$04 = 0, $k$1$lcssa = 0, $k$11 = 0, $x$02 = 0, $y$03 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = Math_imul($h, $w)|0;
            $1 = (_Gif_Realloc(0,24,$0,8037,1860)|0);
            $2 = ($h|0)==(0);
            if ($2) {
                return ($1|0);
            }
            $3 = ($w|0)==(0);
            $k$04 = 0;$y$03 = 0;
            while(1) {
                if ($3) {
                    $k$1$lcssa = $k$04;
                } else {
                    $k$11 = $k$04;$x$02 = 0;
                    while(1) {
                        $4 = (($1) + (($k$11*24)|0)|0);
                        HEAP32[$4>>2] = $x$02;
                        $5 = (((($1) + (($k$11*24)|0)|0)) + 4|0);
                        HEAP32[$5>>2] = $y$03;
                        $6 = (((($1) + (($k$11*24)|0)|0)) + 8|0);
                        HEAPF64[$6>>3] = -1.0;
                        $7 = (($x$02) + 1)|0;
                        $8 = (($k$11) + 1)|0;
                        $9 = ($7|0)==($w|0);
                        if ($9) {
                            break;
                        } else {
                            $k$11 = $8;$x$02 = $7;
                        }
                    }
                    $10 = (($k$04) + ($w))|0;
                    $k$1$lcssa = $10;
                }
                $11 = (($y$03) + 1)|0;
                $12 = ($11|0)==($h|0);
                if ($12) {
                    break;
                } else {
                    $k$04 = $k$1$lcssa;$y$03 = $11;
                }
            }
            return ($1|0);
        }
        function __ZL22halftone_pixel_combineP18halftone_pixelinfodd($hp,$cx,$cy) {
            $hp = $hp|0;
            $cx = +$cx;
            $cy = +$cy;
            var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0;
            var $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$hp>>2]|0;
            $1 = (+($0|0));
            $2 = $1 - $cx;
            $3 = $2 * $2;
            $4 = ((($hp)) + 4|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = (+($5|0));
            $7 = $6 - $cy;
            $8 = $7 * $7;
            $9 = $3 + $8;
            $10 = ((($hp)) + 8|0);
            $11 = +HEAPF64[$10>>3];
            $12 = $11 < 0.0;
            $13 = $9 < $11;
            $or$cond = $12 | $13;
            if (!($or$cond)) {
                return;
            }
            HEAPF64[$10>>3] = $9;
            $14 = HEAP32[$4>>2]|0;
            $15 = (+($14|0));
            $16 = $15 - $cy;
            $17 = HEAP32[$hp>>2]|0;
            $18 = (+($17|0));
            $19 = $18 - $cx;
            $20 = (+Math_atan2((+$16),(+$19)));
            $21 = ((($hp)) + 16|0);
            HEAPF64[$21>>3] = $20;
            return;
        }
        function __ZL22halftone_pixel_comparePKvS0_($va,$vb) {
            $va = $va|0;
            $vb = $vb|0;
            var $$sink = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($va)) + 8|0);
            $1 = +HEAPF64[$0>>3];
            $2 = ((($vb)) + 8|0);
            $3 = +HEAPF64[$2>>3];
            $4 = $1 - $3;
            $5 = (+Math_abs((+$4)));
            $6 = $5 > 0.01;
            if ($6) {
                $7 = $1 < $3;
                $$sink = $7;
                $13 = $$sink ? -1 : 1;
                return ($13|0);
            } else {
                $8 = ((($va)) + 16|0);
                $9 = +HEAPF64[$8>>3];
                $10 = ((($vb)) + 16|0);
                $11 = +HEAPF64[$10>>3];
                $12 = $9 < $11;
                $$sink = $12;
                $13 = $$sink ? -1 : 1;
                return ($13|0);
            }
            return (0)|0;
        }
        function __ZL21halftone_pixel_matrixP18halftone_pixelinfoiii($hp,$w,$h,$nc) {
            $hp = $hp|0;
            $w = $w|0;
            $h = $h|0;
            $nc = $nc|0;
            var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0;
            var $i$02 = 0, $i$13 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = Math_imul($h, $w)|0;
            $1 = (($0) + 4)|0;
            $2 = (_Gif_Realloc(0,1,$1,8037,1891)|0);
            $3 = $w&255;
            HEAP8[$2>>0] = $3;
            $4 = $h&255;
            $5 = ((($2)) + 1|0);
            HEAP8[$5>>0] = $4;
            $6 = $nc&255;
            $7 = ((($2)) + 3|0);
            HEAP8[$7>>0] = $6;
            $8 = ($0|0)>(255);
            if ($8) {
                $9 = (+($0|0));
                $10 = 255.0 / $9;
                $11 = ((($2)) + 2|0);
                HEAP8[$11>>0] = -1;
                $i$02 = 0;
                while(1) {
                    $12 = (+($i$02|0));
                    $13 = $10 * $12;
                    $14 = (~~(($13)));
                    $15 = $14&255;
                    $16 = (($hp) + (($i$02*24)|0)|0);
                    $17 = HEAP32[$16>>2]|0;
                    $18 = (($17) + 4)|0;
                    $19 = (((($hp) + (($i$02*24)|0)|0)) + 4|0);
                    $20 = HEAP32[$19>>2]|0;
                    $21 = Math_imul($20, $w)|0;
                    $22 = (($18) + ($21))|0;
                    $23 = (($2) + ($22)|0);
                    HEAP8[$23>>0] = $15;
                    $24 = (($i$02) + 1)|0;
                    $25 = ($24|0)==($0|0);
                    if ($25) {
                        break;
                    } else {
                        $i$02 = $24;
                    }
                }
                _free($hp);
                return ($2|0);
            }
            $26 = $0&255;
            $27 = ((($2)) + 2|0);
            HEAP8[$27>>0] = $26;
            $28 = ($0|0)==(0);
            if ($28) {
                _free($hp);
                return ($2|0);
            } else {
                $i$13 = 0;
            }
            while(1) {
                $29 = $i$13&255;
                $30 = (($hp) + (($i$13*24)|0)|0);
                $31 = HEAP32[$30>>2]|0;
                $32 = (($31) + 4)|0;
                $33 = (((($hp) + (($i$13*24)|0)|0)) + 4|0);
                $34 = HEAP32[$33>>2]|0;
                $35 = Math_imul($34, $w)|0;
                $36 = (($32) + ($35))|0;
                $37 = (($2) + ($36)|0);
                HEAP8[$37>>0] = $29;
                $38 = (($i$13) + 1)|0;
                $39 = ($38|0)==($0|0);
                if ($39) {
                    break;
                } else {
                    $i$13 = $38;
                }
            }
            _free($hp);
            return ($2|0);
        }
        function __ZL11kd3_disableP8kd3_treei($kd3,$i) {
            $kd3 = $kd3|0;
            $i = $i|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($kd3)) + 16|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1>>>0)>($i>>>0);
            if (!($2)) {
                ___assert_fail((20292|0),(20330|0),202,(20341|0));
                // unreachable;
            }
            $3 = ((($kd3)) + 8|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)<(0);
            $6 = ($4|0)==($i|0);
            $or$cond = $5 | $6;
            if ($or$cond) {
                HEAP32[$3>>2] = $i;
                return;
            } else {
                ___assert_fail((20353|0),(20330|0),203,(20341|0));
                // unreachable;
            }
        }
        function __ZL22colormap_image_orderedP9Gif_ImagePhP12Gif_ColormapP8kd3_treePjPKh($gfi,$all_new_data,$old_cm,$kd3,$histogram,$matrix) {
            $gfi = $gfi|0;
            $all_new_data = $all_new_data|0;
            $old_cm = $old_cm|0;
            $kd3 = $kd3|0;
            $histogram = $histogram|0;
            $matrix = $matrix|0;
            var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
            var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
            var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
            var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
            var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$011 = 0, $i$17 = 0, $x$02 = 0, $y$04 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP8[$matrix>>0]|0;
            $1 = $0&255;
            $2 = ((($matrix)) + 1|0);
            $3 = HEAP8[$2>>0]|0;
            $4 = $3&255;
            $5 = ((($matrix)) + 2|0);
            $6 = HEAP8[$5>>0]|0;
            $7 = $6&255;
            $8 = HEAP32[$old_cm>>2]|0;
            $9 = Math_imul($7, $8)|0;
            $10 = (_Gif_Realloc(0,1,$9,8037,1439)|0);
            $11 = HEAP32[$old_cm>>2]|0;
            $12 = ($11|0)==(0);
            if (!($12)) {
                $13 = ((($old_cm)) + 16|0);
                $14 = HEAP32[$13>>2]|0;
                $15 = HEAP32[$old_cm>>2]|0;
                $i$011 = 0;
                while(1) {
                    $16 = (($14) + ($i$011<<3)|0);
                    HEAP8[$16>>0] = 0;
                    $17 = (($i$011) + 1)|0;
                    $18 = ($17|0)==($15|0);
                    if ($18) {
                        break;
                    } else {
                        $i$011 = $17;
                    }
                }
            }
            $19 = ((($kd3)) + 16|0);
            $20 = HEAP32[$19>>2]|0;
            $21 = (_Gif_Realloc(0,4,$20,8037,1449)|0);
            HEAP32[500>>2] = $21;
            $22 = HEAP32[$19>>2]|0;
            $23 = ($22|0)==(0);
            if (!($23)) {
                $24 = ((($kd3)) + 12|0);
                $i$17 = 0;
                while(1) {
                    $25 = HEAP32[$24>>2]|0;
                    $26 = (($25) + (($i$17*6)|0)|0);
                    $27 = (__ZL12kc_luminancePK6kcolor($26)|0);
                    $28 = HEAP32[500>>2]|0;
                    $29 = (($28) + ($i$17<<2)|0);
                    HEAP32[$29>>2] = $27;
                    $30 = (($i$17) + 1)|0;
                    $31 = HEAP32[$19>>2]|0;
                    $32 = ($30|0)==($31|0);
                    if ($32) {
                        break;
                    } else {
                        $i$17 = $30;
                    }
                }
            }
            $33 = (($1) + 255)|0;
            $34 = $33 & $1;
            $35 = ($34|0)==(0);
            if ($35) {
                $45 = (($4) + 255)|0;
                $46 = $45 & $4;
                $47 = ($46|0)==(0);
                if ($47) {
                    $48 = (($7) + 255)|0;
                    $49 = $48 & $7;
                    $50 = ($49|0)==(0);
                    if ($50) {
                        __ZL19pow2_ordered_ditherP9Gif_ImagePhP12Gif_ColormapP8kd3_treePjPKhS1_($gfi,$all_new_data,$old_cm,$kd3,$histogram,$matrix,$10);
                        $101 = HEAP32[500>>2]|0;
                        _free($101);
                        _free($10);
                        return;
                    }
                }
            }
            $36 = ((($gfi)) + 10|0);
            $37 = HEAP16[$36>>1]|0;
            $38 = ($37<<16>>16)==(0);
            if ($38) {
                $101 = HEAP32[500>>2]|0;
                _free($101);
                _free($10);
                return;
            }
            $39 = ((($gfi)) + 8|0);
            $40 = ((($gfi)) + 20|0);
            $41 = ((($old_cm)) + 16|0);
            $42 = ((($matrix)) + 3|0);
            $43 = ((($gfi)) + 12|0);
            $44 = ((($gfi)) + 14|0);
            $y$04 = 0;
            while(1) {
                $51 = HEAP32[$gfi>>2]|0;
                $52 = (($51) + ($y$04<<2)|0);
                $53 = HEAP32[$52>>2]|0;
                $54 = HEAP16[$39>>1]|0;
                $55 = $54&65535;
                $56 = Math_imul($55, $y$04)|0;
                $57 = ($54<<16>>16)==(0);
                if (!($57)) {
                    $x$02 = 0;
                    while(1) {
                        $58 = (($53) + ($x$02)|0);
                        $59 = HEAP8[$58>>0]|0;
                        $60 = $59&255;
                        $61 = HEAP16[$40>>1]|0;
                        $62 = $61 << 16 >> 16;
                        $63 = ($60|0)==($62|0);
                        if (!($63)) {
                            $64 = Math_imul($60, $7)|0;
                            $65 = HEAP32[$41>>2]|0;
                            $66 = (($65) + ($60<<3)|0);
                            $67 = HEAP8[$66>>0]|0;
                            $68 = ($67<<24>>24)==(0);
                            if ($68) {
                                $69 = (($10) + ($64)|0);
                                $70 = HEAP8[$42>>0]|0;
                                $71 = $70&255;
                                __ZL23set_ordered_dither_planPhiiP9Gif_ColorP8kd3_tree($69,$7,$71,$66,$kd3);
                            }
                            $72 = HEAP16[$43>>1]|0;
                            $73 = $72&65535;
                            $74 = (($73) + ($x$02))|0;
                            $75 = (($74|0) % ($1|0))&-1;
                            $76 = (($75) + 4)|0;
                            $77 = HEAP16[$44>>1]|0;
                            $78 = $77&65535;
                            $79 = (($78) + ($y$04))|0;
                            $80 = (($79|0) % ($4|0))&-1;
                            $81 = Math_imul($80, $1)|0;
                            $82 = (($76) + ($81))|0;
                            $83 = (($matrix) + ($82)|0);
                            $84 = HEAP8[$83>>0]|0;
                            $85 = $84&255;
                            $$sum = (($85) + ($64))|0;
                            $86 = (($10) + ($$sum)|0);
                            $87 = HEAP8[$86>>0]|0;
                            $$sum1 = (($x$02) + ($56))|0;
                            $88 = (($all_new_data) + ($$sum1)|0);
                            HEAP8[$88>>0] = $87;
                            $89 = $87&255;
                            $90 = (($histogram) + ($89<<2)|0);
                            $91 = HEAP32[$90>>2]|0;
                            $92 = (($91) + 1)|0;
                            HEAP32[$90>>2] = $92;
                        }
                        $93 = (($x$02) + 1)|0;
                        $94 = HEAP16[$39>>1]|0;
                        $95 = $94&65535;
                        $96 = ($93|0)==($95|0);
                        if ($96) {
                            break;
                        } else {
                            $x$02 = $93;
                        }
                    }
                }
                $97 = (($y$04) + 1)|0;
                $98 = HEAP16[$36>>1]|0;
                $99 = $98&65535;
                $100 = ($97|0)==($99|0);
                if ($100) {
                    break;
                } else {
                    $y$04 = $97;
                }
            }
            $101 = HEAP32[500>>2]|0;
            _free($101);
            _free($10);
            return;
        }
        function __ZL19pow2_ordered_ditherP9Gif_ImagePhP12Gif_ColormapP8kd3_treePjPKhS1_($gfi,$all_new_data,$old_cm,$kd3,$histogram,$matrix,$plan) {
            $gfi = $gfi|0;
            $all_new_data = $all_new_data|0;
            $old_cm = $old_cm|0;
            $kd3 = $kd3|0;
            $histogram = $histogram|0;
            $matrix = $matrix|0;
            $plan = $plan|0;
            var $$lcssa = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
            var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0;
            var $mws$0 = 0, $mws$0$lcssa = 0, $nplans$0 = 0, $nplans$0$lcssa = 0, $x$03 = 0, $y$05 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP8[$matrix>>0]|0;
            $1 = $0&255;
            $mws$0 = 0;
            while(1) {
                $2 = 1 << $mws$0;
                $3 = ($2|0)==($1|0);
                $4 = (($mws$0) + 1)|0;
                if ($3) {
                    $mws$0$lcssa = $mws$0;
                    break;
                } else {
                    $mws$0 = $4;
                }
            }
            $5 = ((($matrix)) + 2|0);
            $6 = HEAP8[$5>>0]|0;
            $7 = $6&255;
            $nplans$0 = 0;
            while(1) {
                $8 = 1 << $nplans$0;
                $9 = ($8|0)==($7|0);
                $10 = (($nplans$0) + 1)|0;
                if ($9) {
                    $$lcssa = $8;$nplans$0$lcssa = $nplans$0;
                    break;
                } else {
                    $nplans$0 = $10;
                }
            }
            $11 = ((($gfi)) + 10|0);
            $12 = HEAP16[$11>>1]|0;
            $13 = ($12<<16>>16)==(0);
            if ($13) {
                return;
            }
            $14 = ((($gfi)) + 8|0);
            $15 = ((($gfi)) + 20|0);
            $16 = ((($old_cm)) + 16|0);
            $17 = ((($matrix)) + 3|0);
            $18 = ((($gfi)) + 12|0);
            $19 = ((($gfi)) + 14|0);
            $20 = ((($matrix)) + 1|0);
            $y$05 = 0;
            while(1) {
                $21 = HEAP32[$gfi>>2]|0;
                $22 = (($21) + ($y$05<<2)|0);
                $23 = HEAP32[$22>>2]|0;
                $24 = HEAP16[$14>>1]|0;
                $25 = $24&65535;
                $26 = Math_imul($25, $y$05)|0;
                $27 = ($24<<16>>16)==(0);
                if (!($27)) {
                    $x$03 = 0;
                    while(1) {
                        $28 = (($23) + ($x$03)|0);
                        $29 = HEAP8[$28>>0]|0;
                        $30 = $29&255;
                        $31 = HEAP16[$15>>1]|0;
                        $32 = $31 << 16 >> 16;
                        $33 = ($30|0)==($32|0);
                        if (!($33)) {
                            $34 = $30 << $nplans$0$lcssa;
                            $35 = HEAP32[$16>>2]|0;
                            $36 = (($35) + ($30<<3)|0);
                            $37 = HEAP8[$36>>0]|0;
                            $38 = ($37<<24>>24)==(0);
                            if ($38) {
                                $39 = (($plan) + ($34)|0);
                                $40 = HEAP8[$17>>0]|0;
                                $41 = $40&255;
                                __ZL23set_ordered_dither_planPhiiP9Gif_ColorP8kd3_tree($39,$$lcssa,$41,$36,$kd3);
                            }
                            $42 = HEAP16[$18>>1]|0;
                            $43 = $42&65535;
                            $44 = (($43) + ($x$03))|0;
                            $45 = HEAP8[$matrix>>0]|0;
                            $46 = $45&255;
                            $47 = (($46) + -1)|0;
                            $48 = $47 & $44;
                            $49 = (($48) + 4)|0;
                            $50 = HEAP16[$19>>1]|0;
                            $51 = $50&65535;
                            $52 = (($51) + ($y$05))|0;
                            $53 = HEAP8[$20>>0]|0;
                            $54 = $53&255;
                            $55 = (($54) + -1)|0;
                            $56 = $55 & $52;
                            $57 = $56 << $mws$0$lcssa;
                            $58 = (($49) + ($57))|0;
                            $59 = (($matrix) + ($58)|0);
                            $60 = HEAP8[$59>>0]|0;
                            $61 = $60&255;
                            $$sum = (($61) + ($34))|0;
                            $62 = (($plan) + ($$sum)|0);
                            $63 = HEAP8[$62>>0]|0;
                            $$sum1 = (($x$03) + ($26))|0;
                            $64 = (($all_new_data) + ($$sum1)|0);
                            HEAP8[$64>>0] = $63;
                            $65 = $63&255;
                            $66 = (($histogram) + ($65<<2)|0);
                            $67 = HEAP32[$66>>2]|0;
                            $68 = (($67) + 1)|0;
                            HEAP32[$66>>2] = $68;
                        }
                        $69 = (($x$03) + 1)|0;
                        $70 = HEAP16[$14>>1]|0;
                        $71 = $70&65535;
                        $72 = ($69|0)==($71|0);
                        if ($72) {
                            break;
                        } else {
                            $x$03 = $69;
                        }
                    }
                }
                $73 = (($y$05) + 1)|0;
                $74 = HEAP16[$11>>1]|0;
                $75 = $74&65535;
                $76 = ($73|0)==($75|0);
                if ($76) {
                    break;
                } else {
                    $y$05 = $73;
                }
            }
            return;
        }
        function __ZL23set_ordered_dither_planPhiiP9Gif_ColorP8kd3_tree($plan,$nplan,$nc,$gfc,$kd3) {
            $plan = $plan|0;
            $nplan = $nplan|0;
            $nc = $nc|0;
            $gfc = $gfc|0;
            $kd3 = $kd3|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
            var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
            var $cur = 0, $err = 0, $i$06 = 0, $i$12 = 0, $ncp$0$lcssa = 0, $ncp$03 = 0, $want = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $want = sp + 18|0;
            $cur = sp + 12|0;
            $err = sp;
            $0 = ((($gfc)) + 1|0);
            $1 = HEAP8[$0>>0]|0;
            $2 = $1&255;
            $3 = ((($gfc)) + 2|0);
            $4 = HEAP8[$3>>0]|0;
            $5 = $4&255;
            $6 = ((($gfc)) + 3|0);
            $7 = HEAP8[$6>>0]|0;
            $8 = $7&255;
            __ZL8kc_set8gP6kcoloriii($want,$2,$5,$8);
            $9 = ((($kd3)) + 28|0);
            $10 = HEAP32[$9>>2]|0;
            $11 = ($10|0)==(0|0);
            if (!($11)) {
                FUNCTION_TABLE_vi[$10 & 7]($want);
            }
            __ZL9wkc_clearP7wkcolor($err);
            $12 = ($nplan|0)==(0);
            if (!($12)) {
                $13 = ((($kd3)) + 12|0);
                $14 = ((($want)) + 2|0);
                $15 = ((($err)) + 4|0);
                $16 = ((($cur)) + 2|0);
                $17 = ((($want)) + 4|0);
                $18 = ((($err)) + 8|0);
                $19 = ((($cur)) + 4|0);
                $20 = ((($want)) + 2|0);
                $21 = ((($err)) + 4|0);
                $22 = ((($want)) + 4|0);
                $23 = ((($err)) + 8|0);
                $i$06 = 0;
                while(1) {
                    $24 = HEAP16[$want>>1]|0;
                    $25 = $24 << 16 >> 16;
                    $26 = HEAP32[$err>>2]|0;
                    $27 = (($25) + ($26))|0;
                    $28 = ($27|0)<(32767);
                    $29 = $28 ? $27 : 32767;
                    $30 = ($29|0)<(0);
                    $31 = $29&65535;
                    $32 = $30 ? 0 : $31;
                    HEAP16[$cur>>1] = $32;
                    $33 = HEAP16[$14>>1]|0;
                    $34 = $33 << 16 >> 16;
                    $35 = HEAP32[$15>>2]|0;
                    $36 = (($34) + ($35))|0;
                    $37 = ($36|0)<(32767);
                    $38 = $37 ? $36 : 32767;
                    $39 = ($38|0)<(0);
                    $40 = $38&65535;
                    $41 = $39 ? 0 : $40;
                    HEAP16[$16>>1] = $41;
                    $42 = HEAP16[$17>>1]|0;
                    $43 = $42 << 16 >> 16;
                    $44 = HEAP32[$18>>2]|0;
                    $45 = (($43) + ($44))|0;
                    $46 = ($45|0)<(32767);
                    $47 = $46 ? $45 : 32767;
                    $48 = ($47|0)<(0);
                    $49 = $47&65535;
                    $50 = $48 ? 0 : $49;
                    HEAP16[$19>>1] = $50;
                    $51 = (__Z23kd3_closest_transformedP8kd3_treePK6kcolorPj($kd3,$cur,0)|0);
                    $52 = $51&255;
                    $53 = (($plan) + ($i$06)|0);
                    HEAP8[$53>>0] = $52;
                    $54 = $51 & 255;
                    $55 = HEAP32[$13>>2]|0;
                    $56 = HEAP16[$want>>1]|0;
                    $57 = $56 << 16 >> 16;
                    $58 = (($55) + (($54*6)|0)|0);
                    $59 = HEAP16[$58>>1]|0;
                    $60 = $59 << 16 >> 16;
                    $61 = (($57) - ($60))|0;
                    $62 = HEAP32[$err>>2]|0;
                    $63 = (($61) + ($62))|0;
                    HEAP32[$err>>2] = $63;
                    $64 = HEAP16[$20>>1]|0;
                    $65 = $64 << 16 >> 16;
                    $66 = (((($55) + (($54*6)|0)|0)) + 2|0);
                    $67 = HEAP16[$66>>1]|0;
                    $68 = $67 << 16 >> 16;
                    $69 = (($65) - ($68))|0;
                    $70 = HEAP32[$21>>2]|0;
                    $71 = (($69) + ($70))|0;
                    HEAP32[$21>>2] = $71;
                    $72 = HEAP16[$22>>1]|0;
                    $73 = $72 << 16 >> 16;
                    $74 = (((($55) + (($54*6)|0)|0)) + 4|0);
                    $75 = HEAP16[$74>>1]|0;
                    $76 = $75 << 16 >> 16;
                    $77 = (($73) - ($76))|0;
                    $78 = HEAP32[$23>>2]|0;
                    $79 = (($77) + ($78))|0;
                    HEAP32[$23>>2] = $79;
                    $80 = (($i$06) + 1)|0;
                    $81 = ($80|0)==($nplan|0);
                    if ($81) {
                        break;
                    } else {
                        $i$06 = $80;
                    }
                }
            }
            _qsort($plan,$nplan,1,14);
            $82 = ($nc|0)<($nplan|0);
            if (!($82)) {
                HEAP8[$gfc>>0] = 1;
                STACKTOP = sp;return;
            }
            $83 = HEAP8[$plan>>0]|0;
            $84 = (($nplan) + -1)|0;
            $85 = (($plan) + ($84)|0);
            $86 = HEAP8[$85>>0]|0;
            $87 = ($83<<24>>24)==($86<<24>>24);
            if ($87) {
                HEAP8[$gfc>>0] = 1;
                STACKTOP = sp;return;
            }
            $88 = ($nplan|0)==(1);
            if ($88) {
                $ncp$0$lcssa = 1;
            } else {
                $i$12 = 1;$ncp$03 = 1;
                while(1) {
                    $89 = (($i$12) + -1)|0;
                    $90 = (($plan) + ($89)|0);
                    $91 = HEAP8[$90>>0]|0;
                    $92 = (($plan) + ($i$12)|0);
                    $93 = HEAP8[$92>>0]|0;
                    $94 = ($91<<24>>24)!=($93<<24>>24);
                    $95 = $94&1;
                    $96 = (($95) + ($ncp$03))|0;
                    $97 = (($i$12) + 1)|0;
                    $98 = ($97|0)==($nplan|0);
                    if ($98) {
                        $ncp$0$lcssa = $96;
                        break;
                    } else {
                        $i$12 = $97;$ncp$03 = $96;
                    }
                }
            }
            $99 = ($ncp$0$lcssa|0)>($nc|0);
            if (!($99)) {
                HEAP8[$gfc>>0] = 1;
                STACKTOP = sp;return;
            }
            __ZL25limit_ordered_dither_planPhiiPK6kcolorP8kd3_tree($plan,$nplan,$nc,$want,$kd3);
            HEAP8[$gfc>>0] = 1;
            STACKTOP = sp;return;
        }
        function __ZL9wkc_clearP7wkcolor($x) {
            $x = $x|0;
            var $0 = 0, $1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($x)) + 8|0);
            HEAP32[$0>>2] = 0;
            $1 = ((($x)) + 4|0);
            HEAP32[$1>>2] = 0;
            HEAP32[$x>>2] = 0;
            return;
        }
        function __ZL27ordered_dither_plan_comparePKvS0_($xa,$xb) {
            $xa = $xa|0;
            $xb = $xb|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP8[$xa>>0]|0;
            $1 = $0&255;
            $2 = HEAP32[500>>2]|0;
            $3 = (($2) + ($1<<2)|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = HEAP8[$xb>>0]|0;
            $6 = $5&255;
            $7 = (($2) + ($6<<2)|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = ($4|0)==($8|0);
            $10 = (($4) - ($8))|0;
            $11 = (($1) - ($6))|0;
            $$0 = $9 ? $11 : $10;
            return ($$0|0);
        }
        function __ZL25limit_ordered_dither_planPhiiPK6kcolorP8kd3_tree($plan,$nplan,$nc,$want,$kd3) {
            $plan = $plan|0;
            $nplan = $nplan|0;
            $nc = $nc|0;
            $want = $want|0;
            $kd3 = $kd3|0;
            var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
            var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
            var $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
            var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0;
            var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bestcp = 0, $cp = 0, $dist = 0, $i$026 = 0, $i$122 = 0, $j$016 = 0, $k$011 = 0, $mindist$020 = 0, $mindist$1 = 0, $mindist$2$lcssa = 0, $mindist$214 = 0, $mindist$3 = 0, $mindist$4$lcssa = 0, $mindist$49 = 0, $mindist$5 = 0, $nbestcp$0$lcssa = 0;
            var $nbestcp$021 = 0, $nbestcp$1 = 0, $nbestcp$2$lcssa = 0, $nbestcp$215 = 0, $nbestcp$3 = 0, $nbestcp$4$lcssa = 0, $nbestcp$410 = 0, $nbestcp$5 = 0, $ncp$0$lcssa29 = 0, $ncp$025 = 0, $ncp$1 = 0, $ncp$1$lcssa = 0, $or$cond = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond48 = 0, $or$cond6 = 0, $t = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 1120|0;
            $dist = sp + 16|0;
            $t = sp;
            $cp = sp + 88|0;
            $bestcp = sp + 24|0;
            $0 = ($nc|0)>(16);
            $1 = $0 ? 16 : $nc;
            $2 = HEAP8[$plan>>0]|0;
            HEAP8[$cp>>0] = $2;
            $3 = ((($cp)) + 2|0);
            HEAP16[$3>>1] = 1;
            $4 = ($nplan|0)==(1);
            if ($4) {
                $ncp$0$lcssa29 = 1;
            } else {
                $i$026 = 1;$ncp$025 = 1;
                while(1) {
                    $19 = (($i$026) + -1)|0;
                    $20 = (($plan) + ($19)|0);
                    $21 = HEAP8[$20>>0]|0;
                    $22 = (($plan) + ($i$026)|0);
                    $23 = HEAP8[$22>>0]|0;
                    $24 = ($21<<24>>24)==($23<<24>>24);
                    if ($24) {
                        $25 = (($ncp$025) + -1)|0;
                        $26 = (((($cp) + ($25<<2)|0)) + 2|0);
                        $27 = HEAP16[$26>>1]|0;
                        $28 = (($27) + 1)<<16>>16;
                        HEAP16[$26>>1] = $28;
                        $ncp$1 = $ncp$025;
                    } else {
                        $29 = (($cp) + ($ncp$025<<2)|0);
                        HEAP8[$29>>0] = $23;
                        $30 = (((($cp) + ($ncp$025<<2)|0)) + 2|0);
                        HEAP16[$30>>1] = 1;
                        $31 = (($ncp$025) + 1)|0;
                        $ncp$1 = $31;
                    }
                    $32 = (($i$026) + 1)|0;
                    $33 = ($32|0)==($nplan|0);
                    if ($33) {
                        $ncp$1$lcssa = $ncp$1;
                        break;
                    } else {
                        $i$026 = $32;$ncp$025 = $ncp$1;
                    }
                }
                $5 = ($ncp$1$lcssa|0)==(0);
                if ($5) {
                    $nbestcp$0$lcssa = 0;
                    __ZL15plan_from_cplanPhiPK17odselect_planitemii($plan,$nplan,$bestcp,$nbestcp$0$lcssa);
                    STACKTOP = sp;return;
                } else {
                    $ncp$0$lcssa29 = $ncp$1$lcssa;
                }
            }
            $6 = ((($kd3)) + 12|0);
            $7 = ((($bestcp)) + 2|0);
            $8 = ($1|0)>(1);
            $9 = ((($bestcp)) + 4|0);
            $10 = ((($bestcp)) + 6|0);
            $11 = ((($bestcp)) + 2|0);
            $12 = ($1|0)>(2);
            $13 = ((($bestcp)) + 4|0);
            $14 = ((($bestcp)) + 6|0);
            $15 = ((($bestcp)) + 8|0);
            $16 = ((($t)) + 8|0);
            $17 = ((($bestcp)) + 10|0);
            $18 = ((($bestcp)) + 2|0);
            $i$122 = 0;$mindist$020 = -1;$nbestcp$021 = 0;
            while(1) {
                $36 = (($cp) + ($i$122<<2)|0);
                $37 = HEAP8[$36>>0]|0;
                $38 = $37&255;
                $39 = HEAP32[$6>>2]|0;
                $40 = (($39) + (($38*6)|0)|0);
                $41 = (__ZL11kc_distancePK6kcolorS1_($40,$want)|0);
                HEAP32[$dist>>2] = $41;
                $42 = ($41>>>0)<($mindist$020>>>0);
                if ($42) {
                    $43 = HEAP8[$36>>0]|0;
                    HEAP8[$bestcp>>0] = $43;
                    HEAP16[$7>>1] = -32768;
                    $44 = HEAP32[$dist>>2]|0;
                    $mindist$1 = $44;$nbestcp$1 = 1;
                } else {
                    $mindist$1 = $mindist$020;$nbestcp$1 = $nbestcp$021;
                }
                $34 = (($i$122) + 1)|0;
                $45 = ($34|0)<($ncp$0$lcssa29|0);
                $or$cond13 = $8 & $45;
                if ($or$cond13) {
                    $46 = HEAP8[$36>>0]|0;
                    $47 = $46&255;
                    $j$016 = $34;$mindist$214 = $mindist$1;$nbestcp$215 = $nbestcp$1;
                    while(1) {
                        $50 = HEAP32[$6>>2]|0;
                        $51 = (($50) + (($47*6)|0)|0);
                        $52 = (($cp) + ($j$016<<2)|0);
                        $53 = HEAP8[$52>>0]|0;
                        $54 = $53&255;
                        $55 = (($50) + (($54*6)|0)|0);
                        $56 = (__ZL15kc_line_closestPK6kcolorS1_S1_PdPj($51,$55,$want,$t,$dist)|0);
                        $57 = ($56|0)!=(0);
                        $58 = HEAP32[$dist>>2]|0;
                        $59 = ($58>>>0)<($mindist$214>>>0);
                        $or$cond3 = $57 & $59;
                        if ($or$cond3) {
                            $60 = HEAP8[$36>>0]|0;
                            HEAP8[$bestcp>>0] = $60;
                            $61 = HEAP8[$52>>0]|0;
                            HEAP8[$9>>0] = $61;
                            $62 = +HEAPF64[$t>>3];
                            $63 = $62 * 32768.0;
                            $64 = (~~(($63)));
                            $65 = $64&65535;
                            HEAP16[$10>>1] = $65;
                            $66 = (32768 - ($64))|0;
                            $67 = $66&65535;
                            HEAP16[$11>>1] = $67;
                            $68 = HEAP32[$dist>>2]|0;
                            $mindist$3 = $68;$nbestcp$3 = 2;
                        } else {
                            $mindist$3 = $mindist$214;$nbestcp$3 = $nbestcp$215;
                        }
                        $48 = (($j$016) + 1)|0;
                        $69 = ($48|0)<($ncp$0$lcssa29|0);
                        $or$cond48 = $12 & $69;
                        if ($or$cond48) {
                            $70 = HEAP8[$36>>0]|0;
                            $71 = $70&255;
                            $72 = HEAP8[$52>>0]|0;
                            $73 = $72&255;
                            $k$011 = $48;$mindist$49 = $mindist$3;$nbestcp$410 = $nbestcp$3;
                            while(1) {
                                $74 = HEAP32[$6>>2]|0;
                                $75 = (($74) + (($71*6)|0)|0);
                                $76 = (($74) + (($73*6)|0)|0);
                                $77 = (($cp) + ($k$011<<2)|0);
                                $78 = HEAP8[$77>>0]|0;
                                $79 = $78&255;
                                $80 = (($74) + (($79*6)|0)|0);
                                $81 = (__ZL16kc_plane_closestPK6kcolorS1_S1_S1_PdPj($75,$76,$80,$want,$t,$dist)|0);
                                $82 = ($81|0)!=(0);
                                $83 = HEAP32[$dist>>2]|0;
                                $84 = ($83>>>0)<($mindist$49>>>0);
                                $or$cond6 = $82 & $84;
                                if ($or$cond6) {
                                    $85 = HEAP8[$36>>0]|0;
                                    HEAP8[$bestcp>>0] = $85;
                                    $86 = HEAP8[$52>>0]|0;
                                    HEAP8[$13>>0] = $86;
                                    $87 = +HEAPF64[$t>>3];
                                    $88 = $87 * 32768.0;
                                    $89 = (~~(($88)));
                                    $90 = $89&65535;
                                    HEAP16[$14>>1] = $90;
                                    $91 = HEAP8[$77>>0]|0;
                                    HEAP8[$15>>0] = $91;
                                    $92 = +HEAPF64[$16>>3];
                                    $93 = $92 * 32768.0;
                                    $94 = (~~(($93)));
                                    $95 = $94&65535;
                                    HEAP16[$17>>1] = $95;
                                    $96 = HEAP16[$14>>1]|0;
                                    $97 = $96&65535;
                                    $98 = (32768 - ($97))|0;
                                    $99 = (($98) - ($94))|0;
                                    $100 = $99&65535;
                                    HEAP16[$18>>1] = $100;
                                    $101 = HEAP32[$dist>>2]|0;
                                    $mindist$5 = $101;$nbestcp$5 = 3;
                                } else {
                                    $mindist$5 = $mindist$49;$nbestcp$5 = $nbestcp$410;
                                }
                                $102 = (($k$011) + 1)|0;
                                $103 = ($102|0)<($ncp$0$lcssa29|0);
                                $or$cond4 = $12 & $103;
                                if ($or$cond4) {
                                    $k$011 = $102;$mindist$49 = $mindist$5;$nbestcp$410 = $nbestcp$5;
                                } else {
                                    $mindist$4$lcssa = $mindist$5;$nbestcp$4$lcssa = $nbestcp$5;
                                    break;
                                }
                            }
                        } else {
                            $mindist$4$lcssa = $mindist$3;$nbestcp$4$lcssa = $nbestcp$3;
                        }
                        $49 = ($48|0)<($ncp$0$lcssa29|0);
                        $or$cond = $8 & $49;
                        if ($or$cond) {
                            $j$016 = $48;$mindist$214 = $mindist$4$lcssa;$nbestcp$215 = $nbestcp$4$lcssa;
                        } else {
                            $mindist$2$lcssa = $mindist$4$lcssa;$nbestcp$2$lcssa = $nbestcp$4$lcssa;
                            break;
                        }
                    }
                } else {
                    $mindist$2$lcssa = $mindist$1;$nbestcp$2$lcssa = $nbestcp$1;
                }
                $35 = ($34|0)==($ncp$0$lcssa29|0);
                if ($35) {
                    $nbestcp$0$lcssa = $nbestcp$2$lcssa;
                    break;
                } else {
                    $i$122 = $34;$mindist$020 = $mindist$2$lcssa;$nbestcp$021 = $nbestcp$2$lcssa;
                }
            }
            __ZL15plan_from_cplanPhiPK17odselect_planitemii($plan,$nplan,$bestcp,$nbestcp$0$lcssa);
            STACKTOP = sp;return;
        }
        function __ZL15kc_line_closestPK6kcolorS1_S1_PdPj($p0,$p1,$ref,$t,$dist) {
            $p0 = $p0|0;
            $p1 = $p1|0;
            $ref = $ref|0;
            $t = $t|0;
            $dist = $dist|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0;
            var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
            var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
            var $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0;
            var $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0;
            var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $online = 0, $or$cond = 0, $p01 = 0, $p0ref = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $p01 = sp + 12|0;
            $p0ref = sp;
            $online = sp + 24|0;
            $0 = HEAP16[$p1>>1]|0;
            $1 = $0 << 16 >> 16;
            $2 = HEAP16[$p0>>1]|0;
            $3 = $2 << 16 >> 16;
            $4 = (($1) - ($3))|0;
            HEAP32[$p01>>2] = $4;
            $5 = HEAP16[$ref>>1]|0;
            $6 = $5 << 16 >> 16;
            $7 = HEAP16[$p0>>1]|0;
            $8 = $7 << 16 >> 16;
            $9 = (($6) - ($8))|0;
            HEAP32[$p0ref>>2] = $9;
            $10 = ((($p1)) + 2|0);
            $11 = HEAP16[$10>>1]|0;
            $12 = $11 << 16 >> 16;
            $13 = ((($p0)) + 2|0);
            $14 = HEAP16[$13>>1]|0;
            $15 = $14 << 16 >> 16;
            $16 = (($12) - ($15))|0;
            $17 = ((($p01)) + 4|0);
            HEAP32[$17>>2] = $16;
            $18 = ((($ref)) + 2|0);
            $19 = HEAP16[$18>>1]|0;
            $20 = $19 << 16 >> 16;
            $21 = HEAP16[$13>>1]|0;
            $22 = $21 << 16 >> 16;
            $23 = (($20) - ($22))|0;
            $24 = ((($p0ref)) + 4|0);
            HEAP32[$24>>2] = $23;
            $25 = ((($p1)) + 4|0);
            $26 = HEAP16[$25>>1]|0;
            $27 = $26 << 16 >> 16;
            $28 = ((($p0)) + 4|0);
            $29 = HEAP16[$28>>1]|0;
            $30 = $29 << 16 >> 16;
            $31 = (($27) - ($30))|0;
            $32 = ((($p01)) + 8|0);
            HEAP32[$32>>2] = $31;
            $33 = ((($ref)) + 4|0);
            $34 = HEAP16[$33>>1]|0;
            $35 = $34 << 16 >> 16;
            $36 = HEAP16[$28>>1]|0;
            $37 = $36 << 16 >> 16;
            $38 = (($35) - ($37))|0;
            $39 = ((($p0ref)) + 8|0);
            HEAP32[$39>>2] = $38;
            $40 = HEAP32[$p01>>2]|0;
            $41 = Math_imul($40, $40)|0;
            $42 = ((($p01)) + 4|0);
            $43 = HEAP32[$42>>2]|0;
            $44 = Math_imul($43, $43)|0;
            $45 = (($44) + ($41))|0;
            $46 = ((($p01)) + 8|0);
            $47 = HEAP32[$46>>2]|0;
            $48 = Math_imul($47, $47)|0;
            $49 = (($45) + ($48))|0;
            $50 = ($49|0)==(0);
            if ($50) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $51 = (+($40|0));
            $52 = HEAP32[$p0ref>>2]|0;
            $53 = (+($52|0));
            $54 = $51 * $53;
            $55 = ((($p0ref)) + 4|0);
            $56 = HEAP32[$55>>2]|0;
            $57 = Math_imul($56, $43)|0;
            $58 = (+($57|0));
            $59 = $54 + $58;
            $60 = ((($p0ref)) + 8|0);
            $61 = HEAP32[$60>>2]|0;
            $62 = Math_imul($61, $47)|0;
            $63 = (+($62|0));
            $64 = $59 + $63;
            $65 = (+($49>>>0));
            $66 = $64 / $65;
            HEAPF64[$t>>3] = $66;
            $67 = $66 < 0.0;
            $68 = $66 > 1.0;
            $or$cond = $67 | $68;
            if ($or$cond) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $69 = +HEAPF64[$t>>3];
            $70 = HEAP32[$p01>>2]|0;
            $71 = (+($70|0));
            $72 = $71 * $69;
            $73 = (~~(($72)));
            $74 = HEAP16[$p0>>1]|0;
            $75 = $74 << 16 >> 16;
            $76 = (($73) + ($75))|0;
            $77 = ($76|0)<(32767);
            $78 = $77 ? $76 : 32767;
            $79 = ($78|0)<(0);
            $80 = $78&65535;
            $81 = $79 ? 0 : $80;
            HEAP16[$online>>1] = $81;
            $82 = ((($p01)) + 4|0);
            $83 = HEAP32[$82>>2]|0;
            $84 = (+($83|0));
            $85 = $84 * $69;
            $86 = (~~(($85)));
            $87 = ((($p0)) + 2|0);
            $88 = HEAP16[$87>>1]|0;
            $89 = $88 << 16 >> 16;
            $90 = (($86) + ($89))|0;
            $91 = ($90|0)<(32767);
            $92 = $91 ? $90 : 32767;
            $93 = ($92|0)<(0);
            $94 = $92&65535;
            $95 = $93 ? 0 : $94;
            $96 = ((($online)) + 2|0);
            HEAP16[$96>>1] = $95;
            $97 = ((($p01)) + 8|0);
            $98 = HEAP32[$97>>2]|0;
            $99 = (+($98|0));
            $100 = $99 * $69;
            $101 = (~~(($100)));
            $102 = ((($p0)) + 4|0);
            $103 = HEAP16[$102>>1]|0;
            $104 = $103 << 16 >> 16;
            $105 = (($101) + ($104))|0;
            $106 = ($105|0)<(32767);
            $107 = $106 ? $105 : 32767;
            $108 = ($107|0)<(0);
            $109 = $107&65535;
            $110 = $108 ? 0 : $109;
            $111 = ((($online)) + 4|0);
            HEAP16[$111>>1] = $110;
            $112 = (__ZL11kc_distancePK6kcolorS1_($online,$ref)|0);
            HEAP32[$dist>>2] = $112;
            $$0 = 1;
            STACKTOP = sp;return ($$0|0);
        }
        function __ZL16kc_plane_closestPK6kcolorS1_S1_S1_PdPj($p0,$p1,$p2,$ref,$t,$dist) {
            $p0 = $p0|0;
            $p1 = $p1|0;
            $p2 = $p2|0;
            $ref = $ref|0;
            $t = $t|0;
            $dist = $dist|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0;
            var $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0;
            var $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0.0;
            var $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
            var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
            var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0;
            var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
            var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $p01 = 0, $p02 = 0, $p0ref = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 48|0;
            $p0ref = sp + 24|0;
            $p01 = sp + 12|0;
            $p02 = sp;
            $0 = HEAP16[$ref>>1]|0;
            $1 = $0 << 16 >> 16;
            $2 = HEAP16[$p0>>1]|0;
            $3 = $2 << 16 >> 16;
            $4 = (($1) - ($3))|0;
            HEAP32[$p0ref>>2] = $4;
            $5 = HEAP16[$p1>>1]|0;
            $6 = $5 << 16 >> 16;
            $7 = HEAP16[$p0>>1]|0;
            $8 = $7 << 16 >> 16;
            $9 = (($6) - ($8))|0;
            HEAP32[$p01>>2] = $9;
            $10 = HEAP16[$p2>>1]|0;
            $11 = $10 << 16 >> 16;
            $12 = HEAP16[$p0>>1]|0;
            $13 = $12 << 16 >> 16;
            $14 = (($11) - ($13))|0;
            HEAP32[$p02>>2] = $14;
            $15 = ((($ref)) + 2|0);
            $16 = HEAP16[$15>>1]|0;
            $17 = $16 << 16 >> 16;
            $18 = ((($p0)) + 2|0);
            $19 = HEAP16[$18>>1]|0;
            $20 = $19 << 16 >> 16;
            $21 = (($17) - ($20))|0;
            $22 = ((($p0ref)) + 4|0);
            HEAP32[$22>>2] = $21;
            $23 = ((($p1)) + 2|0);
            $24 = HEAP16[$23>>1]|0;
            $25 = $24 << 16 >> 16;
            $26 = HEAP16[$18>>1]|0;
            $27 = $26 << 16 >> 16;
            $28 = (($25) - ($27))|0;
            $29 = ((($p01)) + 4|0);
            HEAP32[$29>>2] = $28;
            $30 = ((($p2)) + 2|0);
            $31 = HEAP16[$30>>1]|0;
            $32 = $31 << 16 >> 16;
            $33 = HEAP16[$18>>1]|0;
            $34 = $33 << 16 >> 16;
            $35 = (($32) - ($34))|0;
            $36 = ((($p02)) + 4|0);
            HEAP32[$36>>2] = $35;
            $37 = ((($ref)) + 4|0);
            $38 = HEAP16[$37>>1]|0;
            $39 = $38 << 16 >> 16;
            $40 = ((($p0)) + 4|0);
            $41 = HEAP16[$40>>1]|0;
            $42 = $41 << 16 >> 16;
            $43 = (($39) - ($42))|0;
            $44 = ((($p0ref)) + 8|0);
            HEAP32[$44>>2] = $43;
            $45 = ((($p1)) + 4|0);
            $46 = HEAP16[$45>>1]|0;
            $47 = $46 << 16 >> 16;
            $48 = HEAP16[$40>>1]|0;
            $49 = $48 << 16 >> 16;
            $50 = (($47) - ($49))|0;
            $51 = ((($p01)) + 8|0);
            HEAP32[$51>>2] = $50;
            $52 = ((($p2)) + 4|0);
            $53 = HEAP16[$52>>1]|0;
            $54 = $53 << 16 >> 16;
            $55 = HEAP16[$40>>1]|0;
            $56 = $55 << 16 >> 16;
            $57 = (($54) - ($56))|0;
            $58 = ((($p02)) + 8|0);
            HEAP32[$58>>2] = $57;
            $59 = ((($p01)) + 4|0);
            $60 = HEAP32[$59>>2]|0;
            $61 = ((($p02)) + 8|0);
            $62 = Math_imul($57, $60)|0;
            $63 = ((($p01)) + 8|0);
            $64 = HEAP32[$63>>2]|0;
            $65 = ((($p02)) + 4|0);
            $66 = HEAP32[$65>>2]|0;
            $67 = Math_imul($66, $64)|0;
            $68 = (($62) - ($67))|0;
            $69 = (+($68|0));
            $70 = HEAP32[$p02>>2]|0;
            $71 = Math_imul($70, $64)|0;
            $72 = HEAP32[$p01>>2]|0;
            $73 = Math_imul($72, $57)|0;
            $74 = (($71) - ($73))|0;
            $75 = (+($74|0));
            $76 = Math_imul($72, $66)|0;
            $77 = Math_imul($70, $60)|0;
            $78 = (($76) - ($77))|0;
            $79 = (+($78|0));
            $80 = (+($57|0));
            $81 = $80 * $75;
            $82 = (+($66|0));
            $83 = $82 * $79;
            $84 = $81 - $83;
            $85 = (+($70|0));
            $86 = $85 * $79;
            $87 = $80 * $69;
            $88 = $86 - $87;
            $89 = $82 * $69;
            $90 = $85 * $75;
            $91 = $89 - $90;
            $92 = (+($72|0));
            $93 = $92 * $84;
            $94 = (+($60|0));
            $95 = $94 * $88;
            $96 = $93 + $95;
            $97 = (+($64|0));
            $98 = $97 * $91;
            $99 = $98 + $96;
            $100 = (+Math_abs((+$99)));
            $101 = !($100 <= 1.220703125E-4);
            if (!($101)) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $102 = 1.0 / $99;
            $103 = HEAP32[$p0ref>>2]|0;
            $104 = (+($103|0));
            $105 = $84 * $104;
            $106 = ((($p0ref)) + 4|0);
            $107 = HEAP32[$106>>2]|0;
            $108 = (+($107|0));
            $109 = $88 * $108;
            $110 = $105 + $109;
            $111 = ((($p0ref)) + 8|0);
            $112 = HEAP32[$111>>2]|0;
            $113 = (+($112|0));
            $114 = $91 * $113;
            $115 = $110 + $114;
            $116 = $102 * $115;
            $117 = $116 < 0.0;
            $118 = $116 > 1.0;
            $or$cond = $117 | $118;
            if ($or$cond) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $119 = Math_imul($107, $64)|0;
            $120 = Math_imul($112, $60)|0;
            $121 = (($119) - ($120))|0;
            $122 = (+($121|0));
            $123 = Math_imul($112, $72)|0;
            $124 = Math_imul($103, $64)|0;
            $125 = (($123) - ($124))|0;
            $126 = (+($125|0));
            $127 = Math_imul($103, $60)|0;
            $128 = Math_imul($107, $72)|0;
            $129 = (($127) - ($128))|0;
            $130 = (+($129|0));
            $131 = $69 * $122;
            $132 = $75 * $126;
            $133 = $131 + $132;
            $134 = $79 * $130;
            $135 = $134 + $133;
            $136 = $102 * $135;
            $137 = $136 < 0.0;
            $138 = $136 > 1.0;
            $or$cond3 = $137 | $138;
            $139 = $116 + $136;
            $140 = $139 > 1.0;
            $or$cond5 = $or$cond3 | $140;
            if ($or$cond5) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            HEAPF64[$t>>3] = $116;
            $141 = ((($t)) + 8|0);
            HEAPF64[$141>>3] = $136;
            $142 = HEAP32[$p02>>2]|0;
            $143 = (+($142|0));
            $144 = $122 * $143;
            $145 = HEAP32[$65>>2]|0;
            $146 = (+($145|0));
            $147 = $126 * $146;
            $148 = $144 + $147;
            $149 = HEAP32[$61>>2]|0;
            $150 = (+($149|0));
            $151 = $130 * $150;
            $152 = $148 + $151;
            $153 = $102 * $152;
            $154 = $153 * $153;
            $155 = $69 * $69;
            $156 = $75 * $75;
            $157 = $155 + $156;
            $158 = $79 * $79;
            $159 = $158 + $157;
            $160 = $159 * $154;
            $161 = $160 + 0.5;
            $162 = (~~(($161))>>>0);
            HEAP32[$dist>>2] = $162;
            $$0 = 1;
            STACKTOP = sp;return ($$0|0);
        }
        function __ZL15plan_from_cplanPhiPK17odselect_planitemii($plan,$nplan,$cp,$ncp) {
            $plan = $plan|0;
            $nplan = $nplan|0;
            $cp = $cp|0;
            $ncp = $ncp|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cfrac_subt$02 = 0, $i$04 = 0, $planpos$0$lcssa = 0, $planpos$03 = 0;
            var $planpos$1$lcssa = 0, $planpos$11 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($ncp|0)==(0);
            if ($0) {
                $planpos$0$lcssa = 0;
            } else {
                $cfrac_subt$02 = 0;$i$04 = 0;$planpos$03 = 0;
                while(1) {
                    $1 = (((($cp) + ($i$04<<2)|0)) + 2|0);
                    $2 = HEAP16[$1>>1]|0;
                    $3 = $2&65535;
                    $4 = (($3) + ($cfrac_subt$02))|0;
                    $5 = Math_imul($4, $nplan)|0;
                    $6 = (($5|0) / 32768)&-1;
                    $7 = ($planpos$03|0)==($6|0);
                    if ($7) {
                        $planpos$1$lcssa = $planpos$03;
                    } else {
                        $8 = (($cp) + ($i$04<<2)|0);
                        $planpos$11 = $planpos$03;
                        while(1) {
                            $9 = HEAP8[$8>>0]|0;
                            $10 = (($planpos$11) + 1)|0;
                            $11 = (($plan) + ($planpos$11)|0);
                            HEAP8[$11>>0] = $9;
                            $12 = ($10|0)==($6|0);
                            if ($12) {
                                $planpos$1$lcssa = $6;
                                break;
                            } else {
                                $planpos$11 = $10;
                            }
                        }
                    }
                    $13 = (($i$04) + 1)|0;
                    $14 = ($13|0)==($ncp|0);
                    if ($14) {
                        $planpos$0$lcssa = $planpos$1$lcssa;
                        break;
                    } else {
                        $cfrac_subt$02 = $4;$i$04 = $13;$planpos$03 = $planpos$1$lcssa;
                    }
                }
            }
            $15 = ($planpos$0$lcssa|0)==($nplan|0);
            if ($15) {
                return;
            } else {
                ___assert_fail((12718|0),(8037|0),1208,(12735|0));
                // unreachable;
            }
        }
        function __ZL17kd3_item_compar_0PKvS0_($a,$b) {
            $a = $a|0;
            $b = $b|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$a>>2]|0;
            $1 = HEAP32[492>>2]|0;
            $2 = ((($1)) + 12|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = (($3) + (($0*6)|0)|0);
            $5 = HEAP16[$4>>1]|0;
            $6 = $5 << 16 >> 16;
            $7 = HEAP32[$b>>2]|0;
            $8 = (($3) + (($7*6)|0)|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = $9 << 16 >> 16;
            $11 = (($6) - ($10))|0;
            return ($11|0);
        }
        function __ZL17kd3_item_compar_1PKvS0_($a,$b) {
            $a = $a|0;
            $b = $b|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$a>>2]|0;
            $1 = HEAP32[492>>2]|0;
            $2 = ((($1)) + 12|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = (((($3) + (($0*6)|0)|0)) + 2|0);
            $5 = HEAP16[$4>>1]|0;
            $6 = $5 << 16 >> 16;
            $7 = HEAP32[$b>>2]|0;
            $8 = (((($3) + (($7*6)|0)|0)) + 2|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = $9 << 16 >> 16;
            $11 = (($6) - ($10))|0;
            return ($11|0);
        }
        function __ZL17kd3_item_compar_2PKvS0_($a,$b) {
            $a = $a|0;
            $b = $b|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$a>>2]|0;
            $1 = HEAP32[492>>2]|0;
            $2 = ((($1)) + 12|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = (((($3) + (($0*6)|0)|0)) + 4|0);
            $5 = HEAP16[$4>>1]|0;
            $6 = $5 << 16 >> 16;
            $7 = HEAP32[$b>>2]|0;
            $8 = (((($3) + (($7*6)|0)|0)) + 4|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = $9 << 16 >> 16;
            $11 = (($6) - ($10))|0;
            return ($11|0);
        }
        function __ZL27colormap_diversity_do_blendP11kcdiversity($div) {
            $div = $div|0;
            var $$ = 0.0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0;
            var $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0;
            var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0;
            var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0;
            var $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $i$111 = 0, $i$29 = 0, $i$36 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$div>>2]|0;
            $1 = ((($0)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = HEAP32[$0>>2]|0;
            $4 = (_Gif_Realloc(0,4,$2,8037,616)|0);
            $5 = ((($div)) + 20|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = (_Gif_Realloc(0,16,$6,8037,617)|0);
            $8 = HEAP32[$5>>2]|0;
            $9 = ($8|0)==(0);
            if (!($9)) {
                $10 = HEAP32[$5>>2]|0;
                $11 = $10 << 4;
                _memset(($7|0),0,($11|0))|0;
                $$pr = HEAP32[$5>>2]|0;
                $12 = ($$pr|0)==(0);
                if (!($12)) {
                    $13 = ((($div)) + 16|0);
                    $14 = HEAP32[$13>>2]|0;
                    $i$111 = 0;
                    while(1) {
                        $18 = (($14) + ($i$111<<2)|0);
                        $19 = HEAP32[$18>>2]|0;
                        $20 = (($4) + ($19<<2)|0);
                        HEAP32[$20>>2] = $i$111;
                        $21 = (($i$111) + 1)|0;
                        $22 = HEAP32[$5>>2]|0;
                        $23 = ($21|0)==($22|0);
                        if ($23) {
                            break;
                        } else {
                            $i$111 = $21;
                        }
                    }
                }
            }
            $15 = ($2|0)==(0);
            if (!($15)) {
                $16 = ((($div)) + 4|0);
                $17 = HEAP32[$16>>2]|0;
                $i$29 = 0;
                while(1) {
                    $29 = (((($3) + (($i$29*12)|0)|0)) + 8|0);
                    $30 = HEAP32[$29>>2]|0;
                    $31 = (+($30>>>0));
                    $32 = (($17) + ($i$29<<2)|0);
                    $33 = HEAP32[$32>>2]|0;
                    $34 = ($33|0)==($i$29|0);
                    $35 = $31 * 3.0;
                    $$ = $34 ? $35 : $31;
                    $36 = (($4) + ($33<<2)|0);
                    $37 = HEAP32[$36>>2]|0;
                    $38 = (($3) + (($i$29*12)|0)|0);
                    $39 = HEAP16[$38>>1]|0;
                    $40 = (+($39<<16>>16));
                    $41 = $$ * $40;
                    $42 = (($7) + ($37<<4)|0);
                    $43 = +HEAPF32[$42>>2];
                    $44 = $43;
                    $45 = $44 + $41;
                    $46 = $45;
                    HEAPF32[$42>>2] = $46;
                    $47 = (((($3) + (($i$29*12)|0)|0)) + 2|0);
                    $48 = HEAP16[$47>>1]|0;
                    $49 = (+($48<<16>>16));
                    $50 = $$ * $49;
                    $51 = (((($7) + ($37<<4)|0)) + 4|0);
                    $52 = +HEAPF32[$51>>2];
                    $53 = $52;
                    $54 = $53 + $50;
                    $55 = $54;
                    HEAPF32[$51>>2] = $55;
                    $56 = (((($3) + (($i$29*12)|0)|0)) + 4|0);
                    $57 = HEAP16[$56>>1]|0;
                    $58 = (+($57<<16>>16));
                    $59 = $$ * $58;
                    $60 = (((($7) + ($37<<4)|0)) + 8|0);
                    $61 = +HEAPF32[$60>>2];
                    $62 = $61;
                    $63 = $62 + $59;
                    $64 = $63;
                    HEAPF32[$60>>2] = $64;
                    $65 = (((($7) + ($37<<4)|0)) + 12|0);
                    $66 = +HEAPF32[$65>>2];
                    $67 = $66;
                    $68 = $$ + $67;
                    $69 = $68;
                    HEAPF32[$65>>2] = $69;
                    $70 = (($i$29) + 1)|0;
                    $71 = ($70|0)==($2|0);
                    if ($71) {
                        break;
                    } else {
                        $i$29 = $70;
                    }
                }
            }
            $24 = HEAP32[$5>>2]|0;
            $25 = ($24|0)==(0);
            if ($25) {
                _free($4);
                _free($7);
                return;
            }
            $26 = ((($div)) + 16|0);
            $27 = HEAP32[$26>>2]|0;
            $28 = HEAP32[$5>>2]|0;
            $i$36 = 0;
            while(1) {
                $72 = (($27) + ($i$36<<2)|0);
                $73 = HEAP32[$72>>2]|0;
                $74 = (((($7) + ($i$36<<4)|0)) + 12|0);
                $75 = +HEAPF32[$74>>2];
                $76 = (((($3) + (($73*12)|0)|0)) + 8|0);
                $77 = HEAP32[$76>>2]|0;
                $78 = ($77*5)|0;
                $79 = (+($78>>>0));
                $80 = !($75 >= $79);
                if (!($80)) {
                    $81 = +HEAPF32[$74>>2];
                    $82 = (($7) + ($i$36<<4)|0);
                    $83 = +HEAPF32[$82>>2];
                    $84 = $83 / $81;
                    $85 = (~~(($84)));
                    $86 = $85&65535;
                    $87 = (($3) + (($73*12)|0)|0);
                    HEAP16[$87>>1] = $86;
                    $88 = (((($7) + ($i$36<<4)|0)) + 4|0);
                    $89 = +HEAPF32[$88>>2];
                    $90 = $89 / $81;
                    $91 = (~~(($90)));
                    $92 = $91&65535;
                    $93 = (((($3) + (($73*12)|0)|0)) + 2|0);
                    HEAP16[$93>>1] = $92;
                    $94 = (((($7) + ($i$36<<4)|0)) + 8|0);
                    $95 = +HEAPF32[$94>>2];
                    $96 = $95 / $81;
                    $97 = (~~(($96)));
                    $98 = $97&65535;
                    $99 = (((($3) + (($73*12)|0)|0)) + 4|0);
                    HEAP16[$99>>1] = $98;
                }
                $100 = (($i$36) + 1)|0;
                $101 = ($100|0)==($28|0);
                if ($101) {
                    break;
                } else {
                    $i$36 = $100;
                }
            }
            _free($4);
            _free($7);
            return;
        }
        function __ZL9kc_make8giii($agg$result,$a0,$a1,$a2) {
            $agg$result = $agg$result|0;
            $a0 = $a0|0;
            $a1 = $a1|0;
            $a2 = $a2|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            __ZL8kc_set8gP6kcoloriii($agg$result,$a0,$a1,$a2);
            return;
        }
        function __Z11fatal_errorPKcz($format,$varargs) {
            $format = $format|0;
            $varargs = $varargs|0;
            var $val = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $val = sp;
            HEAP32[$val>>2] = $varargs;
            __ZL6verrorPKciiS0_Pi(0,0,3,$format,$val);
            _exit(1);
            // unreachable;
        }
        function __Z6lerrorPKcS0_z($landmark,$format,$varargs) {
            $landmark = $landmark|0;
            $format = $format|0;
            $varargs = $varargs|0;
            var $val = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $val = sp;
            HEAP32[$val>>2] = $varargs;
            __ZL6verrorPKciiS0_Pi($landmark,2,2,$format,$val);
            STACKTOP = sp;return;
        }
        function __Z5erroriPKcz($need_file,$format,$varargs) {
            $need_file = $need_file|0;
            $format = $format|0;
            $varargs = $varargs|0;
            var $val = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $val = sp;
            HEAP32[$val>>2] = $varargs;
            __ZL6verrorPKciiS0_Pi(0,$need_file,2,$format,$val);
            STACKTOP = sp;return;
        }
        function __Z8lwarningPKcS0_z($landmark,$format,$varargs) {
            $landmark = $landmark|0;
            $format = $format|0;
            $varargs = $varargs|0;
            var $val = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $val = sp;
            HEAP32[$val>>2] = $varargs;
            __ZL6verrorPKciiS0_Pi($landmark,2,1,$format,$val);
            STACKTOP = sp;return;
        }
        function __Z7warningiPKcz($need_file,$format,$varargs) {
            $need_file = $need_file|0;
            $format = $format|0;
            $varargs = $varargs|0;
            var $val = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $val = sp;
            HEAP32[$val>>2] = $varargs;
            __ZL6verrorPKciiS0_Pi(0,$need_file,1,$format,$val);
            STACKTOP = sp;return;
        }
        function __Z17clp_error_handlerP10Clp_ParserPKc($clp,$message) {
            $clp = $clp|0;
            $message = $message|0;
            var $0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            __Z15verbose_endlinev();
            $0 = HEAP32[3472>>2]|0;
            (_fputs($message,$0)|0);
            return;
        }
        function __Z15verbose_endlinev() {
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[596>>2]|0;
            $1 = ($0|0)==(0);
            if ($1) {
                return;
            }
            $2 = HEAP32[3472>>2]|0;
            (_fputc(10,$2)|0);
            $3 = HEAP32[3472>>2]|0;
            (_fflush($3)|0);
            HEAP32[596>>2] = 0;
            return;
        }
        function __Z11short_usagev() {
            var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $0 = HEAP32[3472>>2]|0;
            $1 = HEAP32[556>>2]|0;
            HEAP32[$vararg_buffer>>2] = $1;
            $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
            HEAP32[$vararg_ptr1>>2] = $1;
            (_fprintf($0,12751,$vararg_buffer)|0);
            STACKTOP = sp;return;
        }
        function __Z5usagev() {
            var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = HEAP32[556>>2]|0;
            HEAP32[$vararg_buffer>>2] = $0;
            (_printf(12827,$vararg_buffer)|0);
            (_puts(13063)|0);
            (_puts(13526)|0);
            (_puts(13978)|0);
            (_puts(14416)|0);
            (_puts(14808)|0);
            (_puts(15170)|0);
            (_puts(15507)|0);
            (_puts(15924)|0);
            (_puts(16296)|0);
            (_puts(16723)|0);
            (_puts(16792)|0);
            (_puts(17075)|0);
            $1 = HEAP32[556>>2]|0;
            HEAP32[$vararg_buffer1>>2] = $1;
            (_printf(17494,$vararg_buffer1)|0);
            STACKTOP = sp;return;
        }
        function __Z12verbose_opencPKc($open,$name) {
            $open = $open|0;
            $name = $name|0;
            var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_strlen($name)|0);
            $1 = HEAP32[596>>2]|0;
            $2 = ($1|0)==(0);
            do {
                if (!($2)) {
                    $3 = (($0) + 3)|0;
                    $4 = (($3) + ($1))|0;
                    $5 = ($4|0)>(79);
                    if ($5) {
                        $6 = HEAP32[3472>>2]|0;
                        (_fputc(10,$6)|0);
                        HEAP32[596>>2] = 0;
                        break;
                    }
                    $$pr = HEAP32[596>>2]|0;
                    $7 = ($$pr|0)==(0);
                    if (!($7)) {
                        $8 = HEAP32[3472>>2]|0;
                        (_fputc(32,$8)|0);
                        $9 = HEAP32[596>>2]|0;
                        $10 = (($9) + 1)|0;
                        HEAP32[596>>2] = $10;
                    }
                }
            } while(0);
            $11 = $open << 24 >> 24;
            $12 = HEAP32[3472>>2]|0;
            (_fputc($11,$12)|0);
            $13 = HEAP32[3472>>2]|0;
            (_fputs($name,$13)|0);
            $14 = (($0) + 1)|0;
            $15 = HEAP32[596>>2]|0;
            $16 = (($14) + ($15))|0;
            HEAP32[596>>2] = $16;
            return;
        }
        function __Z13verbose_closec($close) {
            $close = $close|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = $close << 24 >> 24;
            $1 = HEAP32[3472>>2]|0;
            (_fputc($0,$1)|0);
            $2 = HEAP32[596>>2]|0;
            $3 = (($2) + 1)|0;
            HEAP32[596>>2] = $3;
            return;
        }
        function __Z11stream_infoP8_IO_FILEP10Gif_StreamPKci($where,$gfs,$filename,$flags) {
            $where = $where|0;
            $gfs = $gfs|0;
            $filename = $filename|0;
            $flags = $flags|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gfex$0 = 0, $gfex$05 = 0, $gfex$07 = 0, $gfex$1 = 0;
            var $gfex$12 = 0, $gfex$14 = 0, $i$013 = 0, $n$0$lcssa = 0, $n$012 = 0, $n$1$lcssa = 0, $n$16 = 0, $n$2$lcssa = 0, $n$23 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 64|0;
            $vararg_buffer16 = sp + 48|0;
            $vararg_buffer13 = sp + 40|0;
            $vararg_buffer10 = sp + 32|0;
            $vararg_buffer7 = sp + 24|0;
            $vararg_buffer3 = sp + 16|0;
            $vararg_buffer = sp;
            $0 = ($gfs|0)==(0|0);
            if ($0) {
                STACKTOP = sp;return;
            }
            __Z15verbose_endlinev();
            $1 = ($filename|0)!=(0|0);
            $2 = $1 ? $filename : 20481;
            $3 = ((($gfs)) + 4|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)==(1);
            $6 = $5 ? 23987 : 17577;
            HEAP32[$vararg_buffer>>2] = $2;
            $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
            HEAP32[$vararg_ptr1>>2] = $4;
            $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
            HEAP32[$vararg_ptr2>>2] = $6;
            (_fprintf($where,17579,$vararg_buffer)|0);
            $7 = ((($gfs)) + 18|0);
            $8 = HEAP16[$7>>1]|0;
            $9 = $8&65535;
            $10 = ((($gfs)) + 20|0);
            $11 = HEAP16[$10>>1]|0;
            $12 = $11&65535;
            HEAP32[$vararg_buffer3>>2] = $9;
            $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
            HEAP32[$vararg_ptr6>>2] = $12;
            (_fprintf($where,17596,$vararg_buffer3)|0);
            $13 = ((($gfs)) + 12|0);
            $14 = HEAP32[$13>>2]|0;
            $15 = ($14|0)==(0|0);
            if (!($15)) {
                $16 = HEAP32[$14>>2]|0;
                HEAP32[$vararg_buffer7>>2] = $16;
                (_fprintf($where,17620,$vararg_buffer7)|0);
                $17 = $flags & 1;
                $18 = ($17|0)==(0);
                if (!($18)) {
                    $19 = HEAP32[$13>>2]|0;
                    __ZL13colormap_infoP8_IO_FILEP12Gif_ColormapPKc($where,$19,17647);
                }
                $20 = ((($gfs)) + 16|0);
                $21 = HEAP16[$20>>1]|0;
                $22 = $21&65535;
                HEAP32[$vararg_buffer10>>2] = $22;
                (_fprintf($where,17651,$vararg_buffer10)|0);
            }
            $23 = ((($gfs)) + 28|0);
            $24 = HEAP32[$23>>2]|0;
            $25 = ($24|0)==(0|0);
            if (!($25)) {
                __ZL12comment_infoP8_IO_FILEP11Gif_CommentPKc($where,$24,17668);
            }
            $26 = ((($gfs)) + 24|0);
            $27 = HEAP32[$26>>2]|0;
            $28 = ($27|0)==(0);
            if ($28) {
                (_fwrite(17683,15,1,$where)|0);
            } else {
                $29 = ($27|0)>(0);
                if ($29) {
                    HEAP32[$vararg_buffer13>>2] = $27;
                    (_fprintf($where,17699,$vararg_buffer13)|0);
                }
            }
            $30 = HEAP32[$3>>2]|0;
            $31 = ($30|0)>(0);
            if ($31) {
                $32 = $flags & 2;
                $33 = ($32|0)==(0);
                $i$013 = 0;$n$012 = 0;
                while(1) {
                    $34 = HEAP32[$gfs>>2]|0;
                    $35 = (($34) + ($i$013<<2)|0);
                    $36 = HEAP32[$35>>2]|0;
                    $37 = ((($36)) + 36|0);
                    $gfex$05 = HEAP32[$37>>2]|0;
                    $38 = ($gfex$05|0)==(0|0);
                    if ($38) {
                        $n$1$lcssa = $n$012;
                    } else {
                        $gfex$07 = $gfex$05;$n$16 = $n$012;
                        while(1) {
                            if (!($33)) {
                                __ZL14extension_infoP8_IO_FILEP10Gif_StreamP13Gif_Extensionii($where,$gfs,$gfex$07,$n$16,$i$013);
                            }
                            $39 = ((($gfex$07)) + 32|0);
                            $40 = (($n$16) + 1)|0;
                            $gfex$0 = HEAP32[$39>>2]|0;
                            $41 = ($gfex$0|0)==(0|0);
                            if ($41) {
                                $n$1$lcssa = $40;
                                break;
                            } else {
                                $gfex$07 = $gfex$0;$n$16 = $40;
                            }
                        }
                    }
                    $42 = (($i$013) + 1)|0;
                    $43 = HEAP32[$3>>2]|0;
                    $44 = ($42|0)<($43|0);
                    if ($44) {
                        $i$013 = $42;$n$012 = $n$1$lcssa;
                    } else {
                        $n$0$lcssa = $n$1$lcssa;
                        break;
                    }
                }
            } else {
                $n$0$lcssa = 0;
            }
            $45 = ((($gfs)) + 32|0);
            $gfex$12 = HEAP32[$45>>2]|0;
            $46 = ($gfex$12|0)==(0|0);
            if ($46) {
                $n$2$lcssa = $n$0$lcssa;
            } else {
                $47 = $flags & 2;
                $48 = ($47|0)==(0);
                $gfex$14 = $gfex$12;$n$23 = $n$0$lcssa;
                while(1) {
                    if (!($48)) {
                        $49 = HEAP32[$3>>2]|0;
                        __ZL14extension_infoP8_IO_FILEP10Gif_StreamP13Gif_Extensionii($where,$gfs,$gfex$14,$n$23,$49);
                    }
                    $50 = ((($gfex$14)) + 32|0);
                    $51 = (($n$23) + 1)|0;
                    $gfex$1 = HEAP32[$50>>2]|0;
                    $52 = ($gfex$1|0)==(0|0);
                    if ($52) {
                        $n$2$lcssa = $51;
                        break;
                    } else {
                        $gfex$14 = $gfex$1;$n$23 = $51;
                    }
                }
            }
            $53 = ($n$2$lcssa|0)!=(0);
            $54 = $flags & 2;
            $55 = ($54|0)==(0);
            $or$cond = $55 & $53;
            if (!($or$cond)) {
                STACKTOP = sp;return;
            }
            HEAP32[$vararg_buffer16>>2] = $n$2$lcssa;
            (_fprintf($where,17716,$vararg_buffer16)|0);
            STACKTOP = sp;return;
        }
        function __Z10image_infoP8_IO_FILEP10Gif_StreamP9Gif_Imagei($where,$gfs,$gfi,$flags) {
            $where = $where|0;
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $flags = $flags|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr27 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 80|0;
            $vararg_buffer24 = sp + 64|0;
            $vararg_buffer21 = sp + 56|0;
            $vararg_buffer18 = sp + 48|0;
            $vararg_buffer15 = sp + 40|0;
            $vararg_buffer12 = sp + 32|0;
            $vararg_buffer8 = sp + 24|0;
            $vararg_buffer4 = sp + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = ($gfs|0)!=(0|0);
            $1 = ($gfi|0)!=(0|0);
            $or$cond = $0 & $1;
            if (!($or$cond)) {
                STACKTOP = sp;return;
            }
            $2 = (_Gif_ImageNumber($gfs,$gfi)|0);
            __Z15verbose_endlinev();
            HEAP32[$vararg_buffer>>2] = $2;
            (_fprintf($where,17733,$vararg_buffer)|0);
            $3 = ((($gfi)) + 28|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)==(0|0);
            if (!($5)) {
                HEAP32[$vararg_buffer1>>2] = $4;
                (_fprintf($where,17748,$vararg_buffer1)|0);
            }
            $6 = ((($gfi)) + 8|0);
            $7 = HEAP16[$6>>1]|0;
            $8 = $7&65535;
            $9 = ((($gfi)) + 10|0);
            $10 = HEAP16[$9>>1]|0;
            $11 = $10&65535;
            HEAP32[$vararg_buffer4>>2] = $8;
            $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
            HEAP32[$vararg_ptr7>>2] = $11;
            (_fprintf($where,17753,$vararg_buffer4)|0);
            $12 = ((($gfi)) + 12|0);
            $13 = HEAP16[$12>>1]|0;
            $14 = ($13<<16>>16)==(0);
            if ($14) {
                $15 = ((($gfi)) + 14|0);
                $16 = HEAP16[$15>>1]|0;
                $17 = ($16<<16>>16)==(0);
                if (!($17)) {
                    label = 6;
                }
            } else {
                label = 6;
            }
            if ((label|0) == 6) {
                $18 = HEAP16[$12>>1]|0;
                $19 = $18&65535;
                $20 = ((($gfi)) + 14|0);
                $21 = HEAP16[$20>>1]|0;
                $22 = $21&65535;
                HEAP32[$vararg_buffer8>>2] = $19;
                $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
                HEAP32[$vararg_ptr11>>2] = $22;
                (_fprintf($where,17759,$vararg_buffer8)|0);
            }
            $23 = ((($gfi)) + 19|0);
            $24 = HEAP8[$23>>0]|0;
            $25 = ($24<<24>>24)==(0);
            if (!($25)) {
                (_fwrite(17769,11,1,$where)|0);
            }
            $26 = ((($gfi)) + 20|0);
            $27 = HEAP16[$26>>1]|0;
            $28 = ($27<<16>>16)>(-1);
            if ($28) {
                $29 = $27 << 16 >> 16;
                HEAP32[$vararg_buffer12>>2] = $29;
                (_fprintf($where,17781,$vararg_buffer12)|0);
            }
            (_fputc(10,$where)|0);
            $30 = $flags & 4;
            $31 = ($30|0)==(0);
            if (!($31)) {
                $32 = ((($gfi)) + 52|0);
                $33 = HEAP32[$32>>2]|0;
                $34 = ($33|0)==(0|0);
                if (!($34)) {
                    $35 = ((($gfi)) + 44|0);
                    $36 = HEAP32[$35>>2]|0;
                    HEAP32[$vararg_buffer15>>2] = $36;
                    (_fprintf($where,17797,$vararg_buffer15)|0);
                }
            }
            $37 = ((($gfi)) + 32|0);
            $38 = HEAP32[$37>>2]|0;
            $39 = ($38|0)==(0|0);
            if (!($39)) {
                __ZL12comment_infoP8_IO_FILEP11Gif_CommentPKc($where,$38,17821);
            }
            $40 = ((($gfi)) + 24|0);
            $41 = HEAP32[$40>>2]|0;
            $42 = ($41|0)==(0|0);
            if (!($42)) {
                $43 = HEAP32[$41>>2]|0;
                HEAP32[$vararg_buffer18>>2] = $43;
                (_fprintf($where,17834,$vararg_buffer18)|0);
                $44 = $flags & 1;
                $45 = ($44|0)==(0);
                if (!($45)) {
                    $46 = HEAP32[$40>>2]|0;
                    __ZL13colormap_infoP8_IO_FILEP12Gif_ColormapPKc($where,$46,17862);
                }
            }
            $47 = ((($gfi)) + 18|0);
            $48 = HEAP8[$47>>0]|0;
            $49 = ($48<<24>>24)==(0);
            if ($49) {
                $50 = ((($gfi)) + 16|0);
                $51 = HEAP16[$50>>1]|0;
                $52 = ($51<<16>>16)==(0);
                if ($52) {
                    STACKTOP = sp;return;
                }
            }
            (_fwrite(17868,3,1,$where)|0);
            $53 = HEAP8[$47>>0]|0;
            $54 = ($53<<24>>24)==(0);
            if (!($54)) {
                $55 = $53&255;
                $56 = (600 + ($55<<2)|0);
                $57 = HEAP32[$56>>2]|0;
                HEAP32[$vararg_buffer21>>2] = $57;
                (_fprintf($where,17872,$vararg_buffer21)|0);
            }
            $58 = ((($gfi)) + 16|0);
            $59 = HEAP16[$58>>1]|0;
            $60 = ($59<<16>>16)==(0);
            if (!($60)) {
                $div = (($59&65535) / 100)&-1;
                $61 = $div&65535;
                $62 = (($59&65535) % 100)&-1;
                $63 = $62&65535;
                HEAP32[$vararg_buffer24>>2] = $61;
                $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
                HEAP32[$vararg_ptr27>>2] = $63;
                (_fprintf($where,17885,$vararg_buffer24)|0);
            }
            (_fputc(10,$where)|0);
            STACKTOP = sp;return;
        }
        function __Z16explode_filenamePKciS0_i($filename,$number,$name,$max_nimages) {
            $filename = $filename|0;
            $number = $number|0;
            $name = $name|0;
            $max_nimages = $max_nimages|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $digits$0$lcssa = 0, $digits$01 = 0, $j$02 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
            var $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $vararg_buffer6 = sp + 16|0;
            $vararg_buffer2 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = (_strlen($filename)|0);
            $1 = ($name|0)!=(0|0);
            if ($1) {
                $2 = (_strlen($name)|0);
                $6 = $2;
            } else {
                $6 = 10;
            }
            $3 = HEAP32[632>>2]|0;
            _free($3);
            $4 = (($0) + 3)|0;
            $5 = (($4) + ($6))|0;
            $7 = (_Gif_Realloc(0,1,$5,17901,519)|0);
            HEAP32[632>>2] = $7;
            if ($1) {
                HEAP32[$vararg_buffer>>2] = $filename;
                $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                HEAP32[$vararg_ptr1>>2] = $name;
                (_sprintf($7,17913,$vararg_buffer)|0);
                $14 = HEAP32[632>>2]|0;
                STACKTOP = sp;return ($14|0);
            }
            $8 = ($max_nimages|0)<(1001);
            if ($8) {
                HEAP32[$vararg_buffer2>>2] = $filename;
                $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
                HEAP32[$vararg_ptr5>>2] = $number;
                (_sprintf($7,17919,$vararg_buffer2)|0);
                $14 = HEAP32[632>>2]|0;
                STACKTOP = sp;return ($14|0);
            }
            $9 = ($max_nimages>>>0)>(10000);
            if ($9) {
                $digits$01 = 4;$j$02 = 10000;
                while(1) {
                    $10 = ($j$02*10)|0;
                    $11 = (($digits$01) + 1)|0;
                    $12 = ($10>>>0)<($max_nimages>>>0);
                    if ($12) {
                        $digits$01 = $11;$j$02 = $10;
                    } else {
                        $digits$0$lcssa = $11;
                        break;
                    }
                }
            } else {
                $digits$0$lcssa = 4;
            }
            $13 = HEAP32[632>>2]|0;
            HEAP32[$vararg_buffer6>>2] = $filename;
            $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
            HEAP32[$vararg_ptr9>>2] = $digits$0$lcssa;
            $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
            HEAP32[$vararg_ptr10>>2] = $number;
            (_sprintf($13,17927,$vararg_buffer6)|0);
            $14 = HEAP32[632>>2]|0;
            STACKTOP = sp;return ($14|0);
        }
        function __Z16parse_frame_specP10Clp_ParserPKciPv($clp,$arg,$complain,$thunk) {
            $clp = $clp|0;
            $arg = $arg|0;
            $complain = $complain|0;
            $thunk = $thunk|0;
            var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
            var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $c = 0, $isdigit = 0, $isdigit5 = 0, $isdigit7 = 0;
            var $isdigit9 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp6 = 0, $isdigittmp8 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $vararg_buffer3 = sp + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $c = sp + 24|0;
            HEAP32[568>>2] = 0;
            HEAP32[572>>2] = -1;
            HEAP32[576>>2] = 0;
            $0 = HEAP32[768>>2]|0;
            $1 = ($0|0)!=(0|0);
            $2 = HEAP32[772>>2]|0;
            $3 = ($2|0)!=(0|0);
            $or$cond = $1 | $3;
            if ($or$cond) {
                $4 = $0;
            } else {
                __Z12input_streamPKc(0);
                $$pr = HEAP32[768>>2]|0;
                $4 = $$pr;
            }
            $5 = ($4|0)==(0|0);
            if ($5) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $6 = HEAP8[$arg>>0]|0;
            $7 = ($6<<24>>24)==(35);
            if (!($7)) {
                $8 = ($complain|0)==(0);
                if ($8) {
                    $$0 = 0;
                    STACKTOP = sp;return ($$0|0);
                }
                $9 = (_Clp_OptionError($clp,17935,$vararg_buffer)|0);
                $$0 = $9;
                STACKTOP = sp;return ($$0|0);
            }
            $10 = ((($arg)) + 1|0);
            HEAP32[$c>>2] = $10;
            $11 = HEAP8[$10>>0]|0;
            $12 = $11 << 24 >> 24;
            $isdigittmp = (($12) + -48)|0;
            $isdigit = ($isdigittmp>>>0)<(10);
            if ($isdigit) {
                $13 = (_strtol($10,$c,10)|0);
                HEAP32[572>>2] = $13;
                HEAP32[568>>2] = $13;
            } else {
                $14 = ($11<<24>>24)==(45);
                if ($14) {
                    $15 = ((($arg)) + 2|0);
                    $16 = HEAP8[$15>>0]|0;
                    $17 = $16 << 24 >> 24;
                    $isdigittmp8 = (($17) + -48)|0;
                    $isdigit9 = ($isdigittmp8>>>0)<(10);
                    if ($isdigit9) {
                        $18 = HEAP32[768>>2]|0;
                        $19 = ((($18)) + 4|0);
                        $20 = HEAP32[$19>>2]|0;
                        $21 = (_strtol($10,$c,10)|0);
                        $22 = (($21) + ($20))|0;
                        HEAP32[572>>2] = $22;
                        HEAP32[568>>2] = $22;
                    }
                }
            }
            $23 = HEAP32[$c>>2]|0;
            $24 = HEAP8[$23>>0]|0;
            $25 = ($24<<24>>24)==(45);
            do {
                if ($25) {
                    $26 = HEAP32[572>>2]|0;
                    $27 = ($26|0)>(-1);
                    if (!($27)) {
                        $28 = ((($23)) + 1|0);
                        $29 = HEAP8[$28>>0]|0;
                        $30 = ($29<<24>>24)==(0);
                        if ($30) {
                            break;
                        }
                    }
                    $31 = HEAP32[$c>>2]|0;
                    $32 = ((($31)) + 1|0);
                    HEAP32[$c>>2] = $32;
                    $33 = HEAP8[$32>>0]|0;
                    $34 = $33 << 24 >> 24;
                    $isdigittmp4 = (($34) + -48)|0;
                    $isdigit5 = ($isdigittmp4>>>0)<(10);
                    if ($isdigit5) {
                        $35 = (_strtol($32,$c,10)|0);
                        HEAP32[572>>2] = $35;
                        break;
                    }
                    $36 = ($33<<24>>24)==(45);
                    if ($36) {
                        $37 = ((($31)) + 2|0);
                        $38 = HEAP8[$37>>0]|0;
                        $39 = $38 << 24 >> 24;
                        $isdigittmp6 = (($39) + -48)|0;
                        $isdigit7 = ($isdigittmp6>>>0)<(10);
                        if ($isdigit7) {
                            $40 = HEAP32[768>>2]|0;
                            $41 = ((($40)) + 4|0);
                            $42 = HEAP32[$41>>2]|0;
                            $43 = (_strtol($32,$c,10)|0);
                            $44 = (($43) + ($42))|0;
                            HEAP32[572>>2] = $44;
                            break;
                        }
                    }
                    $45 = HEAP32[768>>2]|0;
                    $46 = ((($45)) + 4|0);
                    $47 = HEAP32[$46>>2]|0;
                    $48 = (($47) + -1)|0;
                    HEAP32[572>>2] = $48;
                }
            } while(0);
            $49 = HEAP32[$c>>2]|0;
            $50 = HEAP8[$49>>0]|0;
            $51 = ($50<<24>>24)==(0);
            if ($51) {
                $60 = HEAP32[568>>2]|0;
                $61 = ($60|0)>(-1);
                if ($61) {
                    $62 = HEAP32[768>>2]|0;
                    $63 = ((($62)) + 4|0);
                    $64 = HEAP32[$63>>2]|0;
                    $65 = ($60|0)<($64|0);
                    $66 = HEAP32[572>>2]|0;
                    $67 = ($66|0)>(-1);
                    $or$cond3 = $65 & $67;
                    $68 = ($66|0)<($64|0);
                    $or$cond10 = $68 & $or$cond3;
                    if ($or$cond10) {
                        $$0 = 1;
                        STACKTOP = sp;return ($$0|0);
                    }
                }
                $69 = ($complain|0)==(0);
                if ($69) {
                    $$0 = 0;
                    STACKTOP = sp;return ($$0|0);
                }
                $70 = HEAP32[768>>2]|0;
                $71 = ((($70)) + 4|0);
                $72 = HEAP32[$71>>2]|0;
                HEAP32[$vararg_buffer3>>2] = $10;
                $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
                HEAP32[$vararg_ptr6>>2] = $72;
                $73 = (_Clp_OptionError($clp,17997,$vararg_buffer3)|0);
                $$0 = $73;
                STACKTOP = sp;return ($$0|0);
            }
            $52 = HEAP32[768>>2]|0;
            $53 = (_Gif_GetNamedImage($52,$10)|0);
            $54 = ($53|0)==(0|0);
            if (!($54)) {
                HEAP32[576>>2] = $10;
                $55 = HEAP32[768>>2]|0;
                $56 = (_Gif_ImageNumber($55,$53)|0);
                HEAP32[572>>2] = $56;
                HEAP32[568>>2] = $56;
                $$0 = 1;
                STACKTOP = sp;return ($$0|0);
            }
            $57 = ($complain|0)<(0);
            if ($57) {
                $$0 = -97;
                STACKTOP = sp;return ($$0|0);
            }
            $58 = ($complain|0)==(0);
            if ($58) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            HEAP32[$vararg_buffer1>>2] = $10;
            $59 = (_Clp_OptionError($clp,17974,$vararg_buffer1)|0);
            $$0 = $59;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z16parse_dimensionsP10Clp_ParserPKciPv($clp,$arg,$complain,$thunk) {
            $clp = $clp|0;
            $arg = $arg|0;
            $complain = $complain|0;
            $thunk = $thunk|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
            var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $val = sp + 4|0;
            $0 = HEAP8[$arg>>0]|0;
            $1 = ($0<<24>>24)==(95);
            if ($1) {
                $2 = ((($arg)) + 1|0);
                $3 = HEAP8[$2>>0]|0;
                $4 = ($3<<24>>24)==(120);
                if ($4) {
                    HEAP32[580>>2] = 0;
                    HEAP32[$val>>2] = $2;
                } else {
                    label = 4;
                }
            } else {
                label = 4;
            }
            if ((label|0) == 4) {
                $5 = (_strtol($arg,$val,10)|0);
                HEAP32[580>>2] = $5;
            }
            $6 = HEAP32[$val>>2]|0;
            $7 = HEAP8[$6>>0]|0;
            $8 = ($7<<24>>24)==(120);
            if ($8) {
                $9 = ((($6)) + 1|0);
                $10 = HEAP8[$9>>0]|0;
                $11 = ($10<<24>>24)==(95);
                if ($11) {
                    $12 = ((($6)) + 2|0);
                    $13 = HEAP8[$12>>0]|0;
                    $14 = ($13<<24>>24)==(0);
                    if ($14) {
                        HEAP32[584>>2] = 0;
                        $15 = HEAP32[$val>>2]|0;
                        $16 = ((($15)) + 2|0);
                        HEAP32[$val>>2] = $16;
                    } else {
                        label = 9;
                    }
                } else {
                    label = 9;
                }
                if ((label|0) == 9) {
                    $17 = HEAP32[$val>>2]|0;
                    $18 = ((($17)) + 1|0);
                    $19 = (_strtol($18,$val,10)|0);
                    HEAP32[584>>2] = $19;
                }
                $20 = HEAP32[$val>>2]|0;
                $21 = HEAP8[$20>>0]|0;
                $22 = ($21<<24>>24)==(0);
                if ($22) {
                    $$0 = 1;
                    STACKTOP = sp;return ($$0|0);
                }
            }
            $23 = ($complain|0)==(0);
            if ($23) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            HEAP32[$vararg_buffer>>2] = $arg;
            $24 = (_Clp_OptionError($clp,18045,$vararg_buffer)|0);
            $$0 = $24;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z14parse_positionP10Clp_ParserPKciPv($clp,$arg,$complain,$thunk) {
            $clp = $clp|0;
            $arg = $arg|0;
            $complain = $complain|0;
            $thunk = $thunk|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $val = sp + 4|0;
            $0 = (_strtol($arg,$val,10)|0);
            HEAP32[588>>2] = $0;
            $1 = HEAP32[$val>>2]|0;
            $2 = HEAP8[$1>>0]|0;
            $3 = ($2<<24>>24)==(44);
            if ($3) {
                $4 = ((($1)) + 1|0);
                $5 = (_strtol($4,$val,10)|0);
                HEAP32[592>>2] = $5;
                $6 = HEAP32[$val>>2]|0;
                $7 = HEAP8[$6>>0]|0;
                $8 = ($7<<24>>24)==(0);
                if ($8) {
                    $$0 = 1;
                    STACKTOP = sp;return ($$0|0);
                }
            }
            $9 = ($complain|0)==(0);
            if ($9) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            HEAP32[$vararg_buffer>>2] = $arg;
            $10 = (_Clp_OptionError($clp,18082,$vararg_buffer)|0);
            $$0 = $10;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z18parse_scale_factorP10Clp_ParserPKciPv($clp,$arg,$complain,$thunk) {
            $clp = $clp|0;
            $arg = $arg|0;
            $complain = $complain|0;
            $thunk = $thunk|0;
            var $$0 = 0, $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $val = sp + 4|0;
            $0 = (+__ZL15strtod_fractionPKcPPc($arg,$val));
            HEAPF64[32>>3] = $0;
            $1 = HEAP32[$val>>2]|0;
            $2 = HEAP8[$1>>0]|0;
            switch ($2<<24>>24) {
                case 120:  {
                    $3 = ((($1)) + 1|0);
                    $4 = (+__ZL15strtod_fractionPKcPPc($3,$val));
                    HEAPF64[40>>3] = $4;
                    $5 = HEAP32[$val>>2]|0;
                    $6 = HEAP8[$5>>0]|0;
                    $7 = ($6<<24>>24)==(0);
                    if ($7) {
                        $$0 = 1;
                        STACKTOP = sp;return ($$0|0);
                    }
                    break;
                }
                case 0:  {
                    HEAPF64[40>>3] = $0;
                    $$0 = 1;
                    STACKTOP = sp;return ($$0|0);
                    break;
                }
                default: {
                }
            }
            $8 = ($complain|0)==(0);
            if ($8) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            HEAP32[$vararg_buffer>>2] = $arg;
            $9 = (_Clp_OptionError($clp,18119,$vararg_buffer)|0);
            $$0 = $9;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z15parse_rectangleP10Clp_ParserPKciPv($clp,$arg,$complain,$thunk) {
            $clp = $clp|0;
            $arg = $arg|0;
            $complain = $complain|0;
            $thunk = $thunk|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
            var $8 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $val = sp + 4|0;
            $0 = (_strtol($arg,$val,10)|0);
            HEAP32[588>>2] = $0;
            $1 = HEAP32[$val>>2]|0;
            $2 = HEAP8[$1>>0]|0;
            L1: do {
                switch ($2<<24>>24) {
                    case 44:  {
                        $3 = ((($1)) + 1|0);
                        $4 = (_strtol($3,$val,10)|0);
                        HEAP32[592>>2] = $4;
                        $5 = HEAP32[$val>>2]|0;
                        $6 = HEAP8[$5>>0]|0;
                        $7 = ($6<<24>>24)==(45);
                        if ($7) {
                            $8 = ((($5)) + 1|0);
                            $9 = (__Z14parse_positionP10Clp_ParserPKciPv($clp,$8,0,0)|0);
                            $10 = ($9|0)==(0);
                            if (!($10)) {
                                $11 = $4 | $0;
                                $12 = ($11|0)>(-1);
                                if (!($12)) {
                                    break L1;
                                }
                                $13 = HEAP32[588>>2]|0;
                                $14 = ($13|0)<(1);
                                $15 = ($13|0)>($0|0);
                                $or$cond = $14 | $15;
                                if (!($or$cond)) {
                                    break L1;
                                }
                                $16 = HEAP32[592>>2]|0;
                                $17 = ($16|0)<(1);
                                $18 = ($4|0)<($16|0);
                                $or$cond2 = $17 | $18;
                                if (!($or$cond2)) {
                                    break L1;
                                }
                                $19 = (0 - ($13))|0;
                                $20 = (($13) - ($0))|0;
                                $21 = $14 ? $19 : $20;
                                HEAP32[580>>2] = $21;
                                $22 = HEAP32[592>>2]|0;
                                $23 = ($22|0)<(1);
                                $24 = (0 - ($22))|0;
                                $25 = (($22) - ($4))|0;
                                $26 = $23 ? $24 : $25;
                                HEAP32[584>>2] = $26;
                                HEAP32[588>>2] = $0;
                                HEAP32[592>>2] = $4;
                                $$0 = 1;
                                STACKTOP = sp;return ($$0|0);
                            }
                        }
                        $27 = HEAP32[$val>>2]|0;
                        $28 = HEAP8[$27>>0]|0;
                        $29 = ($28<<24>>24)==(43);
                        if ($29) {
                            $30 = ((($27)) + 1|0);
                            $31 = (__Z16parse_dimensionsP10Clp_ParserPKciPv($clp,$30,0,0)|0);
                            $32 = ($31|0)==(0);
                            if (!($32)) {
                                $$0 = 1;
                                STACKTOP = sp;return ($$0|0);
                            }
                        }
                        break;
                    }
                    case 120:  {
                        HEAP32[580>>2] = $0;
                        $33 = HEAP32[$val>>2]|0;
                        $34 = ((($33)) + 1|0);
                        $35 = (_strtol($34,$val,10)|0);
                        HEAP32[584>>2] = $35;
                        $36 = HEAP32[$val>>2]|0;
                        $37 = HEAP8[$36>>0]|0;
                        $38 = ($37<<24>>24)==(0);
                        if ($38) {
                            HEAP32[592>>2] = 0;
                            HEAP32[588>>2] = 0;
                            $$0 = 1;
                            STACKTOP = sp;return ($$0|0);
                        }
                        break;
                    }
                    default: {
                    }
                }
            } while(0);
            $39 = ($complain|0)==(0);
            if ($39) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            HEAP32[$vararg_buffer>>2] = $arg;
            $40 = (_Clp_OptionError($clp,18158,$vararg_buffer)|0);
            $$0 = $40;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z11parse_colorP10Clp_ParserPKciPv($clp,$arg,$complain,$thunk) {
            $clp = $clp|0;
            $arg = $arg|0;
            $complain = $complain|0;
            $thunk = $thunk|0;
            var $$0 = 0, $$sum = 0, $$sum1213 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blue$0 = 0, $green$0 = 0, $isdigit = 0, $isdigittmp = 0, $or$cond = 0, $or$cond11 = 0, $or$cond7 = 0, $or$cond9 = 0, $red$0 = 0;
            var $str = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $str = sp + 12|0;
            $0 = HEAP8[$arg>>0]|0;
            $1 = ($0<<24>>24)==(35);
            L1: do {
                if ($1) {
                    $2 = ((($arg)) + 1|0);
                    $3 = (_strlen($2)|0);
                    $4 = ($3|0)!=(0);
                    $5 = (($3|0) % 3)&-1;
                    $6 = ($5|0)==(0);
                    $or$cond = $4 & $6;
                    if ($or$cond) {
                        $7 = (_strspn($2,18214)|0);
                        $8 = ($7|0)==($3|0);
                        if ($8) {
                            $10 = (($3|0) / 3)&-1;
                            $11 = (__ZL23parse_hex_color_channelPKci($2,$10)|0);
                            $$sum = (($10) + 1)|0;
                            $12 = (($arg) + ($$sum)|0);
                            $13 = (__ZL23parse_hex_color_channelPKci($12,$10)|0);
                            $14 = $10 << 1;
                            $$sum1213 = $14 | 1;
                            $15 = (($arg) + ($$sum1213)|0);
                            $16 = (__ZL23parse_hex_color_channelPKci($15,$10)|0);
                            $blue$0 = $16;$green$0 = $13;$red$0 = $11;
                            label = 15;
                            break;
                        }
                    }
                    $9 = ($complain|0)==(0);
                    if ($9) {
                        $$0 = 0;
                        STACKTOP = sp;return ($$0|0);
                    }
                    HEAP32[$vararg_buffer>>2] = $arg;
                    (_Clp_OptionError($clp,18237,$vararg_buffer)|0);
                    $$0 = 0;
                    STACKTOP = sp;return ($$0|0);
                } else {
                    $17 = $0 << 24 >> 24;
                    $isdigittmp = (($17) + -48)|0;
                    $isdigit = ($isdigittmp>>>0)<(10);
                    if ($isdigit) {
                        $18 = (_strtol($arg,$str,10)|0);
                        $19 = HEAP32[$str>>2]|0;
                        $20 = HEAP8[$19>>0]|0;
                        switch ($20<<24>>24) {
                            case 0:  {
                                $21 = ($18>>>0)>(255);
                                if ($21) {
                                    break L1;
                                }
                                HEAP8[16>>0] = 1;
                                HEAP32[(20)>>2] = $18;
                                $$0 = 1;
                                STACKTOP = sp;return ($$0|0);
                                break;
                            }
                            case 47: case 44:  {
                            break;
                        }
                            default: {
                                break L1;
                            }
                        }
                        $22 = HEAP32[$str>>2]|0;
                        $23 = ((($22)) + 1|0);
                        HEAP32[$str>>2] = $23;
                        $24 = HEAP8[$23>>0]|0;
                        $25 = ($24<<24>>24)==(0);
                        if (!($25)) {
                            $26 = (_strtol($23,$str,10)|0);
                            $27 = HEAP32[$str>>2]|0;
                            $28 = HEAP8[$27>>0]|0;
                            switch ($28<<24>>24) {
                                case 47: case 44:  {
                                break;
                            }
                                default: {
                                    break L1;
                                }
                            }
                            $29 = HEAP32[$str>>2]|0;
                            $30 = ((($29)) + 1|0);
                            HEAP32[$str>>2] = $30;
                            $31 = HEAP8[$30>>0]|0;
                            $32 = ($31<<24>>24)==(0);
                            if (!($32)) {
                                $33 = (_strtol($30,$str,10)|0);
                                $34 = HEAP32[$str>>2]|0;
                                $35 = HEAP8[$34>>0]|0;
                                $36 = ($35<<24>>24)==(0);
                                if ($36) {
                                    $blue$0 = $33;$green$0 = $26;$red$0 = $18;
                                    label = 15;
                                }
                            }
                        }
                    }
                }
            } while(0);
            if ((label|0) == 15) {
                $37 = $green$0 | $red$0;
                $38 = $37 | $blue$0;
                $39 = ($38|0)<(0);
                $40 = ($red$0|0)>(255);
                $or$cond7 = $40 | $39;
                $41 = ($green$0|0)>(255);
                $or$cond9 = $41 | $or$cond7;
                $42 = ($blue$0|0)>(255);
                $or$cond11 = $42 | $or$cond9;
                if (!($or$cond11)) {
                    $43 = $red$0&255;
                    HEAP8[(17)>>0] = $43;
                    $44 = $green$0&255;
                    HEAP8[(18)>>0] = $44;
                    $45 = $blue$0&255;
                    HEAP8[(19)>>0] = $45;
                    HEAP8[16>>0] = 0;
                    $$0 = 1;
                    STACKTOP = sp;return ($$0|0);
                }
            }
            $46 = ($complain|0)==(0);
            if ($46) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            HEAP32[$vararg_buffer1>>2] = $arg;
            $47 = (_Clp_OptionError($clp,18281,$vararg_buffer1)|0);
            $$0 = $47;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z16parse_two_colorsP10Clp_ParserPKciPv($clp,$arg,$complain,$thunk) {
            $clp = $clp|0;
            $arg = $arg|0;
            $complain = $complain|0;
            $thunk = $thunk|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $0 = (__Z11parse_colorP10Clp_ParserPKciPv($clp,$arg,$complain,0)|0);
            $1 = ($0|0)<(1);
            if ($1) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $2 = 16;
            $3 = $2;
            $4 = HEAP32[$3>>2]|0;
            $5 = (($2) + 4)|0;
            $6 = $5;
            $7 = HEAP32[$6>>2]|0;
            $8 = (_Clp_Shift($clp,0)|0);
            $9 = ($8|0)==(0|0);
            $10 = ($complain|0)!=(0);
            $or$cond = $10 & $9;
            if ($or$cond) {
                $11 = (_Clp_OptionError($clp,18302,$vararg_buffer)|0);
                $$0 = $11;
                STACKTOP = sp;return ($$0|0);
            }
            if ($9) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $12 = (__Z11parse_colorP10Clp_ParserPKciPv($clp,$8,$complain,0)|0);
            $13 = ($12|0)<(1);
            if ($13) {
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $14 = 16;
            $15 = $14;
            $16 = HEAP32[$15>>2]|0;
            $17 = (($14) + 4)|0;
            $18 = $17;
            $19 = HEAP32[$18>>2]|0;
            $20 = 24;
            $21 = $20;
            HEAP32[$21>>2] = $16;
            $22 = (($20) + 4)|0;
            $23 = $22;
            HEAP32[$23>>2] = $19;
            $24 = 16;
            $25 = $24;
            HEAP32[$25>>2] = $4;
            $26 = (($24) + 4)|0;
            $27 = $26;
            HEAP32[$27>>2] = $7;
            $$0 = 1;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z18read_colormap_filePKcP8_IO_FILE($name,$f) {
            $name = $name|0;
            $f = $f|0;
            var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$name = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
            var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
            var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cm$0 = 0, $cm$1 = 0, $my_file$0 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $vararg_buffer6 = sp + 24|0;
            $vararg_buffer4 = sp + 16|0;
            $vararg_buffer2 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = ($name|0)==(0|0);
            if ($0) {
                $$01 = 0;
            } else {
                $1 = (_strcmp($name,20820)|0);
                $2 = ($1|0)==(0);
                $$name = $2 ? 0 : $name;
                $$01 = $$name;
            }
            $3 = ($f|0)==(0|0);
            if ($3) {
                $4 = ($$01|0)==(0|0);
                if ($4) {
                    $5 = HEAP32[3476>>2]|0;
                    $$02 = $5;
                } else {
                    $6 = (_fopen($$01,24116)|0);
                    $$02 = $6;
                }
                $7 = ($$02|0)==(0|0);
                if ($7) {
                    $8 = (___errno_location()|0);
                    $9 = HEAP32[$8>>2]|0;
                    $10 = (_strerror($9)|0);
                    HEAP32[$vararg_buffer>>2] = $$01;
                    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                    HEAP32[$vararg_ptr1>>2] = $10;
                    __Z6lerrorPKcS0_z($$01,23375,$vararg_buffer);
                    $$0 = 0;
                    STACKTOP = sp;return ($$0|0);
                } else {
                    $$1 = $$02;$my_file$0 = 1;
                }
            } else {
                $$1 = $f;$my_file$0 = 0;
            }
            $11 = ($$01|0)!=(0|0);
            $12 = $11 ? $$01 : 20481;
            $13 = HEAP32[824>>2]|0;
            $14 = ($13|0)==(0);
            if (!($14)) {
                __Z12verbose_opencPKc(60,$12);
            }
            $15 = (_getc($$1)|0);
            (_ungetc($15,$$1)|0);
            $16 = ($15|0)==(71);
            if ($16) {
                $17 = (_Gif_FullReadFile($$1,1,0,1)|0);
                $18 = ($17|0)==(0|0);
                L18: do {
                    if ($18) {
                        __Z6lerrorPKcS0_z($12,20554,$vararg_buffer2);
                        $cm$0 = 0;
                    } else {
                        $19 = ((($17)) + 12|0);
                        $20 = HEAP32[$19>>2]|0;
                        $21 = ($20|0)==(0|0);
                        do {
                            if ($21) {
                                $22 = ((($17)) + 4|0);
                                $23 = HEAP32[$22>>2]|0;
                                $24 = ($23|0)==(0);
                                if (!($24)) {
                                    $25 = HEAP32[$17>>2]|0;
                                    $26 = HEAP32[$25>>2]|0;
                                    $27 = ((($26)) + 24|0);
                                    $28 = HEAP32[$27>>2]|0;
                                    $29 = ($28|0)==(0|0);
                                    if (!($29)) {
                                        break;
                                    }
                                }
                                __Z6lerrorPKcS0_z($12,18335,$vararg_buffer4);
                                $cm$0 = 0;
                                break L18;
                            }
                        } while(0);
                        $30 = ((($17)) + 36|0);
                        $31 = HEAP32[$30>>2]|0;
                        $32 = ($31|0)==(0);
                        if (!($32)) {
                            __Z8lwarningPKcS0_z($12,18381,$vararg_buffer6);
                        }
                        $33 = HEAP32[$19>>2]|0;
                        $34 = ($33|0)==(0|0);
                        if ($34) {
                            $35 = HEAP32[$17>>2]|0;
                            $36 = HEAP32[$35>>2]|0;
                            $37 = ((($36)) + 24|0);
                            $38 = HEAP32[$37>>2]|0;
                            $39 = $38;
                        } else {
                            $39 = $33;
                        }
                        $40 = (_Gif_CopyColormap($39)|0);
                        $cm$0 = $40;
                    }
                } while(0);
                _Gif_DeleteStream($17);
                $cm$1 = $cm$0;
            } else {
                $41 = (__ZL18read_text_colormapP8_IO_FILEPKc($$1,$12)|0);
                $cm$1 = $41;
            }
            $42 = ($my_file$0|0)==(0);
            if (!($42)) {
                (_fclose($$1)|0);
            }
            $43 = HEAP32[824>>2]|0;
            $44 = ($43|0)==(0);
            if ($44) {
                $$0 = $cm$1;
                STACKTOP = sp;return ($$0|0);
            }
            __Z13verbose_closec(62);
            $$0 = $cm$1;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z12new_frameseti($initial_cap) {
            $initial_cap = $initial_cap|0;
            var $$initial_cap = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Gif_Realloc(0,12,1,17901,997)|0);
            $1 = ($initial_cap|0)<(0);
            $$initial_cap = $1 ? 0 : $initial_cap;
            $2 = ((($0)) + 4|0);
            HEAP32[$2>>2] = $$initial_cap;
            HEAP32[$0>>2] = 0;
            $3 = (_Gif_Realloc(0,100,$$initial_cap,17901,1001)|0);
            $4 = ((($0)) + 8|0);
            HEAP32[$4>>2] = $3;
            return ($0|0);
        }
        function __Z28clear_def_frame_once_optionsv() {
            var label = 0, sp = 0;
            sp = STACKTOP;
            HEAP32[(668)>>2] = 0;
            HEAP32[(676)>>2] = 0;
            HEAP32[(740)>>2] = 0;
            return;
        }
        function __Z9add_frameP11Gt_FramesetP10Gif_StreamP9Gif_Image($fset,$gfs,$gfi) {
            $fset = $fset|0;
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
            sp = STACKTOP;
            $0 = HEAP32[$fset>>2]|0;
            $1 = (($0) + 1)|0;
            HEAP32[$fset>>2] = $1;
            $2 = ((($fset)) + 4|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($0|0)<($3|0);
            if (!($4)) {
                $5 = ((($fset)) + 8|0);
                $7 = $3;
                while(1) {
                    $6 = $7 << 1;
                    HEAP32[$2>>2] = $6;
                    $8 = HEAP32[$5>>2]|0;
                    $9 = (_Gif_Realloc($8,100,$6,17901,1035)|0);
                    HEAP32[$5>>2] = $9;
                    $10 = HEAP32[$2>>2]|0;
                    $11 = ($0|0)<($10|0);
                    if ($11) {
                        break;
                    } else {
                        $7 = $10;
                    }
                }
            }
            $12 = ((($gfs)) + 48|0);
            $13 = HEAP32[$12>>2]|0;
            $14 = (($13) + 1)|0;
            HEAP32[$12>>2] = $14;
            $15 = ((($gfi)) + 72|0);
            $16 = HEAP32[$15>>2]|0;
            $17 = (($16) + 1)|0;
            HEAP32[$15>>2] = $17;
            $18 = ((($fset)) + 8|0);
            $19 = HEAP32[$18>>2]|0;
            $20 = (($19) + (($0*100)|0)|0);
            dest=$20; src=656; stop=dest+100|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
            $21 = HEAP32[$18>>2]|0;
            $22 = (($21) + (($0*100)|0)|0);
            HEAP32[$22>>2] = $gfs;
            $23 = HEAP32[$18>>2]|0;
            $24 = (((($23) + (($0*100)|0)|0)) + 4|0);
            HEAP32[$24>>2] = $gfi;
            __Z28clear_def_frame_once_optionsv();
            $25 = HEAP32[$18>>2]|0;
            $26 = (($25) + (($0*100)|0)|0);
            return ($26|0);
        }
        function __Z20merge_frame_intervalP11Gt_FramesetiiP13Gt_OutputDataiPi($fset,$f1,$f2,$output_data,$compress_immediately,$huge_stream) {
            $fset = $fset|0;
            $f1 = $f1|0;
            $f2 = $f2|0;
            $output_data = $output_data|0;
            $compress_immediately = $compress_immediately|0;
            $huge_stream = $huge_stream|0;
            var $$ = 0, $$0 = 0, $$02 = 0, $$03 = 0, $$lcssa = 0, $$lcssa17 = 0, $$lcssa71 = 0, $$lcssa72 = 0, $$lcssa73 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
            var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
            var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
            var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
            var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
            var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
            var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
            var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
            var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
            var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
            var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
            var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
            var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
            var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
            var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
            var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
            var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
            var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
            var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
            var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
            var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $all_same_compressed_ok$1$lcssa49 = 0, $all_same_compressed_ok$1$lcssa49$ph = 0, $all_same_compressed_ok$1$ph = 0, $all_same_compressed_ok$130 = 0, $all_same_compressed_ok$2 = 0, $all_same_compressed_ok$2$lcssa = 0, $i$041 = 0, $i$137 = 0, $i$234 = 0, $i$331 = 0, $i$428 = 0, $i$525 = 0, $i$620 = 0, $i$719 = 0;
            var $or$cond = 0, $phitmp = 0, $phitmp$ = 0, $phitmp4 = 0, $phitmp5 = 0, $phitmp5$ = 0, $phitmp6 = 0, $s$040 = 0, $same_compressed_ok$0 = 0, $srci$0 = 0, $srci$1 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = (_Gif_NewStream()|0);
            $1 = (_Gif_NewFullColormap(256,256)|0);
            HEAP32[$1>>2] = 0;
            $2 = ((($0)) + 12|0);
            HEAP32[$2>>2] = $1;
            $3 = ((($output_data)) + 4|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)==(0|0);
            if (!($5)) {
                $6 = ((($0)) + 44|0);
                HEAP32[$6>>2] = $4;
            }
            $7 = ($f2|0)<(0);
            if ($7) {
                $8 = HEAP32[$fset>>2]|0;
                $9 = (($8) + -1)|0;
                $$02 = $9;
            } else {
                $$02 = $f2;
            }
            HEAP32[636>>2] = 0;
            __ZL14merger_flattenP11Gt_Framesetii($fset,$f1,$$02);
            $10 = HEAP32[636>>2]|0;
            $11 = ($10|0)==(0);
            if ($11) {
                __Z5erroriPKcz(1,18416,$vararg_buffer);
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $12 = HEAP32[636>>2]|0;
            $13 = ($12|0)>(0);
            if ($13) {
                $14 = HEAP32[640>>2]|0;
                $15 = HEAP32[636>>2]|0;
                $i$041 = 0;$s$040 = 0;
                while(1) {
                    $16 = (($14) + ($i$041<<2)|0);
                    $17 = HEAP32[$16>>2]|0;
                    $18 = ((($17)) + 4|0);
                    $19 = HEAP32[$18>>2]|0;
                    $20 = ((($19)) + 8|0);
                    $21 = HEAP16[$20>>1]|0;
                    $22 = $21&65535;
                    $23 = ((($19)) + 10|0);
                    $24 = HEAP16[$23>>1]|0;
                    $25 = $24&65535;
                    $26 = Math_imul($25, $22)|0;
                    $27 = $26 >>> 10;
                    $28 = (($s$040) + 1)|0;
                    $29 = (($28) + ($27))|0;
                    $30 = (($i$041) + 1)|0;
                    $31 = ($30|0)<($15|0);
                    if ($31) {
                        $i$041 = $30;$s$040 = $29;
                    } else {
                        $$lcssa73 = $29;
                        break;
                    }
                }
                $32 = ($$lcssa73>>>0)>(204800);
                $33 = $32&1;
                HEAP32[$huge_stream>>2] = $33;
                $34 = $32 ^ 1;
                $35 = ($compress_immediately|0)!=(0);
                $or$cond = $35 | $34;
                if ($or$cond) {
                    $$03 = $compress_immediately;
                } else {
                    __Z7warningiPKcz(1,18445,$vararg_buffer1);
                    $$03 = 1;
                }
            } else {
                HEAP32[$huge_stream>>2] = 0;
                $$03 = $compress_immediately;
            }
            $36 = HEAP32[636>>2]|0;
            $37 = ($36|0)>(0);
            if ($37) {
                $38 = HEAP32[640>>2]|0;
                $i$137 = 0;
                while(1) {
                    $40 = (($38) + ($i$137<<2)|0);
                    $41 = HEAP32[$40>>2]|0;
                    $42 = HEAP32[$41>>2]|0;
                    $43 = ((($42)) + 40|0);
                    HEAP32[$43>>2] = 1;
                    $44 = (($i$137) + 1)|0;
                    $45 = HEAP32[636>>2]|0;
                    $46 = ($44|0)<($45|0);
                    if ($46) {
                        $i$137 = $44;
                    } else {
                        $$lcssa72 = $45;
                        break;
                    }
                }
                $39 = ($$lcssa72|0)>(0);
                if ($39) {
                    $i$234 = 0;
                    while(1) {
                        $47 = HEAP32[640>>2]|0;
                        $48 = (($47) + ($i$234<<2)|0);
                        $49 = HEAP32[$48>>2]|0;
                        $50 = HEAP32[$49>>2]|0;
                        $51 = ((($50)) + 40|0);
                        $52 = HEAP32[$51>>2]|0;
                        $53 = ($52|0)==(0);
                        if (!($53)) {
                            _Gif_CalculateScreenSize($50,0);
                            $54 = HEAP32[640>>2]|0;
                            $55 = (($54) + ($i$234<<2)|0);
                            $56 = HEAP32[$55>>2]|0;
                            $57 = ((($56)) + 24|0);
                            $58 = HEAP32[$57>>2]|0;
                            __Z12merge_streamP10Gif_StreamS0_i($0,$50,$58);
                            HEAP32[$51>>2] = 0;
                        }
                        $59 = HEAP32[640>>2]|0;
                        $60 = (($59) + ($i$234<<2)|0);
                        $61 = HEAP32[$60>>2]|0;
                        $62 = ((($61)) + 4|0);
                        $63 = HEAP32[$62>>2]|0;
                        $64 = ((($63)) + 24|0);
                        $65 = HEAP32[$64>>2]|0;
                        $66 = ($65|0)==(0|0);
                        if (!($66)) {
                            __Z15unmark_colors_2P12Gif_Colormap($65);
                        }
                        $67 = (($i$234) + 1)|0;
                        $68 = HEAP32[636>>2]|0;
                        $69 = ($67|0)<($68|0);
                        if ($69) {
                            $i$234 = $67;
                        } else {
                            break;
                        }
                    }
                }
            }
            $70 = ((($output_data)) + 28|0);
            $71 = HEAP32[$70>>2]|0;
            $72 = ($71|0)>(0);
            if ($72) {
                $all_same_compressed_ok$1$ph = 1;
            } else {
                $73 = ((($output_data)) + 32|0);
                $74 = HEAP32[$73>>2]|0;
                $75 = ($74|0)==(0|0);
                if ($75) {
                    $76 = ((($output_data)) + 72|0);
                    $77 = HEAP32[$76>>2]|0;
                    $78 = $77 & 65535;
                    $79 = ($78|0)==(0);
                    if ($79) {
                        $80 = ((($output_data)) + 76|0);
                        $81 = HEAP32[$80>>2]|0;
                        $82 = ($81|0)>(0);
                        $$ = $82&1;
                        $all_same_compressed_ok$1$ph = $$;
                    } else {
                        $all_same_compressed_ok$1$ph = 1;
                    }
                } else {
                    $all_same_compressed_ok$1$ph = 1;
                }
            }
            $83 = HEAP32[636>>2]|0;
            $84 = ($83|0)>(0);
            if ($84) {
                $85 = HEAP32[640>>2]|0;
                $all_same_compressed_ok$130 = $all_same_compressed_ok$1$ph;$i$331 = 0;
                while(1) {
                    $87 = (($85) + ($i$331<<2)|0);
                    $88 = HEAP32[$87>>2]|0;
                    $89 = ((($88)) + 48|0);
                    $90 = HEAP32[$89>>2]|0;
                    $91 = ($90|0)==(0|0);
                    if ($91) {
                        $all_same_compressed_ok$2 = $all_same_compressed_ok$130;
                    } else {
                        HEAP32[$90>>2] = 0;
                        $all_same_compressed_ok$2 = 0;
                    }
                    $92 = (($i$331) + 1)|0;
                    $93 = HEAP32[636>>2]|0;
                    $94 = ($92|0)<($93|0);
                    if ($94) {
                        $all_same_compressed_ok$130 = $all_same_compressed_ok$2;$i$331 = $92;
                    } else {
                        $$lcssa71 = $93;$all_same_compressed_ok$2$lcssa = $all_same_compressed_ok$2;
                        break;
                    }
                }
                $86 = ($$lcssa71|0)>(0);
                if ($86) {
                    $105 = $$lcssa71;$i$428 = 0;
                    while(1) {
                        $97 = HEAP32[640>>2]|0;
                        $98 = (($97) + ($i$428<<2)|0);
                        $99 = HEAP32[$98>>2]|0;
                        $100 = ((($99)) + 48|0);
                        $101 = HEAP32[$100>>2]|0;
                        $102 = ($101|0)==(0|0);
                        if (!($102)) {
                            $103 = HEAP32[$101>>2]|0;
                            $104 = ($103|0)==(0);
                            if ($104) {
                                __ZL12analyze_cropiP7Gt_Cropi($105,$101,$$03);
                            }
                        }
                        $106 = (($i$428) + 1)|0;
                        $107 = HEAP32[636>>2]|0;
                        $108 = ($106|0)<($107|0);
                        if ($108) {
                            $105 = $107;$i$428 = $106;
                        } else {
                            $95 = $107;$all_same_compressed_ok$1$lcssa49 = $all_same_compressed_ok$2$lcssa;
                            break;
                        }
                    }
                } else {
                    $all_same_compressed_ok$1$lcssa49$ph = $all_same_compressed_ok$2$lcssa;
                    label = 32;
                }
            } else {
                $all_same_compressed_ok$1$lcssa49$ph = $all_same_compressed_ok$1$ph;
                label = 32;
            }
            if ((label|0) == 32) {
                $$pr = HEAP32[636>>2]|0;
                $95 = $$pr;$all_same_compressed_ok$1$lcssa49 = $all_same_compressed_ok$1$lcssa49$ph;
            }
            $96 = ($95|0)>(0);
            if ($96) {
                $i$525 = 0;
                while(1) {
                    $109 = HEAP32[640>>2]|0;
                    $110 = (($109) + ($i$525<<2)|0);
                    $111 = HEAP32[$110>>2]|0;
                    $112 = ((($111)) + 4|0);
                    $113 = HEAP32[$112>>2]|0;
                    $114 = (__ZL23apply_frame_transparentP9Gif_ImageP8Gt_Frame($113,$111)|0);
                    $115 = HEAP32[640>>2]|0;
                    $116 = (($115) + ($i$525<<2)|0);
                    $117 = HEAP32[$116>>2]|0;
                    $118 = HEAP32[$117>>2]|0;
                    $119 = ((($117)) + 4|0);
                    $120 = HEAP32[$119>>2]|0;
                    $121 = ((($117)) + 48|0);
                    $122 = HEAP32[$121>>2]|0;
                    __Z16mark_used_colorsP10Gif_StreamP9Gif_ImageP7Gt_Cropi($118,$120,$122,$$03);
                    $123 = $114&65535;
                    $124 = HEAP32[640>>2]|0;
                    $125 = (($124) + ($i$525<<2)|0);
                    $126 = HEAP32[$125>>2]|0;
                    $127 = ((($126)) + 4|0);
                    $128 = HEAP32[$127>>2]|0;
                    $129 = ((($128)) + 20|0);
                    HEAP16[$129>>1] = $123;
                    $130 = HEAP32[640>>2]|0;
                    $131 = (($130) + ($i$525<<2)|0);
                    $132 = HEAP32[$131>>2]|0;
                    __ZL26mark_used_background_colorP8Gt_Frame($132);
                    $133 = (($i$525) + 1)|0;
                    $134 = HEAP32[636>>2]|0;
                    $135 = ($133|0)<($134|0);
                    if ($135) {
                        $i$525 = $133;
                    } else {
                        break;
                    }
                }
            }
            $136 = ((($output_data)) + 24|0);
            $137 = HEAP32[$136>>2]|0;
            $138 = ($137|0)>(-2);
            if ($138) {
                $139 = ((($0)) + 24|0);
                HEAP32[$139>>2] = $137;
            }
            $140 = ((($0)) + 20|0);
            HEAP16[$140>>1] = 0;
            $141 = ((($0)) + 18|0);
            HEAP16[$141>>1] = 0;
            $142 = HEAP32[636>>2]|0;
            $143 = ($142|0)>(0);
            $144 = HEAP32[640>>2]|0;
            L62: do {
                if ($143) {
                    $145 = ($$03|0)<(1);
                    $146 = ($$03|0)>(0);
                    $147 = ((($0)) + 4|0);
                    $149 = $144;$i$620 = 0;
                    while(1) {
                        $148 = (($149) + ($i$620<<2)|0);
                        $150 = HEAP32[$148>>2]|0;
                        $151 = ((($150)) + 56|0);
                        HEAP32[$151>>2] = 0;
                        $152 = ((($150)) + 52|0);
                        HEAP32[$152>>2] = 0;
                        $153 = ((($150)) + 48|0);
                        $154 = HEAP32[$153>>2]|0;
                        $155 = ($154|0)==(0|0);
                        $156 = ((($150)) + 4|0);
                        $157 = HEAP32[$156>>2]|0;
                        if ($155) {
                            $173 = HEAP32[$150>>2]|0;
                            (_Gif_FullUncompressImage($173,$157,0)|0);
                            $srci$0 = $157;
                            label = 51;
                        } else {
                            $158 = (_Gif_CopyImage($157)|0);
                            $159 = HEAP32[$150>>2]|0;
                            (_Gif_FullUncompressImage($159,$158,0)|0);
                            $160 = HEAP32[$147>>2]|0;
                            $161 = ($160|0)==(0);
                            if ($161) {
                                $170 = 1;
                            } else {
                                $162 = ((($150)) + 60|0);
                                $163 = HEAP32[$162>>2]|0;
                                $164 = ($163|0)==(0);
                                if ($164) {
                                    $170 = 1;
                                } else {
                                    $165 = ($163|0)<(0);
                                    if ($165) {
                                        $166 = ((($158)) + 16|0);
                                        $167 = HEAP16[$166>>1]|0;
                                        $168 = ($167<<16>>16)==(0);
                                        $170 = $168;
                                    } else {
                                        $170 = 0;
                                    }
                                }
                            }
                            $169 = $170&1;
                            $171 = (__Z10crop_imageP9Gif_ImageP8Gt_Framei($158,$150,$169)|0);
                            $172 = ($171|0)==(0);
                            if ($172) {
                                __ZL14fix_total_cropP10Gif_StreamP9Gif_Imagei($0,$158,$i$620);
                                $srci$1 = $158;
                            } else {
                                $srci$0 = $158;
                                label = 51;
                            }
                        }
                        do {
                            if ((label|0) == 51) {
                                label = 0;
                                $174 = (__ZL23apply_frame_transparentP9Gif_ImageP8Gt_Frame($srci$0,$150)|0);
                                $175 = ((($150)) + 36|0);
                                $176 = HEAP32[$175>>2]|0;
                                $177 = ($176|0)>(-1);
                                if ($177) {
                                    $178 = ((($srci$0)) + 19|0);
                                    $179 = HEAP8[$178>>0]|0;
                                    $180 = $179&255;
                                    $181 = ($176|0)==($180|0);
                                    if ($181) {
                                        label = 53;
                                    } else {
                                        label = 55;
                                    }
                                } else {
                                    label = 53;
                                }
                                if ((label|0) == 53) {
                                    label = 0;
                                    $182 = ((($150)) + 88|0);
                                    $183 = HEAP8[$182>>0]|0;
                                    $184 = $183 & 3;
                                    $185 = ($184<<24>>24)==(0);
                                    if ($185) {
                                        $186 = ((($150)) + 92|0);
                                        $187 = HEAP32[$186>>2]|0;
                                        $188 = ($187|0)==(0);
                                        if ($188) {
                                            $same_compressed_ok$0 = $all_same_compressed_ok$1$lcssa49;
                                        } else {
                                            label = 55;
                                        }
                                    } else {
                                        label = 55;
                                    }
                                }
                                if ((label|0) == 55) {
                                    label = 0;
                                    $same_compressed_ok$0 = 0;
                                }
                                $189 = HEAP32[$150>>2]|0;
                                $190 = (__Z11merge_imageP10Gif_StreamS0_P9Gif_ImageP8Gt_Framei($0,$189,$srci$0,$150,$same_compressed_ok$0)|0);
                                $191 = $174&65535;
                                $192 = ((($srci$0)) + 20|0);
                                HEAP16[$192>>1] = $191;
                                $193 = ((($150)) + 88|0);
                                $194 = HEAP8[$193>>0]|0;
                                $195 = $194 & 3;
                                $196 = ($195<<24>>24)==(0);
                                if ($196) {
                                    $197 = ((($150)) + 92|0);
                                    $198 = HEAP32[$197>>2]|0;
                                    $199 = ($198|0)==(0);
                                    if ($199) {
                                        $200 = HEAP32[$150>>2]|0;
                                        $201 = ((($200)) + 18|0);
                                        $202 = HEAP16[$201>>1]|0;
                                        $203 = ((($200)) + 20|0);
                                        $204 = HEAP16[$203>>1]|0;
                                        __ZL13handle_screenP10Gif_Streamtt($0,$202,$204);
                                    } else {
                                        label = 58;
                                    }
                                } else {
                                    label = 58;
                                }
                                if ((label|0) == 58) {
                                    label = 0;
                                    __ZL22handle_flip_and_screenP10Gif_StreamP9Gif_ImageP8Gt_Frame($0,$190,$150);
                                }
                                $205 = ((($150)) + 12|0);
                                $206 = HEAP32[$205>>2]|0;
                                $207 = ($206|0)==(0|0);
                                if ($207) {
                                    $208 = ((($150)) + 16|0);
                                    $209 = HEAP32[$208>>2]|0;
                                    $210 = ($209|0)==(0);
                                    if (!($210)) {
                                        label = 62;
                                    }
                                } else {
                                    label = 62;
                                }
                                if ((label|0) == 62) {
                                    label = 0;
                                    $211 = ((($190)) + 28|0);
                                    $212 = HEAP32[$211>>2]|0;
                                    _free($212);
                                    $213 = HEAP32[$205>>2]|0;
                                    $214 = (_Gif_CopyString($213)|0);
                                    HEAP32[$211>>2] = $214;
                                }
                                $215 = ((($150)) + 24|0);
                                $216 = HEAP32[$215>>2]|0;
                                $217 = ($216|0)==(0);
                                if (!($217)) {
                                    $218 = ((($190)) + 32|0);
                                    $219 = HEAP32[$218>>2]|0;
                                    $220 = ($219|0)==(0|0);
                                    if (!($220)) {
                                        _Gif_DeleteComment($219);
                                        HEAP32[$218>>2] = 0;
                                    }
                                }
                                $221 = ((($150)) + 20|0);
                                $222 = HEAP32[$221>>2]|0;
                                $223 = ($222|0)==(0|0);
                                if (!($223)) {
                                    $224 = ((($190)) + 32|0);
                                    $225 = HEAP32[$224>>2]|0;
                                    $226 = ($225|0)==(0|0);
                                    if ($226) {
                                        $227 = (_Gif_NewComment()|0);
                                        HEAP32[$224>>2] = $227;
                                    }
                                    $228 = HEAP32[$224>>2]|0;
                                    $229 = HEAP32[$221>>2]|0;
                                    __Z14merge_commentsP11Gif_CommentS0_($228,$229);
                                    $230 = HEAP32[$221>>2]|0;
                                    _Gif_DeleteComment($230);
                                    HEAP32[$221>>2] = 0;
                                }
                                $231 = HEAP32[$175>>2]|0;
                                $232 = ($231|0)>(-1);
                                if ($232) {
                                    $233 = $231&255;
                                    $234 = ((($190)) + 19|0);
                                    HEAP8[$234>>0] = $233;
                                }
                                $235 = ((($150)) + 40|0);
                                $236 = HEAP32[$235>>2]|0;
                                $237 = ($236|0)>(-1);
                                if ($237) {
                                    $238 = HEAP8[$193>>0]|0;
                                    $239 = $238 & 32;
                                    $240 = ($239<<24>>24)==(0);
                                    if ($240) {
                                        $245 = 0;
                                    } else {
                                        $241 = ((($190)) + 12|0);
                                        $242 = HEAP16[$241>>1]|0;
                                        $243 = $242&65535;
                                        $245 = $243;
                                    }
                                    $244 = (($245) + ($236))|0;
                                    $246 = $244&65535;
                                    $247 = ((($190)) + 12|0);
                                    HEAP16[$247>>1] = $246;
                                }
                                $248 = ((($150)) + 44|0);
                                $249 = HEAP32[$248>>2]|0;
                                $250 = ($249|0)>(-1);
                                if ($250) {
                                    $251 = HEAP8[$193>>0]|0;
                                    $252 = $251 & 32;
                                    $253 = ($252<<24>>24)==(0);
                                    if ($253) {
                                        $258 = 0;
                                    } else {
                                        $254 = ((($190)) + 14|0);
                                        $255 = HEAP16[$254>>1]|0;
                                        $256 = $255&65535;
                                        $258 = $256;
                                    }
                                    $257 = (($258) + ($249))|0;
                                    $259 = $257&65535;
                                    $260 = ((($190)) + 14|0);
                                    HEAP16[$260>>1] = $259;
                                }
                                $261 = ((($150)) + 60|0);
                                $262 = HEAP32[$261>>2]|0;
                                $263 = ($262|0)>(-1);
                                if ($263) {
                                    $264 = $262&65535;
                                    $265 = ((($190)) + 16|0);
                                    HEAP16[$265>>1] = $264;
                                }
                                $266 = ((($150)) + 64|0);
                                $267 = HEAP32[$266>>2]|0;
                                $268 = ($267|0)>(-1);
                                if ($268) {
                                    $269 = $267&255;
                                    $270 = ((($190)) + 18|0);
                                    HEAP8[$270>>0] = $269;
                                }
                                $271 = HEAP32[$190>>2]|0;
                                $272 = ($271|0)==(0|0);
                                if ($272) {
                                    if (!($145)) {
                                        $srci$1 = $srci$0;
                                        break;
                                    }
                                    (_Gif_FullUncompressImage($0,$190,0)|0);
                                    _Gif_ReleaseCompressedImage($190);
                                    $srci$1 = $srci$0;
                                    break;
                                }
                                if ($146) {
                                    (_Gif_FullCompressImage($0,$190,780)|0);
                                    _Gif_ReleaseUncompressedImage($190);
                                    $srci$1 = $srci$0;
                                    break;
                                }
                                $273 = ((($190)) + 52|0);
                                $274 = HEAP32[$273>>2]|0;
                                $275 = ($274|0)==(0|0);
                                if ($275) {
                                    $srci$1 = $srci$0;
                                    break;
                                }
                                _Gif_ReleaseCompressedImage($190);
                                $srci$1 = $srci$0;
                            }
                        } while(0);
                        $276 = HEAP32[$150>>2]|0;
                        $277 = HEAP32[$276>>2]|0;
                        $278 = HEAP32[$277>>2]|0;
                        $279 = ((($278)) + 20|0);
                        $280 = HEAP16[$279>>1]|0;
                        $281 = ($280<<16>>16)>(-1);
                        do {
                            if ($281) {
                                $282 = ((($150)) + 28|0);
                                HEAP8[$282>>0] = 2;
                            } else {
                                $283 = ((($276)) + 12|0);
                                $284 = HEAP32[$283>>2]|0;
                                $285 = ($284|0)==(0|0);
                                if (!($285)) {
                                    $286 = ((($276)) + 16|0);
                                    $287 = HEAP16[$286>>1]|0;
                                    $288 = $287&65535;
                                    $289 = HEAP32[$284>>2]|0;
                                    $290 = ($288|0)<($289|0);
                                    if ($290) {
                                        $291 = ((($150)) + 28|0);
                                        $292 = ((($284)) + 16|0);
                                        $293 = HEAP32[$292>>2]|0;
                                        $294 = (($293) + ($288<<3)|0);
                                        $295 = $294;
                                        $296 = $295;
                                        $297 = HEAP32[$296>>2]|0;
                                        $298 = (($295) + 4)|0;
                                        $299 = $298;
                                        $300 = HEAP32[$299>>2]|0;
                                        $301 = $291;
                                        $302 = $301;
                                        HEAP32[$302>>2] = $297;
                                        $303 = (($301) + 4)|0;
                                        $304 = $303;
                                        HEAP32[$304>>2] = $300;
                                        HEAP8[$291>>0] = 1;
                                        break;
                                    }
                                }
                                $305 = ((($150)) + 28|0);
                                HEAP8[$305>>0] = 0;
                            }
                        } while(0);
                        $306 = HEAP32[$153>>2]|0;
                        $307 = ($306|0)==(0|0);
                        if (!($307)) {
                            _Gif_DeleteImage($srci$1);
                        }
                        $308 = HEAP32[$156>>2]|0;
                        $309 = ((($308)) + 72|0);
                        $310 = HEAP32[$309>>2]|0;
                        $311 = ($310|0)>(1);
                        if (!($311)) {
                            break;
                        }
                        $312 = (($310) + -1)|0;
                        HEAP32[$309>>2] = $312;
                        $313 = ($312|0)==(1);
                        if ($313) {
                            _Gif_ReleaseUncompressedImage($308);
                            _Gif_ReleaseCompressedImage($308);
                        }
                        HEAP32[$156>>2] = 0;
                        $314 = HEAP32[$150>>2]|0;
                        _Gif_DeleteStream($314);
                        HEAP32[$150>>2] = 0;
                        $315 = (($i$620) + 1)|0;
                        $316 = HEAP32[636>>2]|0;
                        $317 = ($315|0)<($316|0);
                        $318 = HEAP32[640>>2]|0;
                        if ($317) {
                            $149 = $318;$i$620 = $315;
                        } else {
                            $$lcssa = $316;$$lcssa17 = $318;
                            break L62;
                        }
                    }
                    ___assert_fail((18503|0),(17901|0),1671,(18522|0));
                    // unreachable;
                } else {
                    $$lcssa = $142;$$lcssa17 = $144;
                }
            } while(0);
            $319 = HEAP32[$$lcssa17>>2]|0;
            $320 = ((($319)) + 48|0);
            $321 = HEAP32[$320>>2]|0;
            $322 = ($321|0)==(0|0);
            L153: do {
                if (!($322)) {
                    $323 = (($$lcssa) + -1)|0;
                    $324 = (($$lcssa17) + ($323<<2)|0);
                    $325 = HEAP32[$324>>2]|0;
                    $326 = ((($325)) + 48|0);
                    $327 = HEAP32[$326>>2]|0;
                    $328 = ($321|0)==($327|0);
                    if ($328) {
                        $329 = ((($321)) + 4|0);
                        $330 = HEAP32[$329>>2]|0;
                        $331 = ($330|0)==(0);
                        if (!($331)) {
                            HEAP16[$140>>1] = 0;
                            HEAP16[$141>>1] = 0;
                            break;
                        }
                        $332 = ((($319)) + 92|0);
                        $333 = HEAP32[$332>>2]|0;
                        switch ($333|0) {
                            case 3: case 1:  {
                            $334 = ((($321)) + 36|0);
                            $335 = HEAP32[$334>>2]|0;
                            $336 = ($335|0)>(0);
                            $phitmp5 = $335&65535;
                            $phitmp5$ = $336 ? $phitmp5 : 0;
                            HEAP16[$141>>1] = $phitmp5$;
                            $337 = ((($321)) + 32|0);
                            $338 = HEAP32[$337>>2]|0;
                            $339 = ($338|0)>(0);
                            $phitmp6 = $338&65535;
                            $340 = $339 ? $phitmp6 : 0;
                            HEAP16[$140>>1] = $340;
                            break L153;
                            break;
                        }
                            default: {
                                $341 = ((($321)) + 32|0);
                                $342 = HEAP32[$341>>2]|0;
                                $343 = ($342|0)>(0);
                                $phitmp = $342&65535;
                                $phitmp$ = $343 ? $phitmp : 0;
                                HEAP16[$141>>1] = $phitmp$;
                                $344 = ((($321)) + 36|0);
                                $345 = HEAP32[$344>>2]|0;
                                $346 = ($345|0)>(0);
                                $phitmp4 = $345&65535;
                                $347 = $346 ? $phitmp4 : 0;
                                HEAP16[$140>>1] = $347;
                                break L153;
                            }
                        }
                    }
                }
            } while(0);
            $348 = ((($output_data)) + 8|0);
            $349 = HEAP32[$348>>2]|0;
            $350 = ($349|0)>(-1);
            if ($350) {
                $351 = $349&65535;
                HEAP16[$141>>1] = $351;
            }
            $352 = ((($output_data)) + 12|0);
            $353 = HEAP32[$352>>2]|0;
            $354 = ($353|0)>(-1);
            if ($354) {
                $355 = $353&65535;
                HEAP16[$140>>1] = $355;
            }
            _Gif_CalculateScreenSize($0,0);
            __ZL14set_backgroundP10Gif_StreamP13Gt_OutputData($0,$output_data);
            $356 = HEAP32[$2>>2]|0;
            $357 = HEAP32[$356>>2]|0;
            $358 = ($357|0)==(0);
            if (!($358)) {
                $$0 = $0;
                STACKTOP = sp;return ($$0|0);
            }
            $359 = ((($0)) + 4|0);
            $360 = HEAP32[$359>>2]|0;
            $361 = ($360|0)==(0);
            if ($361) {
                $$0 = $0;
                STACKTOP = sp;return ($$0|0);
            }
            $362 = HEAP32[$0>>2]|0;
            $i$719 = 0;
            while(1) {
                $366 = (($362) + ($i$719<<2)|0);
                $367 = HEAP32[$366>>2]|0;
                $368 = ((($367)) + 24|0);
                $369 = HEAP32[$368>>2]|0;
                $370 = ($369|0)==(0|0);
                $364 = (($i$719) + 1)|0;
                if ($370) {
                    break;
                }
                $363 = HEAP32[$359>>2]|0;
                $365 = ($364|0)==($363|0);
                if ($365) {
                    $$0 = $0;
                    label = 121;
                    break;
                } else {
                    $i$719 = $364;
                }
            }
            if ((label|0) == 121) {
                STACKTOP = sp;return ($$0|0);
            }
            $371 = HEAP32[$2>>2]|0;
            $372 = ((($371)) + 16|0);
            $373 = HEAP32[$372>>2]|0;
            $374 = ((($373)) + 1|0);
            HEAP8[$374>>0] = 0;
            $375 = HEAP32[$2>>2]|0;
            $376 = ((($375)) + 16|0);
            $377 = HEAP32[$376>>2]|0;
            $378 = ((($377)) + 2|0);
            HEAP8[$378>>0] = 0;
            $379 = HEAP32[$2>>2]|0;
            $380 = ((($379)) + 16|0);
            $381 = HEAP32[$380>>2]|0;
            $382 = ((($381)) + 3|0);
            HEAP8[$382>>0] = 0;
            $383 = HEAP32[$2>>2]|0;
            $384 = ((($383)) + 16|0);
            $385 = HEAP32[$384>>2]|0;
            $386 = ((($385)) + 9|0);
            HEAP8[$386>>0] = -1;
            $387 = HEAP32[$2>>2]|0;
            $388 = ((($387)) + 16|0);
            $389 = HEAP32[$388>>2]|0;
            $390 = ((($389)) + 10|0);
            HEAP8[$390>>0] = -1;
            $391 = HEAP32[$2>>2]|0;
            $392 = ((($391)) + 16|0);
            $393 = HEAP32[$392>>2]|0;
            $394 = ((($393)) + 11|0);
            HEAP8[$394>>0] = -1;
            $395 = HEAP32[$2>>2]|0;
            HEAP32[$395>>2] = 2;
            $$0 = $0;
            STACKTOP = sp;return ($$0|0);
        }
        function __Z14blank_framesetP11Gt_Framesetiii($fset,$f1,$f2,$delete_object) {
            $fset = $fset|0;
            $f1 = $f1|0;
            $f2 = $f2|0;
            $delete_object = $delete_object|0;
            var $$1 = 0, $$f1 = 0, $$f2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($delete_object|0)!=(0);
            $$f2 = $0 ? -1 : $f2;
            $$f1 = $0 ? 0 : $f1;
            $1 = ($$f2|0)<(0);
            if ($1) {
                $2 = HEAP32[$fset>>2]|0;
                $3 = (($2) + -1)|0;
                $$1 = $3;
            } else {
                $$1 = $$f2;
            }
            $4 = ($$f1|0)>($$1|0);
            if (!($4)) {
                $5 = ((($fset)) + 8|0);
                $i$02 = $$f1;
                while(1) {
                    $6 = HEAP32[$5>>2]|0;
                    $7 = (((($6) + (($i$02*100)|0)|0)) + 4|0);
                    $8 = HEAP32[$7>>2]|0;
                    $9 = ($8|0)==(0|0);
                    if (!($9)) {
                        $10 = ((($8)) + 72|0);
                        $11 = HEAP32[$10>>2]|0;
                        $12 = ($11|0)>(1);
                        if ($12) {
                            $13 = (($11) + -1)|0;
                            HEAP32[$10>>2] = $13;
                        }
                    }
                    $14 = HEAP32[$5>>2]|0;
                    $15 = (($14) + (($i$02*100)|0)|0);
                    $16 = HEAP32[$15>>2]|0;
                    _Gif_DeleteStream($16);
                    $17 = HEAP32[$5>>2]|0;
                    $18 = (((($17) + (($i$02*100)|0)|0)) + 20|0);
                    $19 = HEAP32[$18>>2]|0;
                    _Gif_DeleteComment($19);
                    $20 = HEAP32[$5>>2]|0;
                    $21 = (((($20) + (($i$02*100)|0)|0)) + 68|0);
                    $22 = HEAP32[$21>>2]|0;
                    $23 = ($22|0)==(0|0);
                    if (!($23)) {
                        __Z14blank_framesetP11Gt_Framesetiii($22,0,0,1);
                    }
                    $24 = (($i$02) + 1)|0;
                    $25 = ($i$02|0)<($$1|0);
                    if ($25) {
                        $i$02 = $24;
                    } else {
                        break;
                    }
                }
            }
            if (!($0)) {
                return;
            }
            $26 = ((($fset)) + 8|0);
            $27 = HEAP32[$26>>2]|0;
            _free($27);
            _free($fset);
            return;
        }
        function __Z14clear_framesetP11Gt_Frameseti($fset,$f1) {
            $fset = $fset|0;
            $f1 = $f1|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            __Z14blank_framesetP11Gt_Framesetiii($fset,$f1,-1,0);
            HEAP32[$fset>>2] = $f1;
            return;
        }
        function __ZL6verrorPKciiS0_Pi($landmark,$need_file,$seriousness,$fmt,$val) {
            $landmark = $landmark|0;
            $need_file = $need_file|0;
            $seriousness = $seriousness|0;
            $fmt = $fmt|0;
            $val = $val|0;
            var $$ = 0, $$0 = 0, $$12 = 0, $$cmp = 0, $$landmark = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
            var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $n$0 = 0, $n$016 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond9 = 0, $pbuf = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $xbuf = 0;
            var $xfmt$0 = 0, $xi$0$lcssa = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 2336|0;
            $vararg_buffer3 = sp + 16|0;
            $vararg_buffer = sp;
            $pbuf = sp + 2080|0;
            $buf = sp + 1056|0;
            $xbuf = sp + 32|0;
            $0 = ($fmt|0)==(0|0);
            if ($0) {
                STACKTOP = sp;return;
            }
            $1 = HEAP8[$fmt>>0]|0;
            $2 = ($1<<24>>24)==(0);
            if ($2) {
                STACKTOP = sp;return;
            }
            $3 = ($landmark|0)==(0|0);
            $4 = ($need_file|0)!=(0);
            $or$cond = $3 & $4;
            $5 = HEAP32[(52)>>2]|0;
            $6 = ($5|0)!=(0|0);
            $or$cond3 = $or$cond & $6;
            $7 = HEAP32[816>>2]|0;
            $$cmp = ($7>>>0)>(1);
            $8 = $$cmp & $or$cond3;
            $9 = HEAP32[820>>2]|0;
            $10 = ($9|0)!=(1);
            $or$cond9 = $8 & $10;
            $$landmark = $3 ? 23987 : $landmark;
            $$0 = $or$cond9 ? $5 : $$landmark;
            $11 = ($seriousness|0)>(2);
            $12 = ($seriousness|0)==(1);
            $$ = $12 ? 19312 : 19330;
            $xfmt$0 = $11 ? 19339 : $$;
            $13 = HEAP32[556>>2]|0;
            $14 = HEAP8[$$0>>0]|0;
            $15 = ($14<<24>>24)!=(0);
            $16 = $15 ? 19361 : 23987;
            HEAP32[$vararg_buffer>>2] = $13;
            $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
            HEAP32[$vararg_ptr1>>2] = $$0;
            $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
            HEAP32[$vararg_ptr2>>2] = $16;
            (_snprintf($pbuf,256,$xfmt$0,$vararg_buffer)|0);
            $17 = (_strlen($pbuf)|0);
            $18 = HEAP32[828>>2]|0;
            (_Clp_vsnprintf($18,$buf,1024,$fmt,$val)|0);
            $19 = (_strlen($buf)|0);
            $20 = (($19) + 1)|0;
            $21 = ($20>>>0)<(1024);
            if ($21) {
                $22 = ($19|0)==(0);
                if ($22) {
                    label = 6;
                } else {
                    $23 = (($19) + -1)|0;
                    $24 = (($buf) + ($23)|0);
                    $25 = HEAP8[$24>>0]|0;
                    $26 = ($25<<24>>24)==(10);
                    if ($26) {
                        $n$0 = $19;
                    } else {
                        label = 6;
                    }
                }
                if ((label|0) == 6) {
                    $27 = (($19) + 1)|0;
                    $28 = (($buf) + ($19)|0);
                    HEAP8[$28>>0] = 10;
                    $29 = (($buf) + ($27)|0);
                    HEAP8[$29>>0] = 0;
                    $n$0 = $27;
                }
                $30 = ($n$0|0)==(0);
                if ($30) {
                    $xi$0$lcssa = 0;
                } else {
                    $n$016 = $n$0;
                    label = 8;
                }
            } else {
                $n$016 = $19;
                label = 8;
            }
            if ((label|0) == 8) {
                HEAP32[$vararg_buffer3>>2] = $17;
                $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
                HEAP32[$vararg_ptr6>>2] = $pbuf;
                $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
                HEAP32[$vararg_ptr7>>2] = $n$016;
                $vararg_ptr8 = ((($vararg_buffer3)) + 12|0);
                HEAP32[$vararg_ptr8>>2] = $buf;
                $31 = (_snprintf($xbuf,1024,19363,$vararg_buffer3)|0);
                $32 = ($31>>>0)>(1024);
                $$12 = $32 ? 1024 : $31;
                $xi$0$lcssa = $$12;
            }
            $33 = HEAP32[564>>2]|0;
            $34 = ($33|0)!=(0);
            $or$cond11 = $12 & $34;
            if ($or$cond11) {
                STACKTOP = sp;return;
            }
            $35 = ($seriousness|0)>(1);
            if ($35) {
                $36 = HEAP32[560>>2]|0;
                $37 = (($36) + 1)|0;
                HEAP32[560>>2] = $37;
            }
            __Z15verbose_endlinev();
            $38 = HEAP32[3472>>2]|0;
            (_fwrite($xbuf,1,$xi$0$lcssa,$38)|0);
            STACKTOP = sp;return;
        }
        function __ZL13colormap_infoP8_IO_FILEP12Gif_ColormapPKc($where,$gfcm,$prefix) {
            $where = $where|0;
            $gfcm = $gfcm|0;
            $prefix = $prefix|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$03 = 0;
            var $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 64|0;
            $vararg_buffer16 = sp + 48|0;
            $vararg_buffer10 = sp + 32|0;
            $vararg_buffer4 = sp + 16|0;
            $vararg_buffer = sp;
            $0 = HEAP32[$gfcm>>2]|0;
            $1 = (($0) + -1)|0;
            $2 = (($1|0) / 4)&-1;
            $3 = (($2) + 1)|0;
            $4 = ($1|0)>(-4);
            if (!($4)) {
                STACKTOP = sp;return;
            }
            $5 = ((($gfcm)) + 16|0);
            $j$03 = 0;
            while(1) {
                (_fputs($prefix,$where)|0);
                $6 = HEAP32[$gfcm>>2]|0;
                $7 = ($j$03|0)<($6|0);
                if ($7) {
                    $8 = HEAP32[$5>>2]|0;
                    $9 = (((($8) + ($j$03<<3)|0)) + 1|0);
                    $10 = HEAP8[$9>>0]|0;
                    $11 = $10&255;
                    $12 = (((($8) + ($j$03<<3)|0)) + 2|0);
                    $13 = HEAP8[$12>>0]|0;
                    $14 = $13&255;
                    $15 = (((($8) + ($j$03<<3)|0)) + 3|0);
                    $16 = HEAP8[$15>>0]|0;
                    $17 = $16&255;
                    HEAP32[$vararg_buffer>>2] = $j$03;
                    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                    HEAP32[$vararg_ptr1>>2] = $11;
                    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
                    HEAP32[$vararg_ptr2>>2] = $14;
                    $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
                    HEAP32[$vararg_ptr3>>2] = $17;
                    (_fprintf($where,19287,$vararg_buffer)|0);
                    $18 = (($j$03) + ($3))|0;
                    $19 = HEAP32[$gfcm>>2]|0;
                    $20 = ($18|0)<($19|0);
                    if ($20) {
                        (_fwrite(19307,4,1,$where)|0);
                        $23 = HEAP32[$5>>2]|0;
                        $24 = (((($23) + ($18<<3)|0)) + 1|0);
                        $25 = HEAP8[$24>>0]|0;
                        $26 = $25&255;
                        $27 = (((($23) + ($18<<3)|0)) + 2|0);
                        $28 = HEAP8[$27>>0]|0;
                        $29 = $28&255;
                        $30 = (((($23) + ($18<<3)|0)) + 3|0);
                        $31 = HEAP8[$30>>0]|0;
                        $32 = $31&255;
                        HEAP32[$vararg_buffer4>>2] = $18;
                        $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
                        HEAP32[$vararg_ptr7>>2] = $26;
                        $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
                        HEAP32[$vararg_ptr8>>2] = $29;
                        $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
                        HEAP32[$vararg_ptr9>>2] = $32;
                        (_fprintf($where,19287,$vararg_buffer4)|0);
                        $33 = (($18) + ($3))|0;
                        $34 = HEAP32[$gfcm>>2]|0;
                        $35 = ($33|0)<($34|0);
                        if ($35) {
                            (_fwrite(19307,4,1,$where)|0);
                            $36 = HEAP32[$5>>2]|0;
                            $37 = (((($36) + ($33<<3)|0)) + 1|0);
                            $38 = HEAP8[$37>>0]|0;
                            $39 = $38&255;
                            $40 = (((($36) + ($33<<3)|0)) + 2|0);
                            $41 = HEAP8[$40>>0]|0;
                            $42 = $41&255;
                            $43 = (((($36) + ($33<<3)|0)) + 3|0);
                            $44 = HEAP8[$43>>0]|0;
                            $45 = $44&255;
                            HEAP32[$vararg_buffer10>>2] = $33;
                            $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
                            HEAP32[$vararg_ptr13>>2] = $39;
                            $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
                            HEAP32[$vararg_ptr14>>2] = $42;
                            $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
                            HEAP32[$vararg_ptr15>>2] = $45;
                            (_fprintf($where,19287,$vararg_buffer10)|0);
                            $46 = (($33) + ($3))|0;
                            $47 = HEAP32[$gfcm>>2]|0;
                            $48 = ($46|0)<($47|0);
                            if ($48) {
                                (_fwrite(19307,4,1,$where)|0);
                                $49 = HEAP32[$5>>2]|0;
                                $50 = (((($49) + ($46<<3)|0)) + 1|0);
                                $51 = HEAP8[$50>>0]|0;
                                $52 = $51&255;
                                $53 = (((($49) + ($46<<3)|0)) + 2|0);
                                $54 = HEAP8[$53>>0]|0;
                                $55 = $54&255;
                                $56 = (((($49) + ($46<<3)|0)) + 3|0);
                                $57 = HEAP8[$56>>0]|0;
                                $58 = $57&255;
                                HEAP32[$vararg_buffer16>>2] = $46;
                                $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
                                HEAP32[$vararg_ptr19>>2] = $52;
                                $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
                                HEAP32[$vararg_ptr20>>2] = $55;
                                $vararg_ptr21 = ((($vararg_buffer16)) + 12|0);
                                HEAP32[$vararg_ptr21>>2] = $58;
                                (_fprintf($where,19287,$vararg_buffer16)|0);
                            }
                        }
                    }
                }
                (_fputc(10,$where)|0);
                $21 = (($j$03) + 1)|0;
                $22 = ($21|0)<($3|0);
                if ($22) {
                    $j$03 = $21;
                } else {
                    break;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL12comment_infoP8_IO_FILEP11Gif_CommentPKc($where,$gfcom,$prefix) {
            $where = $where|0;
            $gfcom = $gfcom|0;
            $prefix = $prefix|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfcom)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)>(0);
            if (!($2)) {
                return;
            }
            $3 = ((($gfcom)) + 4|0);
            $i$01 = 0;
            while(1) {
                (_fputs($prefix,$where)|0);
                $4 = HEAP32[$gfcom>>2]|0;
                $5 = (($4) + ($i$01<<2)|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = HEAP32[$3>>2]|0;
                $8 = (($7) + ($i$01<<2)|0);
                $9 = HEAP32[$8>>2]|0;
                __ZL9safe_putsPKcjP8_IO_FILE($6,$9,$where);
                (_fputc(10,$where)|0);
                $10 = (($i$01) + 1)|0;
                $11 = HEAP32[$0>>2]|0;
                $12 = ($10|0)<($11|0);
                if ($12) {
                    $i$01 = $10;
                } else {
                    break;
                }
            }
            return;
        }
        function __ZL14extension_infoP8_IO_FILEP10Gif_StreamP13Gif_Extensionii($where,$gfs,$gfex,$count,$image_position) {
            $where = $where|0;
            $gfs = $gfs|0;
            $gfex = $gfex|0;
            $count = $count|0;
            $image_position = $image_position|0;
            var $$off = 0, $$off5 = 0, $$op = 0, $$op$op$op$op = 0, $$op$op$op24 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
            var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
            var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data$015 = 0, $data$1$lcssa = 0, $data$19 = 0, $exitcond = 0, $i$06 = 0, $i$17 = 0;
            var $i$210 = 0, $len$0$ = 0, $len$017 = 0, $or$cond = 0, $pos$016 = 0, $scevgep$sum = 0, $scevgep23 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr20 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 64|0;
            $vararg_buffer17 = sp + 48|0;
            $vararg_buffer14 = sp + 40|0;
            $vararg_buffer11 = sp + 32|0;
            $vararg_buffer8 = sp + 24|0;
            $vararg_buffer5 = sp + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = ((($gfex)) + 12|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($gfex)) + 16|0);
            $3 = HEAP32[$2>>2]|0;
            HEAP32[$vararg_buffer>>2] = $count;
            (_fprintf($where,19141,$vararg_buffer)|0);
            $4 = HEAP32[$gfex>>2]|0;
            $5 = ($4|0)==(255);
            do {
                if ($5) {
                    (_fwrite(19158,5,1,$where)|0);
                    $6 = ((($gfex)) + 4|0);
                    $7 = HEAP32[$6>>2]|0;
                    $8 = ((($gfex)) + 8|0);
                    $9 = HEAP32[$8>>2]|0;
                    __ZL9safe_putsPKcjP8_IO_FILE($7,$9,$where);
                    (_fputc(39,$where)|0);
                } else {
                    $$off = (($4) + -32)|0;
                    $10 = ($$off>>>0)<(95);
                    if ($10) {
                        HEAP32[$vararg_buffer1>>2] = $4;
                        $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
                        HEAP32[$vararg_ptr4>>2] = $4;
                        (_fprintf($where,19164,$vararg_buffer1)|0);
                        break;
                    } else {
                        HEAP32[$vararg_buffer5>>2] = $4;
                        (_fprintf($where,19178,$vararg_buffer5)|0);
                        break;
                    }
                }
            } while(0);
            $11 = ((($gfs)) + 4|0);
            $12 = HEAP32[$11>>2]|0;
            $13 = ($12|0)>($image_position|0);
            if ($13) {
                HEAP32[$vararg_buffer8>>2] = $image_position;
                (_fprintf($where,19193,$vararg_buffer8)|0);
            } else {
                (_fwrite(19185,7,1,$where)|0);
            }
            $14 = ((($gfex)) + 20|0);
            $15 = HEAP32[$14>>2]|0;
            $16 = ($15|0)==(0);
            if (!($16)) {
                (_fwrite(19205,11,1,$where)|0);
            }
            (_fputc(10,$where)|0);
            $17 = ($3|0)==(0);
            if ($17) {
                STACKTOP = sp;return;
            } else {
                $data$015 = $1;$len$017 = $3;$pos$016 = 0;
            }
            while(1) {
                $18 = ($len$017>>>0)<(16);
                $len$0$ = $18 ? $len$017 : 16;
                HEAP32[$vararg_buffer11>>2] = $pos$016;
                (_fprintf($where,19217,$vararg_buffer11)|0);
                $19 = ($len$0$|0)==(0);
                if ($19) {
                    $i$17 = 0;
                    label = 19;
                } else {
                    $20 = $len$017 ^ -16;
                    $21 = ($20>>>0)>(4294967279);
                    $i$06 = 0;
                    while(1) {
                        $23 = $i$06 | 1;
                        $24 = ($23>>>0)<($len$0$>>>0);
                        $25 = (($data$015) + ($i$06)|0);
                        $26 = HEAP8[$25>>0]|0;
                        $27 = $26&255;
                        if ($24) {
                            $28 = (($data$015) + ($23)|0);
                            $29 = HEAP8[$28>>0]|0;
                            $30 = $29&255;
                            HEAP32[$vararg_buffer17>>2] = $27;
                            $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
                            HEAP32[$vararg_ptr20>>2] = $30;
                            (_fprintf($where,19236,$vararg_buffer17)|0);
                        } else {
                            HEAP32[$vararg_buffer14>>2] = $27;
                            (_fprintf($where,19228,$vararg_buffer14)|0);
                        }
                        $31 = (($i$06) + 2)|0;
                        $32 = ($31>>>0)<($len$0$>>>0);
                        if ($32) {
                            $i$06 = $31;
                        } else {
                            break;
                        }
                    }
                    $$op$op$op24 = (($len$017) + 1)|0;
                    $$op$op$op$op = $$op$op$op24 & -2;
                    $22 = ($$op$op$op$op>>>0)<(16);
                    $or$cond = $21 & $22;
                    if ($or$cond) {
                        $i$17 = $$op$op$op$op;
                        label = 19;
                    }
                }
                if ((label|0) == 19) {
                    while(1) {
                        label = 0;
                        (_fwrite(19246,5,1,$where)|0);
                        $33 = (($i$17) + 2)|0;
                        $34 = ($33>>>0)<(16);
                        if ($34) {
                            $i$17 = $33;
                            label = 19;
                        } else {
                            break;
                        }
                    }
                }
                (_putc(32,$where)|0);
                $35 = ($len$0$|0)==(0);
                if ($35) {
                    $data$1$lcssa = $data$015;
                } else {
                    $36 = $len$017 ^ -16;
                    $37 = ($36>>>0)>(4294967279);
                    $$op = $len$017 ^ -1;
                    $38 = $37 ? $$op : -17;
                    $39 = $38 ^ -1;
                    $data$19 = $data$015;$i$210 = 0;
                    while(1) {
                        $40 = HEAP8[$data$19>>0]|0;
                        $41 = $40&255;
                        $$off5 = (($40) + -32)<<24>>24;
                        $42 = ($$off5&255)<(95);
                        $43 = $42 ? $41 : 46;
                        (_putc($43,$where)|0);
                        $44 = (($i$210) + 1)|0;
                        $45 = ((($data$19)) + 1|0);
                        $exitcond = ($44|0)==($39|0);
                        if ($exitcond) {
                            break;
                        } else {
                            $data$19 = $45;$i$210 = $44;
                        }
                    }
                    $scevgep$sum = $38 ^ -1;
                    $scevgep23 = (($data$015) + ($scevgep$sum)|0);
                    $data$1$lcssa = $scevgep23;
                }
                (_putc(10,$where)|0);
                $46 = (($len$0$) + ($pos$016))|0;
                $47 = (($len$017) - ($len$0$))|0;
                $48 = ($len$017|0)==($len$0$|0);
                if ($48) {
                    break;
                } else {
                    $data$015 = $data$1$lcssa;$len$017 = $47;$pos$016 = $46;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL15strtod_fractionPKcPPc($arg,$endptr) {
            $arg = $arg|0;
            $endptr = $endptr|0;
            var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $d$0 = 0.0, $or$cond = 0, $val = 0, $val2 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $val = sp + 4|0;
            $val2 = sp;
            $0 = (+_strtod($arg,$val));
            $1 = HEAP32[$val>>2]|0;
            $2 = ($1|0)==($arg|0);
            if ($2) {
                $d$0 = $0;
            } else {
                $3 = HEAP8[$1>>0]|0;
                $4 = ($3<<24>>24)==(47);
                if ($4) {
                    $5 = ((($1)) + 1|0);
                    $6 = (+_strtod($5,$val2));
                    $7 = HEAP32[$val2>>2]|0;
                    $8 = HEAP32[$val>>2]|0;
                    $9 = ((($8)) + 1|0);
                    $10 = ($7|0)!=($9|0);
                    $11 = $6 != 0.0;
                    $or$cond = $11 & $10;
                    if ($or$cond) {
                        $12 = $0 / $6;
                        HEAP32[$val>>2] = $7;
                        $d$0 = $12;
                    } else {
                        $d$0 = $0;
                    }
                } else {
                    $d$0 = $0;
                }
            }
            $13 = ($endptr|0)==(0|0);
            if ($13) {
                STACKTOP = sp;return (+$d$0);
            }
            $14 = HEAP32[$val>>2]|0;
            HEAP32[$endptr>>2] = $14;
            STACKTOP = sp;return (+$d$0);
        }
        function __ZL23parse_hex_color_channelPKci($s,$ndigits) {
            $s = $s|0;
            $ndigits = $ndigits|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP8[$s>>0]|0;
            $1 = (__ZL6xvaluec($0)|0);
            $2 = ($1|0)<(0);
            if ($2) {
                $$0 = -1;
                return ($$0|0);
            }
            $3 = ($ndigits|0)==(1);
            if ($3) {
                $4 = ($1*17)|0;
                $$0 = $4;
                return ($$0|0);
            }
            $5 = ((($s)) + 1|0);
            $6 = HEAP8[$5>>0]|0;
            $7 = (__ZL6xvaluec($6)|0);
            $8 = ($7|0)<(0);
            if ($8) {
                $$0 = -1;
                return ($$0|0);
            }
            $9 = $1 << 4;
            $10 = (($7) + ($9))|0;
            $$0 = $10;
            return ($$0|0);
        }
        function __ZL16no_gifread_errorP10Gif_StreamP9Gif_ImageiPKc($gfs,$gfi,$is_error,$message) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $is_error = $is_error|0;
            $message = $message|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            return;
        }
        function __ZL18read_text_colormapP8_IO_FILEPKc($f,$name) {
            $f = $f|0;
            $name = $name|0;
            var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0;
            var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
            var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $blue = 0, $buf = 0;
            var $c$0 = 0, $fblue = 0, $fgreen = 0, $fred = 0, $green = 0, $ncol$03 = 0, $ncol$04 = 0, $ncol$04$lcssa = 0, $ncol$1 = 0, $ncol$1$lcssa = 0, $red = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr2 = 0;
            var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 1120|0;
            $vararg_buffer15 = sp + 56|0;
            $vararg_buffer13 = sp + 48|0;
            $vararg_buffer8 = sp + 32|0;
            $vararg_buffer3 = sp + 16|0;
            $vararg_buffer = sp;
            $buf = sp + 88|0;
            $red = sp + 80|0;
            $green = sp + 76|0;
            $blue = sp + 72|0;
            $fred = sp + 68|0;
            $fgreen = sp + 64|0;
            $fblue = sp + 60|0;
            $0 = (_Gif_NewFullColormap(0,256)|0);
            $1 = ((($0)) + 16|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = (_fgets($buf,1024,$f)|0);
            $4 = ($3|0)==(0|0);
            do {
                if (!($4)) {
                    $5 = ((($buf)) + 1|0);
                    $6 = ((($buf)) + 4|0);
                    $7 = ((($buf)) + 1|0);
                    $8 = ((($buf)) + 7|0);
                    $ncol$04 = 0;
                    while(1) {
                        HEAP32[$vararg_buffer>>2] = $fred;
                        $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                        HEAP32[$vararg_ptr1>>2] = $fgreen;
                        $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
                        HEAP32[$vararg_ptr2>>2] = $fblue;
                        $9 = (_sscanf($buf,19014,$vararg_buffer)|0);
                        $10 = ($9|0)==(3);
                        L5: do {
                            if ($10) {
                                $11 = +HEAPF32[$fred>>2];
                                $12 = $11 < 0.0;
                                if ($12) {
                                    HEAPF32[$fred>>2] = 0.0;
                                }
                                $13 = +HEAPF32[$fgreen>>2];
                                $14 = $13 < 0.0;
                                if ($14) {
                                    HEAPF32[$fgreen>>2] = 0.0;
                                }
                                $15 = +HEAPF32[$fblue>>2];
                                $16 = $15 < 0.0;
                                if ($16) {
                                    HEAPF32[$fblue>>2] = 0.0;
                                }
                                $17 = +HEAPF32[$fred>>2];
                                $18 = $17;
                                $19 = $18 + 0.5;
                                $20 = (~~(($19))>>>0);
                                HEAP32[$red>>2] = $20;
                                $21 = +HEAPF32[$fgreen>>2];
                                $22 = $21;
                                $23 = $22 + 0.5;
                                $24 = (~~(($23))>>>0);
                                HEAP32[$green>>2] = $24;
                                $25 = +HEAPF32[$fblue>>2];
                                $26 = $25;
                                $27 = $26 + 0.5;
                                $28 = (~~(($27))>>>0);
                                HEAP32[$blue>>2] = $28;
                                label = 21;
                            } else {
                                $29 = HEAP8[$buf>>0]|0;
                                $30 = ($29<<24>>24)==(35);
                                if ($30) {
                                    $31 = (_strspn($5,19023)|0);
                                    $32 = ($31|0)==(3);
                                    do {
                                        if ($32) {
                                            $33 = HEAP8[$6>>0]|0;
                                            $34 = ($33<<24>>24)==(0);
                                            if (!($34)) {
                                                $35 = $33&255;
                                                $36 = (_isspace($35)|0);
                                                $37 = ($36|0)==(0);
                                                if ($37) {
                                                    break;
                                                }
                                            }
                                            HEAP32[$vararg_buffer3>>2] = $red;
                                            $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
                                            HEAP32[$vararg_ptr6>>2] = $green;
                                            $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
                                            HEAP32[$vararg_ptr7>>2] = $blue;
                                            (_sscanf($5,19046,$vararg_buffer3)|0);
                                            $38 = HEAP32[$red>>2]|0;
                                            $39 = ($38*17)|0;
                                            HEAP32[$red>>2] = $39;
                                            $40 = HEAP32[$green>>2]|0;
                                            $41 = ($40*17)|0;
                                            HEAP32[$green>>2] = $41;
                                            $42 = HEAP32[$blue>>2]|0;
                                            $43 = ($42*17)|0;
                                            HEAP32[$blue>>2] = $43;
                                            label = 21;
                                            break L5;
                                        }
                                    } while(0);
                                    $$pr = HEAP8[$buf>>0]|0;
                                    $44 = ($$pr<<24>>24)==(35);
                                    if ($44) {
                                        $45 = (_strspn($7,19023)|0);
                                        $46 = ($45|0)==(6);
                                        if ($46) {
                                            $47 = HEAP8[$8>>0]|0;
                                            $48 = ($47<<24>>24)==(0);
                                            if (!($48)) {
                                                $49 = $47&255;
                                                $50 = (_isspace($49)|0);
                                                $51 = ($50|0)==(0);
                                                if ($51) {
                                                    $ncol$1 = $ncol$04;
                                                    break;
                                                }
                                            }
                                            HEAP32[$vararg_buffer8>>2] = $red;
                                            $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
                                            HEAP32[$vararg_ptr11>>2] = $green;
                                            $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
                                            HEAP32[$vararg_ptr12>>2] = $blue;
                                            (_sscanf($7,19056,$vararg_buffer8)|0);
                                            label = 21;
                                        } else {
                                            $ncol$1 = $ncol$04;
                                        }
                                    } else {
                                        $ncol$1 = $ncol$04;
                                    }
                                } else {
                                    $ncol$1 = $ncol$04;
                                }
                            }
                        } while(0);
                        if ((label|0) == 21) {
                            label = 0;
                            $52 = HEAP32[$red>>2]|0;
                            $53 = ($52>>>0)>(255);
                            if ($53) {
                                HEAP32[$red>>2] = 255;
                            }
                            $54 = HEAP32[$green>>2]|0;
                            $55 = ($54>>>0)>(255);
                            if ($55) {
                                HEAP32[$green>>2] = 255;
                            }
                            $56 = HEAP32[$blue>>2]|0;
                            $57 = ($56>>>0)>(255);
                            if ($57) {
                                HEAP32[$blue>>2] = 255;
                            }
                            $58 = ($ncol$04|0)>(255);
                            if ($58) {
                                $ncol$04$lcssa = $ncol$04;
                                label = 28;
                                break;
                            }
                            $59 = HEAP32[$red>>2]|0;
                            $60 = $59&255;
                            $61 = (((($2) + ($ncol$04<<3)|0)) + 1|0);
                            HEAP8[$61>>0] = $60;
                            $62 = HEAP32[$green>>2]|0;
                            $63 = $62&255;
                            $64 = (((($2) + ($ncol$04<<3)|0)) + 2|0);
                            HEAP8[$64>>0] = $63;
                            $65 = HEAP32[$blue>>2]|0;
                            $66 = $65&255;
                            $67 = (((($2) + ($ncol$04<<3)|0)) + 3|0);
                            HEAP8[$67>>0] = $66;
                            $68 = (($ncol$04) + 1)|0;
                            $ncol$1 = $68;
                        }
                        $69 = (_strchr($buf,10)|0);
                        $70 = ($69|0)==(0|0);
                        L42: do {
                            if ($70) {
                                $73 = (_getc($f)|0);
                                $c$0 = $73;
                                while(1) {
                                    switch ($c$0|0) {
                                        case 10: case -1:  {
                                        break L42;
                                        break;
                                    }
                                        default: {
                                        }
                                    }
                                    $74 = (_getc($f)|0);
                                    $c$0 = $74;
                                }
                            }
                        } while(0);
                        $71 = (_fgets($buf,1024,$f)|0);
                        $72 = ($71|0)==(0|0);
                        if ($72) {
                            $ncol$1$lcssa = $ncol$1;
                            label = 35;
                            break;
                        } else {
                            $ncol$04 = $ncol$1;
                        }
                    }
                    if ((label|0) == 28) {
                        __Z6lerrorPKcS0_z($name,19066,$vararg_buffer13);
                        $ncol$03 = $ncol$04$lcssa;
                    }
                    else if ((label|0) == 35) {
                        $75 = ($ncol$1$lcssa|0)==(0);
                        if ($75) {
                            break;
                        } else {
                            $ncol$03 = $ncol$1$lcssa;
                        }
                    }
                    HEAP32[$0>>2] = $ncol$03;
                    $$0 = $0;
                    STACKTOP = sp;return ($$0|0);
                }
            } while(0);
            __Z6lerrorPKcS0_z($name,19105,$vararg_buffer15);
            _Gif_DeleteColormap($0);
            $$0 = 0;
            STACKTOP = sp;return ($$0|0);
        }
        function __ZL14merger_flattenP11Gt_Framesetii($fset,$f1,$f2) {
            $fset = $fset|0;
            $f1 = $f1|0;
            $f2 = $f2|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
            var $or$cond = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($f1|0)>(-1);
            if (!($0)) {
                ___assert_fail((18971|0),(17901|0),1074,(18999|0));
                // unreachable;
            }
            $1 = HEAP32[$fset>>2]|0;
            $2 = ($1|0)>($f2|0);
            if (!($2)) {
                ___assert_fail((18971|0),(17901|0),1074,(18999|0));
                // unreachable;
            }
            $3 = ($f1|0)>($f2|0);
            if ($3) {
                return;
            }
            $4 = ((($fset)) + 8|0);
            $i$01 = $f1;
            while(1) {
                $5 = HEAP32[$4>>2]|0;
                $6 = (((($5) + (($i$01*100)|0)|0)) + 68|0);
                $7 = HEAP32[$6>>2]|0;
                $8 = ($7|0)==(0|0);
                if (!($8)) {
                    $9 = HEAP32[$7>>2]|0;
                    $10 = ($9|0)>(0);
                    if ($10) {
                        $11 = (((($5) + (($i$01*100)|0)|0)) + 8|0);
                        $12 = HEAP32[$11>>2]|0;
                        $13 = ($12|0)<(0);
                        $14 = ($9|0)==(1);
                        $or$cond = $14 & $13;
                        if ($or$cond) {
                            $15 = ((($7)) + 8|0);
                            $16 = HEAP32[$15>>2]|0;
                            $17 = ((($16)) + 60|0);
                            $18 = HEAP32[$17>>2]|0;
                            $19 = ($18|0)<(0);
                            if ($19) {
                                $20 = (((($5) + (($i$01*100)|0)|0)) + 4|0);
                                $21 = HEAP32[$20>>2]|0;
                                $22 = ((($21)) + 16|0);
                                $23 = HEAP16[$22>>1]|0;
                                $24 = $23&65535;
                                HEAP32[$17>>2] = $24;
                            }
                            $25 = HEAP32[$15>>2]|0;
                            $26 = ((($25)) + 64|0);
                            $27 = HEAP32[$26>>2]|0;
                            $28 = ($27|0)<(0);
                            if ($28) {
                                $29 = HEAP32[$4>>2]|0;
                                $30 = (((($29) + (($i$01*100)|0)|0)) + 4|0);
                                $31 = HEAP32[$30>>2]|0;
                                $32 = ((($31)) + 18|0);
                                $33 = HEAP8[$32>>0]|0;
                                $34 = $33&255;
                                HEAP32[$26>>2] = $34;
                            }
                            $35 = HEAP32[$15>>2]|0;
                            $36 = ((($35)) + 12|0);
                            $37 = HEAP32[$36>>2]|0;
                            $38 = ($37|0)==(0|0);
                            if ($38) {
                                $39 = ((($35)) + 16|0);
                                $40 = HEAP32[$39>>2]|0;
                                $41 = ($40|0)==(0);
                                if ($41) {
                                    $42 = HEAP32[$4>>2]|0;
                                    $43 = (((($42) + (($i$01*100)|0)|0)) + 4|0);
                                    $44 = HEAP32[$43>>2]|0;
                                    $45 = ((($44)) + 28|0);
                                    $46 = HEAP32[$45>>2]|0;
                                    $47 = (_Gif_CopyString($46)|0);
                                    $48 = HEAP32[$15>>2]|0;
                                    $49 = ((($48)) + 12|0);
                                    HEAP32[$49>>2] = $47;
                                }
                            }
                        }
                        $50 = HEAP32[$7>>2]|0;
                        $51 = (($50) + -1)|0;
                        __ZL14merger_flattenP11Gt_Framesetii($7,0,$51);
                    }
                }
                $52 = HEAP32[$4>>2]|0;
                $53 = (((($52) + (($i$01*100)|0)|0)) + 8|0);
                $54 = HEAP32[$53>>2]|0;
                $55 = ($54|0)>(0);
                if ($55) {
                    $56 = (($52) + (($i$01*100)|0)|0);
                    __ZL10merger_addP8Gt_Frame($56);
                }
                $57 = (($i$01) + 1)|0;
                $58 = ($i$01|0)<($f2|0);
                if ($58) {
                    $i$01 = $57;
                } else {
                    break;
                }
            }
            return;
        }
        function __ZL12analyze_cropiP7Gt_Cropi($nmerger,$crop,$compress_immediately) {
            $nmerger = $nmerger|0;
            $crop = $crop|0;
            $compress_immediately = $compress_immediately|0;
            var $$b$0 = 0, $$l$0 = 0, $$r$0 = 0, $$t$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
            var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
            var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
            var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
            var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
            var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
            var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
            var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
            var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
            var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
            var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
            var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
            var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$0$lcssa = 0, $b$081 = 0, $b$1 = 0, $b$3$lcssa = 0;
            var $b$361 = 0, $b$4 = 0, $bb$0 = 0, $bb$0$b$0 = 0, $bb5$026 = 0, $bb5$041 = 0, $bb5$1 = 0, $bb5$1$b$3 = 0, $cropped_gfs$0$lcssa112 = 0, $cropped_gfs$092 = 0, $cropped_gfs$1 = 0, $cropped_gfs$1$lcssa = 0, $exitcond = 0, $exitcond111 = 0, $i$094 = 0, $i$185 = 0, $i$269 = 0, $l$0$lcssa = 0, $l$084 = 0, $l$2 = 0;
            var $l$4$lcssa = 0, $l$467 = 0, $l$6 = 0, $ll$0 = 0, $ll$0$l$0 = 0, $ll2$028 = 0, $ll2$049 = 0, $ll2$1 = 0, $ll2$2 = 0, $ll2$2$l$4 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond11 = 0, $or$cond12 = 0, $or$cond13 = 0, $or$cond14 = 0, $or$cond1432 = 0, $or$cond15 = 0, $or$cond1540 = 0, $or$cond16 = 0;
            var $or$cond1648 = 0, $or$cond17 = 0, $or$cond1757 = 0, $r$0$lcssa = 0, $r$083 = 0, $r$2 = 0, $r$4$lcssa = 0, $r$464 = 0, $r$6 = 0, $rr$0 = 0, $rr$0$r$0 = 0, $rr4$058 = 0, $rr4$1 = 0, $rr4$2 = 0, $rr4$2$r$4 = 0, $t$0$lcssa = 0, $t$082 = 0, $t$1 = 0, $t$2 = 0, $t$4$lcssa = 0;
            var $t$463 = 0, $t$5 = 0, $t$6 = 0, $tt$0 = 0, $tt3$024 = 0, $tt3$033 = 0, $tt3$1 = 0, $vararg_buffer = 0, $x$031 = 0, $x$137 = 0, $y$044 = 0, $y$153 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $0 = ($nmerger|0)>(0);
            if ($0) {
                $1 = HEAP32[640>>2]|0;
                $cropped_gfs$092 = 0;$i$094 = 0;
                while(1) {
                    $4 = (($1) + ($i$094<<2)|0);
                    $5 = HEAP32[$4>>2]|0;
                    $6 = ((($5)) + 48|0);
                    $7 = HEAP32[$6>>2]|0;
                    $8 = ($7|0)==($crop|0);
                    if ($8) {
                        $9 = HEAP32[$5>>2]|0;
                        $cropped_gfs$1 = $9;
                    } else {
                        $cropped_gfs$1 = $cropped_gfs$092;
                    }
                    $10 = (($i$094) + 1)|0;
                    $exitcond111 = ($10|0)==($nmerger|0);
                    if ($exitcond111) {
                        $cropped_gfs$1$lcssa = $cropped_gfs$1;
                        break;
                    } else {
                        $cropped_gfs$092 = $cropped_gfs$1;$i$094 = $10;
                    }
                }
                $2 = ($nmerger|0)>(0);
                if ($2) {
                    $3 = HEAP32[640>>2]|0;
                    $b$081 = 0;$i$185 = 0;$l$084 = 2147483647;$r$083 = 0;$t$082 = 2147483647;
                    while(1) {
                        $11 = (($3) + ($i$185<<2)|0);
                        $12 = HEAP32[$11>>2]|0;
                        $13 = ((($12)) + 48|0);
                        $14 = HEAP32[$13>>2]|0;
                        $15 = ($14|0)==($crop|0);
                        if ($15) {
                            $16 = ((($12)) + 88|0);
                            $17 = HEAP8[$16>>0]|0;
                            $18 = $17 & 32;
                            $19 = ($18<<24>>24)==(0);
                            if ($19) {
                                $20 = ((($12)) + 4|0);
                                $21 = HEAP32[$20>>2]|0;
                                $22 = ((($21)) + 12|0);
                                $23 = HEAP16[$22>>1]|0;
                                $24 = $23&65535;
                                $25 = ((($21)) + 14|0);
                                $26 = HEAP16[$25>>1]|0;
                                $27 = $26&65535;
                                $28 = ((($21)) + 8|0);
                                $29 = HEAP16[$28>>1]|0;
                                $30 = $29&65535;
                                $31 = (($30) + ($24))|0;
                                $32 = ((($21)) + 10|0);
                                $33 = HEAP16[$32>>1]|0;
                                $34 = $33&65535;
                                $35 = (($34) + ($27))|0;
                                $bb$0 = $35;$ll$0 = $24;$rr$0 = $31;$tt$0 = $27;
                            } else {
                                $36 = HEAP32[$12>>2]|0;
                                $37 = ((($36)) + 18|0);
                                $38 = HEAP16[$37>>1]|0;
                                $39 = $38&65535;
                                $40 = ((($36)) + 20|0);
                                $41 = HEAP16[$40>>1]|0;
                                $42 = $41&65535;
                                $bb$0 = $42;$ll$0 = 0;$rr$0 = $39;$tt$0 = 0;
                            }
                            $43 = ($ll$0|0)<($l$084|0);
                            $ll$0$l$0 = $43 ? $ll$0 : $l$084;
                            $44 = ($tt$0|0)<($t$082|0);
                            $t$1 = $44 ? $tt$0 : $t$082;
                            $45 = ($rr$0|0)>($r$083|0);
                            $rr$0$r$0 = $45 ? $rr$0 : $r$083;
                            $46 = ($bb$0|0)>($b$081|0);
                            $bb$0$b$0 = $46 ? $bb$0 : $b$081;
                            $b$1 = $bb$0$b$0;$l$2 = $ll$0$l$0;$r$2 = $rr$0$r$0;$t$2 = $t$1;
                        } else {
                            $b$1 = $b$081;$l$2 = $l$084;$r$2 = $r$083;$t$2 = $t$082;
                        }
                        $47 = (($i$185) + 1)|0;
                        $exitcond = ($47|0)==($nmerger|0);
                        if ($exitcond) {
                            $b$0$lcssa = $b$1;$cropped_gfs$0$lcssa112 = $cropped_gfs$1$lcssa;$l$0$lcssa = $l$2;$r$0$lcssa = $r$2;$t$0$lcssa = $t$2;
                            break;
                        } else {
                            $b$081 = $b$1;$i$185 = $47;$l$084 = $l$2;$r$083 = $r$2;$t$082 = $t$2;
                        }
                    }
                } else {
                    $b$0$lcssa = 0;$cropped_gfs$0$lcssa112 = $cropped_gfs$1$lcssa;$l$0$lcssa = 2147483647;$r$0$lcssa = 0;$t$0$lcssa = 2147483647;
                }
            } else {
                $b$0$lcssa = 0;$cropped_gfs$0$lcssa112 = 0;$l$0$lcssa = 2147483647;$r$0$lcssa = 0;$t$0$lcssa = 2147483647;
            }
            $48 = ($t$0$lcssa|0)>($b$0$lcssa|0);
            $$b$0 = $48 ? 0 : $b$0$lcssa;
            $$t$0 = $48 ? 0 : $t$0$lcssa;
            $$r$0 = $48 ? 0 : $r$0$lcssa;
            $$l$0 = $48 ? 0 : $l$0$lcssa;
            $49 = ((($crop)) + 8|0);
            $50 = HEAP32[$49>>2]|0;
            $51 = (($50) + ($$l$0))|0;
            $52 = ((($crop)) + 24|0);
            HEAP32[$52>>2] = $51;
            $53 = ((($crop)) + 12|0);
            $54 = HEAP32[$53>>2]|0;
            $55 = (($54) + ($$t$0))|0;
            $56 = ((($crop)) + 28|0);
            HEAP32[$56>>2] = $55;
            $57 = ((($crop)) + 16|0);
            $58 = HEAP32[$57>>2]|0;
            $59 = ($58|0)<(1);
            if ($59) {
                $60 = HEAP32[$52>>2]|0;
                $61 = (($$r$0) - ($60))|0;
                $63 = $61;
            } else {
                $63 = 0;
            }
            $62 = (($63) + ($58))|0;
            $64 = ((($crop)) + 32|0);
            HEAP32[$64>>2] = $62;
            $65 = ((($crop)) + 20|0);
            $66 = HEAP32[$65>>2]|0;
            $67 = ($66|0)<(1);
            if ($67) {
                $68 = HEAP32[$56>>2]|0;
                $69 = (($$b$0) - ($68))|0;
                $71 = $69;
            } else {
                $71 = 0;
            }
            $70 = (($71) + ($66))|0;
            $72 = ((($crop)) + 36|0);
            HEAP32[$72>>2] = $70;
            $73 = HEAP32[$52>>2]|0;
            $74 = ((($crop)) + 40|0);
            HEAP32[$74>>2] = $73;
            $75 = HEAP32[$56>>2]|0;
            $76 = ((($crop)) + 44|0);
            HEAP32[$76>>2] = $75;
            $77 = HEAP32[$52>>2]|0;
            $78 = ($77|0)<(0);
            if ($78) {
                label = 22;
            } else {
                $79 = HEAP32[$56>>2]|0;
                $80 = ($79|0)<(0);
                if ($80) {
                    label = 22;
                } else {
                    $81 = HEAP32[$64>>2]|0;
                    $82 = ($81|0)<(1);
                    if ($82) {
                        label = 22;
                    } else {
                        $83 = HEAP32[$72>>2]|0;
                        $84 = ($83|0)<(1);
                        $85 = (($81) + ($77))|0;
                        $86 = ($85|0)>($$r$0|0);
                        $or$cond = $86 | $84;
                        $87 = (($83) + ($79))|0;
                        $88 = ($87|0)>($$b$0|0);
                        $or$cond10 = $or$cond | $88;
                        if ($or$cond10) {
                            label = 22;
                        } else {
                            HEAP32[$crop>>2] = 1;
                        }
                    }
                }
            }
            if ((label|0) == 22) {
                $89 = ($cropped_gfs$0$lcssa112|0)==(0|0);
                if ($89) {
                    $92 = 0;
                } else {
                    $90 = ((($cropped_gfs$0$lcssa112)) + 44|0);
                    $91 = HEAP32[$90>>2]|0;
                    $92 = $91;
                }
                __Z6lerrorPKcS0_z($92,18934,$vararg_buffer);
                HEAP32[$crop>>2] = 2;
            }
            $93 = ((($crop)) + 4|0);
            $94 = HEAP32[$93>>2]|0;
            $95 = ($94|0)==(0);
            if ($95) {
                STACKTOP = sp;return;
            }
            $96 = HEAP32[$crop>>2]|0;
            $97 = ($96|0)==(1);
            if (!($97)) {
                STACKTOP = sp;return;
            }
            $98 = HEAP32[$52>>2]|0;
            $99 = HEAP32[$56>>2]|0;
            $100 = HEAP32[$64>>2]|0;
            $101 = (($100) + ($98))|0;
            $102 = HEAP32[$72>>2]|0;
            $103 = (($102) + ($99))|0;
            $104 = ($nmerger|0)>(0);
            if ($104) {
                $105 = ($compress_immediately|0)>(0);
                $b$361 = 0;$i$269 = 0;$l$467 = 2147483647;$r$464 = 0;$t$463 = 2147483647;
                while(1) {
                    $106 = ($l$467|0)>($98|0);
                    $107 = ($t$463|0)>($99|0);
                    $or$cond11 = $107 | $106;
                    $108 = ($r$464|0)<($101|0);
                    $or$cond12 = $108 | $or$cond11;
                    $109 = ($b$361|0)<($103|0);
                    $or$cond13 = $109 | $or$cond12;
                    if (!($or$cond13)) {
                        $b$3$lcssa = $b$361;$l$4$lcssa = $l$467;$r$4$lcssa = $r$464;$t$4$lcssa = $t$463;
                        break;
                    }
                    $110 = HEAP32[640>>2]|0;
                    $111 = (($110) + ($i$269<<2)|0);
                    $112 = HEAP32[$111>>2]|0;
                    $113 = ((($112)) + 48|0);
                    $114 = HEAP32[$113>>2]|0;
                    $115 = ($114|0)==($crop|0);
                    if ($115) {
                        $116 = ((($112)) + 4|0);
                        $117 = HEAP32[$116>>2]|0;
                        $118 = ((($117)) + 12|0);
                        $119 = HEAP16[$118>>1]|0;
                        $120 = $119&65535;
                        $121 = (__ZL9constrainiii191($98,$120,$101)|0);
                        $122 = ((($117)) + 14|0);
                        $123 = HEAP16[$122>>1]|0;
                        $124 = $123&65535;
                        $125 = (__ZL9constrainiii191($99,$124,$103)|0);
                        $126 = ((($117)) + 8|0);
                        $127 = HEAP16[$126>>1]|0;
                        $128 = $127&65535;
                        $129 = (($128) + ($120))|0;
                        $130 = (__ZL9constrainiii191($98,$129,$101)|0);
                        $131 = ((($117)) + 10|0);
                        $132 = HEAP16[$131>>1]|0;
                        $133 = $132&65535;
                        $134 = (($133) + ($124))|0;
                        $135 = (__ZL9constrainiii191($99,$134,$103)|0);
                        $136 = ((($117)) + 20|0);
                        $137 = HEAP16[$136>>1]|0;
                        $138 = ($137<<16>>16)>(-1);
                        if ($138) {
                            $139 = HEAP32[$112>>2]|0;
                            (_Gif_FullUncompressImage($139,$117,0)|0);
                            $140 = HEAP32[$117>>2]|0;
                            $141 = ($125|0)<($135|0);
                            $142 = ($125|0)<($t$463|0);
                            $or$cond1432 = $141 & $142;
                            L52: do {
                                if ($or$cond1432) {
                                    $143 = HEAP16[$122>>1]|0;
                                    $144 = $143&65535;
                                    $145 = HEAP16[$126>>1]|0;
                                    $146 = ($145<<16>>16)==(0);
                                    $tt3$033 = $125;
                                    while(1) {
                                        $147 = (($tt3$033) - ($144))|0;
                                        $148 = (($140) + ($147<<2)|0);
                                        $149 = HEAP32[$148>>2]|0;
                                        if (!($146)) {
                                            $150 = HEAP16[$136>>1]|0;
                                            $151 = $150 << 16 >> 16;
                                            $x$031 = 0;
                                            while(1) {
                                                $156 = (($149) + ($x$031)|0);
                                                $157 = HEAP8[$156>>0]|0;
                                                $158 = $157&255;
                                                $159 = ($158|0)==($151|0);
                                                $154 = (($x$031) + 1)|0;
                                                if (!($159)) {
                                                    $tt3$024 = $tt3$033;
                                                    break L52;
                                                }
                                                $152 = HEAP16[$126>>1]|0;
                                                $153 = $152&65535;
                                                $155 = ($154|0)<($153|0);
                                                if ($155) {
                                                    $x$031 = $154;
                                                } else {
                                                    break;
                                                }
                                            }
                                        }
                                        $160 = (($tt3$033) + 1)|0;
                                        $161 = ($160|0)<($135|0);
                                        $162 = ($160|0)<($t$463|0);
                                        $or$cond14 = $161 & $162;
                                        if ($or$cond14) {
                                            $tt3$033 = $160;
                                        } else {
                                            $tt3$024 = $160;
                                            break;
                                        }
                                    }
                                } else {
                                    $tt3$024 = $125;
                                }
                            } while(0);
                            $165 = (($tt3$024) + 1)|0;
                            $167 = ($135|0)>($165|0);
                            $168 = ($135|0)>($b$361|0);
                            $or$cond1540 = $167 & $168;
                            L63: do {
                                if ($or$cond1540) {
                                    $169 = HEAP16[$122>>1]|0;
                                    $170 = $169&65535;
                                    $171 = HEAP16[$126>>1]|0;
                                    $172 = ($171<<16>>16)==(0);
                                    $bb5$041 = $135;
                                    while(1) {
                                        $163 = (($bb5$041) + -1)|0;
                                        $173 = (($163) - ($170))|0;
                                        $174 = (($140) + ($173<<2)|0);
                                        $175 = HEAP32[$174>>2]|0;
                                        if (!($172)) {
                                            $176 = HEAP16[$136>>1]|0;
                                            $177 = $176 << 16 >> 16;
                                            $x$137 = 0;
                                            while(1) {
                                                $182 = (($175) + ($x$137)|0);
                                                $183 = HEAP8[$182>>0]|0;
                                                $184 = $183&255;
                                                $185 = ($184|0)==($177|0);
                                                $180 = (($x$137) + 1)|0;
                                                if (!($185)) {
                                                    $bb5$026 = $bb5$041;
                                                    break L63;
                                                }
                                                $178 = HEAP16[$126>>1]|0;
                                                $179 = $178&65535;
                                                $181 = ($180|0)<($179|0);
                                                if ($181) {
                                                    $x$137 = $180;
                                                } else {
                                                    break;
                                                }
                                            }
                                        }
                                        $164 = ($163|0)>($165|0);
                                        $166 = ($163|0)>($b$361|0);
                                        $or$cond15 = $164 & $166;
                                        if ($or$cond15) {
                                            $bb5$041 = $163;
                                        } else {
                                            $bb5$026 = $163;
                                            break;
                                        }
                                    }
                                } else {
                                    $bb5$026 = $135;
                                }
                            } while(0);
                            $186 = ($tt3$024|0)<($bb5$026|0);
                            L74: do {
                                if ($186) {
                                    $187 = ($121|0)<($130|0);
                                    $188 = ($121|0)<($l$467|0);
                                    $or$cond1648 = $187 & $188;
                                    L76: do {
                                        if ($or$cond1648) {
                                            $189 = HEAP16[$122>>1]|0;
                                            $190 = $189&65535;
                                            $191 = (($tt3$024) - ($190))|0;
                                            $192 = $189&65535;
                                            $193 = (($bb5$026) - ($192))|0;
                                            $194 = ($191|0)<($193|0);
                                            $ll2$049 = $121;
                                            while(1) {
                                                if ($194) {
                                                    $195 = HEAP16[$118>>1]|0;
                                                    $196 = $195&65535;
                                                    $197 = (($ll2$049) - ($196))|0;
                                                    $198 = HEAP16[$136>>1]|0;
                                                    $199 = $198 << 16 >> 16;
                                                    $y$044 = $191;
                                                    while(1) {
                                                        $205 = (($140) + ($y$044<<2)|0);
                                                        $206 = HEAP32[$205>>2]|0;
                                                        $207 = (($206) + ($197)|0);
                                                        $208 = HEAP8[$207>>0]|0;
                                                        $209 = $208&255;
                                                        $210 = ($209|0)==($199|0);
                                                        $203 = (($y$044) + 1)|0;
                                                        if (!($210)) {
                                                            $ll2$028 = $ll2$049;
                                                            break L76;
                                                        }
                                                        $200 = HEAP16[$122>>1]|0;
                                                        $201 = $200&65535;
                                                        $202 = (($bb5$026) - ($201))|0;
                                                        $204 = ($203|0)<($202|0);
                                                        if ($204) {
                                                            $y$044 = $203;
                                                        } else {
                                                            break;
                                                        }
                                                    }
                                                }
                                                $211 = (($ll2$049) + 1)|0;
                                                $212 = ($211|0)<($130|0);
                                                $213 = ($211|0)<($l$467|0);
                                                $or$cond16 = $212 & $213;
                                                if ($or$cond16) {
                                                    $ll2$049 = $211;
                                                } else {
                                                    $ll2$028 = $211;
                                                    break;
                                                }
                                            }
                                        } else {
                                            $ll2$028 = $121;
                                        }
                                    } while(0);
                                    $216 = (($ll2$028) + 1)|0;
                                    $218 = ($130|0)>($216|0);
                                    $219 = ($130|0)>($r$464|0);
                                    $or$cond1757 = $218 & $219;
                                    if ($or$cond1757) {
                                        $220 = HEAP16[$122>>1]|0;
                                        $221 = $220&65535;
                                        $222 = (($tt3$024) - ($221))|0;
                                        $223 = $220&65535;
                                        $224 = (($bb5$026) - ($223))|0;
                                        $225 = ($222|0)<($224|0);
                                        $rr4$058 = $130;
                                        while(1) {
                                            $214 = (($rr4$058) + -1)|0;
                                            if ($225) {
                                                $226 = HEAP16[$118>>1]|0;
                                                $227 = $226&65535;
                                                $228 = (($214) - ($227))|0;
                                                $229 = HEAP16[$136>>1]|0;
                                                $230 = $229 << 16 >> 16;
                                                $y$153 = $222;
                                                while(1) {
                                                    $236 = (($140) + ($y$153<<2)|0);
                                                    $237 = HEAP32[$236>>2]|0;
                                                    $238 = (($237) + ($228)|0);
                                                    $239 = HEAP8[$238>>0]|0;
                                                    $240 = $239&255;
                                                    $241 = ($240|0)==($230|0);
                                                    $234 = (($y$153) + 1)|0;
                                                    if (!($241)) {
                                                        $ll2$1 = $ll2$028;$rr4$1 = $rr4$058;
                                                        break L74;
                                                    }
                                                    $231 = HEAP16[$122>>1]|0;
                                                    $232 = $231&65535;
                                                    $233 = (($bb5$026) - ($232))|0;
                                                    $235 = ($234|0)<($233|0);
                                                    if ($235) {
                                                        $y$153 = $234;
                                                    } else {
                                                        break;
                                                    }
                                                }
                                            }
                                            $215 = ($214|0)>($216|0);
                                            $217 = ($214|0)>($r$464|0);
                                            $or$cond17 = $215 & $217;
                                            if ($or$cond17) {
                                                $rr4$058 = $214;
                                            } else {
                                                $ll2$1 = $ll2$028;$rr4$1 = $214;
                                                break;
                                            }
                                        }
                                    } else {
                                        $ll2$1 = $ll2$028;$rr4$1 = $130;
                                    }
                                } else {
                                    $ll2$1 = $121;$rr4$1 = $130;
                                }
                            } while(0);
                            if ($105) {
                                _Gif_ReleaseUncompressedImage($117);
                                $bb5$1 = $bb5$026;$ll2$2 = $ll2$1;$rr4$2 = $rr4$1;$tt3$1 = $tt3$024;
                            } else {
                                $bb5$1 = $bb5$026;$ll2$2 = $ll2$1;$rr4$2 = $rr4$1;$tt3$1 = $tt3$024;
                            }
                        } else {
                            $bb5$1 = $135;$ll2$2 = $121;$rr4$2 = $130;$tt3$1 = $125;
                        }
                        $242 = ($tt3$1|0)<($bb5$1|0);
                        if ($242) {
                            $243 = ($ll2$2|0)<($l$467|0);
                            $ll2$2$l$4 = $243 ? $ll2$2 : $l$467;
                            $244 = ($tt3$1|0)<($t$463|0);
                            $t$5 = $244 ? $tt3$1 : $t$463;
                            $245 = ($rr4$2|0)>($r$464|0);
                            $rr4$2$r$4 = $245 ? $rr4$2 : $r$464;
                            $246 = ($bb5$1|0)>($b$361|0);
                            $bb5$1$b$3 = $246 ? $bb5$1 : $b$361;
                            $b$4 = $bb5$1$b$3;$l$6 = $ll2$2$l$4;$r$6 = $rr4$2$r$4;$t$6 = $t$5;
                        } else {
                            $b$4 = $b$361;$l$6 = $l$467;$r$6 = $r$464;$t$6 = $t$463;
                        }
                    } else {
                        $b$4 = $b$361;$l$6 = $l$467;$r$6 = $r$464;$t$6 = $t$463;
                    }
                    $247 = (($i$269) + 1)|0;
                    $248 = ($247|0)<($nmerger|0);
                    if ($248) {
                        $b$361 = $b$4;$i$269 = $247;$l$467 = $l$6;$r$464 = $r$6;$t$463 = $t$6;
                    } else {
                        $b$3$lcssa = $b$4;$l$4$lcssa = $l$6;$r$4$lcssa = $r$6;$t$4$lcssa = $t$6;
                        break;
                    }
                }
                $249 = ($b$3$lcssa|0)<($t$4$lcssa|0);
                if (!($249)) {
                    HEAP32[$52>>2] = $l$4$lcssa;
                    HEAP32[$56>>2] = $t$4$lcssa;
                    $250 = (($r$4$lcssa) - ($l$4$lcssa))|0;
                    HEAP32[$64>>2] = $250;
                    $251 = (($b$3$lcssa) - ($t$4$lcssa))|0;
                    HEAP32[$72>>2] = $251;
                    STACKTOP = sp;return;
                }
            }
            HEAP32[$72>>2] = 0;
            HEAP32[$64>>2] = 0;
            STACKTOP = sp;return;
        }
        function __ZL23apply_frame_transparentP9Gif_ImageP8Gt_Frame($gfi,$fr) {
            $gfi = $gfi|0;
            $fr = $fr|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $sext$mask = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 20|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1 << 16 >> 16;
            $3 = ((($fr)) + 28|0);
            $4 = HEAP8[$3>>0]|0;
            switch ($4<<24>>24) {
                case -1:  {
                    HEAP16[$0>>1] = -1;
                    return ($2|0);
                    break;
                }
                case 0:  {
                    return ($2|0);
                    break;
                }
                default: {
                    $5 = HEAP32[$fr>>2]|0;
                    $6 = (__ZL19find_color_or_errorP9Gif_ColorP10Gif_StreamP9Gif_ImagePKc($3,$5,$gfi,23256)|0);
                    $7 = $6&65535;
                    HEAP16[$0>>1] = $7;
                    $sext$mask = $6 & 32768;
                    $8 = ($sext$mask|0)==(0);
                    if ($8) {
                        return ($2|0);
                    }
                    HEAP8[$3>>0] = 0;
                    return ($2|0);
                }
            }
            return (0)|0;
        }
        function __ZL26mark_used_background_colorP8Gt_Frame($fr) {
            $fr = $fr|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$fr>>2]|0;
            $1 = ((($fr)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($fr)) + 28|0);
            $4 = HEAP8[$3>>0]|0;
            switch ($4<<24>>24) {
                case 0:  {
                    label = 2;
                    break;
                }
                case -1:  {
                    return;
                    break;
                }
                default: {
                }
            }
            if ((label|0) == 2) {
                $5 = ((($2)) + 20|0);
                $6 = HEAP16[$5>>1]|0;
                $7 = ($6<<16>>16)<(0);
                if (!($7)) {
                    return;
                }
            }
            $8 = ((($fr)) + 64|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = ($9|0)>(-1);
            if ($10) {
                $14 = $9;
            } else {
                $11 = ((($2)) + 18|0);
                $12 = HEAP8[$11>>0]|0;
                $13 = $12&255;
                $14 = $13;
            }
            $15 = ($14|0)==(2);
            if (!($15)) {
                $16 = ((($2)) + 12|0);
                $17 = HEAP16[$16>>1]|0;
                $18 = ($17<<16>>16)==(0);
                if ($18) {
                    $19 = ((($2)) + 14|0);
                    $20 = HEAP16[$19>>1]|0;
                    $21 = ($20<<16>>16)==(0);
                    if ($21) {
                        $22 = ((($2)) + 8|0);
                        $23 = HEAP16[$22>>1]|0;
                        $24 = ((($0)) + 18|0);
                        $25 = HEAP16[$24>>1]|0;
                        $26 = ($23<<16>>16)==($25<<16>>16);
                        if ($26) {
                            $27 = ((($2)) + 10|0);
                            $28 = HEAP16[$27>>1]|0;
                            $29 = ((($0)) + 20|0);
                            $30 = HEAP16[$29>>1]|0;
                            $31 = ($28<<16>>16)==($30<<16>>16);
                            if ($31) {
                                return;
                            }
                        }
                    }
                }
            }
            $32 = ((($0)) + 12|0);
            $33 = HEAP32[$32>>2]|0;
            $34 = ($33|0)==(0|0);
            if ($34) {
                return;
            }
            $35 = ((($0)) + 16|0);
            $36 = HEAP16[$35>>1]|0;
            $37 = $36&65535;
            $38 = HEAP32[$33>>2]|0;
            $39 = ($37|0)<($38|0);
            if (!($39)) {
                return;
            }
            $40 = ((($33)) + 16|0);
            $41 = HEAP32[$40>>2]|0;
            $42 = (($41) + ($37<<3)|0);
            $43 = HEAP8[$42>>0]|0;
            $44 = $43&255;
            $45 = $44 | 1;
            $46 = $45&255;
            HEAP8[$42>>0] = $46;
            return;
        }
        function __ZL14fix_total_cropP10Gif_StreamP9Gif_Imagei($dest,$srci,$merger_index) {
            $dest = $dest|0;
            $srci = $srci|0;
            $merger_index = $merger_index|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $next_fr$0 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[640>>2]|0;
            $1 = (($0) + ($merger_index<<2)|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($dest)) + 4|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)>(0);
            if (!($5)) {
                ___assert_fail((18901|0),(17901|0),1216,(18919|0));
                // unreachable;
            }
            $6 = (($4) + -1)|0;
            $7 = HEAP32[$dest>>2]|0;
            $8 = (($7) + ($6<<2)|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = HEAP32[636>>2]|0;
            $11 = (($10) + -1)|0;
            $12 = ($11|0)>($merger_index|0);
            if ($12) {
                $13 = (($merger_index) + 1)|0;
                $14 = (($0) + ($13<<2)|0);
                $15 = HEAP32[$14>>2]|0;
                $next_fr$0 = $15;
            } else {
                $next_fr$0 = 0;
            }
            $16 = ((($2)) + 24|0);
            $17 = HEAP32[$16>>2]|0;
            $18 = ($17|0)==(0);
            if ($18) {
                $19 = ((($srci)) + 32|0);
                $20 = HEAP32[$19>>2]|0;
                $21 = ($20|0)!=(0|0);
                $22 = ($next_fr$0|0)!=(0|0);
                $or$cond = $22 & $21;
                if ($or$cond) {
                    $23 = ((($next_fr$0)) + 20|0);
                    $24 = HEAP32[$23>>2]|0;
                    $25 = ($24|0)==(0|0);
                    if ($25) {
                        $26 = (_Gif_NewComment()|0);
                        HEAP32[$23>>2] = $26;
                    }
                    $27 = HEAP32[$23>>2]|0;
                    $28 = HEAP32[$19>>2]|0;
                    __Z14merge_commentsP11Gif_CommentS0_($27,$28);
                }
            }
            $29 = ((($2)) + 20|0);
            $30 = HEAP32[$29>>2]|0;
            $31 = ($30|0)!=(0|0);
            $32 = ($next_fr$0|0)!=(0|0);
            $or$cond3 = $32 & $31;
            if ($or$cond3) {
                $33 = ((($next_fr$0)) + 20|0);
                $34 = HEAP32[$33>>2]|0;
                $35 = ($34|0)==(0|0);
                if ($35) {
                    $36 = (_Gif_NewComment()|0);
                    HEAP32[$33>>2] = $36;
                }
                $37 = HEAP32[$33>>2]|0;
                $38 = HEAP32[$29>>2]|0;
                __Z14merge_commentsP11Gif_CommentS0_($37,$38);
                $39 = HEAP32[$29>>2]|0;
                _Gif_DeleteComment($39);
                HEAP32[$29>>2] = 0;
            }
            $40 = ((($2)) + 60|0);
            $41 = HEAP32[$40>>2]|0;
            $42 = ($41|0)<(0);
            if (!($42)) {
                $46 = HEAP32[$40>>2]|0;
                $47 = ((($9)) + 16|0);
                $48 = HEAP16[$47>>1]|0;
                $49 = $48&65535;
                $50 = (($49) + ($46))|0;
                $51 = $50&65535;
                HEAP16[$47>>1] = $51;
                $52 = ((($2)) + 88|0);
                $53 = HEAP8[$52>>0]|0;
                $54 = $53 | 64;
                HEAP8[$52>>0] = $54;
                return;
            }
            $43 = ((($srci)) + 16|0);
            $44 = HEAP16[$43>>1]|0;
            $45 = $44&65535;
            HEAP32[$40>>2] = $45;
            $46 = HEAP32[$40>>2]|0;
            $47 = ((($9)) + 16|0);
            $48 = HEAP16[$47>>1]|0;
            $49 = $48&65535;
            $50 = (($49) + ($46))|0;
            $51 = $50&65535;
            HEAP16[$47>>1] = $51;
            $52 = ((($2)) + 88|0);
            $53 = HEAP8[$52>>0]|0;
            $54 = $53 | 64;
            HEAP8[$52>>0] = $54;
            return;
        }
        function __ZL22handle_flip_and_screenP10Gif_StreamP9Gif_ImageP8Gt_Frame($dest,$desti,$fr) {
            $dest = $dest|0;
            $desti = $desti|0;
            $fr = $fr|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
            var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$fr>>2]|0;
            $1 = ((($fr)) + 52|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($desti)) + 12|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = (($5) + ($2))|0;
            $7 = $6&65535;
            HEAP16[$3>>1] = $7;
            $8 = ((($fr)) + 56|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = ((($desti)) + 14|0);
            $11 = HEAP16[$10>>1]|0;
            $12 = $11&65535;
            $13 = (($12) + ($9))|0;
            $14 = $13&65535;
            HEAP16[$10>>1] = $14;
            $15 = ((($fr)) + 88|0);
            $16 = HEAP8[$15>>0]|0;
            $17 = $16 & 1;
            $18 = ($17<<24>>24)==(0);
            if (!($18)) {
                __Z10flip_imageP9Gif_ImageP8Gt_Framei($desti,$fr,0);
            }
            $19 = HEAP8[$15>>0]|0;
            $20 = $19 & 2;
            $21 = ($20<<24>>24)==(0);
            if (!($21)) {
                __Z10flip_imageP9Gif_ImageP8Gt_Framei($desti,$fr,1);
            }
            $22 = ((($fr)) + 92|0);
            $23 = HEAP32[$22>>2]|0;
            switch ($23|0) {
                case 1:  {
                    __Z12rotate_imageP9Gif_ImageP8Gt_Framei($desti,$fr,1);
                    break;
                }
                case 2:  {
                    __Z10flip_imageP9Gif_ImageP8Gt_Framei($desti,$fr,0);
                    __Z10flip_imageP9Gif_ImageP8Gt_Framei($desti,$fr,1);
                    break;
                }
                case 3:  {
                    __Z12rotate_imageP9Gif_ImageP8Gt_Framei($desti,$fr,3);
                    break;
                }
                default: {
                }
            }
            $24 = HEAP32[$1>>2]|0;
            $25 = HEAP16[$3>>1]|0;
            $26 = $25&65535;
            $27 = (($26) - ($24))|0;
            $28 = $27&65535;
            HEAP16[$3>>1] = $28;
            $29 = HEAP32[$8>>2]|0;
            $30 = HEAP16[$10>>1]|0;
            $31 = $30&65535;
            $32 = (($31) - ($29))|0;
            $33 = $32&65535;
            HEAP16[$10>>1] = $33;
            $34 = HEAP32[$22>>2]|0;
            switch ($34|0) {
                case 3: case 1:  {
                $35 = ((($0)) + 20|0);
                $36 = HEAP16[$35>>1]|0;
                $37 = ((($0)) + 18|0);
                $38 = HEAP16[$37>>1]|0;
                __ZL13handle_screenP10Gif_Streamtt($dest,$36,$38);
                return;
                break;
            }
                default: {
                    $39 = ((($0)) + 18|0);
                    $40 = HEAP16[$39>>1]|0;
                    $41 = ((($0)) + 20|0);
                    $42 = HEAP16[$41>>1]|0;
                    __ZL13handle_screenP10Gif_Streamtt($dest,$40,$42);
                    return;
                }
            }
        }
        function __ZL13handle_screenP10Gif_Streamtt($dest,$width,$height) {
            $dest = $dest|0;
            $width = $width|0;
            $height = $height|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($dest)) + 18|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = ($1&65535)<($width&65535);
            if ($2) {
                HEAP16[$0>>1] = $width;
            }
            $3 = ((($dest)) + 20|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = ($4&65535)<($height&65535);
            if (!($5)) {
                return;
            }
            HEAP16[$3>>1] = $height;
            return;
        }
        function __ZL14set_backgroundP10Gif_StreamP13Gt_OutputData($gfs,$output_data) {
            $gfs = $gfs|0;
            $output_data = $output_data|0;
            var $$mux = 0, $$not = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
            var $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
            var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
            var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
            var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
            var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $background = 0, $brmerge = 0, $conflict$04 = 0;
            var $conflict$1 = 0, $conflict$2 = 0, $conflict$2$lcssa = 0, $i$07 = 0, $j$06 = 0, $j$1 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $want_transparent$0$mux = 0, $want_transparent$05 = 0, $want_transparent$1 = 0, $want_transparent$2 = 0, $want_transparent$2$lcssa = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 48|0;
            $vararg_buffer5 = sp + 32|0;
            $vararg_buffer3 = sp + 24|0;
            $vararg_buffer1 = sp + 16|0;
            $vararg_buffer = sp + 8|0;
            $background = sp;
            $0 = ((($output_data)) + 16|0);
            $1 = HEAP8[$0>>0]|0;
            L1: do {
                switch ($1<<24>>24) {
                    case 2:  {
                        $2 = ((($output_data)) + 20|0);
                        $3 = HEAP32[$2>>2]|0;
                        $4 = $3&65535;
                        $5 = ((($gfs)) + 16|0);
                        HEAP16[$5>>1] = $4;
                        STACKTOP = sp;return;
                        break;
                    }
                    case 0:  {
                        HEAP8[$background>>0] = 0;
                        $23 = HEAP32[636>>2]|0;
                        $24 = ($23|0)>(0);
                        if ($24) {
                            $25 = ((($background)) + 1|0);
                            $26 = ((($background)) + 2|0);
                            $27 = ((($background)) + 3|0);
                            $28 = ((($gfs)) + 18|0);
                            $29 = ((($gfs)) + 20|0);
                            $conflict$04 = 0;$i$07 = 0;$j$06 = 0;$want_transparent$05 = 0;
                            while(1) {
                                $30 = HEAP32[640>>2]|0;
                                $31 = (($30) + ($i$07<<2)|0);
                                $32 = HEAP32[$31>>2]|0;
                                $33 = ((($32)) + 88|0);
                                $34 = HEAP8[$33>>0]|0;
                                $35 = $34 & 64;
                                $36 = ($35<<24>>24)==(0);
                                if ($36) {
                                    $37 = HEAP32[$gfs>>2]|0;
                                    $38 = (($37) + ($j$06<<2)|0);
                                    $39 = HEAP32[$38>>2]|0;
                                    $40 = ((($39)) + 18|0);
                                    $41 = HEAP8[$40>>0]|0;
                                    $42 = ($41<<24>>24)==(2);
                                    if ($42) {
                                        label = 17;
                                    } else {
                                        $43 = ($j$06|0)==(0);
                                        if ($43) {
                                            $44 = ((($39)) + 12|0);
                                            $45 = HEAP16[$44>>1]|0;
                                            $46 = ($45<<16>>16)==(0);
                                            if ($46) {
                                                $47 = ((($39)) + 14|0);
                                                $48 = HEAP16[$47>>1]|0;
                                                $49 = ($48<<16>>16)==(0);
                                                if ($49) {
                                                    $50 = ((($39)) + 8|0);
                                                    $51 = HEAP16[$50>>1]|0;
                                                    $52 = HEAP16[$28>>1]|0;
                                                    $53 = ($51<<16>>16)==($52<<16>>16);
                                                    if ($53) {
                                                        $54 = ((($39)) + 10|0);
                                                        $55 = HEAP16[$54>>1]|0;
                                                        $56 = HEAP16[$29>>1]|0;
                                                        $57 = ($55<<16>>16)==($56<<16>>16);
                                                        if ($57) {
                                                            $conflict$1 = $conflict$04;$want_transparent$1 = $want_transparent$05;
                                                        } else {
                                                            label = 17;
                                                        }
                                                    } else {
                                                        label = 17;
                                                    }
                                                } else {
                                                    label = 17;
                                                }
                                            } else {
                                                label = 17;
                                            }
                                        } else {
                                            $conflict$1 = $conflict$04;$want_transparent$1 = $want_transparent$05;
                                        }
                                    }
                                    do {
                                        if ((label|0) == 17) {
                                            label = 0;
                                            $58 = HEAP32[640>>2]|0;
                                            $59 = (($58) + ($i$07<<2)|0);
                                            $60 = HEAP32[$59>>2]|0;
                                            $61 = ((($60)) + 28|0);
                                            $62 = HEAP8[$61>>0]|0;
                                            $63 = ($62<<24>>24)==(2);
                                            $$not = $63 ^ 1;
                                            $64 = HEAP8[$background>>0]|0;
                                            $65 = ($64<<24>>24)==(0);
                                            $or$cond3 = $65 | $$not;
                                            if ($or$cond3) {
                                                $66 = ($want_transparent$05|0)!=(0);
                                                $or$cond = $66 & $$not;
                                                $brmerge = $63 | $or$cond;
                                                $$mux = $or$cond ? 2 : $conflict$04;
                                                $want_transparent$0$mux = $or$cond ? $want_transparent$05 : 1;
                                                if ($brmerge) {
                                                    $conflict$1 = $$mux;$want_transparent$1 = $want_transparent$0$mux;
                                                } else {
                                                    $67 = ($62<<24>>24)==(0);
                                                    if ($67) {
                                                        $conflict$1 = $conflict$04;$want_transparent$1 = $want_transparent$05;
                                                    } else {
                                                        if (!($65)) {
                                                            $68 = HEAP8[$25>>0]|0;
                                                            $69 = ((($60)) + 29|0);
                                                            $70 = HEAP8[$69>>0]|0;
                                                            $71 = ($68<<24>>24)==($70<<24>>24);
                                                            if (!($71)) {
                                                                $conflict$1 = 1;$want_transparent$1 = $want_transparent$05;
                                                                break;
                                                            }
                                                            $72 = HEAP8[$26>>0]|0;
                                                            $73 = ((($60)) + 30|0);
                                                            $74 = HEAP8[$73>>0]|0;
                                                            $75 = ($72<<24>>24)==($74<<24>>24);
                                                            if (!($75)) {
                                                                $conflict$1 = 1;$want_transparent$1 = $want_transparent$05;
                                                                break;
                                                            }
                                                            $76 = HEAP8[$27>>0]|0;
                                                            $77 = ((($60)) + 31|0);
                                                            $78 = HEAP8[$77>>0]|0;
                                                            $79 = ($76<<24>>24)==($78<<24>>24);
                                                            if (!($79)) {
                                                                $conflict$1 = 1;$want_transparent$1 = $want_transparent$05;
                                                                break;
                                                            }
                                                        }
                                                        $80 = HEAP32[640>>2]|0;
                                                        $81 = (($80) + ($i$07<<2)|0);
                                                        $82 = HEAP32[$81>>2]|0;
                                                        $83 = ((($82)) + 28|0);
                                                        $84 = $83;
                                                        $85 = $84;
                                                        $86 = HEAP32[$85>>2]|0;
                                                        $87 = (($84) + 4)|0;
                                                        $88 = $87;
                                                        $89 = HEAP32[$88>>2]|0;
                                                        $90 = $background;
                                                        $91 = $90;
                                                        HEAP32[$91>>2] = $86;
                                                        $92 = (($90) + 4)|0;
                                                        $93 = $92;
                                                        HEAP32[$93>>2] = $89;
                                                        HEAP8[$background>>0] = 1;
                                                        $conflict$1 = $conflict$04;$want_transparent$1 = $want_transparent$05;
                                                    }
                                                }
                                            } else {
                                                $conflict$1 = 2;$want_transparent$1 = $want_transparent$05;
                                            }
                                        }
                                    } while(0);
                                    $94 = (($j$06) + 1)|0;
                                    $conflict$2 = $conflict$1;$j$1 = $94;$want_transparent$2 = $want_transparent$1;
                                } else {
                                    $conflict$2 = $conflict$04;$j$1 = $j$06;$want_transparent$2 = $want_transparent$05;
                                }
                                $95 = (($i$07) + 1)|0;
                                $96 = HEAP32[636>>2]|0;
                                $97 = ($95|0)<($96|0);
                                if ($97) {
                                    $conflict$04 = $conflict$2;$i$07 = $95;$j$06 = $j$1;$want_transparent$05 = $want_transparent$2;
                                } else {
                                    $conflict$2$lcssa = $conflict$2;$want_transparent$2$lcssa = $want_transparent$2;
                                    break;
                                }
                            }
                            $98 = ($conflict$2$lcssa|0)==(0);
                            if ($98) {
                                $99 = ($want_transparent$2$lcssa|0)==(0);
                                if (!($99)) {
                                    $100 = HEAP32[$gfs>>2]|0;
                                    $101 = HEAP32[$100>>2]|0;
                                    $102 = ((($101)) + 20|0);
                                    $103 = HEAP16[$102>>1]|0;
                                    $104 = ($103<<16>>16)<(0);
                                    if ($104) {
                                        label = 30;
                                    }
                                }
                            } else {
                                label = 30;
                            }
                            do {
                                if ((label|0) == 30) {
                                    $105 = HEAP32[648>>2]|0;
                                    $106 = ($105|0)==(0);
                                    if ($106) {
                                        __Z7warningiPKcz(1,18699,$vararg_buffer3);
                                        HEAP32[648>>2] = 1;
                                        break;
                                    } else {
                                        __Z7warningiPKcz(1,18806,$vararg_buffer5);
                                        break;
                                    }
                                }
                            } while(0);
                            $$pr = HEAP8[$background>>0]|0;
                            $107 = ($$pr<<24>>24)==(0);
                            if (!($107)) {
                                break L1;
                            }
                        }
                        $108 = ((($gfs)) + 16|0);
                        HEAP16[$108>>1] = 0;
                        STACKTOP = sp;return;
                        break;
                    }
                    default: {
                        $6 = HEAP32[$gfs>>2]|0;
                        $7 = HEAP32[$6>>2]|0;
                        $8 = ((($7)) + 20|0);
                        $9 = HEAP16[$8>>1]|0;
                        $10 = ($9<<16>>16)>(-1);
                        do {
                            if ($10) {
                                $11 = HEAP32[644>>2]|0;
                                $12 = ($11|0)==(0);
                                if ($12) {
                                    __Z7warningiPKcz(1,18552,$vararg_buffer);
                                    HEAP32[644>>2] = 1;
                                    break;
                                } else {
                                    __Z7warningiPKcz(1,18671,$vararg_buffer1);
                                    break;
                                }
                            }
                        } while(0);
                        $13 = $0;
                        $14 = $13;
                        $15 = HEAP32[$14>>2]|0;
                        $16 = (($13) + 4)|0;
                        $17 = $16;
                        $18 = HEAP32[$17>>2]|0;
                        $19 = $background;
                        $20 = $19;
                        HEAP32[$20>>2] = $15;
                        $21 = (($19) + 4)|0;
                        $22 = $21;
                        HEAP32[$22>>2] = $18;
                    }
                }
            } while(0);
            $109 = (__ZL19find_color_or_errorP9Gif_ColorP10Gif_StreamP9Gif_ImagePKc($background,$gfs,0,20849)|0);
            $110 = ($109|0)<(0);
            $111 = $109&65535;
            $112 = $110 ? 0 : $111;
            $113 = ((($gfs)) + 16|0);
            HEAP16[$113>>1] = $112;
            STACKTOP = sp;return;
        }
        function __ZL19find_color_or_errorP9Gif_ColorP10Gif_StreamP9Gif_ImagePKc($color,$gfs,$gfi,$color_context) {
            $color = $color|0;
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $color_context = $color_context|0;
            var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
            var $8 = 0, $9 = 0, $gfcm$0 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = ((($gfs)) + 12|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($gfi|0)==(0|0);
            if ($2) {
                $gfcm$0 = $1;
            } else {
                $3 = ((($gfi)) + 24|0);
                $4 = HEAP32[$3>>2]|0;
                $5 = ($4|0)==(0|0);
                $$ = $5 ? $1 : $4;
                $gfcm$0 = $$;
            }
            $6 = HEAP8[$color>>0]|0;
            $7 = ($6<<24>>24)==(2);
            if (!($7)) {
                $15 = (_Gif_FindColor($gfcm$0,$color)|0);
                $16 = ($15|0)<(0);
                $17 = ($color_context|0)!=(0|0);
                $or$cond = $17 & $16;
                if (!($or$cond)) {
                    $$0 = $15;
                    STACKTOP = sp;return ($$0|0);
                }
                $18 = ((($gfs)) + 44|0);
                $19 = HEAP32[$18>>2]|0;
                HEAP32[$vararg_buffer1>>2] = $color_context;
                __Z8lwarningPKcS0_z($19,18876,$vararg_buffer1);
                $$0 = $15;
                STACKTOP = sp;return ($$0|0);
            }
            $8 = ((($color)) + 4|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = HEAP32[$gfcm$0>>2]|0;
            $11 = ($9>>>0)<($10>>>0);
            if ($11) {
                $$0 = $9;
                STACKTOP = sp;return ($$0|0);
            }
            $12 = ($color_context|0)==(0|0);
            if ($12) {
                $$0 = -1;
                STACKTOP = sp;return ($$0|0);
            }
            $13 = ((($gfs)) + 44|0);
            $14 = HEAP32[$13>>2]|0;
            HEAP32[$vararg_buffer>>2] = $color_context;
            __Z8lwarningPKcS0_z($14,18854,$vararg_buffer);
            $$0 = -1;
            STACKTOP = sp;return ($$0|0);
        }
        function __ZL9constrainiii191($low,$x,$high) {
            $low = $low|0;
            $x = $x|0;
            $high = $high|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($x|0)<($low|0);
            $1 = ($x|0)<($high|0);
            $2 = $1 ? $x : $high;
            $3 = $0 ? $low : $2;
            return ($3|0);
        }
        function __ZL10merger_addP8Gt_Frame($fp) {
            $fp = $fp|0;
            var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[636>>2]|0;
            $1 = HEAP32[652>>2]|0;
            $2 = ($0|0)<($1|0);
            if ($2) {
                $$lcssa = $0;
            } else {
                $3 = $1;
                while(1) {
                    $4 = ($3|0)==(0);
                    if ($4) {
                        HEAP32[652>>2] = 16;
                        $8 = (_Gif_Realloc(0,4,16,17901,1064)|0);
                        $storemerge = $8;
                    } else {
                        $5 = $3 << 1;
                        HEAP32[652>>2] = $5;
                        $6 = HEAP32[640>>2]|0;
                        $7 = (_Gif_Realloc($6,4,$5,17901,1061)|0);
                        $storemerge = $7;
                    }
                    HEAP32[640>>2] = $storemerge;
                    $9 = HEAP32[636>>2]|0;
                    $10 = HEAP32[652>>2]|0;
                    $11 = ($9|0)<($10|0);
                    if ($11) {
                        $$lcssa = $9;
                        break;
                    } else {
                        $3 = $10;
                    }
                }
            }
            $12 = (($$lcssa) + 1)|0;
            HEAP32[636>>2] = $12;
            $13 = HEAP32[640>>2]|0;
            $14 = (($13) + ($$lcssa<<2)|0);
            HEAP32[$14>>2] = $fp;
            return;
        }
        function __ZL6xvaluec($c) {
            $c = $c|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = $c << 24 >> 24;
            switch ($0|0) {
                case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
                $1 = (($0) + -48)|0;
                $$0 = $1;
                break;
            }
                case 70: case 69: case 68: case 67: case 66: case 65:  {
                $2 = (($0) + -55)|0;
                $$0 = $2;
                break;
            }
                case 102: case 101: case 100: case 99: case 98: case 97:  {
                $3 = (($0) + -87)|0;
                $$0 = $3;
                break;
            }
                default: {
                    $$0 = -1;
                }
            }
            return ($$0|0);
        }
        function __ZL9safe_putsPKcjP8_IO_FILE($s,$len,$f) {
            $s = $s|0;
            $len = $len|0;
            $f = $f|0;
            var $$016 = 0, $$08 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $last_safe$05 = 0, $last_safe$1 = 0, $last_safe$1$lcssa = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $0 = ($len|0)==(0);
            if ($0) {
                STACKTOP = sp;return;
            } else {
                $$016 = $len;$$08 = $s;$last_safe$05 = $s;
            }
            L3: while(1) {
                $1 = HEAP8[$$08>>0]|0;
                $2 = ($1<<24>>24)<(32);
                if ($2) {
                    label = 4;
                } else {
                    switch ($1<<24>>24) {
                        case 92: case 127:  {
                        label = 4;
                        break;
                    }
                        default: {
                            $last_safe$1 = $last_safe$05;
                        }
                    }
                }
                L7: do {
                    if ((label|0) == 4) {
                        label = 0;
                        $3 = ($last_safe$05|0)==($$08|0);
                        if (!($3)) {
                            $4 = $$08;
                            $5 = $last_safe$05;
                            $6 = (($4) - ($5))|0;
                            $7 = (_fwrite($last_safe$05,1,$6,$f)|0);
                            $8 = ($7|0)==($6|0);
                            if (!($8)) {
                                label = 21;
                                break L3;
                            }
                        }
                        $9 = ((($$08)) + 1|0);
                        $10 = HEAP8[$$08>>0]|0;
                        $11 = $10 << 24 >> 24;
                        do {
                            switch ($11|0) {
                                case 7:  {
                                    (_fwrite(19252,2,1,$f)|0);
                                    $last_safe$1 = $9;
                                    break L7;
                                    break;
                                }
                                case 8:  {
                                    (_fwrite(19255,2,1,$f)|0);
                                    $last_safe$1 = $9;
                                    break L7;
                                    break;
                                }
                                case 12:  {
                                    (_fwrite(19258,2,1,$f)|0);
                                    $last_safe$1 = $9;
                                    break L7;
                                    break;
                                }
                                case 10:  {
                                    (_fwrite(19261,2,1,$f)|0);
                                    $last_safe$1 = $9;
                                    break L7;
                                    break;
                                }
                                case 13:  {
                                    (_fwrite(19264,2,1,$f)|0);
                                    $last_safe$1 = $9;
                                    break L7;
                                    break;
                                }
                                case 9:  {
                                    (_fwrite(19267,2,1,$f)|0);
                                    $last_safe$1 = $9;
                                    break L7;
                                    break;
                                }
                                case 11:  {
                                    (_fwrite(19270,2,1,$f)|0);
                                    $last_safe$1 = $9;
                                    break L7;
                                    break;
                                }
                                case 92:  {
                                    (_fwrite(19273,2,1,$f)|0);
                                    $last_safe$1 = $9;
                                    break L7;
                                    break;
                                }
                                case 0:  {
                                    $12 = ($$016>>>0)>(1);
                                    if (!($12)) {
                                        label = 21;
                                        break L3;
                                    }
                                    (_fwrite(19276,4,1,$f)|0);
                                    $last_safe$1 = $9;
                                    break L7;
                                    break;
                                }
                                default: {
                                    $13 = $10&255;
                                    HEAP32[$vararg_buffer>>2] = $13;
                                    (_fprintf($f,19281,$vararg_buffer)|0);
                                    $last_safe$1 = $9;
                                    break L7;
                                }
                            }
                        } while(0);
                    }
                } while(0);
                $14 = (($$016) + -1)|0;
                $15 = ((($$08)) + 1|0);
                $16 = ($14|0)==(0);
                if ($16) {
                    $$lcssa = $15;$last_safe$1$lcssa = $last_safe$1;
                    label = 19;
                    break;
                } else {
                    $$016 = $14;$$08 = $15;$last_safe$05 = $last_safe$1;
                }
            }
            if ((label|0) == 19) {
                $17 = ($last_safe$1$lcssa|0)==($$lcssa|0);
                if ($17) {
                    STACKTOP = sp;return;
                }
                $18 = $$lcssa;
                $19 = $last_safe$1$lcssa;
                $20 = (($18) - ($19))|0;
                (_fwrite($last_safe$1$lcssa,1,$20,$f)|0);
                STACKTOP = sp;return;
            }
            else if ((label|0) == 21) {
                STACKTOP = sp;return;
            }
        }
        function __Z22append_color_transformP17Gt_ColorTransformPFvP12Gif_ColormapPvES3_($list,$func,$data) {
            $list = $list|0;
            $func = $func|0;
            $data = $data|0;
            var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $trav$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Gif_Realloc(0,16,1,19372,42)|0);
            $1 = ((($0)) + 4|0);
            HEAP32[$1>>2] = 0;
            $2 = ((($0)) + 8|0);
            HEAP32[$2>>2] = $func;
            $3 = ((($0)) + 12|0);
            HEAP32[$3>>2] = $data;
            $trav$0 = $list;
            while(1) {
                $4 = ($trav$0|0)==(0|0);
                if ($4) {
                    $$0 = $0;
                    label = 5;
                    break;
                }
                $5 = ((($trav$0)) + 4|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = ($6|0)==(0|0);
                if ($7) {
                    $$lcssa = $5;
                    break;
                } else {
                    $trav$0 = $6;
                }
            }
            if ((label|0) == 5) {
                return ($$0|0);
            }
            HEAP32[$$lcssa>>2] = $0;
            $$0 = $list;
            return ($$0|0);
        }
        function __Z23delete_color_transformsP17Gt_ColorTransformPFvP12Gif_ColormapPvE($list,$func) {
            $list = $list|0;
            $func = $func|0;
            var $$0$lcssa = 0, $$0$ph8 = 0, $$04 = 0, $$04$lcssa = 0, $$1 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prev$0$ph6 = 0, $trav$0$ph7 = 0, $trav$03 = 0, $trav$03$lcssa = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($list|0)==(0|0);
            if ($0) {
                $$0$lcssa = 0;
                return ($$0$lcssa|0);
            } else {
                $$0$ph8 = $list;$prev$0$ph6 = 0;$trav$0$ph7 = $list;
            }
            L3: while(1) {
                $2 = ($prev$0$ph6|0)==(0|0);
                $3 = ((($prev$0$ph6)) + 4|0);
                $$04 = $$0$ph8;$trav$03 = $trav$0$ph7;
                while(1) {
                    $4 = ((($trav$03)) + 4|0);
                    $5 = HEAP32[$4>>2]|0;
                    $6 = ((($trav$03)) + 8|0);
                    $7 = HEAP32[$6>>2]|0;
                    $8 = ($7|0)==($func|0);
                    if (!($8)) {
                        $$04$lcssa = $$04;$$lcssa = $5;$trav$03$lcssa = $trav$03;
                        break;
                    }
                    if ($2) {
                        $$1 = $5;
                    } else {
                        HEAP32[$3>>2] = $5;
                        $$1 = $$04;
                    }
                    _free($trav$03);
                    $9 = ($5|0)==(0|0);
                    if ($9) {
                        $$0$lcssa = $$1;
                        label = 8;
                        break L3;
                    } else {
                        $$04 = $$1;$trav$03 = $5;
                    }
                }
                $1 = ($$lcssa|0)==(0|0);
                if ($1) {
                    $$0$lcssa = $$04$lcssa;
                    label = 8;
                    break;
                } else {
                    $$0$ph8 = $$04$lcssa;$prev$0$ph6 = $trav$03$lcssa;$trav$0$ph7 = $$lcssa;
                }
            }
            if ((label|0) == 8) {
                return ($$0$lcssa|0);
            }
            return (0)|0;
        }
        function __Z22apply_color_transformsP17Gt_ColorTransformP10Gif_Stream($list,$gfs) {
            $list = $list|0;
            $gfs = $gfs|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $xform$02 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($list|0)==(0|0);
            if ($0) {
                return;
            }
            $1 = ((($gfs)) + 12|0);
            $2 = ((($gfs)) + 4|0);
            $xform$02 = $list;
            while(1) {
                $3 = HEAP32[$1>>2]|0;
                $4 = ($3|0)==(0|0);
                if (!($4)) {
                    $5 = ((($xform$02)) + 8|0);
                    $6 = HEAP32[$5>>2]|0;
                    $7 = ((($xform$02)) + 12|0);
                    $8 = HEAP32[$7>>2]|0;
                    FUNCTION_TABLE_vii[$6 & 7]($3,$8);
                }
                $9 = HEAP32[$2>>2]|0;
                $10 = ($9|0)>(0);
                if ($10) {
                    $11 = ((($xform$02)) + 8|0);
                    $12 = ((($xform$02)) + 12|0);
                    $i$01 = 0;
                    while(1) {
                        $13 = HEAP32[$gfs>>2]|0;
                        $14 = (($13) + ($i$01<<2)|0);
                        $15 = HEAP32[$14>>2]|0;
                        $16 = ((($15)) + 24|0);
                        $17 = HEAP32[$16>>2]|0;
                        $18 = ($17|0)==(0|0);
                        if (!($18)) {
                            $19 = HEAP32[$11>>2]|0;
                            $20 = HEAP32[$12>>2]|0;
                            FUNCTION_TABLE_vii[$19 & 7]($17,$20);
                        }
                        $21 = (($i$01) + 1)|0;
                        $22 = HEAP32[$2>>2]|0;
                        $23 = ($21|0)<($22|0);
                        if ($23) {
                            $i$01 = $21;
                        } else {
                            break;
                        }
                    }
                }
                $24 = ((($xform$02)) + 4|0);
                $25 = HEAP32[$24>>2]|0;
                $26 = ($25|0)==(0|0);
                if ($26) {
                    break;
                } else {
                    $xform$02 = $25;
                }
            }
            return;
        }
        function __Z24color_change_transformerP12Gif_ColormapPv($gfcm,$thunk) {
            $gfcm = $gfcm|0;
            $thunk = $thunk|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $change$03 = 0, $change$03$lcssa = 0, $i$05 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$gfcm>>2]|0;
            $1 = ($0|0)>(0);
            if (!($1)) {
                return;
            }
            $2 = ($thunk|0)==(0|0);
            $3 = ((($gfcm)) + 16|0);
            $4 = ((($gfcm)) + 16|0);
            $i$05 = 0;
            while(1) {
                L6: do {
                    if (!($2)) {
                        $change$03 = $thunk;
                        while(1) {
                            $5 = ((($change$03)) + 4|0);
                            $6 = HEAP8[$5>>0]|0;
                            $7 = ($6<<24>>24)==(0);
                            if ($7) {
                                $8 = HEAP32[$3>>2]|0;
                                $9 = (((($8) + ($i$05<<3)|0)) + 1|0);
                                $10 = HEAP8[$9>>0]|0;
                                $11 = ((($change$03)) + 5|0);
                                $12 = HEAP8[$11>>0]|0;
                                $13 = ($10<<24>>24)==($12<<24>>24);
                                if ($13) {
                                    $14 = (((($8) + ($i$05<<3)|0)) + 2|0);
                                    $15 = HEAP8[$14>>0]|0;
                                    $16 = ((($change$03)) + 6|0);
                                    $17 = HEAP8[$16>>0]|0;
                                    $18 = ($15<<24>>24)==($17<<24>>24);
                                    if ($18) {
                                        $22 = (((($8) + ($i$05<<3)|0)) + 3|0);
                                        $23 = HEAP8[$22>>0]|0;
                                        $24 = ((($change$03)) + 7|0);
                                        $25 = HEAP8[$24>>0]|0;
                                        $26 = ($23<<24>>24)==($25<<24>>24);
                                        if ($26) {
                                            $change$03$lcssa = $change$03;
                                            break;
                                        }
                                    }
                                }
                            } else {
                                $19 = ((($change$03)) + 8|0);
                                $20 = HEAP32[$19>>2]|0;
                                $21 = ($20|0)==($i$05|0);
                                if ($21) {
                                    $change$03$lcssa = $change$03;
                                    break;
                                }
                            }
                            $40 = HEAP32[$change$03>>2]|0;
                            $41 = ($40|0)==(0|0);
                            if ($41) {
                                break L6;
                            } else {
                                $change$03 = $40;
                            }
                        }
                        $27 = HEAP32[$4>>2]|0;
                        $28 = (($27) + ($i$05<<3)|0);
                        $29 = ((($change$03$lcssa)) + 12|0);
                        $30 = $29;
                        $31 = $30;
                        $32 = HEAP32[$31>>2]|0;
                        $33 = (($30) + 4)|0;
                        $34 = $33;
                        $35 = HEAP32[$34>>2]|0;
                        $36 = $28;
                        $37 = $36;
                        HEAP32[$37>>2] = $32;
                        $38 = (($36) + 4)|0;
                        $39 = $38;
                        HEAP32[$39>>2] = $35;
                    }
                } while(0);
                $42 = (($i$05) + 1)|0;
                $43 = HEAP32[$gfcm>>2]|0;
                $44 = ($42|0)<($43|0);
                if ($44) {
                    $i$05 = $42;
                } else {
                    break;
                }
            }
            return;
        }
        function __Z19append_color_changeP17Gt_ColorTransform9Gif_ColorS1_($list,$old_color,$new_color) {
            $list = $list|0;
            $old_color = $old_color|0;
            $new_color = $new_color|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prev$0 = 0, $prev$0$lcssa = 0, $xform$0 = 0, $xform$0$lcssa7 = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_Gif_Realloc(0,20,1,19372,121)|0);
            $1 = ((($0)) + 4|0);
            $2 = $old_color;
            $3 = $2;
            $4 = HEAP32[$3>>2]|0;
            $5 = (($2) + 4)|0;
            $6 = $5;
            $7 = HEAP32[$6>>2]|0;
            $8 = $1;
            $9 = $8;
            HEAP32[$9>>2] = $4;
            $10 = (($8) + 4)|0;
            $11 = $10;
            HEAP32[$11>>2] = $7;
            $12 = ((($0)) + 12|0);
            $13 = $new_color;
            $14 = $13;
            $15 = HEAP32[$14>>2]|0;
            $16 = (($13) + 4)|0;
            $17 = $16;
            $18 = HEAP32[$17>>2]|0;
            $19 = $12;
            $20 = $19;
            HEAP32[$20>>2] = $15;
            $21 = (($19) + 4)|0;
            $22 = $21;
            HEAP32[$22>>2] = $18;
            HEAP32[$0>>2] = 0;
            $xform$0 = $list;
            while(1) {
                $23 = ($xform$0|0)==(0|0);
                if ($23) {
                    break;
                }
                $24 = ((($xform$0)) + 4|0);
                $25 = HEAP32[$24>>2]|0;
                $26 = ($25|0)==(0|0);
                if ($26) {
                    $xform$0$lcssa7 = $xform$0;
                    label = 4;
                    break;
                } else {
                    $xform$0 = $25;
                }
            }
            if ((label|0) == 4) {
                $27 = ((($xform$0$lcssa7)) + 8|0);
                $28 = HEAP32[$27>>2]|0;
                $29 = ($28|0)==(1|0);
                if ($29) {
                    $31 = ((($xform$0$lcssa7)) + 12|0);
                    $32 = HEAP32[$31>>2]|0;
                    $prev$0 = $32;
                    while(1) {
                        $33 = HEAP32[$prev$0>>2]|0;
                        $34 = ($33|0)==(0|0);
                        if ($34) {
                            $prev$0$lcssa = $prev$0;
                            break;
                        } else {
                            $prev$0 = $33;
                        }
                    }
                    HEAP32[$prev$0$lcssa>>2] = $0;
                    $$0 = $list;
                    return ($$0|0);
                }
            }
            $30 = (__Z22append_color_transformP17Gt_ColorTransformPFvP12Gif_ColormapPvES3_($list,1,$0)|0);
            $$0 = $30;
            return ($$0|0);
        }
        function __Z22pipe_color_transformerP12Gif_ColormapPv($gfcm,$thunk) {
            $gfcm = $gfcm|0;
            $thunk = $thunk|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
            var $exitcond = 0, $i$02 = 0, $i$11 = 0, $nc$0 = 0, $new_cm$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 96|0;
            $vararg_buffer24 = sp + 80|0;
            $vararg_buffer22 = sp + 72|0;
            $vararg_buffer20 = sp + 64|0;
            $vararg_buffer17 = sp + 56|0;
            $vararg_buffer15 = sp + 48|0;
            $vararg_buffer12 = sp + 40|0;
            $vararg_buffer7 = sp + 24|0;
            $vararg_buffer4 = sp + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = ((($gfcm)) + 16|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = (_tmpnam(0)|0);
            $3 = ($2|0)==(0|0);
            if ($3) {
                __Z11fatal_errorPKcz(19382,$vararg_buffer);
                // unreachable;
            }
            $4 = (_strlen($thunk)|0);
            $5 = (_strlen($2)|0);
            $6 = (($4) + 4)|0;
            $7 = (($6) + ($5))|0;
            $8 = (_Gif_Realloc(0,1,$7,19372,170)|0);
            HEAP32[$vararg_buffer1>>2] = $thunk;
            $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
            HEAP32[$vararg_ptr3>>2] = $2;
            (_sprintf($8,19412,$vararg_buffer1)|0);
            $9 = (__popen(($8|0),(23443|0))|0);
            $10 = ($9|0)==(0|0);
            if ($10) {
                $11 = (___errno_location()|0);
                $12 = HEAP32[$11>>2]|0;
                $13 = (_strerror($12)|0);
                HEAP32[$vararg_buffer4>>2] = $13;
                __Z11fatal_errorPKcz(19420,$vararg_buffer4);
                // unreachable;
            }
            _free($8);
            $14 = HEAP32[$gfcm>>2]|0;
            $15 = ($14|0)>(0);
            if ($15) {
                $i$02 = 0;
                while(1) {
                    $16 = (((($1) + ($i$02<<3)|0)) + 1|0);
                    $17 = HEAP8[$16>>0]|0;
                    $18 = $17&255;
                    $19 = (((($1) + ($i$02<<3)|0)) + 2|0);
                    $20 = HEAP8[$19>>0]|0;
                    $21 = $20&255;
                    $22 = (((($1) + ($i$02<<3)|0)) + 3|0);
                    $23 = HEAP8[$22>>0]|0;
                    $24 = $23&255;
                    HEAP32[$vararg_buffer7>>2] = $18;
                    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
                    HEAP32[$vararg_ptr10>>2] = $21;
                    $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
                    HEAP32[$vararg_ptr11>>2] = $24;
                    (_fprintf($9,19464,$vararg_buffer7)|0);
                    $25 = (($i$02) + 1)|0;
                    $26 = HEAP32[$gfcm>>2]|0;
                    $27 = ($25|0)<($26|0);
                    if ($27) {
                        $i$02 = $25;
                    } else {
                        break;
                    }
                }
            }
            $28 = (___errno_location()|0);
            HEAP32[$28>>2] = 0;
            $29 = (__pclose(($9|0))|0);
            $30 = ($29|0)<(0);
            if ($30) {
                $31 = HEAP32[$28>>2]|0;
                $32 = (_strerror($31)|0);
                HEAP32[$vararg_buffer12>>2] = $32;
                __Z5erroriPKcz(1,19474,$vararg_buffer12);
                $new_cm$0 = 0;
                (_remove($2)|0);
                _Gif_DeleteColormap($new_cm$0);
                STACKTOP = sp;return;
            }
            $33 = ($29|0)>(0);
            if ($33) {
                __Z5erroriPKcz(1,19505,$vararg_buffer15);
                $new_cm$0 = 0;
                (_remove($2)|0);
                _Gif_DeleteColormap($new_cm$0);
                STACKTOP = sp;return;
            }
            $34 = (_fopen($2,19541)|0);
            $35 = ($34|0)==(0|0);
            if ($35) {
                HEAP32[$vararg_buffer24>>2] = $thunk;
                __Z5erroriPKcz(1,19543,$vararg_buffer24);
                $new_cm$0 = 0;
                (_remove($2)|0);
                _Gif_DeleteColormap($new_cm$0);
                STACKTOP = sp;return;
            }
            $36 = (_feof($34)|0);
            $37 = ($36|0)==(0);
            if (!($37)) {
                HEAP32[$vararg_buffer17>>2] = $thunk;
                __Z5erroriPKcz(1,19543,$vararg_buffer17);
                (_fclose($34)|0);
                $new_cm$0 = 0;
                (_remove($2)|0);
                _Gif_DeleteColormap($new_cm$0);
                STACKTOP = sp;return;
            }
            $38 = (__Z18read_colormap_filePKcP8_IO_FILE(19592,$34)|0);
            (_fclose($34)|0);
            $39 = ($38|0)==(0|0);
            if ($39) {
                $new_cm$0 = 0;
                (_remove($2)|0);
                _Gif_DeleteColormap($new_cm$0);
                STACKTOP = sp;return;
            }
            $40 = HEAP32[$38>>2]|0;
            $41 = HEAP32[$gfcm>>2]|0;
            $42 = ($40|0)<($41|0);
            if ($42) {
                __Z7warningiPKcz(1,19615,$vararg_buffer20);
                $nc$0 = $41;
            } else {
                $43 = ($40|0)>($41|0);
                if ($43) {
                    __Z7warningiPKcz(1,19662,$vararg_buffer22);
                    $nc$0 = $40;
                } else {
                    $nc$0 = $40;
                }
            }
            $44 = ($nc$0|0)>(0);
            if (!($44)) {
                $new_cm$0 = $38;
                (_remove($2)|0);
                _Gif_DeleteColormap($new_cm$0);
                STACKTOP = sp;return;
            }
            $45 = ((($38)) + 16|0);
            $i$11 = 0;
            while(1) {
                $46 = HEAP32[$45>>2]|0;
                $47 = (($1) + ($i$11<<3)|0);
                $48 = (($46) + ($i$11<<3)|0);
                $49 = $48;
                $50 = $49;
                $51 = HEAP32[$50>>2]|0;
                $52 = (($49) + 4)|0;
                $53 = $52;
                $54 = HEAP32[$53>>2]|0;
                $55 = $47;
                $56 = $55;
                HEAP32[$56>>2] = $51;
                $57 = (($55) + 4)|0;
                $58 = $57;
                HEAP32[$58>>2] = $54;
                $59 = (($i$11) + 1)|0;
                $exitcond = ($59|0)==($nc$0|0);
                if ($exitcond) {
                    $new_cm$0 = $38;
                    break;
                } else {
                    $i$11 = $59;
                }
            }
            (_remove($2)|0);
            _Gif_DeleteColormap($new_cm$0);
            STACKTOP = sp;return;
        }
        function __Z12combine_cropP7Gt_CropPKS_PK9Gif_Image($dstcrop,$srccrop,$gfi) {
            $dstcrop = $dstcrop|0;
            $srccrop = $srccrop|0;
            $gfi = $gfi|0;
            var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
            var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
            var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($srccrop)) + 24|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($gfi)) + 12|0);
            $3 = HEAP16[$2>>1]|0;
            $4 = $3&65535;
            $5 = (($1) - ($4))|0;
            $6 = ((($srccrop)) + 32|0);
            $7 = HEAP32[$6>>2]|0;
            $8 = (($5) + ($7))|0;
            $9 = ((($srccrop)) + 28|0);
            $10 = HEAP32[$9>>2]|0;
            $11 = ((($gfi)) + 14|0);
            $12 = HEAP16[$11>>1]|0;
            $13 = $12&65535;
            $14 = (($10) - ($13))|0;
            $15 = ((($srccrop)) + 36|0);
            $16 = HEAP32[$15>>2]|0;
            $17 = (($14) + ($16))|0;
            $18 = ($5|0)>(0);
            $19 = $18 ? $5 : 0;
            $20 = ((($gfi)) + 8|0);
            $21 = HEAP16[$20>>1]|0;
            $22 = $21&65535;
            $23 = ($8|0)<($22|0);
            $$ = $23 ? $8 : $22;
            $24 = ($14|0)>(0);
            $25 = $24 ? $14 : 0;
            $26 = ((($gfi)) + 10|0);
            $27 = HEAP16[$26>>1]|0;
            $28 = $27&65535;
            $29 = ($17|0)<($28|0);
            $30 = $29 ? $17 : $28;
            $31 = ($$|0)>($19|0);
            if ($31) {
                $32 = ((($dstcrop)) + 24|0);
                HEAP32[$32>>2] = $19;
                $33 = (($$) - ($19))|0;
                $34 = ((($dstcrop)) + 32|0);
                HEAP32[$34>>2] = $33;
            } else {
                $35 = ($5|0)<(1);
                $36 = (($7) + -1)|0;
                $$1 = $35 ? 0 : $36;
                $37 = ((($srccrop)) + 40|0);
                $38 = HEAP32[$37>>2]|0;
                $39 = HEAP16[$2>>1]|0;
                $40 = $39&65535;
                $41 = (($38) + ($$1))|0;
                $42 = (($41) - ($40))|0;
                $43 = ((($dstcrop)) + 24|0);
                HEAP32[$43>>2] = $42;
                $44 = ((($dstcrop)) + 32|0);
                HEAP32[$44>>2] = 0;
            }
            $45 = ($30|0)>($25|0);
            if ($45) {
                $46 = ((($dstcrop)) + 28|0);
                HEAP32[$46>>2] = $25;
                $47 = (($30) - ($25))|0;
                $48 = ((($dstcrop)) + 36|0);
                HEAP32[$48>>2] = $47;
                return;
            }
            $49 = ($14|0)<(1);
            if ($49) {
                $57 = 0;
            } else {
                $50 = HEAP32[$15>>2]|0;
                $51 = (($50) + -1)|0;
                $57 = $51;
            }
            $52 = ((($srccrop)) + 44|0);
            $53 = HEAP32[$52>>2]|0;
            $54 = HEAP16[$11>>1]|0;
            $55 = $54&65535;
            $56 = (($53) + ($57))|0;
            $58 = (($56) - ($55))|0;
            $59 = ((($dstcrop)) + 28|0);
            HEAP32[$59>>2] = $58;
            $60 = ((($dstcrop)) + 36|0);
            HEAP32[$60>>2] = 0;
            return;
        }
        function __Z10crop_imageP9Gif_ImageP8Gt_Framei($gfi,$fr,$preserve_total_crop) {
            $gfi = $gfi|0;
            $fr = $fr|0;
            $preserve_total_crop = $preserve_total_crop|0;
            var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $j$02 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 48|0;
            $c = sp;
            $0 = ((($fr)) + 48|0);
            $1 = HEAP32[$0>>2]|0;
            __Z12combine_cropP7Gt_CropPKS_PK9Gif_Image($c,$1,$gfi);
            $2 = HEAP32[$0>>2]|0;
            $3 = ((($2)) + 40|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ((($fr)) + 52|0);
            HEAP32[$5>>2] = $4;
            $6 = HEAP32[$0>>2]|0;
            $7 = ((($6)) + 44|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = ((($fr)) + 56|0);
            HEAP32[$9>>2] = $8;
            $10 = ((($c)) + 32|0);
            $11 = HEAP32[$10>>2]|0;
            $12 = ($11|0)>(0);
            if ($12) {
                $13 = ((($c)) + 36|0);
                $14 = HEAP32[$13>>2]|0;
                $15 = ($14|0)>(0);
                if ($15) {
                    $16 = HEAP32[$gfi>>2]|0;
                    $17 = (($14) + 1)|0;
                    $18 = (_Gif_Realloc(0,4,$17,19372,258)|0);
                    HEAP32[$gfi>>2] = $18;
                    $19 = HEAP32[$13>>2]|0;
                    $20 = ($19|0)>(0);
                    if ($20) {
                        $21 = ((($c)) + 28|0);
                        $22 = HEAP32[$21>>2]|0;
                        $23 = ((($c)) + 24|0);
                        $24 = HEAP32[$23>>2]|0;
                        $25 = HEAP32[$13>>2]|0;
                        $j$02 = 0;
                        while(1) {
                            $26 = (($22) + ($j$02))|0;
                            $27 = (($16) + ($26<<2)|0);
                            $28 = HEAP32[$27>>2]|0;
                            $29 = (($28) + ($24)|0);
                            $30 = HEAP32[$gfi>>2]|0;
                            $31 = (($30) + ($j$02<<2)|0);
                            HEAP32[$31>>2] = $29;
                            $32 = (($j$02) + 1)|0;
                            $33 = ($32|0)<($25|0);
                            if ($33) {
                                $j$02 = $32;
                            } else {
                                $$lcssa = $25;
                                break;
                            }
                        }
                    } else {
                        $$lcssa = $19;
                    }
                    $34 = HEAP32[$gfi>>2]|0;
                    $35 = (($34) + ($$lcssa<<2)|0);
                    HEAP32[$35>>2] = 0;
                    _free($16);
                    $36 = HEAP32[$10>>2]|0;
                    $37 = $36&65535;
                    $38 = ((($gfi)) + 8|0);
                    HEAP16[$38>>1] = $37;
                    $39 = HEAP32[$13>>2]|0;
                    $40 = $39&65535;
                    $41 = ((($gfi)) + 10|0);
                    HEAP16[$41>>1] = $40;
                } else {
                    label = 7;
                }
            } else {
                label = 7;
            }
            do {
                if ((label|0) == 7) {
                    $42 = ($preserve_total_crop|0)==(0);
                    if ($42) {
                        $43 = HEAP32[$gfi>>2]|0;
                        _free($43);
                        HEAP32[$gfi>>2] = 0;
                        $44 = ((($gfi)) + 10|0);
                        HEAP16[$44>>1] = 0;
                        $45 = ((($gfi)) + 8|0);
                        HEAP16[$45>>1] = 0;
                        break;
                    } else {
                        _Gif_MakeImageEmpty($gfi);
                        break;
                    }
                }
            } while(0);
            $46 = ((($c)) + 24|0);
            $47 = HEAP32[$46>>2]|0;
            $48 = HEAP32[$5>>2]|0;
            $49 = (($47) - ($48))|0;
            $50 = ((($gfi)) + 12|0);
            $51 = HEAP16[$50>>1]|0;
            $52 = $51&65535;
            $53 = (($49) + ($52))|0;
            $54 = $53&65535;
            HEAP16[$50>>1] = $54;
            $55 = ((($c)) + 28|0);
            $56 = HEAP32[$55>>2]|0;
            $57 = HEAP32[$9>>2]|0;
            $58 = (($56) - ($57))|0;
            $59 = ((($gfi)) + 14|0);
            $60 = HEAP16[$59>>1]|0;
            $61 = $60&65535;
            $62 = (($58) + ($61))|0;
            $63 = $62&65535;
            HEAP16[$59>>1] = $63;
            $64 = HEAP32[$gfi>>2]|0;
            $65 = ($64|0)!=(0|0);
            $66 = $65&1;
            STACKTOP = sp;return ($66|0);
        }
        function __Z10flip_imageP9Gif_ImageP8Gt_Framei($gfi,$fr,$is_vert) {
            $gfi = $gfi|0;
            $fr = $fr|0;
            $is_vert = $is_vert|0;
            var $$neg11 = 0, $$neg2 = 0, $$neg5 = 0, $$neg8 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
            var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
            var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
            var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $exitcond = 0;
            var $exitcond22 = 0, $exitcond23 = 0, $trav$013 = 0, $x$014 = 0, $y$018 = 0, $y$112 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 8|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($gfi)) + 10|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = HEAP32[$gfi>>2]|0;
            $7 = ($is_vert|0)!=(0);
            if (!($7)) {
                $8 = (_Gif_Realloc(0,1,$2,19372,293)|0);
                $9 = ($4<<16>>16)==(0);
                if (!($9)) {
                    $$sum = (($2) + -1)|0;
                    $10 = ($1<<16>>16)==(0);
                    $11 = $1&65535;
                    $12 = $4&65535;
                    $y$018 = 0;
                    while(1) {
                        $13 = (($6) + ($y$018<<2)|0);
                        $14 = HEAP32[$13>>2]|0;
                        _memcpy(($8|0),($14|0),($2|0))|0;
                        if (!($10)) {
                            $15 = HEAP32[$13>>2]|0;
                            $16 = (($15) + ($$sum)|0);
                            $trav$013 = $16;$x$014 = 0;
                            while(1) {
                                $17 = (($8) + ($x$014)|0);
                                $18 = HEAP8[$17>>0]|0;
                                $19 = ((($trav$013)) + -1|0);
                                HEAP8[$trav$013>>0] = $18;
                                $20 = (($x$014) + 1)|0;
                                $exitcond22 = ($20|0)==($11|0);
                                if ($exitcond22) {
                                    break;
                                } else {
                                    $trav$013 = $19;$x$014 = $20;
                                }
                            }
                        }
                        $21 = (($y$018) + 1)|0;
                        $exitcond23 = ($21|0)==($12|0);
                        if ($exitcond23) {
                            break;
                        } else {
                            $y$018 = $21;
                        }
                    }
                }
                $22 = HEAP32[$fr>>2]|0;
                $23 = ((($22)) + 18|0);
                $24 = HEAP16[$23>>1]|0;
                $25 = $24&65535;
                $26 = ((($gfi)) + 12|0);
                $27 = HEAP16[$26>>1]|0;
                $28 = $27&65535;
                $$neg2 = (($25) - ($2))|0;
                $29 = (($$neg2) - ($28))|0;
                $30 = $29&65535;
                HEAP16[$26>>1] = $30;
                $31 = ((($fr)) + 48|0);
                $32 = HEAP32[$31>>2]|0;
                $33 = ($32|0)==(0|0);
                if (!($33)) {
                    $34 = HEAP32[$fr>>2]|0;
                    $35 = ((($34)) + 18|0);
                    $36 = HEAP16[$35>>1]|0;
                    $37 = $36&65535;
                    $38 = ((($fr)) + 52|0);
                    $39 = HEAP32[$38>>2]|0;
                    $40 = ((($32)) + 32|0);
                    $41 = HEAP32[$40>>2]|0;
                    $$neg5 = (($37) - ($39))|0;
                    $42 = (($$neg5) - ($41))|0;
                    HEAP32[$38>>2] = $42;
                }
                _free($8);
                if (!($7)) {
                    return;
                }
            }
            $43 = (_Gif_Realloc(0,4,$5,19372,309)|0);
            $44 = $5 << 2;
            _memcpy(($43|0),($6|0),($44|0))|0;
            $45 = ($4<<16>>16)==(0);
            if (!($45)) {
                $46 = (($5) + -1)|0;
                $47 = $4&65535;
                $y$112 = 0;
                while(1) {
                    $48 = (($46) - ($y$112))|0;
                    $49 = (($43) + ($48<<2)|0);
                    $50 = HEAP32[$49>>2]|0;
                    $51 = (($6) + ($y$112<<2)|0);
                    HEAP32[$51>>2] = $50;
                    $52 = (($y$112) + 1)|0;
                    $exitcond = ($52|0)==($47|0);
                    if ($exitcond) {
                        break;
                    } else {
                        $y$112 = $52;
                    }
                }
            }
            $53 = HEAP32[$fr>>2]|0;
            $54 = ((($53)) + 20|0);
            $55 = HEAP16[$54>>1]|0;
            $56 = $55&65535;
            $57 = ((($gfi)) + 14|0);
            $58 = HEAP16[$57>>1]|0;
            $59 = $58&65535;
            $$neg8 = (($56) - ($5))|0;
            $60 = (($$neg8) - ($59))|0;
            $61 = $60&65535;
            HEAP16[$57>>1] = $61;
            $62 = ((($fr)) + 48|0);
            $63 = HEAP32[$62>>2]|0;
            $64 = ($63|0)==(0|0);
            if (!($64)) {
                $65 = HEAP32[$fr>>2]|0;
                $66 = ((($65)) + 20|0);
                $67 = HEAP16[$66>>1]|0;
                $68 = $67&65535;
                $69 = ((($fr)) + 56|0);
                $70 = HEAP32[$69>>2]|0;
                $71 = ((($63)) + 36|0);
                $72 = HEAP32[$71>>2]|0;
                $$neg11 = (($68) - ($70))|0;
                $73 = (($$neg11) - ($72))|0;
                HEAP32[$69>>2] = $73;
            }
            _free($43);
            return;
        }
        function __Z12rotate_imageP9Gif_ImageP8Gt_Framei($gfi,$fr,$rotation) {
            $gfi = $gfi|0;
            $fr = $fr|0;
            $rotation = $rotation|0;
            var $$neg12 = 0, $$neg3 = 0, $$neg6 = 0, $$neg9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
            var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
            var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
            var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $exitcond = 0, $exitcond32 = 0, $scevgep = 0, $scevgep31 = 0, $smax = 0, $trav$020 = 0, $trav$1$lcssa = 0, $trav$117 = 0, $trav$227 = 0, $trav$3$lcssa = 0;
            var $trav$323 = 0, $x$019 = 0, $x$128 = 0, $x$128$in = 0, $y$018 = 0, $y$018$in = 0, $y$122 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 8|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($gfi)) + 10|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = HEAP32[$gfi>>2]|0;
            $7 = Math_imul($5, $2)|0;
            $8 = (_Gif_Realloc(0,1,$7,19372,327)|0);
            $9 = $rotation & -3;
            $10 = ($9|0)==(1);
            if (!($10)) {
                ___assert_fail((19710|0),(19372|0),331,(19741|0));
                // unreachable;
            }
            $11 = ($rotation|0)==(1);
            $12 = ($1<<16>>16)==(0);
            if ($11) {
                if (!($12)) {
                    $15 = ($4<<16>>16)==(0);
                    $16 = $4&65535;
                    $17 = $16 ^ -1;
                    $18 = ($4<<16>>16)==(0);
                    $smax = $18 ? $17 : -2;
                    $19 = (($smax) + ($16))|0;
                    $20 = (($19) + 2)|0;
                    $21 = $1&65535;
                    $trav$020 = $8;$x$019 = 0;
                    while(1) {
                        if ($15) {
                            $trav$1$lcssa = $trav$020;
                        } else {
                            $trav$117 = $trav$020;$y$018$in = $5;
                            while(1) {
                                $y$018 = (($y$018$in) + -1)|0;
                                $22 = (($6) + ($y$018<<2)|0);
                                $23 = HEAP32[$22>>2]|0;
                                $24 = (($23) + ($x$019)|0);
                                $25 = HEAP8[$24>>0]|0;
                                $26 = ((($trav$117)) + 1|0);
                                HEAP8[$trav$117>>0] = $25;
                                $27 = ($y$018$in|0)>(1);
                                if ($27) {
                                    $trav$117 = $26;$y$018$in = $y$018;
                                } else {
                                    break;
                                }
                            }
                            $scevgep = (($trav$020) + ($20)|0);
                            $trav$1$lcssa = $scevgep;
                        }
                        $28 = (($x$019) + 1)|0;
                        $exitcond = ($28|0)==($21|0);
                        if ($exitcond) {
                            break;
                        } else {
                            $trav$020 = $trav$1$lcssa;$x$019 = $28;
                        }
                    }
                }
                $29 = ((($gfi)) + 12|0);
                $30 = HEAP16[$29>>1]|0;
                $31 = HEAP32[$fr>>2]|0;
                $32 = ((($31)) + 20|0);
                $33 = HEAP16[$32>>1]|0;
                $34 = $33&65535;
                $35 = ((($gfi)) + 14|0);
                $36 = HEAP16[$35>>1]|0;
                $37 = $36&65535;
                $$neg3 = (($34) - ($5))|0;
                $38 = (($$neg3) - ($37))|0;
                $39 = $38&65535;
                HEAP16[$29>>1] = $39;
                HEAP16[$35>>1] = $30;
                $40 = ((($fr)) + 48|0);
                $41 = HEAP32[$40>>2]|0;
                $42 = ($41|0)==(0|0);
                if ($42) {
                    _Gif_ReleaseUncompressedImage($gfi);
                    HEAP16[$0>>1] = $4;
                    HEAP16[$3>>1] = $1;
                    (_Gif_SetUncompressedImage($gfi,$8,1,0)|0);
                    return;
                }
                $43 = ((($fr)) + 52|0);
                $44 = HEAP32[$43>>2]|0;
                $45 = HEAP32[$fr>>2]|0;
                $46 = ((($45)) + 20|0);
                $47 = HEAP16[$46>>1]|0;
                $48 = $47&65535;
                $49 = ((($fr)) + 56|0);
                $50 = HEAP32[$49>>2]|0;
                $51 = ((($41)) + 36|0);
                $52 = HEAP32[$51>>2]|0;
                $$neg6 = (($48) - ($50))|0;
                $53 = (($$neg6) - ($52))|0;
                HEAP32[$43>>2] = $53;
                HEAP32[$49>>2] = $44;
                _Gif_ReleaseUncompressedImage($gfi);
                HEAP16[$0>>1] = $4;
                HEAP16[$3>>1] = $1;
                (_Gif_SetUncompressedImage($gfi,$8,1,0)|0);
                return;
            } else {
                if (!($12)) {
                    $13 = ($4<<16>>16)==(0);
                    $14 = $4&65535;
                    $trav$227 = $8;$x$128$in = $2;
                    while(1) {
                        $x$128 = (($x$128$in) + -1)|0;
                        if ($13) {
                            $trav$3$lcssa = $trav$227;
                        } else {
                            $trav$323 = $trav$227;$y$122 = 0;
                            while(1) {
                                $55 = (($6) + ($y$122<<2)|0);
                                $56 = HEAP32[$55>>2]|0;
                                $57 = (($56) + ($x$128)|0);
                                $58 = HEAP8[$57>>0]|0;
                                $59 = ((($trav$323)) + 1|0);
                                HEAP8[$trav$323>>0] = $58;
                                $60 = (($y$122) + 1)|0;
                                $exitcond32 = ($60|0)==($14|0);
                                if ($exitcond32) {
                                    break;
                                } else {
                                    $trav$323 = $59;$y$122 = $60;
                                }
                            }
                            $scevgep31 = (($trav$227) + ($14)|0);
                            $trav$3$lcssa = $scevgep31;
                        }
                        $54 = ($x$128$in|0)>(1);
                        if ($54) {
                            $trav$227 = $trav$3$lcssa;$x$128$in = $x$128;
                        } else {
                            break;
                        }
                    }
                }
                $61 = ((($gfi)) + 14|0);
                $62 = HEAP16[$61>>1]|0;
                $63 = HEAP32[$fr>>2]|0;
                $64 = ((($63)) + 18|0);
                $65 = HEAP16[$64>>1]|0;
                $66 = $65&65535;
                $67 = ((($gfi)) + 12|0);
                $68 = HEAP16[$67>>1]|0;
                $69 = $68&65535;
                $$neg9 = (($66) - ($2))|0;
                $70 = (($$neg9) - ($69))|0;
                $71 = $70&65535;
                HEAP16[$61>>1] = $71;
                HEAP16[$67>>1] = $62;
                $72 = ((($fr)) + 48|0);
                $73 = HEAP32[$72>>2]|0;
                $74 = ($73|0)==(0|0);
                if ($74) {
                    _Gif_ReleaseUncompressedImage($gfi);
                    HEAP16[$0>>1] = $4;
                    HEAP16[$3>>1] = $1;
                    (_Gif_SetUncompressedImage($gfi,$8,1,0)|0);
                    return;
                }
                $75 = ((($fr)) + 56|0);
                $76 = HEAP32[$75>>2]|0;
                $77 = HEAP32[$fr>>2]|0;
                $78 = ((($77)) + 18|0);
                $79 = HEAP16[$78>>1]|0;
                $80 = $79&65535;
                $81 = ((($fr)) + 52|0);
                $82 = HEAP32[$81>>2]|0;
                $83 = ((($73)) + 32|0);
                $84 = HEAP32[$83>>2]|0;
                $$neg12 = (($80) - ($82))|0;
                $85 = (($$neg12) - ($84))|0;
                HEAP32[$75>>2] = $85;
                HEAP32[$81>>2] = $76;
                _Gif_ReleaseUncompressedImage($gfi);
                HEAP16[$0>>1] = $4;
                HEAP16[$3>>1] = $1;
                (_Gif_SetUncompressedImage($gfi,$8,1,0)|0);
                return;
            }
        }
        function __Z17resize_dimensionsPiS_ddi($w,$h,$new_width,$new_height,$flags) {
            $w = $w|0;
            $h = $h|0;
            $new_width = +$new_width;
            $new_height = +$new_height;
            $flags = $flags|0;
            var $$ = 0.0, $$0 = 0.0, $$04 = 0.0, $$1 = 0.0, $$15 = 0.0, $$lobit = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0;
            var $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0;
            var $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0;
            var $57 = 0, $58 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $0 = $new_width < 0.5;
            $1 = $new_height < 0.5;
            $or$cond = $0 & $1;
            if ($or$cond) {
                STACKTOP = sp;return;
            }
            if ($0) {
                $2 = HEAP32[$w>>2]|0;
                $3 = (+($2|0));
                $4 = $3 * $new_height;
                $5 = HEAP32[$h>>2]|0;
                $6 = (+($5|0));
                $7 = $4 / $6;
                $$0 = $7;$$04 = $new_height;
            } else {
                if ($1) {
                    $8 = HEAP32[$h>>2]|0;
                    $9 = (+($8|0));
                    $10 = $9 * $new_width;
                    $11 = HEAP32[$w>>2]|0;
                    $12 = (+($11|0));
                    $13 = $10 / $12;
                    $$0 = $new_width;$$04 = $13;
                } else {
                    $$0 = $new_width;$$04 = $new_height;
                }
            }
            $14 = $flags & 1;
            $15 = ($14|0)==(0);
            if ($15) {
                $$1 = $$0;$$15 = $$04;
            } else {
                $16 = $flags & 2;
                $17 = ($16|0)==(0);
                if (!($17)) {
                    $18 = HEAP32[$w>>2]|0;
                    $19 = (+($18|0));
                    $20 = $$0 + 0.5;
                    $21 = $19 < $20;
                    if ($21) {
                        $22 = HEAP32[$h>>2]|0;
                        $23 = (+($22|0));
                        $24 = $$04 + 0.5;
                        $25 = $23 < $24;
                        if ($25) {
                            STACKTOP = sp;return;
                        }
                    }
                }
                $26 = $flags & 4;
                $27 = ($26|0)==(0);
                if (!($27)) {
                    $28 = HEAP32[$w>>2]|0;
                    $29 = (+($28|0));
                    $30 = $$0 + 0.5;
                    $31 = !($29 >= $30);
                    if (!($31)) {
                        STACKTOP = sp;return;
                    }
                    $32 = HEAP32[$h>>2]|0;
                    $33 = (+($32|0));
                    $34 = $$04 + 0.5;
                    $35 = !($33 >= $34);
                    if (!($35)) {
                        STACKTOP = sp;return;
                    }
                }
                $36 = HEAP32[$w>>2]|0;
                $37 = (+($36|0));
                $38 = $$0 / $37;
                $39 = HEAP32[$h>>2]|0;
                $40 = (+($39|0));
                $41 = $$04 / $40;
                $42 = $38 < $41;
                $43 = $42&1;
                $44 = $flags >>> 3;
                $$lobit = $44 & 1;
                $45 = $$lobit ^ 1;
                $46 = ($43|0)==($45|0);
                $$ = $46 ? $38 : $41;
                $47 = $37 * $$;
                $48 = $40 * $$;
                $$1 = $47;$$15 = $48;
            }
            $49 = $$1 >= 65535.5;
            $50 = $$15 >= 65535.5;
            $or$cond3 = $50 | $49;
            if ($or$cond3) {
                __Z11fatal_errorPKcz(19754,$vararg_buffer);
                // unreachable;
            }
            $51 = $$1 + 0.5;
            $52 = (~~(($51)));
            HEAP32[$w>>2] = $52;
            $53 = $$15 + 0.5;
            $54 = (~~(($53)));
            HEAP32[$h>>2] = $54;
            $55 = HEAP32[$w>>2]|0;
            $56 = ($55|0)==(0);
            if ($56) {
                HEAP32[$w>>2] = 1;
                $$pr = HEAP32[$h>>2]|0;
                $57 = $$pr;
            } else {
                $57 = $54;
            }
            $58 = ($57|0)==(0);
            if (!($58)) {
                STACKTOP = sp;return;
            }
            HEAP32[$h>>2] = 1;
            STACKTOP = sp;return;
        }
        function __Z13resize_streamP10Gif_Streamddiii($gfs,$new_width,$new_height,$flags,$method,$scale_colors) {
            $gfs = $gfs|0;
            $new_width = +$new_width;
            $new_height = +$new_height;
            $flags = $flags|0;
            $method = $method|0;
            $scale_colors = $scale_colors|0;
            var $$$0 = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $$1$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
            var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
            var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0;
            var $8 = 0, $9 = 0, $method$ = 0, $nh = 0, $nw = 0, $sctx = 0, $storemerge14 = 0, $switch = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 240|0;
            $nw = sp + 228|0;
            $nh = sp + 224|0;
            $sctx = sp;
            _Gif_CalculateScreenSize($gfs,0);
            $0 = ((($gfs)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)>(0);
            if (!($2)) {
                ___assert_fail((19800|0),(19372|0),1307,(19817|0));
                // unreachable;
            }
            $3 = ((($gfs)) + 18|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            HEAP32[$nw>>2] = $5;
            $6 = ((($gfs)) + 20|0);
            $7 = HEAP16[$6>>1]|0;
            $8 = $7&65535;
            HEAP32[$nh>>2] = $8;
            __Z17resize_dimensionsPiS_ddi($nw,$nh,$new_width,$new_height,$flags);
            $9 = HEAP32[$nw>>2]|0;
            $10 = HEAP16[$3>>1]|0;
            $11 = $10&65535;
            $12 = ($9|0)==($11|0);
            if ($12) {
                $13 = HEAP32[$nh>>2]|0;
                $14 = HEAP16[$6>>1]|0;
                $15 = $14&65535;
                $16 = ($13|0)==($15|0);
                if ($16) {
                    STACKTOP = sp;return;
                }
            }
            $17 = ($method|0)==(1);
            if ($17) {
                $18 = HEAP16[$3>>1]|0;
                $19 = $18&65535;
                $20 = HEAP32[$nw>>2]|0;
                $21 = ($19|0)>($20|0);
                if ($21) {
                    $$1 = 1;
                } else {
                    $22 = HEAP16[$6>>1]|0;
                    $23 = $22&65535;
                    $24 = HEAP32[$nh>>2]|0;
                    $25 = ($23|0)>($24|0);
                    $method$ = $25 ? $method : 0;
                    $$0 = $method$;
                    label = 8;
                }
            } else {
                $$0 = $method;
                label = 8;
            }
            if ((label|0) == 8) {
                $26 = ($$0|0)==(2);
                if ($26) {
                    $27 = HEAP16[$3>>1]|0;
                    $28 = $27&65535;
                    $29 = HEAP32[$nw>>2]|0;
                    $30 = ($28|0)>($29|0);
                    if ($30) {
                        $$1 = 2;
                    } else {
                        $31 = HEAP16[$6>>1]|0;
                        $32 = $31&65535;
                        $33 = HEAP32[$nh>>2]|0;
                        $34 = ($32|0)>($33|0);
                        if ($34) {
                            $$1 = 2;
                        } else {
                            $35 = (($29|0) % ($28|0))&-1;
                            $36 = ($35|0)==(0);
                            if ($36) {
                                $37 = (($33|0) % ($32|0))&-1;
                                $38 = ($37|0)==(0);
                                $$$0 = $38 ? 0 : $$0;
                                $$1 = $$$0;
                            } else {
                                $$1 = 2;
                            }
                        }
                    }
                } else {
                    $$1 = $$0;
                }
            }
            $$1$off = (($$1) + -1)|0;
            $switch = ($$1$off>>>0)<(6);
            $$1$ = $switch ? $$1 : 0;
            $39 = HEAP32[$nw>>2]|0;
            $40 = HEAP32[$nh>>2]|0;
            __ZL9sctx_initP13scale_contextP10Gif_Streamii($sctx,$gfs,$39,$40);
            $41 = ((($sctx)) + 220|0);
            HEAP32[$41>>2] = $scale_colors;
            $42 = ((($sctx)) + 8|0);
            HEAP32[$42>>2] = 0;
            $43 = HEAP32[$0>>2]|0;
            $44 = ($43|0)>(0);
            if ($44) {
                $45 = ((($sctx)) + 4|0);
                $storemerge14 = 0;
                while(1) {
                    $46 = HEAP32[$gfs>>2]|0;
                    $47 = (($46) + ($storemerge14<<2)|0);
                    $48 = HEAP32[$47>>2]|0;
                    HEAP32[$45>>2] = $48;
                    __ZL11scale_imageP13scale_contexti($sctx,$$1$);
                    $49 = HEAP32[$42>>2]|0;
                    $50 = (($49) + 1)|0;
                    HEAP32[$42>>2] = $50;
                    $51 = HEAP32[$0>>2]|0;
                    $52 = ($50|0)<($51|0);
                    if ($52) {
                        $storemerge14 = $50;
                    } else {
                        break;
                    }
                }
            }
            __ZL12sctx_cleanupP13scale_context($sctx);
            $53 = HEAP32[$nw>>2]|0;
            $54 = $53&65535;
            HEAP16[$3>>1] = $54;
            $55 = HEAP32[$nh>>2]|0;
            $56 = $55&65535;
            HEAP16[$6>>1] = $56;
            STACKTOP = sp;return;
        }
        function __ZL9sctx_initP13scale_contextP10Gif_Streamii($sctx,$gfs,$nw,$nh) {
            $sctx = $sctx|0;
            $gfs = $gfs|0;
            $nw = $nw|0;
            $nh = $nh|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
            var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            HEAP32[$sctx>>2] = $gfs;
            $0 = ((($sctx)) + 4|0);
            HEAP32[$0>>2] = 0;
            $1 = ((($sctx)) + 156|0);
            HEAP32[$1>>2] = 0;
            $2 = ((($sctx)) + 192|0);
            HEAP32[$2>>2] = 0;
            $3 = ((($sctx)) + 16|0);
            __ZL14ksscreen_clearP8ksscreen($3);
            $4 = ((($sctx)) + 48|0);
            __ZL14kcscreen_clearP8kcscreen($4);
            $5 = ((($sctx)) + 72|0);
            __ZL14kcscreen_clearP8kcscreen($5);
            $6 = ((($gfs)) + 18|0);
            $7 = HEAP16[$6>>1]|0;
            $8 = $7&65535;
            $9 = ((($sctx)) + 24|0);
            HEAP32[$9>>2] = $8;
            $10 = ((($gfs)) + 20|0);
            $11 = HEAP16[$10>>1]|0;
            $12 = $11&65535;
            $13 = ((($sctx)) + 28|0);
            HEAP32[$13>>2] = $12;
            $14 = ((($sctx)) + 56|0);
            HEAP32[$14>>2] = $nw;
            $15 = ((($sctx)) + 60|0);
            HEAP32[$15>>2] = $nh;
            $16 = ((($sctx)) + 80|0);
            HEAP32[$16>>2] = $nw;
            $17 = ((($sctx)) + 84|0);
            HEAP32[$17>>2] = $nh;
            $18 = (+($nw|0));
            $19 = HEAP16[$6>>1]|0;
            $20 = $19&65535;
            $21 = (+($20|0));
            $22 = $18 / $21;
            $23 = ((($sctx)) + 112|0);
            HEAPF64[$23>>3] = $22;
            $24 = (+($nh|0));
            $25 = HEAP16[$10>>1]|0;
            $26 = $25&65535;
            $27 = (+($26|0));
            $28 = $24 / $27;
            $29 = ((($sctx)) + 120|0);
            HEAPF64[$29>>3] = $28;
            $30 = HEAP16[$6>>1]|0;
            $31 = $30&65535;
            $32 = (+($31|0));
            $33 = $32 / $18;
            $34 = ((($sctx)) + 96|0);
            HEAPF64[$34>>3] = $33;
            $35 = HEAP16[$10>>1]|0;
            $36 = $35&65535;
            $37 = (+($36|0));
            $38 = $37 / $24;
            $39 = ((($sctx)) + 104|0);
            HEAPF64[$39>>3] = $38;
            $40 = ((($sctx)) + 128|0);
            $41 = ((($sctx)) + 216|0);
            ;HEAP32[$40>>2]=0|0;HEAP32[$40+4>>2]=0|0;HEAP32[$40+8>>2]=0|0;HEAP32[$40+12>>2]=0|0;
            HEAP32[$41>>2] = 16000;
            $42 = ((($sctx)) + 220|0);
            HEAP32[$42>>2] = 0;
            $43 = ((($sctx)) + 12|0);
            HEAP32[$43>>2] = 0;
            $44 = ((($sctx)) + 8|0);
            HEAP32[$44>>2] = 0;
            return;
        }
        function __ZL11scale_imageP13scale_contexti($sctx,$method) {
            $sctx = $sctx|0;
            $method = $method|0;
            var $$pr = 0, $$pr3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0.0, $113 = 0.0;
            var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0;
            var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0;
            var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0.0;
            var $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0;
            var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
            var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
            var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0;
            var $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gfo = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 80|0;
            $gfo = sp;
            $0 = ((($sctx)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)==(0|0);
            dest=$gfo; src=$1; stop=dest+76|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
            HEAP32[$gfo>>2] = 0;
            $4 = ((($gfo)) + 4|0);
            HEAP32[$4>>2] = 0;
            $5 = ((($gfo)) + 52|0);
            HEAP32[$5>>2] = 0;
            $6 = ((($1)) + 12|0);
            $7 = HEAP16[$6>>1]|0;
            $8 = $7&65535;
            $9 = (+($8|0));
            $10 = ((($sctx)) + 112|0);
            $11 = +HEAPF64[$10>>3];
            $12 = $11 * $9;
            $13 = (~~(($12)));
            $14 = $13&65535;
            $15 = ((($gfo)) + 12|0);
            HEAP16[$15>>1] = $14;
            $16 = ((($1)) + 14|0);
            $17 = HEAP16[$16>>1]|0;
            $18 = $17&65535;
            $19 = (+($18|0));
            $20 = ((($sctx)) + 120|0);
            $21 = +HEAPF64[$20>>3];
            $22 = $21 * $19;
            $23 = (~~(($22)));
            $24 = $23&65535;
            $25 = ((($gfo)) + 14|0);
            HEAP16[$25>>1] = $24;
            $26 = HEAP16[$6>>1]|0;
            $27 = $26&65535;
            $28 = ((($1)) + 8|0);
            $29 = HEAP16[$28>>1]|0;
            $30 = $29&65535;
            $31 = (($30) + ($27))|0;
            $32 = (+($31|0));
            $33 = +HEAPF64[$10>>3];
            $34 = $33 * $32;
            $35 = (+Math_ceil((+$34)));
            $36 = (~~(($35)));
            $37 = HEAP16[$15>>1]|0;
            $38 = $37&65535;
            $39 = (($36) - ($38))|0;
            $40 = $39&65535;
            $41 = ((($gfo)) + 8|0);
            HEAP16[$41>>1] = $40;
            $42 = HEAP16[$16>>1]|0;
            $43 = $42&65535;
            $44 = ((($1)) + 10|0);
            $45 = HEAP16[$44>>1]|0;
            $46 = $45&65535;
            $47 = (($46) + ($43))|0;
            $48 = (+($47|0));
            $49 = +HEAPF64[$20>>3];
            $50 = $49 * $48;
            $51 = (+Math_ceil((+$50)));
            $52 = (~~(($51)));
            $53 = HEAP16[$25>>1]|0;
            $54 = $53&65535;
            $55 = (($52) - ($54))|0;
            $56 = $55&65535;
            $57 = ((($gfo)) + 10|0);
            HEAP16[$57>>1] = $56;
            $58 = HEAP16[$6>>1]|0;
            $59 = $58&65535;
            $60 = HEAP16[$28>>1]|0;
            $61 = $60&65535;
            $62 = (($61) + ($59))|0;
            $63 = ((($sctx)) + 24|0);
            $64 = HEAP32[$63>>2]|0;
            $65 = ($62|0)==($64|0);
            if ($65) {
                $66 = ((($sctx)) + 56|0);
                $67 = HEAP32[$66>>2]|0;
                $68 = HEAP16[$15>>1]|0;
                $69 = $68&65535;
                $70 = (($67) - ($69))|0;
                $71 = $70&65535;
                HEAP16[$41>>1] = $71;
            }
            $72 = HEAP16[$16>>1]|0;
            $73 = $72&65535;
            $74 = HEAP16[$44>>1]|0;
            $75 = $74&65535;
            $76 = (($75) + ($73))|0;
            $77 = ((($sctx)) + 28|0);
            $78 = HEAP32[$77>>2]|0;
            $79 = ($76|0)==($78|0);
            if ($79) {
                $80 = ((($sctx)) + 60|0);
                $81 = HEAP32[$80>>2]|0;
                $82 = HEAP16[$25>>1]|0;
                $83 = $82&65535;
                $84 = (($81) - ($83))|0;
                $85 = $84&65535;
                HEAP16[$57>>1] = $85;
            }
            $86 = ($method|0)==(0);
            if ($86) {
                $87 = HEAP16[$41>>1]|0;
                $88 = ($87<<16>>16)==(0);
                if (!($88)) {
                    $89 = HEAP16[$15>>1]|0;
                    $90 = $89&65535;
                    $91 = (+($90|0));
                    $92 = $91 + 0.5;
                    $93 = ((($sctx)) + 96|0);
                    $94 = +HEAPF64[$93>>3];
                    $95 = $94 * $92;
                    $96 = (~~(($95)));
                    $97 = HEAP16[$6>>1]|0;
                    $98 = $97&65535;
                    $99 = ($96|0)<($98|0);
                    if ($99) {
                        $100 = (($89) + 1)<<16>>16;
                        HEAP16[$15>>1] = $100;
                        $101 = HEAP16[$41>>1]|0;
                        $102 = (($101) + -1)<<16>>16;
                        HEAP16[$41>>1] = $102;
                        $103 = $102;
                    } else {
                        $$pr = HEAP16[$41>>1]|0;
                        $103 = $$pr;
                    }
                    $104 = ($103<<16>>16)==(0);
                    if (!($104)) {
                        $105 = HEAP16[$15>>1]|0;
                        $106 = $105&65535;
                        $107 = $103&65535;
                        $108 = (($106) + ($107))|0;
                        $109 = (+($108|0));
                        $110 = $109 + -0.5;
                        $111 = ((($sctx)) + 96|0);
                        $112 = +HEAPF64[$111>>3];
                        $113 = $112 * $110;
                        $114 = (~~(($113)));
                        $115 = HEAP16[$6>>1]|0;
                        $116 = $115&65535;
                        $117 = HEAP16[$28>>1]|0;
                        $118 = $117&65535;
                        $119 = (($118) + ($116))|0;
                        $120 = ($114|0)<($119|0);
                        if (!($120)) {
                            $121 = (($103) + -1)<<16>>16;
                            HEAP16[$41>>1] = $121;
                        }
                    }
                }
                $122 = HEAP16[$57>>1]|0;
                $123 = ($122<<16>>16)==(0);
                if (!($123)) {
                    $124 = HEAP16[$25>>1]|0;
                    $125 = $124&65535;
                    $126 = (+($125|0));
                    $127 = $126 + 0.5;
                    $128 = ((($sctx)) + 104|0);
                    $129 = +HEAPF64[$128>>3];
                    $130 = $129 * $127;
                    $131 = (~~(($130)));
                    $132 = HEAP16[$16>>1]|0;
                    $133 = $132&65535;
                    $134 = ($131|0)<($133|0);
                    if ($134) {
                        $135 = (($124) + 1)<<16>>16;
                        HEAP16[$25>>1] = $135;
                        $136 = HEAP16[$57>>1]|0;
                        $137 = (($136) + -1)<<16>>16;
                        HEAP16[$57>>1] = $137;
                        $138 = $137;
                    } else {
                        $$pr3 = HEAP16[$57>>1]|0;
                        $138 = $$pr3;
                    }
                    $139 = ($138<<16>>16)==(0);
                    if (!($139)) {
                        $140 = HEAP16[$25>>1]|0;
                        $141 = $140&65535;
                        $142 = $138&65535;
                        $143 = (($141) + ($142))|0;
                        $144 = (+($143|0));
                        $145 = $144 + -0.5;
                        $146 = ((($sctx)) + 104|0);
                        $147 = +HEAPF64[$146>>3];
                        $148 = $147 * $145;
                        $149 = (~~(($148)));
                        $150 = HEAP16[$16>>1]|0;
                        $151 = $150&65535;
                        $152 = HEAP16[$44>>1]|0;
                        $153 = $152&65535;
                        $154 = (($153) + ($151))|0;
                        $155 = ($149|0)<($154|0);
                        if (!($155)) {
                            $156 = (($138) + -1)<<16>>16;
                            HEAP16[$57>>1] = $156;
                        }
                    }
                }
            }
            $157 = HEAP16[$41>>1]|0;
            $158 = ($157<<16>>16)==(0);
            $159 = HEAP16[$57>>1]|0;
            $160 = ($159<<16>>16)==(0);
            $or$cond = $158 | $160;
            L26: do {
                if ($or$cond) {
                    HEAP16[$57>>1] = 1;
                    HEAP16[$41>>1] = 1;
                    (_Gif_CreateUncompressedImage($gfo,0)|0);
                    $161 = ((($gfo)) + 20|0);
                    HEAP16[$161>>1] = 0;
                    $162 = HEAP32[$4>>2]|0;
                    HEAP8[$162>>0] = 0;
                    $163 = ((($gfo)) + 18|0);
                    HEAP8[$163>>0] = 1;
                } else {
                    if ($3) {
                        $164 = HEAP32[$sctx>>2]|0;
                        (_Gif_FullUncompressImage($164,$1,0)|0);
                    }
                    (_Gif_CreateUncompressedImage($gfo,0)|0);
                    switch ($method|0) {
                        case 2:  {
                            __ZL20scale_image_data_mixP13scale_contextP9Gif_Image($sctx,$gfo);
                            break L26;
                            break;
                        }
                        case 1:  {
                            __ZL20scale_image_data_boxP13scale_contextP9Gif_Image($sctx,$gfo);
                            break L26;
                            break;
                        }
                        case 3:  {
                            __ZL23scale_image_data_catromP13scale_contextP9Gif_Image($sctx,$gfo);
                            break L26;
                            break;
                        }
                        case 4:  {
                            __ZL25scale_image_data_lanczos2P13scale_contextP9Gif_Image($sctx,$gfo);
                            break L26;
                            break;
                        }
                        case 5:  {
                            __ZL25scale_image_data_lanczos3P13scale_contextP9Gif_Image($sctx,$gfo);
                            break L26;
                            break;
                        }
                        case 6:  {
                            __ZL25scale_image_data_mitchellP13scale_contextP9Gif_Image($sctx,$gfo);
                            break L26;
                            break;
                        }
                        default: {
                            __ZL22scale_image_data_pointP13scale_contextP9Gif_Image($sctx,$gfo);
                            break L26;
                        }
                    }
                }
            } while(0);
            _Gif_ReleaseUncompressedImage($1);
            _Gif_ReleaseCompressedImage($1);
            dest=$1; src=$gfo; stop=dest+76|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
            if (!($3)) {
                STACKTOP = sp;return;
            }
            $165 = HEAP32[$sctx>>2]|0;
            (_Gif_FullCompressImage($165,$1,780)|0);
            _Gif_ReleaseUncompressedImage($1);
            STACKTOP = sp;return;
        }
        function __ZL12sctx_cleanupP13scale_context($sctx) {
            $sctx = $sctx|0;
            var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($sctx)) + 156|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            if (!($2)) {
                $3 = ((($sctx)) + 144|0);
                __Z11kd3_cleanupP8kd3_tree($3);
            }
            $4 = ((($sctx)) + 16|0);
            __ZL16ksscreen_cleanupP8ksscreen($4);
            $5 = ((($sctx)) + 48|0);
            __ZL16kcscreen_cleanupP8kcscreen($5);
            $6 = ((($sctx)) + 72|0);
            __ZL16kcscreen_cleanupP8kcscreen($6);
            $7 = ((($sctx)) + 128|0);
            $8 = HEAP32[$7>>2]|0;
            _free($8);
            $9 = ((($sctx)) + 136|0);
            $10 = HEAP32[$9>>2]|0;
            _free($10);
            return;
        }
        function __ZL16ksscreen_cleanupP8ksscreen($kss) {
            $kss = $kss|0;
            var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$kss>>2]|0;
            _free($0);
            $1 = ((($kss)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            _free($2);
            return;
        }
        function __ZL16kcscreen_cleanupP8kcscreen($kcs) {
            $kcs = $kcs|0;
            var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$kcs>>2]|0;
            _free($0);
            $1 = ((($kcs)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            _free($2);
            return;
        }
        function __ZL20scale_image_data_mixP13scale_contextP9Gif_Image($sctx,$gfo) {
            $sctx = $sctx|0;
            $gfo = $gfo|0;
            var $$lcssa3 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0;
            var $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
            var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
            var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0;
            var $i$024 = 0, $i$16 = 0, $j$08 = 0, $mix$0$lcssa = 0, $mix$030 = 0, $mix$1$lcssa = 0, $mix$117 = 0, $mixcap$029 = 0, $mixcap$1$lcssa = 0, $mixcap$116 = 0, $nmix$0$lcssa = 0, $nmix$028 = 0, $nmix$1$lcssa = 0, $nmix$123 = 0, $xo$031 = 0, $xo$14 = 0, $xpr = 0, $yo$012 = 0, $ypr = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $xpr = sp + 16|0;
            $ypr = sp;
            $0 = ((($sctx)) + 24|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = $1 << 1;
            $3 = ((($gfo)) + 8|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = (_Gif_Realloc(0,16,$5,19372,913)|0);
            $7 = (_Gif_Realloc(0,8,$2,19372,914)|0);
            __ZL19scale_image_prepareP13scale_context($sctx);
            $8 = HEAP16[$3>>1]|0;
            $9 = ($8<<16>>16)==(0);
            if ($9) {
                $mix$0$lcssa = $7;$nmix$0$lcssa = 0;
            } else {
                $10 = ((($gfo)) + 12|0);
                $11 = ((($sctx)) + 56|0);
                $12 = ((($sctx)) + 96|0);
                $13 = ((($xpr)) + 12|0);
                $14 = ((($xpr)) + 8|0);
                $mix$030 = $7;$mixcap$029 = $2;$nmix$028 = 0;$xo$031 = 0;
                while(1) {
                    $28 = HEAP16[$10>>1]|0;
                    $29 = $28&65535;
                    $30 = (($29) + ($xo$031))|0;
                    $31 = HEAP32[$11>>2]|0;
                    $32 = HEAP32[$0>>2]|0;
                    $33 = +HEAPF64[$12>>3];
                    $34 = $33;
                    __ZL17make_pixel_range2iiif($xpr,$30,$31,$32,$34);
                    $35 = HEAP32[$13>>2]|0;
                    $36 = (($35) + ($nmix$028))|0;
                    $37 = HEAP32[$14>>2]|0;
                    $38 = (($36) - ($37))|0;
                    $39 = ($38|0)>($mixcap$029|0);
                    if ($39) {
                        $40 = HEAP32[$13>>2]|0;
                        $41 = (($40) + ($nmix$028))|0;
                        $42 = HEAP32[$14>>2]|0;
                        $43 = (($41) - ($42))|0;
                        $mix$117 = $mix$030;$mixcap$116 = $mixcap$029;
                        while(1) {
                            $47 = $mixcap$116 << 1;
                            $48 = (_Gif_Realloc($mix$117,8,$47,19372,924)|0);
                            $49 = ($43|0)>($47|0);
                            if ($49) {
                                $mix$117 = $48;$mixcap$116 = $47;
                            } else {
                                $$lcssa3 = $42;$mix$1$lcssa = $48;$mixcap$1$lcssa = $47;
                                break;
                            }
                        }
                    } else {
                        $$lcssa3 = $37;$mix$1$lcssa = $mix$030;$mixcap$1$lcssa = $mixcap$029;
                    }
                    $44 = HEAP32[$13>>2]|0;
                    $45 = ($$lcssa3|0)<($44|0);
                    if ($45) {
                        $46 = $xo$031&65535;
                        $i$024 = $$lcssa3;$nmix$123 = $nmix$028;
                        while(1) {
                            $50 = $i$024&65535;
                            $51 = (($mix$1$lcssa) + ($nmix$123<<3)|0);
                            HEAP16[$51>>1] = $50;
                            $52 = (((($mix$1$lcssa) + ($nmix$123<<3)|0)) + 2|0);
                            HEAP16[$52>>1] = $46;
                            $53 = (+__ZL10mix_factoriPKf($i$024,$xpr));
                            $54 = (((($mix$1$lcssa) + ($nmix$123<<3)|0)) + 4|0);
                            HEAPF32[$54>>2] = $53;
                            $55 = (($i$024) + 1)|0;
                            $56 = (($nmix$123) + 1)|0;
                            $57 = HEAP32[$13>>2]|0;
                            $58 = ($55|0)<($57|0);
                            if ($58) {
                                $i$024 = $55;$nmix$123 = $56;
                            } else {
                                $nmix$1$lcssa = $56;
                                break;
                            }
                        }
                    } else {
                        $nmix$1$lcssa = $nmix$028;
                    }
                    $59 = (($xo$031) + 1)|0;
                    $60 = HEAP16[$3>>1]|0;
                    $61 = $60&65535;
                    $62 = ($59|0)==($61|0);
                    if ($62) {
                        $mix$0$lcssa = $mix$1$lcssa;$nmix$0$lcssa = $nmix$1$lcssa;
                        break;
                    } else {
                        $mix$030 = $mix$1$lcssa;$mixcap$029 = $mixcap$1$lcssa;$nmix$028 = $nmix$1$lcssa;$xo$031 = $59;
                    }
                }
            }
            $15 = ((($gfo)) + 10|0);
            $16 = HEAP16[$15>>1]|0;
            $17 = ($16<<16>>16)==(0);
            if ($17) {
                __ZL20scale_image_completeP13scale_contextP9Gif_Image($sctx,$gfo);
                _free($6);
                _free($mix$0$lcssa);
                STACKTOP = sp;return;
            }
            $18 = ((($gfo)) + 14|0);
            $19 = ((($sctx)) + 60|0);
            $20 = ((($sctx)) + 28|0);
            $21 = ((($sctx)) + 104|0);
            $22 = ((($ypr)) + 8|0);
            $23 = ((($ypr)) + 12|0);
            $24 = ((($sctx)) + 112|0);
            $25 = ((($sctx)) + 120|0);
            $26 = ((($sctx)) + 16|0);
            $27 = ($nmix$0$lcssa|0)==(0);
            $yo$012 = 0;
            while(1) {
                $63 = HEAP16[$18>>1]|0;
                $64 = $63&65535;
                $65 = (($64) + ($yo$012))|0;
                $66 = HEAP32[$19>>2]|0;
                $67 = HEAP32[$20>>2]|0;
                $68 = +HEAPF64[$21>>3];
                $69 = $68;
                __ZL17make_pixel_range2iiif($ypr,$65,$66,$67,$69);
                $70 = HEAP16[$3>>1]|0;
                $71 = ($70<<16>>16)==(0);
                if (!($71)) {
                    $xo$14 = 0;
                    while(1) {
                        $72 = (($6) + ($xo$14<<4)|0);
                        __ZL8sc_clearP11scale_color($72);
                        $73 = (($xo$14) + 1)|0;
                        $74 = HEAP16[$3>>1]|0;
                        $75 = $74&65535;
                        $76 = ($73|0)==($75|0);
                        if ($76) {
                            break;
                        } else {
                            $xo$14 = $73;
                        }
                    }
                }
                $77 = HEAP32[$22>>2]|0;
                $78 = HEAP32[$23>>2]|0;
                $79 = ($77|0)<($78|0);
                if ($79) {
                    $j$08 = $77;
                    while(1) {
                        $80 = (+__ZL10mix_factoriPKf($j$08,$ypr));
                        $81 = $80;
                        $82 = +HEAPF64[$24>>3];
                        $83 = $81 * $82;
                        $84 = +HEAPF64[$25>>3];
                        $85 = $83 * $84;
                        $86 = $85;
                        $87 = HEAP32[$0>>2]|0;
                        $88 = Math_imul($87, $j$08)|0;
                        $89 = HEAP32[$26>>2]|0;
                        if (!($27)) {
                            $i$16 = 0;
                            while(1) {
                                $90 = (($mix$0$lcssa) + ($i$16<<3)|0);
                                $91 = HEAP16[$90>>1]|0;
                                $92 = $91&65535;
                                $$sum = (($92) + ($88))|0;
                                $93 = (((($mix$0$lcssa) + ($i$16<<3)|0)) + 4|0);
                                $94 = (((($mix$0$lcssa) + ($i$16<<3)|0)) + 2|0);
                                $95 = HEAP16[$94>>1]|0;
                                $96 = $95&65535;
                                $97 = (($89) + ($$sum<<4)|0);
                                $98 = +HEAPF32[$97>>2];
                                $99 = +HEAPF32[$93>>2];
                                $100 = $86 * $99;
                                $101 = $98 * $100;
                                $102 = (($6) + ($96<<4)|0);
                                $103 = +HEAPF32[$102>>2];
                                $104 = $103 + $101;
                                HEAPF32[$102>>2] = $104;
                                $105 = (((($89) + ($$sum<<4)|0)) + 4|0);
                                $106 = +HEAPF32[$105>>2];
                                $107 = +HEAPF32[$93>>2];
                                $108 = $86 * $107;
                                $109 = $106 * $108;
                                $110 = (((($6) + ($96<<4)|0)) + 4|0);
                                $111 = +HEAPF32[$110>>2];
                                $112 = $111 + $109;
                                HEAPF32[$110>>2] = $112;
                                $113 = (((($89) + ($$sum<<4)|0)) + 8|0);
                                $114 = +HEAPF32[$113>>2];
                                $115 = +HEAPF32[$93>>2];
                                $116 = $86 * $115;
                                $117 = $114 * $116;
                                $118 = (((($6) + ($96<<4)|0)) + 8|0);
                                $119 = +HEAPF32[$118>>2];
                                $120 = $119 + $117;
                                HEAPF32[$118>>2] = $120;
                                $121 = (((($89) + ($$sum<<4)|0)) + 12|0);
                                $122 = +HEAPF32[$121>>2];
                                $123 = +HEAPF32[$93>>2];
                                $124 = $86 * $123;
                                $125 = $122 * $124;
                                $126 = (((($6) + ($96<<4)|0)) + 12|0);
                                $127 = +HEAPF32[$126>>2];
                                $128 = $127 + $125;
                                HEAPF32[$126>>2] = $128;
                                $129 = (($i$16) + 1)|0;
                                $130 = ($129|0)==($nmix$0$lcssa|0);
                                if ($130) {
                                    break;
                                } else {
                                    $i$16 = $129;
                                }
                            }
                        }
                        $131 = (($j$08) + 1)|0;
                        $132 = HEAP32[$23>>2]|0;
                        $133 = ($131|0)<($132|0);
                        if ($133) {
                            $j$08 = $131;
                        } else {
                            break;
                        }
                    }
                }
                __ZL22scale_image_output_rowP13scale_contextP11scale_colorP9Gif_Imagei($sctx,$6,$gfo,$yo$012);
                $134 = (($yo$012) + 1)|0;
                $135 = HEAP16[$15>>1]|0;
                $136 = $135&65535;
                $137 = ($134|0)==($136|0);
                if ($137) {
                    break;
                } else {
                    $yo$012 = $134;
                }
            }
            __ZL20scale_image_completeP13scale_contextP9Gif_Image($sctx,$gfo);
            _free($6);
            _free($mix$0$lcssa);
            STACKTOP = sp;return;
        }
        function __ZL20scale_image_data_boxP13scale_contextP9Gif_Image($sctx,$gfo) {
            $sctx = $sctx|0;
            $gfo = $gfo|0;
            var $$lcssa = 0, $$lcssa3 = 0, $$lcssa42 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0;
            var $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0;
            var $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
            var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
            var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
            var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
            var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
            var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$022 = 0, $i$18 = 0, $j$012 = 0, $xo$026 = 0, $xo$14 = 0, $xo$316 = 0, $xpr = 0, $yo$018 = 0, $ypr = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $xpr = sp + 16|0;
            $0 = sp + 8|0;
            $ypr = sp;
            $1 = ((($sctx)) + 24|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = (_Gif_Realloc(0,2,$2,19372,844)|0);
            $4 = ((($gfo)) + 8|0);
            $5 = HEAP16[$4>>1]|0;
            $6 = $5&65535;
            $7 = (_Gif_Realloc(0,16,$6,19372,845)|0);
            $8 = HEAP16[$4>>1]|0;
            $9 = $8&65535;
            $10 = (_Gif_Realloc(0,4,$9,19372,846)|0);
            __ZL19scale_image_prepareP13scale_context($sctx);
            $11 = HEAP16[$4>>1]|0;
            $12 = $11&65535;
            $13 = ($11<<16>>16)==(0);
            $14 = ((($gfo)) + 12|0);
            $15 = HEAP16[$14>>1]|0;
            $16 = $15&65535;
            if ($13) {
                $$lcssa = $12;$$lcssa3 = $16;
            } else {
                $17 = ((($sctx)) + 56|0);
                $18 = ((($sctx)) + 96|0);
                $19 = ((($xpr)) + 4|0);
                $21 = $16;$xo$026 = 0;
                while(1) {
                    $20 = (($21) + ($xo$026))|0;
                    $22 = HEAP32[$17>>2]|0;
                    $23 = HEAP32[$1>>2]|0;
                    $24 = +HEAPF64[$18>>3];
                    $25 = $24;
                    __ZL16make_pixel_rangeiiif($xpr,$20,$22,$23,$25);
                    $26 = HEAP32[$xpr>>2]|0;
                    $27 = HEAP32[$19>>2]|0;
                    $28 = ($26|0)==($27|0);
                    if (!($28)) {
                        $29 = $xo$026&65535;
                        $30 = HEAP32[$19>>2]|0;
                        $i$022 = $26;
                        while(1) {
                            $31 = (($3) + ($i$022<<1)|0);
                            HEAP16[$31>>1] = $29;
                            $32 = (($i$022) + 1)|0;
                            $33 = ($32|0)==($30|0);
                            if ($33) {
                                break;
                            } else {
                                $i$022 = $32;
                            }
                        }
                    }
                    $34 = (($xo$026) + 1)|0;
                    $35 = HEAP16[$4>>1]|0;
                    $36 = $35&65535;
                    $37 = ($34|0)==($36|0);
                    $38 = HEAP16[$14>>1]|0;
                    $39 = $38&65535;
                    if ($37) {
                        $$lcssa = $36;$$lcssa3 = $39;
                        break;
                    } else {
                        $21 = $39;$xo$026 = $34;
                    }
                }
            }
            $40 = (+($$lcssa3|0));
            $41 = ((($sctx)) + 96|0);
            $42 = +HEAPF64[$41>>3];
            $43 = $40 * $42;
            $44 = (~~(($43)));
            $45 = (($$lcssa) + -1)|0;
            $46 = (($45) + ($$lcssa3))|0;
            $47 = ((($sctx)) + 56|0);
            $48 = HEAP32[$47>>2]|0;
            $49 = HEAP32[$1>>2]|0;
            $50 = $42;
            __ZL16make_pixel_rangeiiif($0,$46,$48,$49,$50);
            $51 = ((($0)) + 4|0);
            $52 = HEAP32[$51>>2]|0;
            $53 = ((($gfo)) + 10|0);
            $54 = HEAP16[$53>>1]|0;
            $55 = ($54<<16>>16)==(0);
            if ($55) {
                __ZL20scale_image_completeP13scale_contextP9Gif_Image($sctx,$gfo);
                _free($3);
                _free($7);
                _free($10);
                STACKTOP = sp;return;
            }
            $56 = ((($gfo)) + 14|0);
            $57 = ((($sctx)) + 60|0);
            $58 = ((($sctx)) + 28|0);
            $59 = ((($sctx)) + 104|0);
            $60 = ((($ypr)) + 4|0);
            $61 = ((($sctx)) + 16|0);
            $62 = ($44|0)==($52|0);
            $yo$018 = 0;
            while(1) {
                $63 = HEAP16[$56>>1]|0;
                $64 = $63&65535;
                $65 = (($64) + ($yo$018))|0;
                $66 = HEAP32[$57>>2]|0;
                $67 = HEAP32[$58>>2]|0;
                $68 = +HEAPF64[$59>>3];
                $69 = $68;
                __ZL16make_pixel_rangeiiif($ypr,$65,$66,$67,$69);
                $70 = HEAP16[$4>>1]|0;
                $71 = ($70<<16>>16)==(0);
                if (!($71)) {
                    $xo$14 = 0;
                    while(1) {
                        $73 = (($7) + ($xo$14<<4)|0);
                        __ZL8sc_clearP11scale_color($73);
                        $74 = (($xo$14) + 1)|0;
                        $75 = HEAP16[$4>>1]|0;
                        $76 = $75&65535;
                        $77 = ($74|0)==($76|0);
                        if ($77) {
                            $$lcssa42 = $75;
                            break;
                        } else {
                            $xo$14 = $74;
                        }
                    }
                    $72 = ($$lcssa42<<16>>16)==(0);
                    if (!($72)) {
                        $78 = HEAP16[$4>>1]|0;
                        $79 = $78&65535;
                        $80 = $79 << 2;
                        _memset(($10|0),0,($80|0))|0;
                    }
                }
                $81 = HEAP32[$ypr>>2]|0;
                $82 = HEAP32[$60>>2]|0;
                $83 = ($81|0)==($82|0);
                if (!($83)) {
                    $84 = HEAP32[$61>>2]|0;
                    $85 = HEAP32[$60>>2]|0;
                    $j$012 = $81;
                    while(1) {
                        $90 = HEAP32[$1>>2]|0;
                        $91 = Math_imul($90, $j$012)|0;
                        if (!($62)) {
                            $i$18 = $44;
                            while(1) {
                                $92 = (($3) + ($i$18<<1)|0);
                                $93 = HEAP16[$92>>1]|0;
                                $94 = $93&65535;
                                $95 = (($10) + ($94<<2)|0);
                                $96 = HEAP32[$95>>2]|0;
                                $97 = (($96) + 1)|0;
                                HEAP32[$95>>2] = $97;
                                $$sum = (($i$18) + ($91))|0;
                                $98 = HEAP16[$92>>1]|0;
                                $99 = $98&65535;
                                $100 = (($84) + ($$sum<<4)|0);
                                $101 = +HEAPF32[$100>>2];
                                $102 = (($7) + ($99<<4)|0);
                                $103 = +HEAPF32[$102>>2];
                                $104 = $101 + $103;
                                HEAPF32[$102>>2] = $104;
                                $105 = (((($84) + ($$sum<<4)|0)) + 4|0);
                                $106 = +HEAPF32[$105>>2];
                                $107 = (((($7) + ($99<<4)|0)) + 4|0);
                                $108 = +HEAPF32[$107>>2];
                                $109 = $106 + $108;
                                HEAPF32[$107>>2] = $109;
                                $110 = (((($84) + ($$sum<<4)|0)) + 8|0);
                                $111 = +HEAPF32[$110>>2];
                                $112 = (((($7) + ($99<<4)|0)) + 8|0);
                                $113 = +HEAPF32[$112>>2];
                                $114 = $111 + $113;
                                HEAPF32[$112>>2] = $114;
                                $115 = (((($84) + ($$sum<<4)|0)) + 12|0);
                                $116 = +HEAPF32[$115>>2];
                                $117 = (((($7) + ($99<<4)|0)) + 12|0);
                                $118 = +HEAPF32[$117>>2];
                                $119 = $116 + $118;
                                HEAPF32[$117>>2] = $119;
                                $120 = (($i$18) + 1)|0;
                                $121 = ($120|0)==($52|0);
                                if ($121) {
                                    break;
                                } else {
                                    $i$18 = $120;
                                }
                            }
                        }
                        $122 = (($j$012) + 1)|0;
                        $123 = ($122|0)==($85|0);
                        if ($123) {
                            break;
                        } else {
                            $j$012 = $122;
                        }
                    }
                }
                $86 = HEAP16[$4>>1]|0;
                $87 = ($86<<16>>16)==(0);
                if (!($87)) {
                    $88 = HEAP16[$4>>1]|0;
                    $89 = $88&65535;
                    $xo$316 = 0;
                    while(1) {
                        $124 = (($10) + ($xo$316<<2)|0);
                        $125 = HEAP32[$124>>2]|0;
                        $126 = (+($125|0));
                        $127 = (($7) + ($xo$316<<4)|0);
                        $128 = +HEAPF32[$127>>2];
                        $129 = $128 / $126;
                        HEAPF32[$127>>2] = $129;
                        $130 = (((($7) + ($xo$316<<4)|0)) + 4|0);
                        $131 = +HEAPF32[$130>>2];
                        $132 = $131 / $126;
                        HEAPF32[$130>>2] = $132;
                        $133 = (((($7) + ($xo$316<<4)|0)) + 8|0);
                        $134 = +HEAPF32[$133>>2];
                        $135 = $134 / $126;
                        HEAPF32[$133>>2] = $135;
                        $136 = (((($7) + ($xo$316<<4)|0)) + 12|0);
                        $137 = +HEAPF32[$136>>2];
                        $138 = $137 / $126;
                        HEAPF32[$136>>2] = $138;
                        $139 = (($xo$316) + 1)|0;
                        $140 = ($139|0)==($89|0);
                        if ($140) {
                            break;
                        } else {
                            $xo$316 = $139;
                        }
                    }
                }
                __ZL22scale_image_output_rowP13scale_contextP11scale_colorP9Gif_Imagei($sctx,$7,$gfo,$yo$018);
                $141 = (($yo$018) + 1)|0;
                $142 = HEAP16[$53>>1]|0;
                $143 = $142&65535;
                $144 = ($141|0)==($143|0);
                if ($144) {
                    break;
                } else {
                    $yo$018 = $141;
                }
            }
            __ZL20scale_image_completeP13scale_contextP9Gif_Image($sctx,$gfo);
            _free($3);
            _free($7);
            _free($10);
            STACKTOP = sp;return;
        }
        function __ZL23scale_image_data_catromP13scale_contextP9Gif_Image($sctx,$gfo) {
            $sctx = $sctx|0;
            $gfo = $gfo|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            __ZL25scale_image_data_weightedP13scale_contextP9Gif_ImagePFddEd($sctx,$gfo,1,2.0);
            return;
        }
        function __ZL25scale_image_data_lanczos2P13scale_contextP9Gif_Image($sctx,$gfo) {
            $sctx = $sctx|0;
            $gfo = $gfo|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            __ZL25scale_image_data_weightedP13scale_contextP9Gif_ImagePFddEd($sctx,$gfo,2,2.0);
            return;
        }
        function __ZL25scale_image_data_lanczos3P13scale_contextP9Gif_Image($sctx,$gfo) {
            $sctx = $sctx|0;
            $gfo = $gfo|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            __ZL25scale_image_data_weightedP13scale_contextP9Gif_ImagePFddEd($sctx,$gfo,3,3.0);
            return;
        }
        function __ZL25scale_image_data_mitchellP13scale_contextP9Gif_Image($sctx,$gfo) {
            $sctx = $sctx|0;
            $gfo = $gfo|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            __ZL25scale_image_data_weightedP13scale_contextP9Gif_ImagePFddEd($sctx,$gfo,4,2.0);
            return;
        }
        function __ZL22scale_image_data_pointP13scale_contextP9Gif_Image($sctx,$gfo) {
            $sctx = $sctx|0;
            $gfo = $gfo|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $data$04 = 0, $data$1$lcssa = 0, $data$12 = 0, $xo$07 = 0, $xo$11 = 0, $yo$03 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($sctx)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($gfo)) + 4|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ((($gfo)) + 8|0);
            $5 = HEAP16[$4>>1]|0;
            $6 = $5&65535;
            $7 = (_Gif_Realloc(0,2,$6,19372,621)|0);
            $8 = HEAP16[$4>>1]|0;
            $9 = ($8<<16>>16)==(0);
            if (!($9)) {
                $10 = ((($gfo)) + 12|0);
                $11 = ((($sctx)) + 96|0);
                $12 = +HEAPF64[$11>>3];
                $13 = ((($1)) + 12|0);
                $xo$07 = 0;
                while(1) {
                    $20 = HEAP16[$10>>1]|0;
                    $21 = $20&65535;
                    $22 = (($21) + ($xo$07))|0;
                    $23 = (+($22|0));
                    $24 = $23 + 0.5;
                    $25 = $12 * $24;
                    $26 = (~~(($25)));
                    $27 = HEAP16[$13>>1]|0;
                    $28 = $27&65535;
                    $29 = (($26) - ($28))|0;
                    $30 = $29&65535;
                    $31 = (($7) + ($xo$07<<1)|0);
                    HEAP16[$31>>1] = $30;
                    $32 = (($xo$07) + 1)|0;
                    $33 = HEAP16[$4>>1]|0;
                    $34 = $33&65535;
                    $35 = ($32|0)==($34|0);
                    if ($35) {
                        break;
                    } else {
                        $xo$07 = $32;
                    }
                }
            }
            $14 = ((($gfo)) + 10|0);
            $15 = HEAP16[$14>>1]|0;
            $16 = ($15<<16>>16)==(0);
            if ($16) {
                _free($7);
                return;
            }
            $17 = ((($gfo)) + 14|0);
            $18 = ((($sctx)) + 104|0);
            $19 = ((($1)) + 14|0);
            $data$04 = $3;$yo$03 = 0;
            while(1) {
                $36 = HEAP16[$17>>1]|0;
                $37 = $36&65535;
                $38 = (($37) + ($yo$03))|0;
                $39 = (+($38|0));
                $40 = $39 + 0.5;
                $41 = +HEAPF64[$18>>3];
                $42 = $41 * $40;
                $43 = (~~(($42)));
                $44 = HEAP16[$19>>1]|0;
                $45 = $44&65535;
                $46 = (($43) - ($45))|0;
                $47 = HEAP32[$1>>2]|0;
                $48 = (($47) + ($46<<2)|0);
                $49 = HEAP32[$48>>2]|0;
                $50 = HEAP16[$4>>1]|0;
                $51 = ($50<<16>>16)==(0);
                if ($51) {
                    $data$1$lcssa = $data$04;
                } else {
                    $data$12 = $data$04;$xo$11 = 0;
                    while(1) {
                        $52 = (($7) + ($xo$11<<1)|0);
                        $53 = HEAP16[$52>>1]|0;
                        $54 = $53&65535;
                        $55 = (($49) + ($54)|0);
                        $56 = HEAP8[$55>>0]|0;
                        HEAP8[$data$12>>0] = $56;
                        $57 = (($xo$11) + 1)|0;
                        $58 = ((($data$12)) + 1|0);
                        $59 = HEAP16[$4>>1]|0;
                        $60 = $59&65535;
                        $61 = ($57|0)==($60|0);
                        if ($61) {
                            $data$1$lcssa = $58;
                            break;
                        } else {
                            $data$12 = $58;$xo$11 = $57;
                        }
                    }
                }
                $62 = (($yo$03) + 1)|0;
                $63 = HEAP16[$14>>1]|0;
                $64 = $63&65535;
                $65 = ($62|0)==($64|0);
                if ($65) {
                    break;
                } else {
                    $data$04 = $data$1$lcssa;$yo$03 = $62;
                }
            }
            _free($7);
            return;
        }
        function __ZL21scale_weight_mitchelld($x) {
            $x = +$x;
            var $0 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+__ZL18scale_weight_cubicddd($x,0.33333333333333331,0.33333333333333331));
            return (+$0);
        }
        function __ZL25scale_image_data_weightedP13scale_contextP9Gif_ImagePFddEd($sctx,$gfo,$weightf,$radius) {
            $sctx = $sctx|0;
            $gfo = $gfo|0;
            $weightf = $weightf|0;
            $radius = +$radius;
            var $$ = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0;
            var $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
            var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
            var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0;
            var $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0;
            var $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
            var $201 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
            var $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
            var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
            var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
            var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, $w$025 = 0, $w$1 = 0, $w$1$lcssa = 0, $w$219 = 0, $w$3$lcssa = 0, $w$315 = 0, $ww$0 = 0, $ww$0$lcssa = 0, $xo$021 = 0, $xo$112 = 0, $xo$214 = 0, $yi$027 = 0;
            var $yo$018 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfo)) + 8|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = (_Gif_Realloc(0,16,$2,19372,1057)|0);
            $4 = HEAP16[$0>>1]|0;
            $5 = $4&65535;
            $6 = ((($sctx)) + 28|0);
            $7 = HEAP32[$6>>2]|0;
            $8 = Math_imul($5, $7)|0;
            $9 = (_Gif_Realloc(0,16,$8,19372,1058)|0);
            $10 = ((($sctx)) + 128|0);
            $11 = HEAP32[$10>>2]|0;
            $12 = ($11|0)==(0|0);
            if ($12) {
                $13 = ((($sctx)) + 24|0);
                $14 = HEAP32[$13>>2]|0;
                $15 = ((($sctx)) + 56|0);
                $16 = HEAP32[$15>>2]|0;
                __ZL22scale_weightset_createP15scale_weightsetiiPFddEd($10,$14,$16,$weightf,$radius);
                $17 = ((($sctx)) + 136|0);
                $18 = HEAP32[$6>>2]|0;
                $19 = ((($sctx)) + 60|0);
                $20 = HEAP32[$19>>2]|0;
                __ZL22scale_weightset_createP15scale_weightsetiiPFddEd($17,$18,$20,$weightf,$radius);
            }
            __ZL19scale_image_prepareP13scale_context($sctx);
            $21 = ((($sctx)) + 104|0);
            $22 = +HEAPF64[$21>>3];
            $23 = $22 > 1.0;
            $24 = $23 ? $22 : 1.0;
            $25 = $24 * $radius;
            $26 = ((($gfo)) + 14|0);
            $27 = HEAP16[$26>>1]|0;
            $28 = $27&65535;
            $29 = (+($28|0));
            $30 = $22 * $29;
            $31 = $30 - $25;
            $32 = $31 + -1.0E-4;
            $33 = (+Math_floor((+$32)));
            $34 = (~~(($33)));
            $35 = ($34|0)<(0);
            $36 = ((($gfo)) + 10|0);
            $37 = HEAP16[$36>>1]|0;
            $38 = $37&65535;
            $39 = (($38) + ($28))|0;
            $40 = (+($39|0));
            $41 = $22 * $40;
            $42 = $25 + $41;
            $43 = $42 + 1.0E-4;
            $44 = (+Math_ceil((+$43)));
            $45 = (~~(($44)));
            $46 = (($45) + 1)|0;
            $47 = HEAP32[$6>>2]|0;
            $48 = ($46|0)<($47|0);
            $49 = HEAP32[$10>>2]|0;
            $50 = ((($gfo)) + 12|0);
            $51 = HEAP16[$50>>1]|0;
            $52 = $51&65535;
            $ww$0 = $49;
            while(1) {
                $53 = ((($ww$0)) + 8|0);
                $54 = HEAP32[$53>>2]|0;
                $55 = ($54|0)<($52|0);
                $56 = ((($ww$0)) + 12|0);
                if ($55) {
                    $ww$0 = $56;
                } else {
                    $ww$0$lcssa = $ww$0;
                    break;
                }
            }
            $57 = $35 ? 0 : $34;
            $$ = $48 ? $46 : $47;
            $58 = ($57|0)==($$|0);
            if (!($58)) {
                $59 = ((($sctx)) + 24|0);
                $60 = ((($sctx)) + 16|0);
                $61 = ((($ww$0$lcssa)) + 8|0);
                $yi$027 = $57;
                while(1) {
                    $62 = HEAP32[$59>>2]|0;
                    $63 = Math_imul($62, $yi$027)|0;
                    $64 = HEAP32[$60>>2]|0;
                    $65 = HEAP16[$0>>1]|0;
                    $66 = $65&65535;
                    $67 = Math_imul($66, $yi$027)|0;
                    $68 = ($65<<16>>16)==(0);
                    if (!($68)) {
                        $xo$021 = 0;
                        while(1) {
                            $$sum3 = (($xo$021) + ($67))|0;
                            $82 = (($9) + ($$sum3<<4)|0);
                            __ZL8sc_clearP11scale_color($82);
                            $83 = (($xo$021) + 1)|0;
                            $84 = HEAP16[$0>>1]|0;
                            $85 = $84&65535;
                            $86 = ($83|0)==($85|0);
                            if ($86) {
                                break;
                            } else {
                                $xo$021 = $83;
                            }
                        }
                    }
                    $69 = HEAP32[$61>>2]|0;
                    $70 = HEAP16[$50>>1]|0;
                    $71 = $70&65535;
                    $72 = HEAP16[$0>>1]|0;
                    $73 = $72&65535;
                    $74 = (($73) + ($71))|0;
                    $75 = ($69|0)<($74|0);
                    if ($75) {
                        $76 = HEAP16[$50>>1]|0;
                        $77 = $76&65535;
                        $78 = $76&65535;
                        $79 = HEAP16[$0>>1]|0;
                        $80 = $79&65535;
                        $81 = (($80) + ($78))|0;
                        $90 = $61;$w$025 = $ww$0$lcssa;
                        while(1) {
                            $87 = ((($w$025)) + 4|0);
                            $88 = HEAP32[$87>>2]|0;
                            $$sum1 = (($88) + ($63))|0;
                            $89 = HEAP32[$90>>2]|0;
                            $91 = (($89) + ($67))|0;
                            $$sum2 = (($91) - ($77))|0;
                            $92 = (($64) + ($$sum1<<4)|0);
                            $93 = +HEAPF32[$92>>2];
                            $94 = +HEAPF32[$w$025>>2];
                            $95 = $93 * $94;
                            $96 = (($9) + ($$sum2<<4)|0);
                            $97 = +HEAPF32[$96>>2];
                            $98 = $95 + $97;
                            HEAPF32[$96>>2] = $98;
                            $99 = (((($64) + ($$sum1<<4)|0)) + 4|0);
                            $100 = +HEAPF32[$99>>2];
                            $101 = +HEAPF32[$w$025>>2];
                            $102 = $100 * $101;
                            $103 = (((($9) + ($$sum2<<4)|0)) + 4|0);
                            $104 = +HEAPF32[$103>>2];
                            $105 = $102 + $104;
                            HEAPF32[$103>>2] = $105;
                            $106 = (((($64) + ($$sum1<<4)|0)) + 8|0);
                            $107 = +HEAPF32[$106>>2];
                            $108 = +HEAPF32[$w$025>>2];
                            $109 = $107 * $108;
                            $110 = (((($9) + ($$sum2<<4)|0)) + 8|0);
                            $111 = +HEAPF32[$110>>2];
                            $112 = $109 + $111;
                            HEAPF32[$110>>2] = $112;
                            $113 = (((($64) + ($$sum1<<4)|0)) + 12|0);
                            $114 = +HEAPF32[$113>>2];
                            $115 = +HEAPF32[$w$025>>2];
                            $116 = $114 * $115;
                            $117 = (((($9) + ($$sum2<<4)|0)) + 12|0);
                            $118 = +HEAPF32[$117>>2];
                            $119 = $116 + $118;
                            HEAPF32[$117>>2] = $119;
                            $120 = ((($w$025)) + 12|0);
                            $121 = ((($w$025)) + 20|0);
                            $122 = HEAP32[$121>>2]|0;
                            $123 = ($122|0)<($81|0);
                            if ($123) {
                                $90 = $121;$w$025 = $120;
                            } else {
                                break;
                            }
                        }
                    }
                    $124 = (($yi$027) + 1)|0;
                    $125 = ($124|0)==($$|0);
                    if ($125) {
                        break;
                    } else {
                        $yi$027 = $124;
                    }
                }
            }
            $126 = ((($sctx)) + 136|0);
            $127 = HEAP32[$126>>2]|0;
            $128 = HEAP16[$26>>1]|0;
            $129 = $128&65535;
            $w$1 = $127;
            while(1) {
                $130 = ((($w$1)) + 8|0);
                $131 = HEAP32[$130>>2]|0;
                $132 = ($131|0)<($129|0);
                $133 = ((($w$1)) + 12|0);
                if ($132) {
                    $w$1 = $133;
                } else {
                    $w$1$lcssa = $w$1;
                    break;
                }
            }
            $134 = HEAP16[$36>>1]|0;
            $135 = ($134<<16>>16)==(0);
            if ($135) {
                __ZL20scale_image_completeP13scale_contextP9Gif_Image($sctx,$gfo);
                _free($3);
                _free($9);
                return;
            } else {
                $w$219 = $w$1$lcssa;$yo$018 = 0;
            }
            L26: while(1) {
                $136 = HEAP16[$0>>1]|0;
                $137 = ($136<<16>>16)==(0);
                if (!($137)) {
                    $xo$112 = 0;
                    while(1) {
                        $147 = (($3) + ($xo$112<<4)|0);
                        __ZL8sc_clearP11scale_color($147);
                        $148 = (($xo$112) + 1)|0;
                        $149 = HEAP16[$0>>1]|0;
                        $150 = $149&65535;
                        $151 = ($148|0)==($150|0);
                        if ($151) {
                            break;
                        } else {
                            $xo$112 = $148;
                        }
                    }
                }
                $138 = ((($w$219)) + 8|0);
                $139 = HEAP32[$138>>2]|0;
                $140 = HEAP16[$26>>1]|0;
                $141 = $140&65535;
                $142 = (($yo$018) + 1)|0;
                $143 = (($142) + ($141))|0;
                $144 = ($139|0)<($143|0);
                if ($144) {
                    $145 = HEAP16[$0>>1]|0;
                    $146 = $145&65535;
                    $w$315 = $w$219;
                    while(1) {
                        $152 = ((($w$315)) + 4|0);
                        $153 = HEAP32[$152>>2]|0;
                        $154 = Math_imul($146, $153)|0;
                        $155 = ($153|0)>=($57|0);
                        $156 = ($153|0)<($$|0);
                        $or$cond = $155 & $156;
                        if (!($or$cond)) {
                            label = 23;
                            break L26;
                        }
                        $157 = HEAP16[$0>>1]|0;
                        $158 = ($157<<16>>16)==(0);
                        if (!($158)) {
                            $159 = HEAP16[$0>>1]|0;
                            $160 = $159&65535;
                            $xo$214 = 0;
                            while(1) {
                                $$sum = (($xo$214) + ($154))|0;
                                $161 = (($9) + ($$sum<<4)|0);
                                $162 = +HEAPF32[$161>>2];
                                $163 = +HEAPF32[$w$315>>2];
                                $164 = $162 * $163;
                                $165 = (($3) + ($xo$214<<4)|0);
                                $166 = +HEAPF32[$165>>2];
                                $167 = $166 + $164;
                                HEAPF32[$165>>2] = $167;
                                $168 = (((($9) + ($$sum<<4)|0)) + 4|0);
                                $169 = +HEAPF32[$168>>2];
                                $170 = +HEAPF32[$w$315>>2];
                                $171 = $169 * $170;
                                $172 = (((($3) + ($xo$214<<4)|0)) + 4|0);
                                $173 = +HEAPF32[$172>>2];
                                $174 = $173 + $171;
                                HEAPF32[$172>>2] = $174;
                                $175 = (((($9) + ($$sum<<4)|0)) + 8|0);
                                $176 = +HEAPF32[$175>>2];
                                $177 = +HEAPF32[$w$315>>2];
                                $178 = $176 * $177;
                                $179 = (((($3) + ($xo$214<<4)|0)) + 8|0);
                                $180 = +HEAPF32[$179>>2];
                                $181 = $180 + $178;
                                HEAPF32[$179>>2] = $181;
                                $182 = (((($9) + ($$sum<<4)|0)) + 12|0);
                                $183 = +HEAPF32[$182>>2];
                                $184 = +HEAPF32[$w$315>>2];
                                $185 = $183 * $184;
                                $186 = (((($3) + ($xo$214<<4)|0)) + 12|0);
                                $187 = +HEAPF32[$186>>2];
                                $188 = $187 + $185;
                                HEAPF32[$186>>2] = $188;
                                $189 = (($xo$214) + 1)|0;
                                $190 = ($189|0)==($160|0);
                                if ($190) {
                                    break;
                                } else {
                                    $xo$214 = $189;
                                }
                            }
                        }
                        $191 = ((($w$315)) + 12|0);
                        $192 = ((($w$315)) + 20|0);
                        $193 = HEAP32[$192>>2]|0;
                        $194 = HEAP16[$26>>1]|0;
                        $195 = $194&65535;
                        $196 = (($142) + ($195))|0;
                        $197 = ($193|0)<($196|0);
                        if ($197) {
                            $w$315 = $191;
                        } else {
                            $w$3$lcssa = $191;
                            break;
                        }
                    }
                } else {
                    $w$3$lcssa = $w$219;
                }
                __ZL22scale_image_output_rowP13scale_contextP11scale_colorP9Gif_Imagei($sctx,$3,$gfo,$yo$018);
                $198 = (($yo$018) + 1)|0;
                $199 = HEAP16[$36>>1]|0;
                $200 = $199&65535;
                $201 = ($198|0)==($200|0);
                if ($201) {
                    label = 27;
                    break;
                } else {
                    $w$219 = $w$3$lcssa;$yo$018 = $198;
                }
            }
            if ((label|0) == 23) {
                ___assert_fail((19831|0),(19372|0),1098,(19863|0));
                // unreachable;
            }
            else if ((label|0) == 27) {
                __ZL20scale_image_completeP13scale_contextP9Gif_Image($sctx,$gfo);
                _free($3);
                _free($9);
                return;
            }
        }
        function __ZL22scale_weightset_createP15scale_weightsetiiPFddEd($wset,$nin,$nout,$weightf,$radius) {
            $wset = $wset|0;
            $nin = $nin|0;
            $nout = $nout|0;
            $weightf = $weightf|0;
            $radius = +$radius;
            var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, $ipos0$02 = 0, $opos$05 = 0, $sum$0$lcssa = 0.0, $sum$01 = 0.0, $sum$1 = 0.0, $wset0$03 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+($nin|0));
            $1 = (+($nout|0));
            $2 = $0 / $1;
            $3 = $2 > 1.0;
            $4 = $3 ? $2 : 1.0;
            $5 = ($nout|0)==(0);
            if ($5) {
                __ZL19scale_weightset_addP15scale_weightsetiid($wset,$nin,$nout,0.0);
                return;
            }
            $6 = $4 * $radius;
            $7 = ((($wset)) + 4|0);
            $8 = (($nin) + -1)|0;
            $opos$05 = 0;
            while(1) {
                $9 = (+($opos$05|0));
                $10 = $9 + 0.5;
                $11 = $2 * $10;
                $12 = $11 + -0.5;
                $13 = $12 - $6;
                $14 = $13 + -1.0E-4;
                $15 = (+Math_ceil((+$14)));
                $16 = (~~(($15)));
                $17 = $6 + $12;
                $18 = $17 + 1.0E-4;
                $19 = (+Math_floor((+$18)));
                $20 = (~~(($19)));
                $21 = (($20) + 1)|0;
                $22 = HEAP32[$7>>2]|0;
                $23 = ($16|0)==($21|0);
                if ($23) {
                    $sum$0$lcssa = 0.0;
                } else {
                    $ipos0$02 = $16;$sum$01 = 0.0;
                    while(1) {
                        $28 = (+($ipos0$02|0));
                        $29 = $28 - $12;
                        $30 = $29 / $4;
                        $31 = (+FUNCTION_TABLE_dd[$weightf & 7]($30));
                        $32 = $31 != 0.0;
                        if ($32) {
                            $33 = ($ipos0$02|0)<(0);
                            $34 = ($ipos0$02|0)<($nin|0);
                            $35 = $34 ? $ipos0$02 : $8;
                            $36 = $33 ? 0 : $35;
                            __ZL19scale_weightset_addP15scale_weightsetiid($wset,$36,$opos$05,$31);
                            $37 = $sum$01 + $31;
                            $sum$1 = $37;
                        } else {
                            $sum$1 = $sum$01;
                        }
                        $38 = (($ipos0$02) + 1)|0;
                        $39 = ($38|0)==($21|0);
                        if ($39) {
                            $sum$0$lcssa = $sum$1;
                            break;
                        } else {
                            $ipos0$02 = $38;$sum$01 = $sum$1;
                        }
                    }
                }
                $24 = HEAP32[$7>>2]|0;
                $25 = ($22|0)==($24|0);
                if (!($25)) {
                    $26 = HEAP32[$wset>>2]|0;
                    $27 = HEAP32[$7>>2]|0;
                    $wset0$03 = $22;
                    while(1) {
                        $40 = (($26) + (($wset0$03*12)|0)|0);
                        $41 = +HEAPF32[$40>>2];
                        $42 = $41;
                        $43 = $42 / $sum$0$lcssa;
                        $44 = $43;
                        HEAPF32[$40>>2] = $44;
                        $45 = (($wset0$03) + 1)|0;
                        $46 = ($45|0)==($27|0);
                        if ($46) {
                            break;
                        } else {
                            $wset0$03 = $45;
                        }
                    }
                }
                $47 = (($opos$05) + 1)|0;
                $48 = ($47|0)==($nout|0);
                if ($48) {
                    break;
                } else {
                    $opos$05 = $47;
                }
            }
            __ZL19scale_weightset_addP15scale_weightsetiid($wset,$nin,$nout,0.0);
            return;
        }
        function __ZL19scale_image_prepareP13scale_context($sctx) {
            $sctx = $sctx|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($sctx)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 24|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($3|0)==(0|0);
            if ($4) {
                $10 = ((($sctx)) + 144|0);
                $11 = ((($sctx)) + 12|0);
                HEAP32[$11>>2] = $10;
                $12 = ((($sctx)) + 156|0);
                $13 = HEAP32[$12>>2]|0;
                $14 = ($13|0)==(0|0);
                if ($14) {
                    __Z8kd3_initP8kd3_treePFvP6kcolorE($10,0);
                }
                __ZL29scale_image_update_global_kd3P13scale_context($sctx);
                $15 = HEAP32[$11>>2]|0;
                $16 = HEAP32[$15>>2]|0;
                $17 = ($16|0)==(0|0);
                if ($17) {
                    __Z9kd3_buildP8kd3_tree($15);
                }
                $18 = HEAP32[$11>>2]|0;
                __ZL14kd3_enable_allP8kd3_tree232($18);
            } else {
                $5 = ((($sctx)) + 180|0);
                $6 = ((($sctx)) + 12|0);
                HEAP32[$6>>2] = $5;
                $7 = HEAP32[$0>>2]|0;
                $8 = ((($7)) + 24|0);
                $9 = HEAP32[$8>>2]|0;
                __Z14kd3_init_buildP8kd3_treePFvP6kcolorEPK12Gif_Colormap($5,0,$9);
            }
            $19 = HEAP32[$0>>2]|0;
            $20 = ((($19)) + 20|0);
            $21 = HEAP16[$20>>1]|0;
            $22 = $21 << 16 >> 16;
            $23 = ($21<<16>>16)>(-1);
            if ($23) {
                $24 = ((($sctx)) + 12|0);
                $25 = HEAP32[$24>>2]|0;
                $26 = ((($25)) + 16|0);
                $27 = HEAP32[$26>>2]|0;
                $28 = ($22|0)<($27|0);
                if ($28) {
                    __ZL11kd3_disableP8kd3_treei233($25,$22);
                }
            }
            $29 = ((($sctx)) + 16|0);
            $30 = HEAP32[$29>>2]|0;
            $31 = ($30|0)==(0|0);
            if (!($31)) {
                $45 = HEAP32[$0>>2]|0;
                $46 = ((($sctx)) + 12|0);
                $47 = HEAP32[$46>>2]|0;
                $48 = ((($47)) + 12|0);
                $49 = HEAP32[$48>>2]|0;
                __ZL14ksscreen_applyP8ksscreenPK9Gif_ImagePK6kcolor($29,$45,$49);
                return;
            }
            $32 = HEAP32[$sctx>>2]|0;
            __ZL13ksscreen_initP8ksscreenP10Gif_Streamii($29,$32);
            $33 = ((($sctx)) + 48|0);
            $34 = HEAP32[$sctx>>2]|0;
            $35 = ((($sctx)) + 56|0);
            $36 = HEAP32[$35>>2]|0;
            $37 = ((($sctx)) + 60|0);
            $38 = HEAP32[$37>>2]|0;
            __ZL13kcscreen_initP8kcscreenP10Gif_Streamii($33,$34,$36,$38);
            $39 = ((($sctx)) + 72|0);
            $40 = HEAP32[$sctx>>2]|0;
            $41 = ((($sctx)) + 80|0);
            $42 = HEAP32[$41>>2]|0;
            $43 = ((($sctx)) + 84|0);
            $44 = HEAP32[$43>>2]|0;
            __ZL13kcscreen_initP8kcscreenP10Gif_Streamii($39,$40,$42,$44);
            $45 = HEAP32[$0>>2]|0;
            $46 = ((($sctx)) + 12|0);
            $47 = HEAP32[$46>>2]|0;
            $48 = ((($47)) + 12|0);
            $49 = HEAP32[$48>>2]|0;
            __ZL14ksscreen_applyP8ksscreenPK9Gif_ImagePK6kcolor($29,$45,$49);
            return;
        }
        function __ZL8sc_clearP11scale_color($x) {
            $x = $x|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            ;HEAP32[$x>>2]=0|0;HEAP32[$x+4>>2]=0|0;HEAP32[$x+8>>2]=0|0;HEAP32[$x+12>>2]=0|0;
            return;
        }
        function __ZL22scale_image_output_rowP13scale_contextP11scale_colorP9Gif_Imagei($sctx,$sc,$gfo,$yo) {
            $sctx = $sctx|0;
            $sc = $sc|0;
            $gfo = $gfo|0;
            $yo = $yo|0;
            var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0;
            var $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
            var $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0;
            var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $xo$06 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $0 = sp;
            $1 = ((($sctx)) + 80|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($gfo)) + 14|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = (($5) + ($yo))|0;
            $7 = Math_imul($6, $2)|0;
            $8 = ((($gfo)) + 12|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = $9&65535;
            $11 = (($7) + ($10))|0;
            $12 = ((($sctx)) + 72|0);
            $13 = HEAP32[$12>>2]|0;
            $14 = ((($gfo)) + 8|0);
            $15 = HEAP16[$14>>1]|0;
            $16 = ($15<<16>>16)==(0);
            if ($16) {
                STACKTOP = sp;return;
            } else {
                $xo$06 = 0;
            }
            while(1) {
                $17 = (((($sc) + ($xo$06<<4)|0)) + 12|0);
                $18 = +HEAPF32[$17>>2];
                $19 = !($18 <= 8191.0);
                if ($19) {
                    $31 = !($18 <= 31743.0);
                    if (!($31)) {
                        $32 = +HEAPF32[$17>>2];
                        $33 = 32767.0 / $32;
                        $34 = (($sc) + ($xo$06<<4)|0);
                        $35 = +HEAPF32[$34>>2];
                        $36 = $33 * $35;
                        HEAPF32[$34>>2] = $36;
                        $37 = +HEAPF32[$17>>2];
                        $38 = 32767.0 / $37;
                        $39 = (((($sc) + ($xo$06<<4)|0)) + 4|0);
                        $40 = +HEAPF32[$39>>2];
                        $41 = $38 * $40;
                        HEAPF32[$39>>2] = $41;
                        $42 = +HEAPF32[$17>>2];
                        $43 = 32767.0 / $42;
                        $44 = (((($sc) + ($xo$06<<4)|0)) + 8|0);
                        $45 = +HEAPF32[$44>>2];
                        $46 = $43 * $45;
                        HEAPF32[$44>>2] = $46;
                        $47 = +HEAPF32[$17>>2];
                        $48 = 32767.0 / $47;
                        $49 = (((($sc) + ($xo$06<<4)|0)) + 12|0);
                        $50 = $48 * $47;
                        HEAPF32[$49>>2] = $50;
                    }
                    $$sum1 = (($xo$06) + ($11))|0;
                    $51 = (($sc) + ($xo$06<<4)|0);
                    $52 = +HEAPF32[$51>>2];
                    $53 = $52;
                    $54 = $53 + 0.5;
                    $55 = (~~(($54)));
                    $56 = ($55|0)<(32767);
                    $57 = $56 ? $55 : 32767;
                    $58 = ($57|0)<(0);
                    $59 = $57&65535;
                    $60 = $58 ? 0 : $59;
                    $61 = (($13) + ($$sum1<<3)|0);
                    HEAP16[$61>>1] = $60;
                    $62 = (((($sc) + ($xo$06<<4)|0)) + 4|0);
                    $63 = +HEAPF32[$62>>2];
                    $64 = $63;
                    $65 = $64 + 0.5;
                    $66 = (~~(($65)));
                    $67 = ($66|0)<(32767);
                    $68 = $67 ? $66 : 32767;
                    $69 = ($68|0)<(0);
                    $70 = $68&65535;
                    $71 = $69 ? 0 : $70;
                    $72 = (((($13) + ($$sum1<<3)|0)) + 2|0);
                    HEAP16[$72>>1] = $71;
                    $73 = (((($sc) + ($xo$06<<4)|0)) + 8|0);
                    $74 = +HEAPF32[$73>>2];
                    $75 = $74;
                    $76 = $75 + 0.5;
                    $77 = (~~(($76)));
                    $78 = ($77|0)<(32767);
                    $79 = $78 ? $77 : 32767;
                    $80 = ($79|0)<(0);
                    $81 = $79&65535;
                    $82 = $80 ? 0 : $81;
                    $83 = (((($13) + ($$sum1<<3)|0)) + 4|0);
                    HEAP16[$83>>1] = $82;
                    $$sum = (($xo$06) + ($11))|0;
                    $84 = (((($13) + ($$sum<<3)|0)) + 6|0);
                    HEAP16[$84>>1] = 32767;
                } else {
                    $$sum2 = (($xo$06) + ($11))|0;
                    $20 = (($13) + ($$sum2<<3)|0);
                    __ZL15kac_transparentv($0);
                    $21 = $0;
                    $22 = $21;
                    $23 = HEAP32[$22>>2]|0;
                    $24 = (($21) + 4)|0;
                    $25 = $24;
                    $26 = HEAP32[$25>>2]|0;
                    $27 = $20;
                    $28 = $27;
                    HEAP16[$28>>1]=$23&65535;HEAP16[$28+2>>1]=$23>>>16;
                    $29 = (($27) + 4)|0;
                    $30 = $29;
                    HEAP16[$30>>1]=$26&65535;HEAP16[$30+2>>1]=$26>>>16;
                }
                $85 = (($xo$06) + 1)|0;
                $86 = HEAP16[$14>>1]|0;
                $87 = $86&65535;
                $88 = ($85|0)==($87|0);
                if ($88) {
                    break;
                } else {
                    $xo$06 = $85;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL20scale_image_completeP13scale_contextP9Gif_Image($sctx,$gfo) {
            $sctx = $sctx|0;
            $gfo = $gfo|0;
            var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
            var $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
            var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
            var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
            var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
            var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dist = 0, $max_dist$0 = 0, $max_dist$1$lcssa = 0;
            var $max_dist$12 = 0, $max_dist$2 = 0, $xo$03 = 0, $yo$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $dist = sp;
            $0 = ((($sctx)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($1)) + 20|0);
            $3 = HEAP16[$2>>1]|0;
            $4 = ((($gfo)) + 10|0);
            $5 = ((($sctx)) + 12|0);
            $6 = ((($sctx)) + 216|0);
            $7 = ((($sctx)) + 220|0);
            $8 = ((($sctx)) + 80|0);
            $9 = ((($gfo)) + 14|0);
            $10 = ((($gfo)) + 12|0);
            $11 = ((($sctx)) + 72|0);
            $12 = ((($sctx)) + 56|0);
            $13 = ((($sctx)) + 48|0);
            $14 = ((($gfo)) + 8|0);
            $15 = $3&255;
            $16 = ((($sctx)) + 12|0);
            $17 = ($3<<16>>16)>(-1);
            $18 = $3&255;
            $max_dist$0 = 0;$yo$0 = 0;
            while(1) {
                $19 = HEAP16[$4>>1]|0;
                $20 = $19&65535;
                $21 = ($yo$0|0)==($20|0);
                if ($21) {
                    $64 = HEAP32[$0>>2]|0;
                    $65 = ((($64)) + 24|0);
                    $66 = HEAP32[$65>>2]|0;
                    $67 = ($66|0)==(0|0);
                    if ($67) {
                        $68 = HEAP32[$sctx>>2]|0;
                        $69 = ((($68)) + 12|0);
                        $70 = HEAP32[$69>>2]|0;
                        $71 = HEAP32[$70>>2]|0;
                        $72 = HEAP32[$5>>2]|0;
                        $73 = ((($72)) + 16|0);
                        $74 = HEAP32[$73>>2]|0;
                        $75 = ($71|0)>($74|0);
                        if ($75) {
                            __ZL29scale_image_update_global_kd3P13scale_context($sctx);
                            $max_dist$0 = 0;$yo$0 = 0;
                            continue;
                        }
                    }
                    $76 = HEAP32[$6>>2]|0;
                    $77 = ($max_dist$0>>>0)>($76>>>0);
                    if (!($77)) {
                        break;
                    }
                    $78 = HEAP32[$0>>2]|0;
                    $79 = ((($78)) + 24|0);
                    $80 = HEAP32[$79>>2]|0;
                    $81 = ($80|0)==(0|0);
                    if ($81) {
                        $82 = HEAP32[$sctx>>2]|0;
                        $83 = ((($82)) + 12|0);
                        $84 = HEAP32[$83>>2]|0;
                        $86 = $84;
                    } else {
                        $86 = $80;
                    }
                    $85 = HEAP32[$86>>2]|0;
                    $87 = HEAP32[$7>>2]|0;
                    $88 = ($85|0)<($87|0);
                    if (!($88)) {
                        break;
                    }
                    $89 = (__ZL22scale_image_add_colorsP13scale_contextP9Gif_Image($sctx,$gfo)|0);
                    $90 = ($89|0)==(0);
                    if ($90) {
                        break;
                    } else {
                        $max_dist$0 = 0;$yo$0 = 0;
                        continue;
                    }
                }
                $22 = HEAP32[$gfo>>2]|0;
                $23 = (($22) + ($yo$0<<2)|0);
                $24 = HEAP32[$23>>2]|0;
                $25 = HEAP32[$8>>2]|0;
                $26 = HEAP16[$9>>1]|0;
                $27 = $26&65535;
                $28 = (($27) + ($yo$0))|0;
                $29 = Math_imul($28, $25)|0;
                $30 = HEAP16[$10>>1]|0;
                $31 = $30&65535;
                $32 = (($29) + ($31))|0;
                $33 = HEAP32[$11>>2]|0;
                $34 = HEAP32[$12>>2]|0;
                $35 = Math_imul($34, $28)|0;
                $36 = (($35) + ($31))|0;
                $37 = HEAP32[$13>>2]|0;
                $38 = HEAP16[$14>>1]|0;
                $39 = ($38<<16>>16)==(0);
                if ($39) {
                    $max_dist$1$lcssa = $max_dist$0;
                } else {
                    $max_dist$12 = $max_dist$0;$xo$03 = 0;
                    while(1) {
                        $$sum = (($32) + ($xo$03))|0;
                        $40 = (((($33) + ($$sum<<3)|0)) + 6|0);
                        $41 = HEAP16[$40>>1]|0;
                        $42 = ($41<<16>>16)==(0);
                        if ($42) {
                            $58 = (($24) + ($xo$03)|0);
                            HEAP8[$58>>0] = $15;
                            $max_dist$2 = $max_dist$12;
                        } else {
                            $43 = (($33) + ($$sum<<3)|0);
                            $44 = HEAP32[$16>>2]|0;
                            $45 = (__Z23kd3_closest_transformedP8kd3_treePK6kcolorPj($44,$43,$dist)|0);
                            $46 = $45&255;
                            $47 = (($24) + ($xo$03)|0);
                            HEAP8[$47>>0] = $46;
                            if ($17) {
                                $$sum1 = (($36) + ($xo$03))|0;
                                $48 = (((($37) + ($$sum1<<3)|0)) + 6|0);
                                $49 = HEAP16[$48>>1]|0;
                                $50 = ($49<<16>>16)==(0);
                                if (!($50)) {
                                    $51 = (($37) + ($$sum1<<3)|0);
                                    $52 = (__ZL11kc_distancePK6kcolorS1_222($51,$43)|0);
                                    $53 = HEAP32[$dist>>2]|0;
                                    $54 = ($52>>>0)>($53>>>0);
                                    if (!($54)) {
                                        HEAP8[$47>>0] = $18;
                                        HEAP32[$dist>>2] = $52;
                                    }
                                }
                            }
                            $55 = HEAP32[$dist>>2]|0;
                            $56 = ($55>>>0)>($max_dist$12>>>0);
                            $57 = $56 ? $55 : $max_dist$12;
                            $max_dist$2 = $57;
                        }
                        $59 = (($xo$03) + 1)|0;
                        $60 = HEAP16[$14>>1]|0;
                        $61 = $60&65535;
                        $62 = ($59|0)==($61|0);
                        if ($62) {
                            $max_dist$1$lcssa = $max_dist$2;
                            break;
                        } else {
                            $max_dist$12 = $max_dist$2;$xo$03 = $59;
                        }
                    }
                }
                $63 = (($yo$0) + 1)|0;
                $max_dist$0 = $max_dist$1$lcssa;$yo$0 = $63;
            }
            $91 = ((($sctx)) + 8|0);
            $92 = HEAP32[$91>>2]|0;
            $93 = HEAP32[$sctx>>2]|0;
            $94 = ((($93)) + 4|0);
            $95 = HEAP32[$94>>2]|0;
            $96 = (($95) + -1)|0;
            $97 = ($92|0)==($96|0);
            L29: do {
                if (!($97)) {
                    $98 = HEAP32[$0>>2]|0;
                    $99 = ((($sctx)) + 16|0);
                    __ZL16ksscreen_disposeP8ksscreenPK9Gif_Image($99,$98);
                    $100 = HEAP32[$0>>2]|0;
                    $101 = ((($100)) + 18|0);
                    $102 = HEAP8[$101>>0]|0;
                    switch ($102<<24>>24) {
                        case 3:  {
                            break L29;
                            break;
                        }
                        case 2:  {
                            $103 = ((($sctx)) + 48|0);
                            __ZL16kcscreen_disposeP8kcscreenPK9Gif_Image($103,$gfo);
                            break L29;
                            break;
                        }
                        default: {
                            $104 = ((($sctx)) + 48|0);
                            $105 = ((($sctx)) + 12|0);
                            $106 = HEAP32[$105>>2]|0;
                            $107 = ((($106)) + 12|0);
                            $108 = HEAP32[$107>>2]|0;
                            __ZL14kcscreen_applyP8kcscreenPK9Gif_ImagePK6kcolor($104,$gfo,$108);
                            break L29;
                        }
                    }
                }
            } while(0);
            $109 = HEAP32[$0>>2]|0;
            $110 = ((($109)) + 24|0);
            $111 = HEAP32[$110>>2]|0;
            $112 = ($111|0)==(0|0);
            if ($112) {
                STACKTOP = sp;return;
            }
            $113 = ((($sctx)) + 12|0);
            $114 = HEAP32[$113>>2]|0;
            __Z11kd3_cleanupP8kd3_tree($114);
            STACKTOP = sp;return;
        }
        function __ZL11kc_distancePK6kcolorS1_222($x,$y) {
            $x = $x|0;
            $y = $y|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP16[$x>>1]|0;
            $1 = $0 << 16 >> 16;
            $2 = HEAP16[$y>>1]|0;
            $3 = $2 << 16 >> 16;
            $4 = (($1) - ($3))|0;
            $5 = ((($x)) + 2|0);
            $6 = HEAP16[$5>>1]|0;
            $7 = $6 << 16 >> 16;
            $8 = ((($y)) + 2|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = $9 << 16 >> 16;
            $11 = (($7) - ($10))|0;
            $12 = ((($x)) + 4|0);
            $13 = HEAP16[$12>>1]|0;
            $14 = $13 << 16 >> 16;
            $15 = ((($y)) + 4|0);
            $16 = HEAP16[$15>>1]|0;
            $17 = $16 << 16 >> 16;
            $18 = (($14) - ($17))|0;
            $19 = Math_imul($4, $4)|0;
            $20 = Math_imul($11, $11)|0;
            $21 = (($20) + ($19))|0;
            $22 = Math_imul($18, $18)|0;
            $23 = (($21) + ($22))|0;
            return ($23|0);
        }
        function __ZL29scale_image_update_global_kd3P13scale_context($sctx) {
            $sctx = $sctx|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$sctx>>2]|0;
            $1 = ((($0)) + 12|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($sctx)) + 12|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ((($sctx)) + 144|0);
            $6 = ($4|0)==($5|0);
            if (!($6)) {
                ___assert_fail((20132|0),(19372|0),637,(20163|0));
                // unreachable;
            }
            $7 = HEAP32[$3>>2]|0;
            $8 = ((($7)) + 16|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = HEAP32[$2>>2]|0;
            $11 = ($9|0)<($10|0);
            if (!($11)) {
                return;
            }
            $12 = ((($2)) + 16|0);
            $15 = $9;$24 = $7;
            while(1) {
                $13 = HEAP32[$12>>2]|0;
                $14 = (((($13) + ($15<<3)|0)) + 1|0);
                $16 = HEAP8[$14>>0]|0;
                $17 = $16&255;
                $18 = (((($13) + ($15<<3)|0)) + 2|0);
                $19 = HEAP8[$18>>0]|0;
                $20 = $19&255;
                $21 = (((($13) + ($15<<3)|0)) + 3|0);
                $22 = HEAP8[$21>>0]|0;
                $23 = $22&255;
                __Z9kd3_add8gP8kd3_treeiii($24,$17,$20,$23);
                $25 = HEAP32[$3>>2]|0;
                $26 = ((($25)) + 16|0);
                $27 = HEAP32[$26>>2]|0;
                $28 = HEAP32[$2>>2]|0;
                $29 = ($27|0)<($28|0);
                if ($29) {
                    $15 = $27;$24 = $25;
                } else {
                    break;
                }
            }
            return;
        }
        function __ZL22scale_image_add_colorsP13scale_contextP9Gif_Image($sctx,$gfo) {
            $sctx = $sctx|0;
            $gfo = $gfo|0;
            var $$byval_copy = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
            var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
            var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
            var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
            var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
            var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $div = 0, $gfc = 0, $i$016 = 0, $i$18 = 0, $kch = 0, $nadded$0$lcssa = 0, $nadded$04 = 0, $xo$020 = 0, $yo$024 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 64|0;
            $$byval_copy = sp + 58|0;
            $kch = sp + 40|0;
            $div = sp + 16|0;
            $gfc = sp + 8|0;
            $0 = sp + 52|0;
            $1 = sp;
            $2 = ((($sctx)) + 4|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ((($3)) + 24|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = ($5|0)==(0|0);
            if ($6) {
                $7 = HEAP32[$sctx>>2]|0;
                $8 = ((($7)) + 12|0);
                $9 = HEAP32[$8>>2]|0;
                $19 = $9;
            } else {
                $19 = $5;
            }
            __Z11kchist_initP6kchist($kch);
            $10 = ((($gfo)) + 10|0);
            $11 = HEAP16[$10>>1]|0;
            $12 = ($11<<16>>16)==(0);
            if (!($12)) {
                $13 = ((($sctx)) + 80|0);
                $14 = ((($gfo)) + 14|0);
                $15 = ((($gfo)) + 12|0);
                $16 = ((($sctx)) + 72|0);
                $17 = ((($gfo)) + 8|0);
                $yo$024 = 0;
                while(1) {
                    $22 = HEAP32[$13>>2]|0;
                    $23 = HEAP16[$14>>1]|0;
                    $24 = $23&65535;
                    $25 = (($24) + ($yo$024))|0;
                    $26 = Math_imul($25, $22)|0;
                    $27 = HEAP16[$15>>1]|0;
                    $28 = $27&65535;
                    $29 = (($26) + ($28))|0;
                    $30 = HEAP32[$16>>2]|0;
                    $31 = HEAP16[$17>>1]|0;
                    $32 = ($31<<16>>16)==(0);
                    if (!($32)) {
                        $xo$020 = 0;
                        while(1) {
                            $$sum = (($29) + ($xo$020))|0;
                            $33 = (((($30) + ($$sum<<3)|0)) + 6|0);
                            $34 = HEAP16[$33>>1]|0;
                            $35 = ($34<<16>>16)==(0);
                            if (!($35)) {
                                $36 = (($30) + ($$sum<<3)|0);
                                ;HEAP16[$$byval_copy>>1]=HEAP16[$36>>1]|0;HEAP16[$$byval_copy+2>>1]=HEAP16[$36+2>>1]|0;HEAP16[$$byval_copy+4>>1]=HEAP16[$36+4>>1]|0;
                                (__Z10kchist_addP6kchist6kcolorj($kch,$$byval_copy,1)|0);
                            }
                            $37 = (($xo$020) + 1)|0;
                            $38 = HEAP16[$17>>1]|0;
                            $39 = $38&65535;
                            $40 = ($37|0)==($39|0);
                            if ($40) {
                                break;
                            } else {
                                $xo$020 = $37;
                            }
                        }
                    }
                    $41 = (($yo$024) + 1)|0;
                    $42 = HEAP16[$10>>1]|0;
                    $43 = $42&65535;
                    $44 = ($41|0)==($43|0);
                    if ($44) {
                        break;
                    } else {
                        $yo$024 = $41;
                    }
                }
            }
            $18 = HEAP32[$19>>2]|0;
            $20 = ($18|0)==(0);
            if (!($20)) {
                $21 = ((($19)) + 16|0);
                $i$016 = 0;
                while(1) {
                    $45 = HEAP32[$21>>2]|0;
                    $46 = (($45) + ($i$016<<3)|0);
                    __ZL11kc_makegfcgPK9Gif_Color227($0,$46);
                    ;HEAP16[$$byval_copy>>1]=HEAP16[$0>>1]|0;HEAP16[$$byval_copy+2>>1]=HEAP16[$0+2>>1]|0;HEAP16[$$byval_copy+4>>1]=HEAP16[$0+4>>1]|0;
                    (__Z10kchist_addP6kchist6kcolorj($kch,$$byval_copy,-1)|0);
                    $47 = (($i$016) + 1)|0;
                    $48 = HEAP32[$19>>2]|0;
                    $49 = ($47|0)==($48|0);
                    if ($49) {
                        break;
                    } else {
                        $i$016 = $47;
                    }
                }
            }
            __Z15kchist_compressP6kchist($kch);
            __Z16kcdiversity_initP11kcdiversityP6kchisti($div,$kch,0);
            $50 = ((($kch)) + 4|0);
            $51 = HEAP32[$50>>2]|0;
            $52 = ($51|0)==(0);
            L21: do {
                if (!($52)) {
                    $i$18 = 0;
                    while(1) {
                        $53 = HEAP32[$19>>2]|0;
                        $54 = ($i$18|0)==($53|0);
                        if ($54) {
                            break L21;
                        }
                        $55 = HEAP32[$kch>>2]|0;
                        $56 = (((($55) + (($i$18*12)|0)|0)) + 8|0);
                        $57 = HEAP32[$56>>2]|0;
                        $58 = ($57|0)==(-1);
                        if (!($58)) {
                            break L21;
                        }
                        (__Z18kcdiversity_chooseP11kcdiversityii($div,$i$18,0)|0);
                        $69 = (($i$18) + 1)|0;
                        $70 = HEAP32[$50>>2]|0;
                        $71 = ($69|0)==($70|0);
                        if ($71) {
                            break;
                        } else {
                            $i$18 = $69;
                        }
                    }
                }
            } while(0);
            $59 = ((($div)) + 8|0);
            $60 = HEAP32[$19>>2]|0;
            $61 = ((($sctx)) + 220|0);
            $62 = HEAP32[$61>>2]|0;
            $63 = ($60|0)<($62|0);
            if (!($63)) {
                $nadded$0$lcssa = 0;
                __Z19kcdiversity_cleanupP11kcdiversity($div);
                __Z14kchist_cleanupP6kchist($kch);
                $104 = ($nadded$0$lcssa|0)!=(0);
                $105 = $104&1;
                STACKTOP = sp;return ($105|0);
            }
            $64 = ((($sctx)) + 216|0);
            $65 = ((($sctx)) + 12|0);
            $66 = ((($gfc)) + 1|0);
            $67 = ((($gfc)) + 2|0);
            $68 = ((($gfc)) + 3|0);
            $nadded$04 = 0;
            while(1) {
                $72 = (__Z24kcdiversity_find_diverseP11kcdiversityd($div,0.0)|0);
                $73 = HEAP32[$50>>2]|0;
                $74 = ($72|0)<($73|0);
                if (!($74)) {
                    $nadded$0$lcssa = $nadded$04;
                    label = 22;
                    break;
                }
                $75 = HEAP32[$59>>2]|0;
                $76 = (($75) + ($72<<2)|0);
                $77 = HEAP32[$76>>2]|0;
                $78 = HEAP32[$64>>2]|0;
                $79 = ($77>>>0)>($78>>>0);
                if (!($79)) {
                    $nadded$0$lcssa = $nadded$04;
                    label = 22;
                    break;
                }
                (__Z18kcdiversity_chooseP11kcdiversityii($div,$72,0)|0);
                $80 = HEAP32[$kch>>2]|0;
                $81 = (($80) + (($72*12)|0)|0);
                __ZL9kc_togfcgPK6kcolor228($1,$81);
                $82 = $1;
                $83 = $82;
                $84 = HEAP32[$83>>2]|0;
                $85 = (($82) + 4)|0;
                $86 = $85;
                $87 = HEAP32[$86>>2]|0;
                $88 = $gfc;
                $89 = $88;
                HEAP32[$89>>2] = $84;
                $90 = (($88) + 4)|0;
                $91 = $90;
                HEAP32[$91>>2] = $87;
                $92 = HEAP32[$19>>2]|0;
                (_Gif_AddColor($19,$gfc,$92)|0);
                $93 = HEAP32[$65>>2]|0;
                $94 = HEAP8[$66>>0]|0;
                $95 = $94&255;
                $96 = HEAP8[$67>>0]|0;
                $97 = $96&255;
                $98 = HEAP8[$68>>0]|0;
                $99 = $98&255;
                __Z9kd3_add8gP8kd3_treeiii($93,$95,$97,$99);
                $100 = (($nadded$04) + 1)|0;
                $101 = HEAP32[$19>>2]|0;
                $102 = HEAP32[$61>>2]|0;
                $103 = ($101|0)<($102|0);
                if ($103) {
                    $nadded$04 = $100;
                } else {
                    $nadded$0$lcssa = $100;
                    label = 22;
                    break;
                }
            }
            if ((label|0) == 22) {
                __Z19kcdiversity_cleanupP11kcdiversity($div);
                __Z14kchist_cleanupP6kchist($kch);
                $104 = ($nadded$0$lcssa|0)!=(0);
                $105 = $104&1;
                STACKTOP = sp;return ($105|0);
            }
            return (0)|0;
        }
        function __ZL16ksscreen_disposeP8ksscreenPK9Gif_Image($kss,$gfi) {
            $kss = $kss|0;
            $gfi = $gfi|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
            var $9 = 0, $x$04 = 0, $y$03 = 0, $y$16 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 12|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($gfi)) + 8|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = (($5) + ($2))|0;
            $7 = ((($kss)) + 8|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = ($6>>>0)>($8>>>0);
            if ($9) {
                ___assert_fail((20018|0),(19372|0),525,(20066|0));
                // unreachable;
            }
            $10 = ((($gfi)) + 14|0);
            $11 = HEAP16[$10>>1]|0;
            $12 = $11&65535;
            $13 = ((($gfi)) + 10|0);
            $14 = HEAP16[$13>>1]|0;
            $15 = $14&65535;
            $16 = (($15) + ($12))|0;
            $17 = ((($kss)) + 12|0);
            $18 = HEAP32[$17>>2]|0;
            $19 = ($16>>>0)>($18>>>0);
            if ($19) {
                ___assert_fail((20083|0),(19372|0),526,(20066|0));
                // unreachable;
            }
            $20 = ((($gfi)) + 18|0);
            $21 = HEAP8[$20>>0]|0;
            switch ($21<<24>>24) {
                case 3:  {
                    $29 = HEAP16[$10>>1]|0;
                    $30 = $29&65535;
                    $31 = HEAP16[$13>>1]|0;
                    $32 = $31&65535;
                    $33 = (($32) + ($30))|0;
                    $34 = ($12|0)==($33|0);
                    if ($34) {
                        return;
                    }
                    $35 = ((($kss)) + 4|0);
                    $y$03 = $12;
                    while(1) {
                        $36 = HEAP32[$7>>2]|0;
                        $37 = Math_imul($36, $y$03)|0;
                        $38 = HEAP16[$0>>1]|0;
                        $39 = $38&65535;
                        $40 = (($39) + ($37))|0;
                        $41 = HEAP32[$kss>>2]|0;
                        $42 = (($41) + ($40<<4)|0);
                        $43 = HEAP32[$35>>2]|0;
                        $44 = (($43) + ($40<<4)|0);
                        $45 = HEAP16[$3>>1]|0;
                        $46 = $45&65535;
                        $47 = $46 << 4;
                        _memcpy(($42|0),($44|0),($47|0))|0;
                        $48 = (($y$03) + 1)|0;
                        $49 = HEAP16[$10>>1]|0;
                        $50 = $49&65535;
                        $51 = HEAP16[$13>>1]|0;
                        $52 = $51&65535;
                        $53 = (($52) + ($50))|0;
                        $54 = ($48|0)==($53|0);
                        if ($54) {
                            break;
                        } else {
                            $y$03 = $48;
                        }
                    }
                    return;
                    break;
                }
                case 2:  {
                    $22 = HEAP16[$10>>1]|0;
                    $23 = $22&65535;
                    $24 = HEAP16[$13>>1]|0;
                    $25 = $24&65535;
                    $26 = (($25) + ($23))|0;
                    $27 = ($12|0)==($26|0);
                    if ($27) {
                        return;
                    }
                    $28 = ((($kss)) + 16|0);
                    $y$16 = $12;
                    while(1) {
                        $55 = HEAP16[$0>>1]|0;
                        $56 = $55&65535;
                        $57 = $55&65535;
                        $58 = HEAP16[$3>>1]|0;
                        $59 = $58&65535;
                        $60 = (($59) + ($57))|0;
                        $61 = ($56|0)==($60|0);
                        if (!($61)) {
                            $x$04 = $56;
                            while(1) {
                                $62 = HEAP32[$7>>2]|0;
                                $63 = Math_imul($62, $y$16)|0;
                                $64 = (($63) + ($x$04))|0;
                                $65 = HEAP32[$kss>>2]|0;
                                $66 = (($65) + ($64<<4)|0);
                                ;HEAP32[$66>>2]=HEAP32[$28>>2]|0;HEAP32[$66+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$66+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$66+12>>2]=HEAP32[$28+12>>2]|0;
                                $67 = (($x$04) + 1)|0;
                                $68 = HEAP16[$0>>1]|0;
                                $69 = $68&65535;
                                $70 = HEAP16[$3>>1]|0;
                                $71 = $70&65535;
                                $72 = (($71) + ($69))|0;
                                $73 = ($67|0)==($72|0);
                                if ($73) {
                                    break;
                                } else {
                                    $x$04 = $67;
                                }
                            }
                        }
                        $74 = (($y$16) + 1)|0;
                        $75 = HEAP16[$10>>1]|0;
                        $76 = $75&65535;
                        $77 = HEAP16[$13>>1]|0;
                        $78 = $77&65535;
                        $79 = (($78) + ($76))|0;
                        $80 = ($74|0)==($79|0);
                        if ($80) {
                            break;
                        } else {
                            $y$16 = $74;
                        }
                    }
                    return;
                    break;
                }
                default: {
                    return;
                }
            }
        }
        function __ZL16kcscreen_disposeP8kcscreenPK9Gif_Image($kcs,$gfi) {
            $kcs = $kcs|0;
            $gfi = $gfi|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
            var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $x$04 = 0, $y$03 = 0, $y$16 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 12|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($gfi)) + 8|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = (($5) + ($2))|0;
            $7 = ((($kcs)) + 8|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = ($6>>>0)>($8>>>0);
            if ($9) {
                ___assert_fail((19889|0),(19372|0),441,(20001|0));
                // unreachable;
            }
            $10 = ((($gfi)) + 14|0);
            $11 = HEAP16[$10>>1]|0;
            $12 = $11&65535;
            $13 = ((($gfi)) + 10|0);
            $14 = HEAP16[$13>>1]|0;
            $15 = $14&65535;
            $16 = (($15) + ($12))|0;
            $17 = ((($kcs)) + 12|0);
            $18 = HEAP32[$17>>2]|0;
            $19 = ($16>>>0)>($18>>>0);
            if ($19) {
                ___assert_fail((19952|0),(19372|0),442,(20001|0));
                // unreachable;
            }
            $20 = ((($gfi)) + 18|0);
            $21 = HEAP8[$20>>0]|0;
            switch ($21<<24>>24) {
                case 3:  {
                    $29 = HEAP16[$10>>1]|0;
                    $30 = $29&65535;
                    $31 = HEAP16[$13>>1]|0;
                    $32 = $31&65535;
                    $33 = (($32) + ($30))|0;
                    $34 = ($12|0)==($33|0);
                    if ($34) {
                        return;
                    }
                    $35 = ((($kcs)) + 4|0);
                    $y$03 = $12;
                    while(1) {
                        $36 = HEAP32[$7>>2]|0;
                        $37 = Math_imul($36, $y$03)|0;
                        $38 = HEAP16[$0>>1]|0;
                        $39 = $38&65535;
                        $40 = (($39) + ($37))|0;
                        $41 = HEAP32[$kcs>>2]|0;
                        $42 = (($41) + ($40<<3)|0);
                        $43 = HEAP32[$35>>2]|0;
                        $44 = (($43) + ($40<<3)|0);
                        $45 = HEAP16[$3>>1]|0;
                        $46 = $45&65535;
                        $47 = $46 << 3;
                        _memcpy(($42|0),($44|0),($47|0))|0;
                        $48 = (($y$03) + 1)|0;
                        $49 = HEAP16[$10>>1]|0;
                        $50 = $49&65535;
                        $51 = HEAP16[$13>>1]|0;
                        $52 = $51&65535;
                        $53 = (($52) + ($50))|0;
                        $54 = ($48|0)==($53|0);
                        if ($54) {
                            break;
                        } else {
                            $y$03 = $48;
                        }
                    }
                    return;
                    break;
                }
                case 2:  {
                    $22 = HEAP16[$10>>1]|0;
                    $23 = $22&65535;
                    $24 = HEAP16[$13>>1]|0;
                    $25 = $24&65535;
                    $26 = (($25) + ($23))|0;
                    $27 = ($12|0)==($26|0);
                    if ($27) {
                        return;
                    }
                    $28 = ((($kcs)) + 16|0);
                    $y$16 = $12;
                    while(1) {
                        $55 = HEAP16[$0>>1]|0;
                        $56 = $55&65535;
                        $57 = $55&65535;
                        $58 = HEAP16[$3>>1]|0;
                        $59 = $58&65535;
                        $60 = (($59) + ($57))|0;
                        $61 = ($56|0)==($60|0);
                        if (!($61)) {
                            $x$04 = $56;
                            while(1) {
                                $62 = HEAP32[$7>>2]|0;
                                $63 = Math_imul($62, $y$16)|0;
                                $64 = (($63) + ($x$04))|0;
                                $65 = HEAP32[$kcs>>2]|0;
                                $66 = (($65) + ($64<<3)|0);
                                $67 = $28;
                                $68 = $67;
                                $69 = HEAPU16[$68>>1]|(HEAPU16[$68+2>>1]<<16);
                                $70 = (($67) + 4)|0;
                                $71 = $70;
                                $72 = HEAPU16[$71>>1]|(HEAPU16[$71+2>>1]<<16);
                                $73 = $66;
                                $74 = $73;
                                HEAP16[$74>>1]=$69&65535;HEAP16[$74+2>>1]=$69>>>16;
                                $75 = (($73) + 4)|0;
                                $76 = $75;
                                HEAP16[$76>>1]=$72&65535;HEAP16[$76+2>>1]=$72>>>16;
                                $77 = (($x$04) + 1)|0;
                                $78 = HEAP16[$0>>1]|0;
                                $79 = $78&65535;
                                $80 = HEAP16[$3>>1]|0;
                                $81 = $80&65535;
                                $82 = (($81) + ($79))|0;
                                $83 = ($77|0)==($82|0);
                                if ($83) {
                                    break;
                                } else {
                                    $x$04 = $77;
                                }
                            }
                        }
                        $84 = (($y$16) + 1)|0;
                        $85 = HEAP16[$10>>1]|0;
                        $86 = $85&65535;
                        $87 = HEAP16[$13>>1]|0;
                        $88 = $87&65535;
                        $89 = (($88) + ($86))|0;
                        $90 = ($84|0)==($89|0);
                        if ($90) {
                            break;
                        } else {
                            $y$16 = $84;
                        }
                    }
                    return;
                    break;
                }
                default: {
                    return;
                }
            }
        }
        function __ZL14kcscreen_applyP8kcscreenPK9Gif_ImagePK6kcolor($kcs,$gfi,$ks) {
            $kcs = $kcs|0;
            $gfi = $gfi|0;
            $ks = $ks|0;
            var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
            var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $x$01 = 0, $y$06 = 0, $y$12 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 12|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ((($gfi)) + 8|0);
            $4 = HEAP16[$3>>1]|0;
            $5 = $4&65535;
            $6 = (($5) + ($2))|0;
            $7 = ((($kcs)) + 8|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = ($6>>>0)>($8>>>0);
            if ($9) {
                ___assert_fail((19889|0),(19372|0),415,(19937|0));
                // unreachable;
            }
            $10 = ((($gfi)) + 14|0);
            $11 = HEAP16[$10>>1]|0;
            $12 = $11&65535;
            $13 = ((($gfi)) + 10|0);
            $14 = HEAP16[$13>>1]|0;
            $15 = $14&65535;
            $16 = (($15) + ($12))|0;
            $17 = ((($kcs)) + 12|0);
            $18 = HEAP32[$17>>2]|0;
            $19 = ($16>>>0)>($18>>>0);
            if ($19) {
                ___assert_fail((19952|0),(19372|0),416,(19937|0));
                // unreachable;
            }
            $20 = ((($gfi)) + 18|0);
            $21 = HEAP8[$20>>0]|0;
            $22 = ($21<<24>>24)==(3);
            if ($22) {
                $23 = ((($kcs)) + 4|0);
                $24 = HEAP32[$23>>2]|0;
                $25 = ($24|0)==(0|0);
                if ($25) {
                    $26 = Math_imul($18, $8)|0;
                    $27 = (_Gif_Realloc(0,8,$26,19372,420)|0);
                    HEAP32[$23>>2] = $27;
                }
                $28 = HEAP16[$10>>1]|0;
                $29 = $28&65535;
                $30 = $28&65535;
                $31 = HEAP16[$13>>1]|0;
                $32 = $31&65535;
                $33 = (($32) + ($30))|0;
                $34 = ($29|0)==($33|0);
                if (!($34)) {
                    $y$06 = $29;
                    while(1) {
                        $35 = HEAP32[$7>>2]|0;
                        $36 = Math_imul($35, $y$06)|0;
                        $37 = HEAP16[$0>>1]|0;
                        $38 = $37&65535;
                        $39 = (($38) + ($36))|0;
                        $40 = HEAP32[$23>>2]|0;
                        $41 = (($40) + ($39<<3)|0);
                        $42 = HEAP32[$kcs>>2]|0;
                        $43 = (($42) + ($39<<3)|0);
                        $44 = HEAP16[$3>>1]|0;
                        $45 = $44&65535;
                        $46 = $45 << 3;
                        _memcpy(($41|0),($43|0),($46|0))|0;
                        $47 = (($y$06) + 1)|0;
                        $48 = HEAP16[$10>>1]|0;
                        $49 = $48&65535;
                        $50 = HEAP16[$13>>1]|0;
                        $51 = $50&65535;
                        $52 = (($51) + ($49))|0;
                        $53 = ($47|0)==($52|0);
                        if ($53) {
                            break;
                        } else {
                            $y$06 = $47;
                        }
                    }
                }
            }
            $54 = HEAP16[$10>>1]|0;
            $55 = $54&65535;
            $56 = $54&65535;
            $57 = HEAP16[$13>>1]|0;
            $58 = $57&65535;
            $59 = (($58) + ($56))|0;
            $60 = ($55|0)==($59|0);
            if ($60) {
                return;
            }
            $61 = ((($gfi)) + 20|0);
            $63 = $56;$y$12 = $55;
            while(1) {
                $62 = (($y$12) - ($63))|0;
                $64 = HEAP32[$gfi>>2]|0;
                $65 = (($64) + ($62<<2)|0);
                $66 = HEAP32[$65>>2]|0;
                $67 = HEAP32[$7>>2]|0;
                $68 = Math_imul($67, $y$12)|0;
                $69 = HEAP16[$0>>1]|0;
                $70 = $69&65535;
                $71 = (($70) + ($68))|0;
                $72 = HEAP32[$kcs>>2]|0;
                $73 = HEAP16[$3>>1]|0;
                $74 = ($73<<16>>16)==(0);
                if (!($74)) {
                    $x$01 = 0;
                    while(1) {
                        $75 = (($66) + ($x$01)|0);
                        $76 = HEAP8[$75>>0]|0;
                        $77 = $76&255;
                        $78 = HEAP16[$61>>1]|0;
                        $79 = $78 << 16 >> 16;
                        $80 = ($77|0)==($79|0);
                        if (!($80)) {
                            $$sum = (($71) + ($x$01))|0;
                            $81 = (($72) + ($$sum<<3)|0);
                            $82 = (($ks) + (($77*6)|0)|0);
                            ;HEAP16[$81>>1]=HEAP16[$82>>1]|0;HEAP16[$81+2>>1]=HEAP16[$82+2>>1]|0;HEAP16[$81+4>>1]=HEAP16[$82+4>>1]|0;
                            $83 = (((($72) + ($$sum<<3)|0)) + 6|0);
                            HEAP16[$83>>1] = 32767;
                        }
                        $84 = (($x$01) + 1)|0;
                        $85 = HEAP16[$3>>1]|0;
                        $86 = $85&65535;
                        $87 = ($84|0)==($86|0);
                        if ($87) {
                            break;
                        } else {
                            $x$01 = $84;
                        }
                    }
                }
                $88 = (($y$12) + 1)|0;
                $89 = HEAP16[$10>>1]|0;
                $90 = $89&65535;
                $91 = HEAP16[$13>>1]|0;
                $92 = $91&65535;
                $93 = (($92) + ($90))|0;
                $94 = ($88|0)==($93|0);
                if ($94) {
                    break;
                } else {
                    $63 = $90;$y$12 = $88;
                }
            }
            return;
        }
        function __ZL11kc_makegfcgPK9Gif_Color227($agg$result,$gfc) {
            $agg$result = $agg$result|0;
            $gfc = $gfc|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfc)) + 1|0);
            $1 = HEAP8[$0>>0]|0;
            $2 = $1&255;
            $3 = ((($gfc)) + 2|0);
            $4 = HEAP8[$3>>0]|0;
            $5 = $4&255;
            $6 = ((($gfc)) + 3|0);
            $7 = HEAP8[$6>>0]|0;
            $8 = $7&255;
            __ZL9kc_make8giii229($agg$result,$2,$5,$8);
            return;
        }
        function __ZL9kc_togfcgPK6kcolor228($agg$result,$x) {
            $agg$result = $agg$result|0;
            $x = $x|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $xx = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $xx = sp;
            ;HEAP16[$xx>>1]=HEAP16[$x>>1]|0;HEAP16[$xx+2>>1]=HEAP16[$x+2>>1]|0;HEAP16[$xx+4>>1]=HEAP16[$x+4>>1]|0;
            __Z21kc_revgamma_transformP6kcolor($xx);
            $0 = HEAP16[$xx>>1]|0;
            $1 = ($0&65535) >>> 7;
            $2 = $1&255;
            $3 = ((($agg$result)) + 1|0);
            HEAP8[$3>>0] = $2;
            $4 = ((($xx)) + 2|0);
            $5 = HEAP16[$4>>1]|0;
            $6 = ($5&65535) >>> 7;
            $7 = $6&255;
            $8 = ((($agg$result)) + 2|0);
            HEAP8[$8>>0] = $7;
            $9 = ((($xx)) + 4|0);
            $10 = HEAP16[$9>>1]|0;
            $11 = ($10&65535) >>> 7;
            $12 = $11&255;
            $13 = ((($agg$result)) + 3|0);
            HEAP8[$13>>0] = $12;
            HEAP8[$agg$result>>0] = 0;
            STACKTOP = sp;return;
        }
        function __ZL9kc_make8giii229($agg$result,$a0,$a1,$a2) {
            $agg$result = $agg$result|0;
            $a0 = $a0|0;
            $a1 = $a1|0;
            $a2 = $a2|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            __ZL8kc_set8gP6kcoloriii230($agg$result,$a0,$a1,$a2);
            return;
        }
        function __ZL8kc_set8gP6kcoloriii230($kc,$a0,$a1,$a2) {
            $kc = $kc|0;
            $a0 = $a0|0;
            $a1 = $a1|0;
            $a2 = $a2|0;
            var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[480>>2]|0;
            $1 = (($0) + ($a0<<1)|0);
            $2 = HEAP16[$1>>1]|0;
            HEAP16[$kc>>1] = $2;
            $3 = HEAP32[480>>2]|0;
            $4 = (($3) + ($a1<<1)|0);
            $5 = HEAP16[$4>>1]|0;
            $6 = ((($kc)) + 2|0);
            HEAP16[$6>>1] = $5;
            $7 = HEAP32[480>>2]|0;
            $8 = (($7) + ($a2<<1)|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = ((($kc)) + 4|0);
            HEAP16[$10>>1] = $9;
            return;
        }
        function __ZL15kac_transparentv($agg$result) {
            $agg$result = $agg$result|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = $agg$result;
            $1 = $0;
            HEAP16[$1>>1]=0&65535;HEAP16[$1+2>>1]=0>>>16;
            $2 = (($0) + 4)|0;
            $3 = $2;
            HEAP16[$3>>1]=0&65535;HEAP16[$3+2>>1]=0>>>16;
            return;
        }
        function __ZL14kd3_enable_allP8kd3_tree232($kd3) {
            $kd3 = $kd3|0;
            var $0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($kd3)) + 8|0);
            HEAP32[$0>>2] = -1;
            return;
        }
        function __ZL11kd3_disableP8kd3_treei233($kd3,$i) {
            $kd3 = $kd3|0;
            $i = $i|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($kd3)) + 16|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1>>>0)>($i>>>0);
            if (!($2)) {
                ___assert_fail((20292|0),(20330|0),202,(20341|0));
                // unreachable;
            }
            $3 = ((($kd3)) + 8|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)<(0);
            $6 = ($4|0)==($i|0);
            $or$cond = $5 | $6;
            if ($or$cond) {
                HEAP32[$3>>2] = $i;
                return;
            } else {
                ___assert_fail((20353|0),(20330|0),203,(20341|0));
                // unreachable;
            }
        }
        function __ZL13ksscreen_initP8ksscreenP10Gif_Streamii($kss,$gfs) {
            $kss = $kss|0;
            $gfs = $gfs|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $k = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $k = sp + 16|0;
            $0 = sp;
            $1 = HEAP32[$kss>>2]|0;
            $2 = ($1|0)==(0|0);
            if (!($2)) {
                ___assert_fail((20250|0),(19372|0),476,(20278|0));
                // unreachable;
            }
            $3 = ((($kss)) + 4|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)==(0|0);
            if (!($5)) {
                ___assert_fail((20250|0),(19372|0),476,(20278|0));
                // unreachable;
            }
            $6 = ((($gfs)) + 18|0);
            $7 = HEAP16[$6>>1]|0;
            $8 = $7&65535;
            $9 = ((($kss)) + 8|0);
            HEAP32[$9>>2] = $8;
            $10 = ((($gfs)) + 20|0);
            $11 = HEAP16[$10>>1]|0;
            $12 = $11&65535;
            $13 = ((($kss)) + 12|0);
            HEAP32[$13>>2] = $12;
            $14 = HEAP32[$9>>2]|0;
            $15 = Math_imul($14, $12)|0;
            $16 = (_Gif_Realloc(0,16,$15,19372,480)|0);
            HEAP32[$kss>>2] = $16;
            $17 = ((($gfs)) + 4|0);
            $18 = HEAP32[$17>>2]|0;
            $19 = ($18|0)==(0);
            if ($19) {
                label = 6;
            } else {
                $20 = HEAP32[$gfs>>2]|0;
                $21 = HEAP32[$20>>2]|0;
                $22 = ((($21)) + 20|0);
                $23 = HEAP16[$22>>1]|0;
                $24 = ($23<<16>>16)<(0);
                if ($24) {
                    label = 6;
                } else {
                    label = 9;
                }
            }
            if ((label|0) == 6) {
                $25 = ((($gfs)) + 12|0);
                $26 = HEAP32[$25>>2]|0;
                $27 = ($26|0)==(0|0);
                if ($27) {
                    label = 9;
                } else {
                    $28 = ((($gfs)) + 16|0);
                    $29 = HEAP16[$28>>1]|0;
                    $30 = $29&65535;
                    $31 = HEAP32[$26>>2]|0;
                    $32 = ($30|0)<($31|0);
                    if ($32) {
                        $33 = ((($26)) + 16|0);
                        $34 = HEAP32[$33>>2]|0;
                        $35 = (($34) + ($30<<3)|0);
                        __ZL11kc_makegfcgPK9Gif_Color227($k,$35);
                        $36 = ((($kss)) + 16|0);
                        __ZL9sc_makekcPK6kcolor($0,$k);
                        ;HEAP32[$36>>2]=HEAP32[$0>>2]|0;HEAP32[$36+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$36+12>>2]=HEAP32[$0+12>>2]|0;
                    } else {
                        label = 9;
                    }
                }
            }
            if ((label|0) == 9) {
                $37 = ((($kss)) + 16|0);
                __ZL8sc_clearP11scale_color($37);
            }
            $38 = ($15|0)==(0);
            if ($38) {
                STACKTOP = sp;return;
            }
            $39 = ((($kss)) + 16|0);
            $i$01 = 0;
            while(1) {
                $40 = HEAP32[$kss>>2]|0;
                $41 = (($40) + ($i$01<<4)|0);
                ;HEAP32[$41>>2]=HEAP32[$39>>2]|0;HEAP32[$41+4>>2]=HEAP32[$39+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$39+8>>2]|0;HEAP32[$41+12>>2]=HEAP32[$39+12>>2]|0;
                $42 = (($i$01) + 1)|0;
                $43 = ($42|0)==($15|0);
                if ($43) {
                    break;
                } else {
                    $i$01 = $42;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL13kcscreen_initP8kcscreenP10Gif_Streamii($kcs,$gfs,$sw,$sh) {
            $kcs = $kcs|0;
            $gfs = $gfs|0;
            $sw = $sw|0;
            $sh = $sh|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $0 = sp;
            $1 = HEAP32[$kcs>>2]|0;
            $2 = ($1|0)==(0|0);
            if (!($2)) {
                ___assert_fail((20208|0),(19372|0),390,(20236|0));
                // unreachable;
            }
            $3 = ((($kcs)) + 4|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($4|0)==(0|0);
            if (!($5)) {
                ___assert_fail((20208|0),(19372|0),390,(20236|0));
                // unreachable;
            }
            $6 = ($sw|0)<(1);
            if ($6) {
                $7 = ((($gfs)) + 18|0);
                $8 = HEAP16[$7>>1]|0;
                $9 = $8&65535;
                $11 = $9;
            } else {
                $11 = $sw;
            }
            $10 = ((($kcs)) + 8|0);
            HEAP32[$10>>2] = $11;
            $12 = ($sh|0)<(1);
            if ($12) {
                $13 = ((($gfs)) + 20|0);
                $14 = HEAP16[$13>>1]|0;
                $15 = $14&65535;
                $17 = $15;
            } else {
                $17 = $sh;
            }
            $16 = ((($kcs)) + 12|0);
            HEAP32[$16>>2] = $17;
            $18 = HEAP32[$10>>2]|0;
            $19 = Math_imul($18, $17)|0;
            $20 = (_Gif_Realloc(0,8,$19,19372,394)|0);
            HEAP32[$kcs>>2] = $20;
            $21 = ((($gfs)) + 4|0);
            $22 = HEAP32[$21>>2]|0;
            $23 = ($22|0)==(0);
            if ($23) {
                label = 10;
            } else {
                $24 = HEAP32[$gfs>>2]|0;
                $25 = HEAP32[$24>>2]|0;
                $26 = ((($25)) + 20|0);
                $27 = HEAP16[$26>>1]|0;
                $28 = ($27<<16>>16)<(0);
                if ($28) {
                    label = 10;
                } else {
                    label = 13;
                }
            }
            if ((label|0) == 10) {
                $29 = ((($gfs)) + 12|0);
                $30 = HEAP32[$29>>2]|0;
                $31 = ($30|0)==(0|0);
                if ($31) {
                    label = 13;
                } else {
                    $32 = ((($gfs)) + 16|0);
                    $33 = HEAP16[$32>>1]|0;
                    $34 = $33&65535;
                    $35 = HEAP32[$30>>2]|0;
                    $36 = ($34|0)<($35|0);
                    if ($36) {
                        $37 = ((($kcs)) + 16|0);
                        $38 = ((($30)) + 16|0);
                        $39 = HEAP32[$38>>2]|0;
                        $40 = (($39) + ($34<<3)|0);
                        __ZL11kc_makegfcgPK9Gif_Color227($0,$40);
                        ;HEAP16[$37>>1]=HEAP16[$0>>1]|0;HEAP16[$37+2>>1]=HEAP16[$0+2>>1]|0;HEAP16[$37+4>>1]=HEAP16[$0+4>>1]|0;
                        $41 = ((($kcs)) + 22|0);
                        HEAP16[$41>>1] = 32767;
                    } else {
                        label = 13;
                    }
                }
            }
            if ((label|0) == 13) {
                $42 = ((($kcs)) + 16|0);
                $43 = $42;
                $44 = $43;
                HEAP16[$44>>1]=0&65535;HEAP16[$44+2>>1]=0>>>16;
                $45 = (($43) + 4)|0;
                $46 = $45;
                HEAP16[$46>>1]=0&65535;HEAP16[$46+2>>1]=0>>>16;
            }
            $47 = ($19|0)==(0);
            if ($47) {
                STACKTOP = sp;return;
            }
            $48 = ((($kcs)) + 16|0);
            $i$01 = 0;
            while(1) {
                $49 = HEAP32[$kcs>>2]|0;
                $50 = (($49) + ($i$01<<3)|0);
                $51 = $48;
                $52 = $51;
                $53 = HEAPU16[$52>>1]|(HEAPU16[$52+2>>1]<<16);
                $54 = (($51) + 4)|0;
                $55 = $54;
                $56 = HEAPU16[$55>>1]|(HEAPU16[$55+2>>1]<<16);
                $57 = $50;
                $58 = $57;
                HEAP16[$58>>1]=$53&65535;HEAP16[$58+2>>1]=$53>>>16;
                $59 = (($57) + 4)|0;
                $60 = $59;
                HEAP16[$60>>1]=$56&65535;HEAP16[$60+2>>1]=$56>>>16;
                $61 = (($i$01) + 1)|0;
                $62 = ($61|0)==($19|0);
                if ($62) {
                    break;
                } else {
                    $i$01 = $61;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL14ksscreen_applyP8ksscreenPK9Gif_ImagePK6kcolor($kss,$gfi,$ks) {
            $kss = $kss|0;
            $gfi = $gfi|0;
            $ks = $ks|0;
            var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
            var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $x$01 = 0, $y$06 = 0, $y$12 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $0 = sp;
            $1 = ((($gfi)) + 12|0);
            $2 = HEAP16[$1>>1]|0;
            $3 = $2&65535;
            $4 = ((($gfi)) + 8|0);
            $5 = HEAP16[$4>>1]|0;
            $6 = $5&65535;
            $7 = (($6) + ($3))|0;
            $8 = ((($kss)) + 8|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = ($7>>>0)>($9>>>0);
            if ($10) {
                ___assert_fail((20018|0),(19372|0),501,(20193|0));
                // unreachable;
            }
            $11 = ((($gfi)) + 14|0);
            $12 = HEAP16[$11>>1]|0;
            $13 = $12&65535;
            $14 = ((($gfi)) + 10|0);
            $15 = HEAP16[$14>>1]|0;
            $16 = $15&65535;
            $17 = (($16) + ($13))|0;
            $18 = ((($kss)) + 12|0);
            $19 = HEAP32[$18>>2]|0;
            $20 = ($17>>>0)>($19>>>0);
            if ($20) {
                ___assert_fail((20083|0),(19372|0),502,(20193|0));
                // unreachable;
            }
            $21 = ((($gfi)) + 18|0);
            $22 = HEAP8[$21>>0]|0;
            $23 = ($22<<24>>24)==(3);
            if ($23) {
                $24 = ((($kss)) + 4|0);
                $25 = HEAP32[$24>>2]|0;
                $26 = ($25|0)==(0|0);
                if ($26) {
                    $27 = Math_imul($19, $9)|0;
                    $28 = (_Gif_Realloc(0,16,$27,19372,506)|0);
                    HEAP32[$24>>2] = $28;
                }
                $29 = HEAP16[$11>>1]|0;
                $30 = $29&65535;
                $31 = $29&65535;
                $32 = HEAP16[$14>>1]|0;
                $33 = $32&65535;
                $34 = (($33) + ($31))|0;
                $35 = ($30|0)==($34|0);
                if (!($35)) {
                    $y$06 = $30;
                    while(1) {
                        $36 = HEAP32[$8>>2]|0;
                        $37 = Math_imul($36, $y$06)|0;
                        $38 = HEAP16[$1>>1]|0;
                        $39 = $38&65535;
                        $40 = (($39) + ($37))|0;
                        $41 = HEAP32[$24>>2]|0;
                        $42 = (($41) + ($40<<4)|0);
                        $43 = HEAP32[$kss>>2]|0;
                        $44 = (($43) + ($40<<4)|0);
                        $45 = HEAP16[$4>>1]|0;
                        $46 = $45&65535;
                        $47 = $46 << 4;
                        _memcpy(($42|0),($44|0),($47|0))|0;
                        $48 = (($y$06) + 1)|0;
                        $49 = HEAP16[$11>>1]|0;
                        $50 = $49&65535;
                        $51 = HEAP16[$14>>1]|0;
                        $52 = $51&65535;
                        $53 = (($52) + ($50))|0;
                        $54 = ($48|0)==($53|0);
                        if ($54) {
                            break;
                        } else {
                            $y$06 = $48;
                        }
                    }
                }
            }
            $55 = HEAP16[$11>>1]|0;
            $56 = $55&65535;
            $57 = $55&65535;
            $58 = HEAP16[$14>>1]|0;
            $59 = $58&65535;
            $60 = (($59) + ($57))|0;
            $61 = ($56|0)==($60|0);
            if ($61) {
                STACKTOP = sp;return;
            }
            $62 = ((($gfi)) + 20|0);
            $64 = $57;$y$12 = $56;
            while(1) {
                $63 = (($y$12) - ($64))|0;
                $65 = HEAP32[$gfi>>2]|0;
                $66 = (($65) + ($63<<2)|0);
                $67 = HEAP32[$66>>2]|0;
                $68 = HEAP32[$8>>2]|0;
                $69 = Math_imul($68, $y$12)|0;
                $70 = HEAP16[$1>>1]|0;
                $71 = $70&65535;
                $72 = (($71) + ($69))|0;
                $73 = HEAP32[$kss>>2]|0;
                $74 = HEAP16[$4>>1]|0;
                $75 = ($74<<16>>16)==(0);
                if (!($75)) {
                    $x$01 = 0;
                    while(1) {
                        $76 = (($67) + ($x$01)|0);
                        $77 = HEAP8[$76>>0]|0;
                        $78 = $77&255;
                        $79 = HEAP16[$62>>1]|0;
                        $80 = $79 << 16 >> 16;
                        $81 = ($78|0)==($80|0);
                        if (!($81)) {
                            $$sum = (($72) + ($x$01))|0;
                            $82 = (($73) + ($$sum<<4)|0);
                            $83 = (($ks) + (($78*6)|0)|0);
                            __ZL9sc_makekcPK6kcolor($0,$83);
                            ;HEAP32[$82>>2]=HEAP32[$0>>2]|0;HEAP32[$82+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$82+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$82+12>>2]=HEAP32[$0+12>>2]|0;
                        }
                        $84 = (($x$01) + 1)|0;
                        $85 = HEAP16[$4>>1]|0;
                        $86 = $85&65535;
                        $87 = ($84|0)==($86|0);
                        if ($87) {
                            break;
                        } else {
                            $x$01 = $84;
                        }
                    }
                }
                $88 = (($y$12) + 1)|0;
                $89 = HEAP16[$11>>1]|0;
                $90 = $89&65535;
                $91 = HEAP16[$14>>1]|0;
                $92 = $91&65535;
                $93 = (($92) + ($90))|0;
                $94 = ($88|0)==($93|0);
                if ($94) {
                    break;
                } else {
                    $64 = $90;$y$12 = $88;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL9sc_makekcPK6kcolor($agg$result,$k) {
            $agg$result = $agg$result|0;
            $k = $k|0;
            var $0 = 0, $1 = 0.0, $10 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP16[$k>>1]|0;
            $1 = (+($0<<16>>16));
            HEAPF32[$agg$result>>2] = $1;
            $2 = ((($k)) + 2|0);
            $3 = HEAP16[$2>>1]|0;
            $4 = (+($3<<16>>16));
            $5 = ((($agg$result)) + 4|0);
            HEAPF32[$5>>2] = $4;
            $6 = ((($k)) + 4|0);
            $7 = HEAP16[$6>>1]|0;
            $8 = (+($7<<16>>16));
            $9 = ((($agg$result)) + 8|0);
            HEAPF32[$9>>2] = $8;
            $10 = ((($agg$result)) + 12|0);
            HEAPF32[$10>>2] = 32767.0;
            return;
        }
        function __ZL19scale_weightset_addP15scale_weightsetiid($wset,$ipos,$opos,$w) {
            $wset = $wset|0;
            $ipos = $ipos|0;
            $opos = $opos|0;
            $w = +$w;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($wset)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0);
            if (!($2)) {
                $3 = (($1) + -1)|0;
                $4 = HEAP32[$wset>>2]|0;
                $5 = (((($4) + (($3*12)|0)|0)) + 4|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = ($6|0)==($ipos|0);
                if ($7) {
                    $8 = (((($4) + (($3*12)|0)|0)) + 8|0);
                    $9 = HEAP32[$8>>2]|0;
                    $10 = ($9|0)==($opos|0);
                    if ($10) {
                        $11 = (($4) + (($3*12)|0)|0);
                        $12 = +HEAPF32[$11>>2];
                        $13 = $12;
                        $14 = $13 + $w;
                        $15 = $14;
                        HEAPF32[$11>>2] = $15;
                        return;
                    }
                }
            }
            $16 = HEAP32[$wset>>2]|0;
            $17 = ($16|0)==(0|0);
            if ($17) {
                $18 = (_Gif_Realloc(0,12,256,19372,968)|0);
                HEAP32[$wset>>2] = $18;
            } else {
                $19 = HEAP32[$0>>2]|0;
                $20 = ($19|0)>(128);
                if ($20) {
                    $21 = (($19) + -1)|0;
                    $22 = $21 & $19;
                    $23 = ($22|0)==(0);
                    if ($23) {
                        $24 = $19 << 1;
                        $25 = (_Gif_Realloc($16,12,$24,19372,970)|0);
                        HEAP32[$wset>>2] = $25;
                    }
                }
            }
            $26 = $w;
            $27 = HEAP32[$0>>2]|0;
            $28 = HEAP32[$wset>>2]|0;
            $29 = (($28) + (($27*12)|0)|0);
            HEAPF32[$29>>2] = $26;
            $30 = HEAP32[$0>>2]|0;
            $31 = HEAP32[$wset>>2]|0;
            $32 = (((($31) + (($30*12)|0)|0)) + 4|0);
            HEAP32[$32>>2] = $ipos;
            $33 = HEAP32[$0>>2]|0;
            $34 = HEAP32[$wset>>2]|0;
            $35 = (((($34) + (($33*12)|0)|0)) + 8|0);
            HEAP32[$35>>2] = $opos;
            $36 = HEAP32[$0>>2]|0;
            $37 = (($36) + 1)|0;
            HEAP32[$0>>2] = $37;
            return;
        }
        function __ZL18scale_weight_cubicddd($x,$b,$c) {
            $x = +$x;
            $b = +$b;
            $c = +$c;
            var $$0 = 0.0, $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
            var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $5 = 0.0, $6 = 0.0;
            var $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+Math_abs((+$x)));
            $1 = $0 < 1.0;
            if ($1) {
                $2 = $b * 9.0;
                $3 = 12.0 - $2;
                $4 = $c * 6.0;
                $5 = $3 - $4;
                $6 = $5 * $0;
                $7 = $0 * $6;
                $8 = $0 * $7;
                $9 = $b * 12.0;
                $10 = $9 + -18.0;
                $11 = $10 + $4;
                $12 = $11 * $0;
                $13 = $0 * $12;
                $14 = $13 + $8;
                $15 = $b * 2.0;
                $16 = 6.0 - $15;
                $17 = $16 + $14;
                $18 = $17 / 6.0;
                $$0 = $18;
                return (+$$0);
            }
            $19 = $0 < 2.0;
            if (!($19)) {
                $$0 = 0.0;
                return (+$$0);
            }
            $20 = -$b;
            $21 = $c * 6.0;
            $22 = $20 - $21;
            $23 = $22 * $0;
            $24 = $0 * $23;
            $25 = $0 * $24;
            $26 = $b * 6.0;
            $27 = $c * 30.0;
            $28 = $26 + $27;
            $29 = $28 * $0;
            $30 = $0 * $29;
            $31 = $30 + $25;
            $32 = $b * -12.0;
            $33 = $c * 48.0;
            $34 = $32 - $33;
            $35 = $34 * $0;
            $36 = $35 + $31;
            $37 = $b * 8.0;
            $38 = $c * 24.0;
            $39 = $37 + $38;
            $40 = $39 + $36;
            $41 = $40 / 6.0;
            $$0 = $41;
            return (+$$0);
        }
        function __ZL21scale_weight_lanczos3d($x) {
            $x = +$x;
            var $0 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+__ZL20scale_weight_lanczosdi($x,3));
            return (+$0);
        }
        function __ZL20scale_weight_lanczosdi($x,$lobes) {
            $x = +$x;
            $lobes = $lobes|0;
            var $$0 = 0.0, $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+Math_abs((+$x)));
            $1 = (+($lobes|0));
            $2 = $0 < $1;
            if (!($2)) {
                $$0 = 0.0;
                return (+$$0);
            }
            $3 = (+__ZL4sincd($0));
            $4 = $0 / $1;
            $5 = (+__ZL4sincd($4));
            $6 = $3 * $5;
            $$0 = $6;
            return (+$$0);
        }
        function __ZL4sincd($x) {
            $x = +$x;
            var $$0 = 0.0, $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = !($x <= 5.0000000000000001E-9);
            if (!($0)) {
                $$0 = 1.0;
                return (+$$0);
            }
            $1 = $x * 3.1415926535897931;
            $2 = (+Math_sin((+$1)));
            $3 = $2 / $1;
            $$0 = $3;
            return (+$$0);
        }
        function __ZL21scale_weight_lanczos2d($x) {
            $x = +$x;
            var $0 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+__ZL20scale_weight_lanczosdi($x,2));
            return (+$0);
        }
        function __ZL19scale_weight_catromd($x) {
            $x = +$x;
            var $0 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+__ZL18scale_weight_cubicddd($x,0.0,0.5));
            return (+$0);
        }
        function __ZL16make_pixel_rangeiiif($agg$result,$xi,$maxi,$maxo,$f) {
            $agg$result = $agg$result|0;
            $xi = $xi|0;
            $maxi = $maxi|0;
            $maxo = $maxo|0;
            $f = +$f;
            var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $maxo$ = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+($xi|0));
            $1 = $0 * $f;
            $2 = (~~(($1)));
            HEAP32[$agg$result>>2] = $2;
            $3 = (($xi) + 1)|0;
            $4 = (+($3|0));
            $5 = $4 * $f;
            $6 = (~~(($5)));
            $7 = ((($agg$result)) + 4|0);
            $8 = ($3|0)==($maxi|0);
            $maxo$ = $8 ? $maxo : $6;
            $9 = HEAP32[$agg$result>>2]|0;
            $10 = ($maxo$|0)==($9|0);
            $11 = $10&1;
            $12 = (($11) + ($maxo$))|0;
            HEAP32[$7>>2] = $12;
            return;
        }
        function __ZL17make_pixel_range2iiif($agg$result,$xi,$maxi,$maxo,$f) {
            $agg$result = $agg$result|0;
            $xi = $xi|0;
            $maxi = $maxi|0;
            $maxo = $maxo|0;
            $f = +$f;
            var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $ceilf = 0.0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+($xi|0));
            $1 = $0 * $f;
            HEAPF32[$agg$result>>2] = $1;
            $2 = (($xi) + 1)|0;
            $3 = (+($2|0));
            $4 = $3 * $f;
            $5 = ((($agg$result)) + 4|0);
            HEAPF32[$5>>2] = $4;
            $6 = +HEAPF32[$agg$result>>2];
            $7 = (~~(($6)));
            $8 = ((($agg$result)) + 8|0);
            HEAP32[$8>>2] = $7;
            $9 = ($2|0)==($maxi|0);
            if ($9) {
                $10 = ((($agg$result)) + 12|0);
                HEAP32[$10>>2] = $maxo;
            } else {
                $11 = +HEAPF32[$5>>2];
                $ceilf = (+Math_ceil((+$11)));
                $12 = (~~(($ceilf)));
                $13 = ((($agg$result)) + 12|0);
                HEAP32[$13>>2] = $12;
            }
            $14 = ((($agg$result)) + 12|0);
            $15 = HEAP32[$14>>2]|0;
            $16 = HEAP32[$8>>2]|0;
            $17 = ($15|0)==($16|0);
            if (!($17)) {
                return;
            }
            $18 = (($15) + 1)|0;
            HEAP32[$14>>2] = $18;
            return;
        }
        function __ZL10mix_factoriPKf($val,$bounds) {
            $val = $val|0;
            $bounds = $bounds|0;
            var $$0 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+($val|0));
            $1 = +HEAPF32[$bounds>>2];
            $2 = $0 < $1;
            if ($2) {
                $3 = ((($bounds)) + 4|0);
                $4 = +HEAPF32[$3>>2];
                $5 = (($val) + 1)|0;
                $6 = (+($5|0));
                $7 = $4 < $6;
                if ($7) {
                    $8 = $4 - $1;
                    $$0 = $8;
                    return (+$$0);
                }
            }
            $9 = +HEAPF32[$bounds>>2];
            $10 = $0 < $9;
            if ($10) {
                $11 = $9 - $0;
                $12 = 1.0 - $11;
                $$0 = $12;
                return (+$$0);
            }
            $13 = ((($bounds)) + 4|0);
            $14 = +HEAPF32[$13>>2];
            $15 = (($val) + 1)|0;
            $16 = (+($15|0));
            $17 = $14 < $16;
            if (!($17)) {
                $$0 = 1.0;
                return (+$$0);
            }
            $18 = $14 - $0;
            $$0 = $18;
            return (+$$0);
        }
        function __ZL14ksscreen_clearP8ksscreen($kss) {
            $kss = $kss|0;
            var $0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($kss)) + 4|0);
            HEAP32[$0>>2] = 0;
            HEAP32[$kss>>2] = 0;
            return;
        }
        function __ZL14kcscreen_clearP8kcscreen($kcs) {
            $kcs = $kcs|0;
            var $0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($kcs)) + 4|0);
            HEAP32[$0>>2] = 0;
            HEAP32[$kcs>>2] = 0;
            return;
        }
        function __Z16set_frame_changei($kind) {
            $kind = $kind|0;
            var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fset$0 = 0;
            var $i$02 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            __ZL8set_modei(0);
            $0 = HEAP32[816>>2]|0;
            $1 = ($0|0)<(5);
            $2 = HEAP32[832>>2]|0;
            $3 = ($2|0)!=(0);
            $or$cond = $1 & $3;
            if ($or$cond) {
                __Z11fatal_errorPKcz(20393,$vararg_buffer);
                // unreachable;
            }
            $4 = HEAP32[820>>2]|0;
            $5 = ($4|0)==(0);
            if (!($5)) {
                ___assert_fail((20438|0),(20451|0),432,(20464|0));
                // unreachable;
            }
            HEAP32[820>>2] = $0;
            $6 = HEAP32[568>>2]|0;
            $7 = HEAP32[572>>2]|0;
            $8 = ($6|0)>($7|0);
            if ($8) {
                HEAP32[568>>2] = $7;
                HEAP32[572>>2] = $6;
            }
            switch ($kind|0) {
                case 315:  {
                    HEAP32[816>>2] = 5;
                    STACKTOP = sp;return;
                    break;
                }
                case 316:  {
                    $9 = HEAP32[568>>2]|0;
                    $10 = HEAP32[572>>2]|0;
                    $11 = ($9|0)<($10|0);
                    $12 = HEAP32[756>>2]|0;
                    $13 = ((($12)) + 8|0);
                    $14 = HEAP32[$13>>2]|0;
                    $15 = (((($14) + (($9*100)|0)|0)) + 8|0);
                    if ($11) {
                        $16 = HEAP32[756>>2]|0;
                        $17 = ((($16)) + 8|0);
                        $18 = HEAP32[$17>>2]|0;
                        $19 = $15;$i$02 = $9;
                        while(1) {
                            HEAP32[$19>>2] = 0;
                            $20 = (($i$02) + 1)|0;
                            $21 = HEAP32[572>>2]|0;
                            $22 = ($20|0)<($21|0);
                            $23 = (((($18) + (($20*100)|0)|0)) + 8|0);
                            if ($22) {
                                $19 = $23;$i$02 = $20;
                            } else {
                                $$lcssa = $23;
                                break;
                            }
                        }
                    } else {
                        $$lcssa = $15;
                    }
                    HEAP32[$$lcssa>>2] = -1;
                    break;
                }
                case 317:  {
                    break;
                }
                case 319:  {
                    HEAP32[816>>2] = 6;
                    STACKTOP = sp;return;
                    break;
                }
                default: {
                    STACKTOP = sp;return;
                }
            }
            $24 = HEAP32[572>>2]|0;
            $25 = HEAP32[756>>2]|0;
            $26 = ((($25)) + 8|0);
            $27 = HEAP32[$26>>2]|0;
            $28 = (((($27) + (($24*100)|0)|0)) + 68|0);
            $29 = HEAP32[$28>>2]|0;
            $30 = ($29|0)==(0|0);
            if ($30) {
                $31 = (__Z12new_frameseti(8)|0);
                $fset$0 = $31;
            } else {
                $fset$0 = $29;
            }
            $32 = HEAP32[572>>2]|0;
            $33 = HEAP32[756>>2]|0;
            $34 = ((($33)) + 8|0);
            $35 = HEAP32[$34>>2]|0;
            $36 = (((($35) + (($32*100)|0)|0)) + 68|0);
            HEAP32[$36>>2] = $fset$0;
            HEAP32[816>>2] = 6;
            $37 = HEAP32[756>>2]|0;
            HEAP32[764>>2] = $37;
            HEAP32[756>>2] = $fset$0;
            STACKTOP = sp;return;
        }
        function __Z12input_streamPKc($name) {
            $name = $name|0;
            var $$0 = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$2$lcssa76 = 0, $$2$lcssa77 = 0, $$lcssa = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
            var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
            var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
            var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
            var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
            var $92 = 0, $93 = 0, $component_namebuf$0 = 0, $component_namebuf$0$lcssa = 0, $component_namebuf$0$lcssa72 = 0, $component_namebuf$075 = 0, $componentno$0 = 0, $componentno$0$lcssa69 = 0, $i$020 = 0, $old_def_frame = 0, $or$cond = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0;
            var $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 160|0;
            $vararg_buffer15 = sp + 56|0;
            $vararg_buffer13 = sp + 48|0;
            $vararg_buffer10 = sp + 40|0;
            $vararg_buffer8 = sp + 32|0;
            $vararg_buffer6 = sp + 24|0;
            $vararg_buffer4 = sp + 16|0;
            $vararg_buffer2 = sp + 8|0;
            $vararg_buffer = sp;
            $old_def_frame = sp + 60|0;
            $0 = HEAP32[836>>2]|0;
            HEAP32[768>>2] = 0;
            HEAP32[772>>2] = $name;
            HEAP32[832>>2] = 0;
            HEAP32[836>>2] = 0;
            HEAP32[840>>2] = 0;
            $1 = HEAP32[844>>2]|0;
            $2 = ($1|0)==(0);
            if (!($2)) {
                __ZL22combine_output_optionsv();
            }
            $3 = HEAP32[848>>2]|0;
            $4 = (($3) + 1)|0;
            HEAP32[848>>2] = $4;
            __ZL8set_modei(0);
            $5 = (__ZL12open_giffilePKc($name)|0);
            $6 = ($5|0)==(0|0);
            if ($6) {
                STACKTOP = sp;return;
            }
            $7 = HEAP32[3476>>2]|0;
            $8 = ($5|0)==($7|0);
            if ($8) {
                HEAP32[772>>2] = 0;
                $$0 = 20481;
            } else {
                $$0 = $name;
            }
            $9 = $0 & 32;
            $10 = ($9|0)==(0);
            $11 = $0 & 16;
            $12 = ($11|0)==(0);
            $13 = $0 & 256;
            $14 = ($13|0)==(0);
            $$1 = $$0;$componentno$0 = 0;
            while(1) {
                $15 = (($componentno$0) + 1)|0;
                $16 = ($componentno$0|0)>(0);
                if ($16) {
                    $17 = (_strlen($$0)|0);
                    $18 = (($17) + 10)|0;
                    $19 = (_malloc($18)|0);
                    HEAP32[$vararg_buffer>>2] = $$0;
                    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                    HEAP32[$vararg_ptr1>>2] = $15;
                    (_sprintf($19,20489,$vararg_buffer)|0);
                    $$2 = $19;$component_namebuf$0 = $19;
                } else {
                    $$2 = $$1;$component_namebuf$0 = 0;
                }
                $20 = (_getc($5)|0);
                $21 = ($20|0)==(-1);
                if ($21) {
                    $$2$lcssa = $$2;$component_namebuf$0$lcssa = $component_namebuf$0;
                    label = 10;
                    break;
                }
                (_ungetc($20,$5)|0);
                $27 = HEAP32[824>>2]|0;
                $28 = ($27|0)==(0);
                if (!($28)) {
                    __Z12verbose_opencPKc(60,$$2);
                }
                $29 = HEAP32[560>>2]|0;
                $30 = HEAP32[852>>2]|0;
                $31 = $30 | 1;
                $32 = (_Gif_FullReadFile($5,$31,$$2,2)|0);
                $33 = ($32|0)!=(0|0);
                if ($33) {
                    $34 = ((($32)) + 4|0);
                    $35 = HEAP32[$34>>2]|0;
                    $36 = ($35|0)==(0);
                    if ($36) {
                        $37 = ((($32)) + 36|0);
                        $38 = HEAP32[$37>>2]|0;
                        $39 = ($38|0)!=(0);
                        $40 = ($componentno$0|0)!=(0);
                        $or$cond = $40 & $39;
                        if ($or$cond) {
                            label = 20;
                        }
                    }
                } else {
                    $$old1 = ($componentno$0|0)==(0);
                    if (!($$old1)) {
                        label = 20;
                    }
                }
                if ((label|0) == 20) {
                    label = 0;
                    __Z6lerrorPKcS0_z($$2,20529,$vararg_buffer6);
                }
                $41 = HEAP32[860>>2]|0;
                $42 = ($41|0)==(0);
                if ($42) {
                    HEAP32[560>>2] = $29;
                }
                if (!($33)) {
                    $$2$lcssa76 = $$2;$$lcssa = $32;$component_namebuf$0$lcssa72 = $component_namebuf$0;$componentno$0$lcssa69 = $componentno$0;
                    label = 26;
                    break;
                }
                $43 = ((($32)) + 4|0);
                $44 = HEAP32[$43>>2]|0;
                $45 = ($44|0)==(0);
                if ($45) {
                    $46 = ((($32)) + 36|0);
                    $47 = HEAP32[$46>>2]|0;
                    $48 = ($47|0)==(0);
                    if (!($48)) {
                        $$2$lcssa76 = $$2;$$lcssa = $32;$component_namebuf$0$lcssa72 = $component_namebuf$0;$componentno$0$lcssa69 = $componentno$0;
                        label = 26;
                        break;
                    }
                }
                if ($16) {
                    $52 = HEAP32[816>>2]|0;
                    $53 = $52 & -5;
                    $54 = ($53|0)==(2);
                    if ($54) {
                        $$2$lcssa77 = $$2;
                        label = 32;
                        break;
                    }
                    __Z10input_donev();
                }
                HEAP32[768>>2] = $32;
                __ZL8set_modei(0);
                $55 = HEAP32[48>>2]|0;
                $56 = ($55|0)==(0|0);
                L37: do {
                    if ($56) {
                        $57 = HEAP32[816>>2]|0;
                        switch ($57|0) {
                            case 2:  {
                                $58 = HEAP32[772>>2]|0;
                                HEAP32[48>>2] = $58;
                                break L37;
                                break;
                            }
                            case 3:  {
                                break;
                            }
                            default: {
                                break L37;
                            }
                        }
                        $59 = HEAP32[772>>2]|0;
                        $60 = ($59|0)!=(0|0);
                        $61 = $60 ? $59 : 20626;
                        $62 = (_strrchr($61,92)|0);
                        $63 = ($62|0)==(0|0);
                        if ($63) {
                            HEAP32[48>>2] = $61;
                            break;
                        } else {
                            $64 = ((($62)) + 1|0);
                            HEAP32[48>>2] = $64;
                            break;
                        }
                    }
                } while(0);
                if ($10) {
                    HEAP32[(668)>>2] = 0;
                }
                if ($12) {
                    HEAP32[(676)>>2] = 0;
                }
                if ($14) {
                    HEAP32[(740)>>2] = 0;
                }
                $65 = HEAP32[772>>2]|0;
                HEAP32[(752)>>2] = $65;
                dest=$old_def_frame; src=656; stop=dest+100|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
                $66 = HEAP32[756>>2]|0;
                $67 = HEAP32[$66>>2]|0;
                HEAP32[760>>2] = $67;
                $68 = HEAP8[(744)>>0]|0;
                $69 = $68 | 32;
                HEAP8[(744)>>0] = $69;
                $70 = HEAP32[$43>>2]|0;
                $71 = ($70|0)>(0);
                if ($71) {
                    $i$020 = 0;
                    while(1) {
                        $72 = HEAP32[756>>2]|0;
                        $73 = HEAP32[$32>>2]|0;
                        $74 = (($73) + ($i$020<<2)|0);
                        $75 = HEAP32[$74>>2]|0;
                        (__Z9add_frameP11Gt_FramesetP10Gif_StreamP9Gif_Image($72,$32,$75)|0);
                        $76 = (($i$020) + 1)|0;
                        $77 = HEAP32[$43>>2]|0;
                        $78 = ($76|0)<($77|0);
                        if ($78) {
                            $i$020 = $76;
                        } else {
                            break;
                        }
                    }
                }
                dest=656; src=$old_def_frame; stop=dest+100|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
                $79 = HEAP32[864>>2]|0;
                $80 = ($79|0)==(0);
                do {
                    if (!($80)) {
                        $81 = (_Gif_FullUnoptimize($32,1)|0);
                        $82 = ($81|0)==(0);
                        if ($82) {
                            $83 = HEAP32[868>>2]|0;
                            $84 = ($83|0)==(0);
                            if ($84) {
                                __Z8lwarningPKcS0_z($$2,20634,$vararg_buffer13);
                                HEAP32[868>>2] = 1;
                                break;
                            } else {
                                __Z8lwarningPKcS0_z($$2,20790,$vararg_buffer15);
                                break;
                            }
                        }
                    }
                } while(0);
                $85 = HEAP32[872>>2]|0;
                __Z22apply_color_transformsP17Gt_ColorTransformP10Gif_Stream($85,$32);
                $86 = ((($32)) + 48|0);
                $87 = HEAP32[$86>>2]|0;
                $88 = (($87) + 1)|0;
                HEAP32[$86>>2] = $88;
                _free($component_namebuf$0);
                $89 = HEAP32[852>>2]|0;
                $90 = $89 & 8;
                $91 = ($90|0)==(0);
                $92 = HEAP32[856>>2]|0;
                $93 = ($92|0)!=(0);
                $or$cond7 = $91 | $93;
                if ($or$cond7) {
                    label = 55;
                    break;
                } else {
                    $$1 = $$2;$componentno$0 = $15;
                }
            }
            do {
                if ((label|0) == 10) {
                    $22 = HEAP32[852>>2]|0;
                    $23 = $22 & 8;
                    $24 = ($23|0)==(0);
                    if ($24) {
                        __Z6lerrorPKcS0_z($$2$lcssa,20495,$vararg_buffer2);
                        $component_namebuf$075 = $component_namebuf$0$lcssa;
                        break;
                    }
                    $25 = HEAP32[856>>2]|0;
                    $26 = ($25|0)==(0);
                    if ($26) {
                        $component_namebuf$075 = $component_namebuf$0$lcssa;
                    } else {
                        __Z6lerrorPKcS0_z($$2$lcssa,20506,$vararg_buffer4);
                        $component_namebuf$075 = $component_namebuf$0$lcssa;
                    }
                }
                else if ((label|0) == 26) {
                    $49 = ($componentno$0$lcssa69|0)==(0);
                    if ($49) {
                        __Z6lerrorPKcS0_z($$2$lcssa76,20554,$vararg_buffer8);
                    }
                    _Gif_DeleteStream($$lcssa);
                    $50 = HEAP32[824>>2]|0;
                    $51 = ($50|0)==(0);
                    if ($51) {
                        $component_namebuf$075 = $component_namebuf$0$lcssa72;
                    } else {
                        __Z13verbose_closec(62);
                        $component_namebuf$075 = $component_namebuf$0$lcssa72;
                    }
                }
                else if ((label|0) == 32) {
                    HEAP32[$vararg_buffer10>>2] = $$2$lcssa77;
                    __Z11fatal_errorPKcz(20577,$vararg_buffer10);
                    // unreachable;
                }
                else if ((label|0) == 55) {
                    __ZL13close_giffileP8_IO_FILEi($5,0);
                    STACKTOP = sp;return;
                }
            } while(0);
            _free($component_namebuf$075);
            __ZL13close_giffileP8_IO_FILEi($5,1);
            STACKTOP = sp;return;
        }
        function __Z10input_donev() {
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[768>>2]|0;
            $1 = ($0|0)==(0|0);
            if ($1) {
                return;
            }
            $2 = HEAP32[824>>2]|0;
            $3 = ($2|0)==(0);
            if (!($3)) {
                __Z13verbose_closec(62);
            }
            $4 = HEAP32[768>>2]|0;
            _Gif_DeleteStream($4);
            HEAP32[768>>2] = 0;
            $5 = HEAP32[816>>2]|0;
            $6 = ($5|0)==(5);
            if ($6) {
                __ZL17frame_change_donev();
            }
            $7 = HEAP32[816>>2]|0;
            $8 = $7 & -2;
            $9 = ($8|0)==(2);
            if (!($9)) {
                return;
            }
            __Z13output_framesv();
            return;
        }
        function __Z13output_framesv() {
            var $$ = 0, $$max_nimages$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$11 = 0, $imagename$0 = 0, $max_nimages$0$lcssa = 0, $max_nimages$02 = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[48>>2]|0;
            HEAP32[48>>2] = 0;
            $1 = HEAP32[876>>2]|0;
            $2 = ($1|0)==(0);
            if ($2) {
                label = 3;
            } else {
                __ZL18output_informationPKc($0);
                $$pr = HEAP32[876>>2]|0;
                $3 = ($$pr|0)==(1);
                if (!($3)) {
                    label = 3;
                }
            }
            L3: do {
                if ((label|0) == 3) {
                    $4 = HEAP32[756>>2]|0;
                    $5 = HEAP32[$4>>2]|0;
                    $6 = ($5|0)>(0);
                    if ($6) {
                        $7 = HEAP32[816>>2]|0;
                        switch ($7|0) {
                            case 4: case 2: case 1:  {
                            __ZL22merge_and_write_framesPKcii($0,0,-1);
                            break L3;
                            break;
                        }
                            case 3:  {
                                break;
                            }
                            default: {
                                break L3;
                            }
                        }
                        $8 = HEAP32[756>>2]|0;
                        $9 = HEAP32[$8>>2]|0;
                        $10 = ($9|0)>(0);
                        if ($10) {
                            $11 = HEAP32[756>>2]|0;
                            $12 = HEAP32[$11>>2]|0;
                            $14 = $8;$i$03 = 0;$max_nimages$02 = 0;
                            while(1) {
                                $13 = ((($14)) + 8|0);
                                $15 = HEAP32[$13>>2]|0;
                                $16 = (($15) + (($i$03*100)|0)|0);
                                $17 = HEAP32[$16>>2]|0;
                                $18 = ((($17)) + 4|0);
                                $19 = HEAP32[$18>>2]|0;
                                $20 = ($19|0)>($max_nimages$02|0);
                                $$max_nimages$0 = $20 ? $19 : $max_nimages$02;
                                $21 = (($i$03) + 1)|0;
                                $22 = ($21|0)<($12|0);
                                if ($22) {
                                    $14 = $11;$i$03 = $21;$max_nimages$02 = $$max_nimages$0;
                                } else {
                                    $max_nimages$0$lcssa = $$max_nimages$0;
                                    break;
                                }
                            }
                        } else {
                            $max_nimages$0$lcssa = 0;
                        }
                        $23 = ($0|0)==(0|0);
                        $$ = $23 ? 20820 : $0;
                        $24 = HEAP32[756>>2]|0;
                        $25 = HEAP32[$24>>2]|0;
                        $26 = ($25|0)>(0);
                        if ($26) {
                            $28 = $24;$i$11 = 0;
                            while(1) {
                                $27 = ((($28)) + 8|0);
                                $29 = HEAP32[$27>>2]|0;
                                $30 = (($29) + (($i$11*100)|0)|0);
                                $31 = HEAP32[$30>>2]|0;
                                $32 = (((($29) + (($i$11*100)|0)|0)) + 4|0);
                                $33 = HEAP32[$32>>2]|0;
                                $34 = (_Gif_ImageNumber($31,$33)|0);
                                $35 = (((($29) + (($i$11*100)|0)|0)) + 72|0);
                                $36 = HEAP32[$35>>2]|0;
                                $37 = ($36|0)==(0);
                                if ($37) {
                                    $imagename$0 = 0;
                                } else {
                                    $38 = (((($29) + (($i$11*100)|0)|0)) + 12|0);
                                    $39 = HEAP32[$38>>2]|0;
                                    $40 = ($39|0)==(0|0);
                                    if ($40) {
                                        $41 = HEAP32[$32>>2]|0;
                                        $42 = ((($41)) + 28|0);
                                        $43 = HEAP32[$42>>2]|0;
                                        $imagename$0 = $43;
                                    } else {
                                        $imagename$0 = $39;
                                    }
                                }
                                $44 = (__Z16explode_filenamePKciS0_i($$,$34,$imagename$0,$max_nimages$0$lcssa)|0);
                                __ZL22merge_and_write_framesPKcii($44,$i$11,$i$11);
                                $45 = (($i$11) + 1)|0;
                                $46 = HEAP32[756>>2]|0;
                                $47 = HEAP32[$46>>2]|0;
                                $48 = ($45|0)<($47|0);
                                if ($48) {
                                    $28 = $46;$i$11 = $45;
                                } else {
                                    break;
                                }
                            }
                        }
                    }
                }
            } while(0);
            HEAP32[880>>2] = 0;
            $49 = HEAP32[756>>2]|0;
            __Z14clear_framesetP11Gt_Frameseti($49,0);
            $50 = HEAP32[(704)>>2]|0;
            $51 = ($50|0)==(0|0);
            if ($51) {
                return;
            }
            HEAP32[$50>>2] = 0;
            return;
        }
        function __Z14frame_argumentP10Clp_ParserPKc($clp,$arg) {
            $clp = $clp|0;
            $arg = $arg|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (__Z16parse_frame_specP10Clp_ParserPKciPv($clp,$arg,-1,0)|0);
            $1 = ($0|0)==(-97);
            if ($1) {
                $$0 = 0;
                return ($$0|0);
            }
            $2 = ($0|0)>(0);
            if (!($2)) {
                $$0 = 1;
                return ($$0|0);
            }
            $3 = HEAP32[568>>2]|0;
            $4 = HEAP32[572>>2]|0;
            $5 = ($3|0)<=($4|0);
            $6 = $5 ? 1 : -1;
            $7 = (($4) + ($6))|0;
            $8 = ($3|0)==($7|0);
            if (!($8)) {
                $i$01 = $3;
                while(1) {
                    $9 = HEAP32[576>>2]|0;
                    $10 = ($9|0)!=(0|0);
                    $11 = $10&1;
                    __ZL10show_frameii($i$01,$11);
                    $12 = (($i$01) + ($6))|0;
                    $13 = HEAP32[572>>2]|0;
                    $14 = (($13) + ($6))|0;
                    $15 = ($12|0)==($14|0);
                    if ($15) {
                        break;
                    } else {
                        $i$01 = $12;
                    }
                }
            }
            $16 = HEAP32[844>>2]|0;
            $17 = ($16|0)==(0);
            if ($17) {
                $$0 = 1;
                return ($$0|0);
            }
            __ZL22combine_output_optionsv();
            $$0 = 1;
            return ($$0|0);
        }
        function _main($argc,$argv) {
            $argc = $argc|0;
            $argv = $argv|0;
            var $$ = 0, $$22 = 0, $$name$0 = 0, $$not = 0, $$off = 0, $$off15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
            var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
            var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
            var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
            var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
            var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
            var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
            var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
            var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
            var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
            var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
            var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
            var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
            var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
            var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
            var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
            var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
            var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
            var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
            var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
            var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
            var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
            var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
            var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
            var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
            var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0.0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
            var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
            var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
            var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
            var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0.0, $621 = 0, $622 = 0.0, $623 = 0, $624 = 0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
            var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
            var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
            var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
            var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
            var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
            var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
            var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
            var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dimen = 0, $ends = 0, $name$0 = 0, $not$ = 0, $not$$cmp = 0, $not$18 = 0, $not$19 = 0, $not$29 = 0, $notlhs = 0, $notrhs = 0, $o$02527 = 0, $or$cond11$not = 0, $or$cond13 = 0, $or$cond21 = 0, $or$cond3 = 0, $or$cond9 = 0;
            var $tmpcast16$byval_copy = 0, $tmpcast17$byval_copy = 0, $vararg_buffer = 0, $vararg_buffer18 = 0, $vararg_buffer5 = 0, $vararg_buffer63 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0;
            var $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr3 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0;
            var $vararg_ptr4 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0;
            var $vararg_ptr60 = 0, $vararg_ptr61 = 0, $vararg_ptr62 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 352|0;
            $tmpcast17$byval_copy = sp + 248|0;
            $tmpcast16$byval_copy = sp + 208|0;
            $vararg_buffer86 = sp + 200|0;
            $vararg_buffer83 = sp + 192|0;
            $vararg_buffer80 = sp + 184|0;
            $vararg_buffer77 = sp + 176|0;
            $vararg_buffer74 = sp + 168|0;
            $vararg_buffer72 = sp + 160|0;
            $vararg_buffer69 = sp + 152|0;
            $vararg_buffer67 = sp + 144|0;
            $vararg_buffer65 = sp + 136|0;
            $vararg_buffer63 = sp + 128|0;
            $vararg_buffer18 = sp + 96|0;
            $vararg_buffer5 = sp + 40|0;
            $vararg_buffer = sp + 8|0;
            $0 = sp + 88|0;
            $1 = sp + 32|0;
            $ends = sp + 340|0;
            $dimen = sp;
            $2 = (_Clp_NewParser($argc,$argv,110,884)|0);
            HEAP32[828>>2] = $2;
            HEAP32[$vararg_buffer>>2] = 20822;
            $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
            HEAP32[$vararg_ptr1>>2] = 0;
            $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
            HEAP32[$vararg_ptr2>>2] = 20831;
            $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
            HEAP32[$vararg_ptr3>>2] = 0;
            $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
            HEAP32[$vararg_ptr4>>2] = 0;
            (_Clp_AddStringListType($2,10,1,$vararg_buffer)|0);
            $3 = HEAP32[828>>2]|0;
            HEAP32[$vararg_buffer5>>2] = 20839;
            $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
            HEAP32[$vararg_ptr8>>2] = 0;
            $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
            HEAP32[$vararg_ptr9>>2] = 20844;
            $vararg_ptr10 = ((($vararg_buffer5)) + 12|0);
            HEAP32[$vararg_ptr10>>2] = 1;
            $vararg_ptr11 = ((($vararg_buffer5)) + 16|0);
            HEAP32[$vararg_ptr11>>2] = 20849;
            $vararg_ptr12 = ((($vararg_buffer5)) + 20|0);
            HEAP32[$vararg_ptr12>>2] = 2;
            $vararg_ptr13 = ((($vararg_buffer5)) + 24|0);
            HEAP32[$vararg_ptr13>>2] = 20860;
            $vararg_ptr14 = ((($vararg_buffer5)) + 28|0);
            HEAP32[$vararg_ptr14>>2] = 2;
            $vararg_ptr15 = ((($vararg_buffer5)) + 32|0);
            HEAP32[$vararg_ptr15>>2] = 20863;
            $vararg_ptr16 = ((($vararg_buffer5)) + 36|0);
            HEAP32[$vararg_ptr16>>2] = 3;
            $vararg_ptr17 = ((($vararg_buffer5)) + 40|0);
            HEAP32[$vararg_ptr17>>2] = 0;
            (_Clp_AddStringListType($3,11,1,$vararg_buffer5)|0);
            $4 = HEAP32[828>>2]|0;
            HEAP32[$vararg_buffer18>>2] = 20872;
            $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
            HEAP32[$vararg_ptr21>>2] = 0;
            $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
            HEAP32[$vararg_ptr22>>2] = 20882;
            $vararg_ptr23 = ((($vararg_buffer18)) + 12|0);
            HEAP32[$vararg_ptr23>>2] = 1;
            $vararg_ptr24 = ((($vararg_buffer18)) + 16|0);
            HEAP32[$vararg_ptr24>>2] = 20898;
            $vararg_ptr25 = ((($vararg_buffer18)) + 20|0);
            HEAP32[$vararg_ptr25>>2] = 2;
            $vararg_ptr26 = ((($vararg_buffer18)) + 24|0);
            HEAP32[$vararg_ptr26>>2] = 0;
            (_Clp_AddStringListType($4,18,0,$vararg_buffer18)|0);
            $5 = HEAP32[828>>2]|0;
            HEAP32[$tmpcast16$byval_copy>>2] = 20909;
            $vararg_ptr30 = ((($tmpcast16$byval_copy)) + 4|0);
            HEAP32[$vararg_ptr30>>2] = 65537;
            $vararg_ptr31 = ((($tmpcast16$byval_copy)) + 8|0);
            HEAP32[$vararg_ptr31>>2] = 20920;
            $vararg_ptr32 = ((($tmpcast16$byval_copy)) + 12|0);
            HEAP32[$vararg_ptr32>>2] = 65536;
            $vararg_ptr33 = ((($tmpcast16$byval_copy)) + 16|0);
            HEAP32[$vararg_ptr33>>2] = 20934;
            $vararg_ptr34 = ((($tmpcast16$byval_copy)) + 20|0);
            HEAP32[$vararg_ptr34>>2] = 65536;
            $vararg_ptr35 = ((($tmpcast16$byval_copy)) + 24|0);
            HEAP32[$vararg_ptr35>>2] = 20945;
            $vararg_ptr36 = ((($tmpcast16$byval_copy)) + 28|0);
            HEAP32[$vararg_ptr36>>2] = 65537;
            $vararg_ptr37 = ((($tmpcast16$byval_copy)) + 32|0);
            HEAP32[$vararg_ptr37>>2] = 0;
            (_Clp_AddStringListType($5,20,1,$tmpcast16$byval_copy)|0);
            $6 = HEAP32[828>>2]|0;
            HEAP32[$tmpcast17$byval_copy>>2] = 20959;
            $vararg_ptr41 = ((($tmpcast17$byval_copy)) + 4|0);
            HEAP32[$vararg_ptr41>>2] = 0;
            $vararg_ptr42 = ((($tmpcast17$byval_copy)) + 8|0);
            HEAP32[$vararg_ptr42>>2] = 20965;
            $vararg_ptr43 = ((($tmpcast17$byval_copy)) + 12|0);
            HEAP32[$vararg_ptr43>>2] = 0;
            $vararg_ptr44 = ((($tmpcast17$byval_copy)) + 16|0);
            HEAP32[$vararg_ptr44>>2] = 20972;
            $vararg_ptr45 = ((($tmpcast17$byval_copy)) + 20|0);
            HEAP32[$vararg_ptr45>>2] = 2;
            $vararg_ptr46 = ((($tmpcast17$byval_copy)) + 24|0);
            HEAP32[$vararg_ptr46>>2] = 20976;
            $vararg_ptr47 = ((($tmpcast17$byval_copy)) + 28|0);
            HEAP32[$vararg_ptr47>>2] = 1;
            $vararg_ptr48 = ((($tmpcast17$byval_copy)) + 32|0);
            HEAP32[$vararg_ptr48>>2] = 20980;
            $vararg_ptr49 = ((($tmpcast17$byval_copy)) + 36|0);
            HEAP32[$vararg_ptr49>>2] = 3;
            $vararg_ptr50 = ((($tmpcast17$byval_copy)) + 40|0);
            HEAP32[$vararg_ptr50>>2] = 20987;
            $vararg_ptr51 = ((($tmpcast17$byval_copy)) + 44|0);
            HEAP32[$vararg_ptr51>>2] = 5;
            $vararg_ptr52 = ((($tmpcast17$byval_copy)) + 48|0);
            HEAP32[$vararg_ptr52>>2] = 20995;
            $vararg_ptr53 = ((($tmpcast17$byval_copy)) + 52|0);
            HEAP32[$vararg_ptr53>>2] = 4;
            $vararg_ptr54 = ((($tmpcast17$byval_copy)) + 56|0);
            HEAP32[$vararg_ptr54>>2] = 21004;
            $vararg_ptr55 = ((($tmpcast17$byval_copy)) + 60|0);
            HEAP32[$vararg_ptr55>>2] = 5;
            $vararg_ptr56 = ((($tmpcast17$byval_copy)) + 64|0);
            HEAP32[$vararg_ptr56>>2] = 21013;
            $vararg_ptr57 = ((($tmpcast17$byval_copy)) + 68|0);
            HEAP32[$vararg_ptr57>>2] = 6;
            $vararg_ptr58 = ((($tmpcast17$byval_copy)) + 72|0);
            HEAP32[$vararg_ptr58>>2] = 21022;
            $vararg_ptr59 = ((($tmpcast17$byval_copy)) + 76|0);
            HEAP32[$vararg_ptr59>>2] = 0;
            $vararg_ptr60 = ((($tmpcast17$byval_copy)) + 80|0);
            HEAP32[$vararg_ptr60>>2] = 21027;
            $vararg_ptr61 = ((($tmpcast17$byval_copy)) + 84|0);
            HEAP32[$vararg_ptr61>>2] = 2;
            $vararg_ptr62 = ((($tmpcast17$byval_copy)) + 88|0);
            HEAP32[$vararg_ptr62>>2] = 0;
            (_Clp_AddStringListType($6,21,0,$tmpcast17$byval_copy)|0);
            $7 = HEAP32[828>>2]|0;
            (_Clp_AddType($7,12,0,6,0)|0);
            $8 = HEAP32[828>>2]|0;
            (_Clp_AddType($8,15,0,7,0)|0);
            $9 = HEAP32[828>>2]|0;
            (_Clp_AddType($9,19,0,8,0)|0);
            $10 = HEAP32[828>>2]|0;
            (_Clp_AddType($10,13,0,9,0)|0);
            $11 = HEAP32[828>>2]|0;
            (_Clp_AddType($11,14,1,10,0)|0);
            $12 = HEAP32[828>>2]|0;
            (_Clp_AddType($12,16,0,11,0)|0);
            $13 = HEAP32[828>>2]|0;
            (_Clp_AddType($13,17,1,12,0)|0);
            $14 = HEAP32[828>>2]|0;
            (_Clp_SetOptionChar($14,43,4)|0);
            $15 = HEAP32[828>>2]|0;
            (_Clp_SetErrorHandler($15,2)|0);
            $16 = HEAP32[828>>2]|0;
            $17 = (_Clp_ProgramName($16)|0);
            HEAP32[556>>2] = $17;
            $18 = (__Z12new_frameseti(16)|0);
            HEAP32[756>>2] = $18;
            __ZL20initialize_def_framev();
            _Gif_InitCompressInfo(780);
            _Gif_SetErrorHandler(2);
            $19 = ((($dimen)) + 4|0);
            L1: while(1) {
                $20 = HEAP32[828>>2]|0;
                $21 = (_Clp_Next($20)|0);
                do {
                    switch ($21|0) {
                        case 329:  {
                            label = 244;
                            break L1;
                            break;
                        }
                        case 330:  {
                            label = 245;
                            break L1;
                            break;
                        }
                        case -1:  {
                            label = 255;
                            break L1;
                            break;
                        }
                        case -2:  {
                            label = 254;
                            break L1;
                            break;
                        }
                        case 98:  {
                            __ZL8set_modei(2);
                            continue L1;
                            break;
                        }
                        case 109:  {
                            __ZL8set_modei(1);
                            continue L1;
                            break;
                        }
                        case 101:  {
                            __ZL8set_modei(3);
                            HEAP32[(728)>>2] = 0;
                            continue L1;
                            break;
                        }
                        case 69:  {
                            __ZL8set_modei(3);
                            HEAP32[(728)>>2] = 1;
                            continue L1;
                            break;
                        }
                        case 301:  {
                            $22 = HEAP32[828>>2]|0;
                            $23 = ((($22)) + 4|0);
                            $24 = HEAP32[$23>>2]|0;
                            $25 = ($24|0)==(0);
                            if ($25) {
                                $26 = HEAP32[876>>2]|0;
                                $27 = ($26|0)==(1);
                                $28 = $27 ? 2 : 1;
                                HEAP32[876>>2] = $28;
                                continue L1;
                            } else {
                                HEAP32[876>>2] = 0;
                                continue L1;
                            }
                            break;
                        }
                        case 320:  {
                            $29 = HEAP32[828>>2]|0;
                            $30 = ((($29)) + 4|0);
                            $31 = HEAP32[$30>>2]|0;
                            $32 = ($31|0)==(0);
                            $33 = HEAP8[(744)>>0]|0;
                            $34 = ($33&255) >>> 2;
                            $35 = $34 & 7;
                            $36 = $35&255;
                            if (!($32)) {
                                $37 = $36 & 6;
                                $38 = $37&255;
                                $39 = ($38 << 2)&255;
                                $40 = $33 & -29;
                                $41 = $39 | $40;
                                HEAP8[(744)>>0] = $41;
                                continue L1;
                            }
                            $42 = $36 | 1;
                            $43 = $42&255;
                            $44 = ($43 << 2)&255;
                            $45 = $44 & 28;
                            $46 = $33 & -29;
                            $47 = $45 | $46;
                            HEAP8[(744)>>0] = $47;
                            $48 = HEAP32[876>>2]|0;
                            $49 = ($48|0)==(0);
                            if (!($49)) {
                                continue L1;
                            }
                            HEAP32[876>>2] = 1;
                            continue L1;
                            break;
                        }
                        case 341:  {
                            $50 = HEAP32[828>>2]|0;
                            $51 = ((($50)) + 4|0);
                            $52 = HEAP32[$51>>2]|0;
                            $53 = ($52|0)==(0);
                            $54 = HEAP8[(744)>>0]|0;
                            $55 = ($54&255) >>> 2;
                            $56 = $55 & 7;
                            $57 = $56&255;
                            if (!($53)) {
                                $58 = $57 & 5;
                                $59 = $58&255;
                                $60 = ($59 << 2)&255;
                                $61 = $54 & -29;
                                $62 = $60 | $61;
                                HEAP8[(744)>>0] = $62;
                                continue L1;
                            }
                            $63 = $57 | 2;
                            $64 = $63&255;
                            $65 = ($64 << 2)&255;
                            $66 = $65 & 28;
                            $67 = $54 & -29;
                            $68 = $66 | $67;
                            HEAP8[(744)>>0] = $68;
                            $69 = HEAP32[876>>2]|0;
                            $70 = ($69|0)==(0);
                            if (!($70)) {
                                continue L1;
                            }
                            HEAP32[876>>2] = 1;
                            continue L1;
                            break;
                        }
                        case 367:  {
                            $71 = HEAP32[828>>2]|0;
                            $72 = ((($71)) + 4|0);
                            $73 = HEAP32[$72>>2]|0;
                            $74 = ($73|0)==(0);
                            $75 = HEAP8[(744)>>0]|0;
                            $76 = ($75&255) >>> 2;
                            $77 = $76 & 7;
                            $78 = $77&255;
                            if (!($74)) {
                                $79 = $78 & 3;
                                $80 = $79&255;
                                $81 = ($80 << 2)&255;
                                $82 = $75 & -29;
                                $83 = $81 | $82;
                                HEAP8[(744)>>0] = $83;
                                continue L1;
                            }
                            $84 = $78 | 4;
                            $85 = $84&255;
                            $86 = ($85 << 2)&255;
                            $87 = $86 & 28;
                            $88 = $75 & -29;
                            $89 = $87 | $88;
                            HEAP8[(744)>>0] = $89;
                            $90 = HEAP32[876>>2]|0;
                            $91 = ($90|0)==(0);
                            if (!($91)) {
                                continue L1;
                            }
                            HEAP32[876>>2] = 1;
                            continue L1;
                            break;
                        }
                        case 321:  {
                            $92 = HEAP32[828>>2]|0;
                            $93 = ((($92)) + 4|0);
                            $94 = HEAP32[$93>>2]|0;
                            $not$19 = ($94|0)==(0);
                            $95 = $not$19&1;
                            HEAP32[824>>2] = $95;
                            continue L1;
                            break;
                        }
                        case 319: case 317: case 316: case 315:  {
                        __ZL17frame_change_donev();
                        __Z16set_frame_changei($21);
                        continue L1;
                        break;
                    }
                        case 318:  {
                            __ZL17frame_change_donev();
                            continue L1;
                            break;
                        }
                        case 324:  {
                            $96 = HEAP32[828>>2]|0;
                            $97 = ((($96)) + 4|0);
                            $98 = HEAP32[$97>>2]|0;
                            $99 = ($98|0)==(0);
                            if ($99) {
                                $100 = HEAP32[836>>2]|0;
                                $101 = $100 & 32;
                                $102 = ($101|0)==(0);
                                if (!($102)) {
                                    $103 = HEAP32[(3104)>>2]|0;
                                    __ZL24redundant_option_warningPKc($103);
                                }
                                $104 = HEAP32[836>>2]|0;
                                $105 = $104 | 32;
                                HEAP32[836>>2] = $105;
                                $106 = HEAP32[828>>2]|0;
                                $107 = ((($106)) + 12|0);
                                $108 = HEAP32[$107>>2]|0;
                                HEAP32[(668)>>2] = $108;
                                continue L1;
                            } else {
                                label = 29;
                            }
                            break;
                        }
                        case 326:  {
                            label = 29;
                            break;
                        }
                        case 325:  {
                            HEAP32[(672)>>2] = 0;
                            HEAP32[(668)>>2] = 0;
                            continue L1;
                            break;
                        }
                        case 310:  {
                            $115 = HEAP32[828>>2]|0;
                            $116 = ((($115)) + 4|0);
                            $117 = HEAP32[$116>>2]|0;
                            $118 = ($117|0)==(0);
                            if ($118) {
                                $119 = HEAP32[836>>2]|0;
                                $120 = $119 & 16;
                                $121 = ($120|0)==(0);
                                if (!($121)) {
                                    $122 = HEAP32[(3100)>>2]|0;
                                    __ZL24redundant_option_warningPKc($122);
                                }
                                $123 = HEAP32[836>>2]|0;
                                $124 = $123 | 16;
                                HEAP32[836>>2] = $124;
                                $125 = HEAP32[(676)>>2]|0;
                                $126 = ($125|0)==(0|0);
                                if ($126) {
                                    $127 = (_Gif_NewComment()|0);
                                    HEAP32[(676)>>2] = $127;
                                }
                                $128 = HEAP32[(676)>>2]|0;
                                $129 = HEAP32[828>>2]|0;
                                $130 = ((($129)) + 12|0);
                                $131 = HEAP32[$130>>2]|0;
                                (_Gif_AddComment($128,$131,-1)|0);
                                continue L1;
                            } else {
                                label = 39;
                            }
                            break;
                        }
                        case 322:  {
                            label = 39;
                            break;
                        }
                        case 323:  {
                            HEAP32[(680)>>2] = 0;
                            continue L1;
                            break;
                        }
                        case 105:  {
                            $133 = HEAP32[836>>2]|0;
                            $134 = $133 & 1;
                            $135 = ($134|0)==(0);
                            if (!($135)) {
                                $136 = HEAP32[3084>>2]|0;
                                __ZL24redundant_option_warningPKc($136);
                            }
                            $137 = HEAP32[836>>2]|0;
                            $138 = $137 | 1;
                            HEAP32[836>>2] = $138;
                            $139 = HEAP32[828>>2]|0;
                            $140 = ((($139)) + 4|0);
                            $141 = HEAP32[$140>>2]|0;
                            $not$18 = ($141|0)==(0);
                            $142 = $not$18&1;
                            HEAP32[(692)>>2] = $142;
                            continue L1;
                            break;
                        }
                        case 300:  {
                            HEAP32[(692)>>2] = -1;
                            continue L1;
                            break;
                        }
                        case 327:  {
                            $143 = HEAP32[836>>2]|0;
                            $144 = $143 & 64;
                            $145 = ($144|0)==(0);
                            if (!($145)) {
                                $146 = HEAP32[(3108)>>2]|0;
                                __ZL24redundant_option_warningPKc($146);
                            }
                            $147 = HEAP32[836>>2]|0;
                            $148 = $147 | 64;
                            HEAP32[836>>2] = $148;
                            $149 = HEAP32[828>>2]|0;
                            $150 = ((($149)) + 4|0);
                            $151 = HEAP32[$150>>2]|0;
                            $152 = ($151|0)!=(0);
                            $153 = HEAP32[588>>2]|0;
                            $154 = $152 ? 0 : $153;
                            HEAP32[(696)>>2] = $154;
                            $155 = HEAP32[828>>2]|0;
                            $156 = ((($155)) + 4|0);
                            $157 = HEAP32[$156>>2]|0;
                            $158 = ($157|0)!=(0);
                            $159 = HEAP32[592>>2]|0;
                            $160 = $158 ? 0 : $159;
                            HEAP32[(700)>>2] = $160;
                            continue L1;
                            break;
                        }
                        case 328:  {
                            HEAP32[(696)>>2] = -1;
                            HEAP32[(700)>>2] = -1;
                            continue L1;
                            break;
                        }
                        case 116:  {
                            $161 = HEAP32[836>>2]|0;
                            $162 = $161 & 8;
                            $163 = ($162|0)==(0);
                            if (!($163)) {
                                $164 = HEAP32[(3096)>>2]|0;
                                __ZL24redundant_option_warningPKc($164);
                            }
                            $165 = HEAP32[836>>2]|0;
                            $166 = $165 | 8;
                            HEAP32[836>>2] = $166;
                            $167 = HEAP32[828>>2]|0;
                            $168 = ((($167)) + 4|0);
                            $169 = HEAP32[$168>>2]|0;
                            $170 = ($169|0)==(0);
                            if ($170) {
                                $171 = 16;
                                $172 = $171;
                                $173 = HEAP32[$172>>2]|0;
                                $174 = (($171) + 4)|0;
                                $175 = $174;
                                $176 = HEAP32[$175>>2]|0;
                                $177 = (684);
                                $178 = $177;
                                HEAP32[$178>>2] = $173;
                                $179 = (($177) + 4)|0;
                                $180 = $179;
                                HEAP32[$180>>2] = $176;
                                $181 = HEAP8[16>>0]|0;
                                $182 = ($181<<24>>24)!=(0);
                                $183 = $182 ? 2 : 1;
                                HEAP8[(684)>>0] = $183;
                                continue L1;
                            } else {
                                HEAP8[(684)>>0] = -1;
                                continue L1;
                            }
                            break;
                        }
                        case 308:  {
                            HEAP8[(684)>>0] = 0;
                            continue L1;
                            break;
                        }
                        case 342:  {
                            $184 = HEAP32[844>>2]|0;
                            $185 = $184 & 256;
                            $186 = ($185|0)==(0);
                            if (!($186)) {
                                $187 = HEAP32[(3160)>>2]|0;
                                __ZL24redundant_option_warningPKc($187);
                            }
                            $188 = HEAP32[844>>2]|0;
                            $189 = $188 | 256;
                            HEAP32[844>>2] = $189;
                            $190 = HEAP32[828>>2]|0;
                            $191 = ((($190)) + 4|0);
                            $192 = HEAP32[$191>>2]|0;
                            $193 = ($192|0)==(0);
                            if ($193) {
                                $194 = 16;
                                $195 = $194;
                                $196 = HEAP32[$195>>2]|0;
                                $197 = (($194) + 4)|0;
                                $198 = $197;
                                $199 = HEAP32[$198>>2]|0;
                                $200 = (192);
                                $201 = $200;
                                HEAP32[$201>>2] = $196;
                                $202 = (($200) + 4)|0;
                                $203 = $202;
                                HEAP32[$203>>2] = $199;
                                $204 = HEAP8[16>>0]|0;
                                $205 = ($204<<24>>24)!=(0);
                                $206 = $205 ? 2 : 1;
                                HEAP8[(192)>>0] = $206;
                                continue L1;
                            } else {
                                HEAP8[(192)>>0] = 2;
                                HEAP32[(196)>>2] = 0;
                                continue L1;
                            }
                            break;
                        }
                        case 343:  {
                            $207 = HEAP32[844>>2]|0;
                            $208 = $207 & 256;
                            $209 = ($208|0)==(0);
                            if (!($209)) {
                                $210 = HEAP32[(3160)>>2]|0;
                                __ZL24redundant_option_warningPKc($210);
                            }
                            $211 = HEAP32[844>>2]|0;
                            $212 = $211 | 256;
                            HEAP32[844>>2] = $212;
                            HEAP8[(192)>>0] = 0;
                            continue L1;
                            break;
                        }
                        case 309:  {
                            $213 = HEAP32[844>>2]|0;
                            $214 = $213 & 2;
                            $215 = ($214|0)==(0);
                            if (!($215)) {
                                $216 = HEAP32[(3132)>>2]|0;
                                __ZL24redundant_option_warningPKc($216);
                            }
                            $217 = HEAP32[844>>2]|0;
                            $218 = $217 | 2;
                            HEAP32[844>>2] = $218;
                            $219 = HEAP32[828>>2]|0;
                            $220 = ((($219)) + 4|0);
                            $221 = HEAP32[$220>>2]|0;
                            $222 = ($221|0)==(0);
                            if ($222) {
                                $223 = HEAP32[580>>2]|0;
                                HEAP32[(184)>>2] = $223;
                                $224 = HEAP32[584>>2]|0;
                                HEAP32[(188)>>2] = $224;
                                continue L1;
                            } else {
                                HEAP32[(188)>>2] = 0;
                                HEAP32[(184)>>2] = 0;
                                continue L1;
                            }
                            break;
                        }
                        case 314:  {
                            $225 = HEAP32[844>>2]|0;
                            $226 = $225 & 2;
                            $227 = ($226|0)==(0);
                            if (!($227)) {
                                $228 = HEAP32[(3132)>>2]|0;
                                __ZL24redundant_option_warningPKc($228);
                            }
                            $229 = HEAP32[844>>2]|0;
                            $230 = $229 | 2;
                            HEAP32[844>>2] = $230;
                            HEAP32[(188)>>2] = -1;
                            HEAP32[(184)>>2] = -1;
                            continue L1;
                            break;
                        }
                        case 332:  {
                            $231 = HEAP32[828>>2]|0;
                            $232 = ((($231)) + 4|0);
                            $233 = HEAP32[$232>>2]|0;
                            $234 = ($233|0)==(0);
                            if ($234) {
                                $235 = HEAP32[836>>2]|0;
                                $236 = $235 & 128;
                                $237 = ($236|0)==(0);
                                if (!($237)) {
                                    $238 = HEAP32[(3112)>>2]|0;
                                    __ZL24redundant_option_warningPKc($238);
                                }
                                $239 = HEAP32[836>>2]|0;
                                $240 = $239 | 128;
                                HEAP32[836>>2] = $240;
                                $241 = HEAP32[(704)>>2]|0;
                                $242 = (__ZL9copy_cropP7Gt_Crop($241)|0);
                                $243 = HEAP32[588>>2]|0;
                                $244 = ((($242)) + 8|0);
                                HEAP32[$244>>2] = $243;
                                $245 = HEAP32[592>>2]|0;
                                $246 = ((($242)) + 12|0);
                                HEAP32[$246>>2] = $245;
                                $247 = HEAP32[580>>2]|0;
                                $248 = ((($242)) + 16|0);
                                HEAP32[$248>>2] = $247;
                                $249 = HEAP32[584>>2]|0;
                                $250 = ((($242)) + 20|0);
                                HEAP32[$250>>2] = $249;
                                HEAP32[(704)>>2] = $242;
                                continue L1;
                            } else {
                                label = 75;
                            }
                            break;
                        }
                        case 333:  {
                            label = 75;
                            break;
                        }
                        case 360:  {
                            $251 = HEAP32[828>>2]|0;
                            $252 = ((($251)) + 4|0);
                            $253 = HEAP32[$252>>2]|0;
                            $254 = ($253|0)==(0);
                            $255 = HEAP32[(704)>>2]|0;
                            if ($254) {
                                $256 = (__ZL9copy_cropP7Gt_Crop($255)|0);
                                HEAP32[(704)>>2] = $256;
                                $257 = ((($256)) + 4|0);
                                HEAP32[$257>>2] = 1;
                                continue L1;
                            }
                            $258 = ($255|0)==(0|0);
                            if ($258) {
                                continue L1;
                            }
                            $259 = ((($255)) + 4|0);
                            $260 = HEAP32[$259>>2]|0;
                            $261 = ($260|0)==(0);
                            if ($261) {
                                continue L1;
                            }
                            $262 = (__ZL9copy_cropP7Gt_Crop($255)|0);
                            HEAP32[(704)>>2] = $262;
                            $263 = ((($262)) + 4|0);
                            HEAP32[$263>>2] = 0;
                            continue L1;
                            break;
                        }
                        case 339:  {
                            HEAP32[(732)>>2] = 1;
                            continue L1;
                            break;
                        }
                        case 372:  {
                            HEAP32[(736)>>2] = 1;
                            continue L1;
                            break;
                        }
                        case 340:  {
                            HEAP32[(732)>>2] = 0;
                            continue L1;
                            break;
                        }
                        case 373:  {
                            HEAP32[(736)>>2] = 0;
                            continue L1;
                            break;
                        }
                        case 352:  {
                            $264 = HEAP32[828>>2]|0;
                            $265 = (__ZL16handle_extensionP10Clp_Parseri($264,0)|0);
                            $266 = ($265|0)==(0);
                            if ($266) {
                                label = 254;
                                break L1;
                            } else {
                                continue L1;
                            }
                            break;
                        }
                        case 351:  {
                            $267 = HEAP32[828>>2]|0;
                            $268 = (__ZL16handle_extensionP10Clp_Parseri($267,1)|0);
                            $269 = ($268|0)==(0);
                            if ($269) {
                                label = 254;
                                break L1;
                            } else {
                                continue L1;
                            }
                            break;
                        }
                        case 344:  {
                            $270 = HEAP32[836>>2]|0;
                            $271 = $270 & 512;
                            $272 = ($271|0)==(0);
                            if (!($272)) {
                                $273 = HEAP32[(3120)>>2]|0;
                                __ZL24redundant_option_warningPKc($273);
                            }
                            $274 = HEAP32[836>>2]|0;
                            $275 = $274 | 512;
                            HEAP32[836>>2] = $275;
                            $276 = HEAP32[828>>2]|0;
                            $277 = ((($276)) + 4|0);
                            $278 = HEAP32[$277>>2]|0;
                            $279 = ($278|0)==(0);
                            $280 = $279&1;
                            $281 = HEAP8[(744)>>0]|0;
                            $282 = $281 & -2;
                            $283 = $282 | $280;
                            HEAP8[(744)>>0] = $283;
                            continue L1;
                            break;
                        }
                        case 345:  {
                            $284 = HEAP32[836>>2]|0;
                            $285 = $284 & 512;
                            $286 = ($285|0)==(0);
                            if (!($286)) {
                                $287 = HEAP32[(3120)>>2]|0;
                                __ZL24redundant_option_warningPKc($287);
                            }
                            $288 = HEAP32[836>>2]|0;
                            $289 = $288 | 512;
                            HEAP32[836>>2] = $289;
                            $290 = HEAP32[828>>2]|0;
                            $291 = ((($290)) + 4|0);
                            $292 = HEAP32[$291>>2]|0;
                            $293 = ($292|0)==(0);
                            $294 = $293&1;
                            $295 = HEAP8[(744)>>0]|0;
                            $296 = ($294 << 1)&255;
                            $297 = $295 & -3;
                            $298 = $296 | $297;
                            HEAP8[(744)>>0] = $298;
                            continue L1;
                            break;
                        }
                        case 346:  {
                            $299 = HEAP8[(744)>>0]|0;
                            $300 = $299 & -4;
                            HEAP8[(744)>>0] = $300;
                            continue L1;
                            break;
                        }
                        case 350:  {
                            HEAP32[(748)>>2] = 0;
                            continue L1;
                            break;
                        }
                        case 347:  {
                            $301 = HEAP32[836>>2]|0;
                            $302 = $301 & 1024;
                            $303 = ($302|0)==(0);
                            if (!($303)) {
                                $304 = HEAP32[(3124)>>2]|0;
                                __ZL24redundant_option_warningPKc($304);
                            }
                            $305 = HEAP32[836>>2]|0;
                            $306 = $305 | 1024;
                            HEAP32[836>>2] = $306;
                            HEAP32[(748)>>2] = 1;
                            continue L1;
                            break;
                        }
                        case 348:  {
                            $307 = HEAP32[836>>2]|0;
                            $308 = $307 & 1024;
                            $309 = ($308|0)==(0);
                            if (!($309)) {
                                $310 = HEAP32[(3124)>>2]|0;
                                __ZL24redundant_option_warningPKc($310);
                            }
                            $311 = HEAP32[836>>2]|0;
                            $312 = $311 | 1024;
                            HEAP32[836>>2] = $312;
                            HEAP32[(748)>>2] = 2;
                            continue L1;
                            break;
                        }
                        case 349:  {
                            $313 = HEAP32[836>>2]|0;
                            $314 = $313 & 1024;
                            $315 = ($314|0)==(0);
                            if (!($315)) {
                                $316 = HEAP32[(3124)>>2]|0;
                                __ZL24redundant_option_warningPKc($316);
                            }
                            $317 = HEAP32[836>>2]|0;
                            $318 = $317 | 1024;
                            HEAP32[836>>2] = $318;
                            HEAP32[(748)>>2] = 3;
                            continue L1;
                            break;
                        }
                        case 100:  {
                            $319 = HEAP32[836>>2]|0;
                            $320 = $319 & 4;
                            $321 = ($320|0)==(0);
                            if (!($321)) {
                                $322 = HEAP32[(3092)>>2]|0;
                                __ZL24redundant_option_warningPKc($322);
                            }
                            $323 = HEAP32[836>>2]|0;
                            $324 = $323 | 4;
                            HEAP32[836>>2] = $324;
                            $325 = HEAP32[828>>2]|0;
                            $326 = ((($325)) + 4|0);
                            $327 = HEAP32[$326>>2]|0;
                            $328 = ($327|0)==(0);
                            if ($328) {
                                $329 = ((($325)) + 16|0);
                                $330 = HEAP32[$329>>2]|0;
                                $331 = $330;
                            } else {
                                $331 = 0;
                            }
                            HEAP32[(716)>>2] = $331;
                            continue L1;
                            break;
                        }
                        case 305:  {
                            HEAP32[(716)>>2] = -1;
                            continue L1;
                            break;
                        }
                        case 302:  {
                            $332 = HEAP32[836>>2]|0;
                            $333 = $332 & 2;
                            $334 = ($333|0)==(0);
                            if (!($334)) {
                                $335 = HEAP32[(3088)>>2]|0;
                                __ZL24redundant_option_warningPKc($335);
                            }
                            $336 = HEAP32[836>>2]|0;
                            $337 = $336 | 2;
                            HEAP32[836>>2] = $337;
                            $338 = HEAP32[828>>2]|0;
                            $339 = ((($338)) + 4|0);
                            $340 = HEAP32[$339>>2]|0;
                            $341 = ($340|0)==(0);
                            if (!($341)) {
                                HEAP32[(720)>>2] = 0;
                                continue L1;
                            }
                            $342 = ((($338)) + 16|0);
                            $343 = HEAP32[$342>>2]|0;
                            $344 = ($343>>>0)>(7);
                            if ($344) {
                                __Z5erroriPKcz(0,21032,$vararg_buffer63);
                                continue L1;
                            } else {
                                HEAP32[(720)>>2] = $343;
                                continue L1;
                            }
                            break;
                        }
                        case 304:  {
                            HEAP32[(720)>>2] = -1;
                            continue L1;
                            break;
                        }
                        case 108:  {
                            $345 = HEAP32[844>>2]|0;
                            $346 = $345 & 1;
                            $347 = ($346|0)==(0);
                            if (!($347)) {
                                $348 = HEAP32[3128>>2]|0;
                                __ZL24redundant_option_warningPKc($348);
                            }
                            $349 = HEAP32[844>>2]|0;
                            $350 = $349 | 1;
                            HEAP32[844>>2] = $350;
                            $351 = HEAP32[828>>2]|0;
                            $352 = ((($351)) + 4|0);
                            $353 = HEAP32[$352>>2]|0;
                            $354 = ($353|0)==(0);
                            if (!($354)) {
                                HEAP32[(200)>>2] = -1;
                                continue L1;
                            }
                            $355 = ((($351)) + 8|0);
                            $356 = HEAP32[$355>>2]|0;
                            $357 = ($356|0)==(0);
                            if ($357) {
                                $360 = 0;
                            } else {
                                $358 = ((($351)) + 16|0);
                                $359 = HEAP32[$358>>2]|0;
                                $360 = $359;
                            }
                            HEAP32[(200)>>2] = $360;
                            continue L1;
                            break;
                        }
                        case 303:  {
                            $361 = HEAP32[844>>2]|0;
                            $362 = $361 & 1;
                            $363 = ($362|0)==(0);
                            if (!($363)) {
                                $364 = HEAP32[3128>>2]|0;
                                __ZL24redundant_option_warningPKc($364);
                            }
                            $365 = HEAP32[844>>2]|0;
                            $366 = $365 | 1;
                            HEAP32[844>>2] = $366;
                            HEAP32[(200)>>2] = -2;
                            continue L1;
                            break;
                        }
                        case 313:  {
                            $367 = HEAP32[844>>2]|0;
                            $368 = $367 | 4;
                            HEAP32[844>>2] = $368;
                            $369 = HEAP32[828>>2]|0;
                            $370 = ((($369)) + 4|0);
                            $371 = HEAP32[$370>>2]|0;
                            $372 = ($371|0)==(0);
                            do {
                                if ($372) {
                                    $373 = ((($369)) + 8|0);
                                    $374 = HEAP32[$373>>2]|0;
                                    $375 = ($374|0)==(0);
                                    if (!($375)) {
                                        $376 = ((($369)) + 16|0);
                                        $377 = HEAP32[$376>>2]|0;
                                        $378 = ($377|0)<(0);
                                        if ($378) {
                                            $o$02527 = 0;
                                            break;
                                        }
                                    }
                                    $379 = HEAP32[828>>2]|0;
                                    $380 = ((($379)) + 8|0);
                                    $381 = HEAP32[$380>>2]|0;
                                    $382 = ($381|0)==(0);
                                    if ($382) {
                                        $o$02527 = 1;
                                    } else {
                                        $383 = ((($379)) + 16|0);
                                        $384 = HEAP32[$383>>2]|0;
                                        $385 = ($384|0)>(65535);
                                        $$not = $385 ^ 1;
                                        $386 = $384 & 1;
                                        $387 = ($386|0)==(0);
                                        $or$cond21 = $387 | $$not;
                                        if (!($or$cond21)) {
                                            $388 = (($384) + -1)|0;
                                            $389 = HEAP32[(248)>>2]|0;
                                            $390 = $389 | $388;
                                            HEAP32[(248)>>2] = $390;
                                            continue L1;
                                        }
                                        if ($385) {
                                            $391 = $384 ^ -1;
                                            $392 = HEAP32[(248)>>2]|0;
                                            $393 = $392 & $391;
                                            HEAP32[(248)>>2] = $393;
                                            continue L1;
                                        } else {
                                            $o$02527 = $384;
                                        }
                                    }
                                } else {
                                    $o$02527 = 0;
                                }
                            } while(0);
                            $394 = HEAP32[(248)>>2]|0;
                            $395 = $394 & -65536;
                            $396 = $395 | $o$02527;
                            HEAP32[(248)>>2] = $396;
                            continue L1;
                            break;
                        }
                        case 311:  {
                            $397 = HEAP32[840>>2]|0;
                            $398 = $397 | 1;
                            HEAP32[840>>2] = $398;
                            $399 = HEAP32[828>>2]|0;
                            $400 = ((($399)) + 4|0);
                            $401 = HEAP32[$400>>2]|0;
                            $not$ = ($401|0)==(0);
                            $402 = $not$&1;
                            HEAP32[864>>2] = $402;
                            continue L1;
                            break;
                        }
                        case 375:  {
                            $403 = HEAP32[828>>2]|0;
                            $404 = ((($403)) + 4|0);
                            $405 = HEAP32[$404>>2]|0;
                            $406 = ($405|0)==(0);
                            if (!($406)) {
                                HEAP32[776>>2] = 0;
                                continue L1;
                            }
                            $407 = ((($403)) + 8|0);
                            $408 = HEAP32[$407>>2]|0;
                            $409 = ($408|0)==(0);
                            if ($409) {
                                HEAP32[776>>2] = 8;
                                continue L1;
                            } else {
                                $410 = ((($403)) + 16|0);
                                $411 = HEAP32[$410>>2]|0;
                                HEAP32[776>>2] = $411;
                                continue L1;
                            }
                            break;
                        }
                        case 312:  {
                            $412 = HEAP32[828>>2]|0;
                            $413 = ((($412)) + 4|0);
                            $414 = HEAP32[$413>>2]|0;
                            $415 = ($414|0)==(0);
                            if ($415) {
                                HEAP32[780>>2] = 3;
                                continue L1;
                            } else {
                                HEAP32[780>>2] = 0;
                                continue L1;
                            }
                            break;
                        }
                        case 334:  {
                            $416 = HEAP32[840>>2]|0;
                            $417 = $416 | 2;
                            HEAP32[840>>2] = $417;
                            $418 = HEAP32[828>>2]|0;
                            $419 = ((($418)) + 4|0);
                            $420 = HEAP32[$419>>2]|0;
                            $421 = ($420|0)==(0);
                            if (!($421)) {
                                $422 = HEAP32[872>>2]|0;
                                $423 = (__Z23delete_color_transformsP17Gt_ColorTransformPFvP12Gif_ColormapPvE($422,1)|0);
                                HEAP32[872>>2] = $423;
                                continue L1;
                            }
                            $424 = HEAP8[24>>0]|0;
                            $425 = ($424<<24>>24)==(0);
                            if ($425) {
                                $426 = HEAP32[872>>2]|0;
                                $427 = 16;
                                $428 = $427;
                                $429 = HEAP32[$428>>2]|0;
                                $430 = (($427) + 4)|0;
                                $431 = $430;
                                $432 = HEAP32[$431>>2]|0;
                                $433 = $0;
                                $434 = $433;
                                HEAP32[$434>>2] = $429;
                                $435 = (($433) + 4)|0;
                                $436 = $435;
                                HEAP32[$436>>2] = $432;
                                $437 = 24;
                                $438 = $437;
                                $439 = HEAP32[$438>>2]|0;
                                $440 = (($437) + 4)|0;
                                $441 = $440;
                                $442 = HEAP32[$441>>2]|0;
                                $443 = $1;
                                $444 = $443;
                                HEAP32[$444>>2] = $439;
                                $445 = (($443) + 4)|0;
                                $446 = $445;
                                HEAP32[$446>>2] = $442;
                                ;HEAP32[$tmpcast16$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$tmpcast16$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
                                ;HEAP32[$tmpcast17$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$tmpcast17$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
                                $447 = (__Z19append_color_changeP17Gt_ColorTransform9Gif_ColorS1_($426,$tmpcast16$byval_copy,$tmpcast17$byval_copy)|0);
                                HEAP32[872>>2] = $447;
                                continue L1;
                            } else {
                                __Z5erroriPKcz(0,21065,$vararg_buffer65);
                                continue L1;
                            }
                            break;
                        }
                        case 353:  {
                            $448 = HEAP32[844>>2]|0;
                            $449 = $448 | 512;
                            HEAP32[844>>2] = $449;
                            $450 = HEAP32[828>>2]|0;
                            $451 = ((($450)) + 4|0);
                            $452 = HEAP32[$451>>2]|0;
                            $453 = ($452|0)==(0);
                            $454 = HEAP32[3188>>2]|0;
                            if ($453) {
                                $456 = ((($450)) + 12|0);
                                $457 = HEAP32[$456>>2]|0;
                                $458 = (__Z22append_color_transformP17Gt_ColorTransformPFvP12Gif_ColormapPvES3_($454,3,$457)|0);
                                HEAP32[3188>>2] = $458;
                                continue L1;
                            } else {
                                $455 = (__Z23delete_color_transformsP17Gt_ColorTransformPFvP12Gif_ColormapPvE($454,3)|0);
                                HEAP32[3188>>2] = $455;
                                continue L1;
                            }
                            break;
                        }
                        case 335:  {
                            $459 = HEAP32[844>>2]|0;
                            $460 = $459 & 16;
                            $461 = ($460|0)==(0);
                            if (!($461)) {
                                $462 = HEAP32[(3144)>>2]|0;
                                __ZL24redundant_option_warningPKc($462);
                            }
                            $463 = HEAP32[844>>2]|0;
                            $464 = $463 | 16;
                            HEAP32[844>>2] = $464;
                            $465 = HEAP32[828>>2]|0;
                            $466 = ((($465)) + 4|0);
                            $467 = HEAP32[$466>>2]|0;
                            $468 = ($467|0)==(0);
                            if (!($468)) {
                                HEAP32[(204)>>2] = 0;
                                continue L1;
                            }
                            $469 = ((($465)) + 16|0);
                            $470 = HEAP32[$469>>2]|0;
                            HEAP32[(204)>>2] = $470;
                            $$off15 = (($470) + -2)|0;
                            $471 = ($$off15>>>0)>(254);
                            if (!($471)) {
                                continue L1;
                            }
                            $472 = HEAP32[828>>2]|0;
                            (_Clp_OptionError($472,21130,$vararg_buffer67)|0);
                            HEAP32[(204)>>2] = 0;
                            continue L1;
                            break;
                        }
                        case 369:  {
                            $473 = HEAP32[844>>2]|0;
                            $474 = $473 & 64;
                            $475 = ($474|0)==(0);
                            if (!($475)) {
                                $476 = HEAP32[(3152)>>2]|0;
                                __ZL24redundant_option_warningPKc($476);
                            }
                            $477 = HEAP32[844>>2]|0;
                            $478 = $477 | 64;
                            HEAP32[844>>2] = $478;
                            $479 = HEAP32[(208)>>2]|0;
                            _Gif_DeleteColormap($479);
                            __ZL22set_new_fixed_colormapPKc(21171);
                            continue L1;
                            break;
                        }
                        case 338:  {
                            $480 = HEAP32[844>>2]|0;
                            $481 = $480 & 64;
                            $482 = ($481|0)==(0);
                            if (!($482)) {
                                $483 = HEAP32[(3152)>>2]|0;
                                __ZL24redundant_option_warningPKc($483);
                            }
                            $484 = HEAP32[844>>2]|0;
                            $485 = $484 | 64;
                            HEAP32[844>>2] = $485;
                            $486 = HEAP32[(208)>>2]|0;
                            _Gif_DeleteColormap($486);
                            $487 = HEAP32[828>>2]|0;
                            $488 = ((($487)) + 4|0);
                            $489 = HEAP32[$488>>2]|0;
                            $490 = ($489|0)==(0);
                            if ($490) {
                                $491 = ((($487)) + 12|0);
                                $492 = HEAP32[$491>>2]|0;
                                __ZL22set_new_fixed_colormapPKc($492);
                                continue L1;
                            } else {
                                HEAP32[(208)>>2] = 0;
                                continue L1;
                            }
                            break;
                        }
                        case 336:  {
                            $493 = HEAP32[844>>2]|0;
                            $494 = $493 & 128;
                            $495 = ($494|0)==(0);
                            if (!($495)) {
                                $496 = HEAP32[(3156)>>2]|0;
                                __ZL24redundant_option_warningPKc($496);
                            }
                            $497 = HEAP32[844>>2]|0;
                            $498 = $497 | 128;
                            HEAP32[844>>2] = $498;
                            $499 = HEAP32[828>>2]|0;
                            $500 = ((($499)) + 16|0);
                            $501 = HEAP32[$500>>2]|0;
                            HEAP32[(212)>>2] = $501;
                            continue L1;
                            break;
                        }
                        case 337:  {
                            $502 = HEAP32[828>>2]|0;
                            $503 = ((($502)) + 4|0);
                            $504 = HEAP32[$503>>2]|0;
                            $505 = ($504|0)==(0);
                            if ($505) {
                                $506 = ((($502)) + 8|0);
                                $507 = HEAP32[$506>>2]|0;
                                $508 = ($507|0)==(0);
                                if ($508) {
                                    $name$0 = 21176;
                                } else {
                                    $509 = ((($502)) + 16|0);
                                    $510 = HEAP32[$509>>2]|0;
                                    $name$0 = $510;
                                }
                            } else {
                                $name$0 = 20839;
                            }
                            $511 = (_strcmp($name$0,21184)|0);
                            $512 = ($511|0)==(0);
                            $$name$0 = $512 ? 20839 : $name$0;
                            $513 = HEAP32[(228)>>2]|0;
                            $514 = (_strcmp($$name$0,$513)|0);
                            $515 = ($514|0)==(0);
                            do {
                                if (!($515)) {
                                    $516 = (_strcmp($$name$0,20839)|0);
                                    $517 = ($516|0)==(0);
                                    if (!($517)) {
                                        $518 = (_strcmp($513,21176)|0);
                                        $519 = ($518|0)==(0);
                                        if ($519) {
                                            break;
                                        }
                                    }
                                    $520 = HEAP32[844>>2]|0;
                                    $521 = $520 & 32;
                                    $522 = ($521|0)==(0);
                                    if (!($522)) {
                                        $523 = HEAP32[(3148)>>2]|0;
                                        __ZL24redundant_option_warningPKc($523);
                                    }
                                    $524 = HEAP32[844>>2]|0;
                                    $525 = $524 | 32;
                                    HEAP32[844>>2] = $525;
                                }
                            } while(0);
                            $526 = HEAP32[844>>2]|0;
                            $527 = $526 | 32;
                            HEAP32[844>>2] = $527;
                            $528 = (__Z15set_dither_typeP13Gt_OutputDataPKc(176,$$name$0)|0);
                            $529 = ($528|0)<(0);
                            if ($529) {
                                $530 = HEAP32[828>>2]|0;
                                HEAP32[$vararg_buffer69>>2] = $$name$0;
                                (_Clp_OptionError($530,21194,$vararg_buffer69)|0);
                            }
                            HEAP32[(228)>>2] = $$name$0;
                            continue L1;
                            break;
                        }
                        case 368:  {
                            $531 = HEAP32[844>>2]|0;
                            $532 = $531 & 4096;
                            $533 = ($532|0)==(0);
                            if (!($533)) {
                                $534 = HEAP32[(3176)>>2]|0;
                                __ZL24redundant_option_warningPKc($534);
                            }
                            $535 = HEAP32[844>>2]|0;
                            $536 = $535 | 4096;
                            HEAP32[844>>2] = $536;
                            $537 = HEAP32[828>>2]|0;
                            $538 = ((($537)) + 4|0);
                            $539 = HEAP32[$538>>2]|0;
                            $540 = ($539|0)==(0);
                            if (!($540)) {
                                HEAP32[(232)>>2] = 1;
                                HEAPF64[(240)>>3] = 1.0;
                                continue L1;
                            }
                            $541 = ((($537)) + 16|0);
                            $542 = HEAP32[$541>>2]|0;
                            $543 = (_strcmp($542,21223)|0);
                            $544 = ($543|0)==(0);
                            if (!($544)) {
                                $545 = (_strcmp($542,21228)|0);
                                $546 = ($545|0)==(0);
                                if (!($546)) {
                                    $547 = (+_strtod($542,$ends));
                                    $548 = HEAP32[828>>2]|0;
                                    $549 = ((($548)) + 16|0);
                                    $550 = HEAP32[$549>>2]|0;
                                    $551 = HEAP8[$550>>0]|0;
                                    $552 = ($551<<24>>24)==(0);
                                    if (!($552)) {
                                        $553 = HEAP32[$ends>>2]|0;
                                        $554 = HEAP8[$553>>0]|0;
                                        $555 = ($554<<24>>24)==(0);
                                        if ($555) {
                                            $556 = $551&255;
                                            $557 = (_isspace($556)|0);
                                            $558 = ($557|0)==(0);
                                            if ($558) {
                                                HEAP32[(232)>>2] = 1;
                                                HEAPF64[(240)>>3] = $547;
                                                continue L1;
                                            }
                                        }
                                    }
                                    $559 = HEAP32[828>>2]|0;
                                    (_Clp_OptionError($559,21233,$vararg_buffer72)|0);
                                    continue L1;
                                }
                            }
                            HEAP32[(232)>>2] = 0;
                            continue L1;
                            break;
                        }
                        case 377: case 364: case 354:  {
                        $560 = HEAP32[844>>2]|0;
                        $561 = $560 & 1024;
                        $562 = ($561|0)==(0);
                        if (!($562)) {
                            $563 = HEAP32[(3168)>>2]|0;
                            __ZL24redundant_option_warningPKc($563);
                        }
                        $564 = HEAP32[844>>2]|0;
                        $565 = $564 | 1024;
                        HEAP32[844>>2] = $565;
                        $566 = HEAP32[828>>2]|0;
                        $567 = ((($566)) + 4|0);
                        $568 = HEAP32[$567>>2]|0;
                        $569 = ($568|0)==(0);
                        if (!($569)) {
                            HEAP32[(252)>>2] = 0;
                            continue L1;
                        }
                        $570 = HEAP32[580>>2]|0;
                        $571 = ($570|0)<(1);
                        $572 = HEAP32[584>>2]|0;
                        $573 = ($572|0)<(1);
                        $or$cond3 = $571 & $573;
                        if ($or$cond3) {
                            $574 = (_Clp_CurOptionName($566)|0);
                            HEAP32[$vararg_buffer74>>2] = $574;
                            __Z5erroriPKcz(0,21267,$vararg_buffer74);
                            HEAP32[(252)>>2] = 0;
                            continue L1;
                        }
                        HEAP32[(252)>>2] = 1;
                        $575 = HEAP32[580>>2]|0;
                        HEAP32[(256)>>2] = $575;
                        $576 = HEAP32[584>>2]|0;
                        HEAP32[(260)>>2] = $576;
                        $not$29 = ($21|0)!=(354);
                        $$ = $not$29&1;
                        HEAP32[(264)>>2] = $$;
                        $577 = ($21|0)==(364);
                        if (!($577)) {
                            continue L1;
                        }
                        $578 = $$ | 2;
                        HEAP32[(264)>>2] = $578;
                        continue L1;
                        break;
                    }
                        case 379: case 378: case 366: case 365: case 359: case 358:  {
                        $579 = HEAP32[844>>2]|0;
                        $580 = $579 & 1024;
                        $581 = ($580|0)==(0);
                        if (!($581)) {
                            $582 = HEAP32[(3168)>>2]|0;
                            __ZL24redundant_option_warningPKc($582);
                        }
                        $583 = HEAP32[844>>2]|0;
                        $584 = $583 | 1024;
                        HEAP32[844>>2] = $584;
                        $585 = HEAP32[828>>2]|0;
                        $586 = ((($585)) + 4|0);
                        $587 = HEAP32[$586>>2]|0;
                        $588 = ($587|0)==(0);
                        if (!($588)) {
                            HEAP32[(252)>>2] = 0;
                            continue L1;
                        }
                        $589 = ((($585)) + 16|0);
                        $590 = HEAP32[$589>>2]|0;
                        $591 = ($590|0)==(0);
                        if ($591) {
                            $592 = (_Clp_CurOptionName($585)|0);
                            HEAP32[$vararg_buffer77>>2] = $592;
                            __Z5erroriPKcz(0,21313,$vararg_buffer77);
                            HEAP32[(252)>>2] = 0;
                            continue L1;
                        }
                        $593 = $dimen;
                        $594 = $593;
                        HEAP32[$594>>2] = 0;
                        $595 = (($593) + 4)|0;
                        $596 = $595;
                        HEAP32[$596>>2] = 0;
                        $597 = HEAP32[828>>2]|0;
                        $598 = ((($597)) + 16|0);
                        $599 = HEAP32[$598>>2]|0;
                        $600 = ($21|0)==(359);
                        $601 = ($21|0)==(366);
                        $602 = $600 | $601;
                        $603 = $602&1;
                        $604 = (($dimen) + ($603<<2)|0);
                        HEAP32[$604>>2] = $599;
                        HEAP32[(252)>>2] = 1;
                        $605 = HEAP32[$dimen>>2]|0;
                        HEAP32[(256)>>2] = $605;
                        $606 = HEAP32[$19>>2]|0;
                        HEAP32[(260)>>2] = $606;
                        $607 = $21 & -2;
                        $not$$cmp = ($607|0)!=(358);
                        $$22 = $not$$cmp&1;
                        HEAP32[(264)>>2] = $$22;
                        $$off = (($21) + -365)|0;
                        $608 = ($$off>>>0)<(2);
                        if (!($608)) {
                            continue L1;
                        }
                        $609 = $$22 | 2;
                        HEAP32[(264)>>2] = $609;
                        continue L1;
                        break;
                    }
                        case 355:  {
                            $610 = HEAP32[844>>2]|0;
                            $611 = $610 & 1024;
                            $612 = ($611|0)==(0);
                            if (!($612)) {
                                $613 = HEAP32[(3168)>>2]|0;
                                __ZL24redundant_option_warningPKc($613);
                            }
                            $614 = HEAP32[844>>2]|0;
                            $615 = $614 | 1024;
                            HEAP32[844>>2] = $615;
                            $616 = HEAP32[828>>2]|0;
                            $617 = ((($616)) + 4|0);
                            $618 = HEAP32[$617>>2]|0;
                            $619 = ($618|0)==(0);
                            if (!($619)) {
                                HEAP32[(252)>>2] = 0;
                                continue L1;
                            }
                            $620 = +HEAPF64[32>>3];
                            $621 = $620 <= 0.0;
                            $622 = +HEAPF64[40>>3];
                            $623 = $622 <= 0.0;
                            $or$cond9 = $621 | $623;
                            if ($or$cond9) {
                                $624 = (_Clp_CurOptionName($616)|0);
                                HEAP32[$vararg_buffer80>>2] = $624;
                                __Z5erroriPKcz(0,21342,$vararg_buffer80);
                                HEAP32[(252)>>2] = 0;
                                continue L1;
                            } else {
                                HEAP32[(252)>>2] = 2;
                                $625 = +HEAPF64[32>>3];
                                HEAPF64[(272)>>3] = $625;
                                $626 = +HEAPF64[40>>3];
                                HEAPF64[(280)>>3] = $626;
                                HEAP32[(264)>>2] = 0;
                                continue L1;
                            }
                            break;
                        }
                        case 376:  {
                            $627 = HEAP32[844>>2]|0;
                            $628 = $627 & 1024;
                            $629 = ($628|0)==(0);
                            if (!($629)) {
                                $630 = HEAP32[(3168)>>2]|0;
                                __ZL24redundant_option_warningPKc($630);
                            }
                            $631 = HEAP32[844>>2]|0;
                            $632 = $631 | 1024;
                            HEAP32[844>>2] = $632;
                            $633 = HEAP32[828>>2]|0;
                            $634 = ((($633)) + 4|0);
                            $635 = HEAP32[$634>>2]|0;
                            $636 = ($635|0)==(0);
                            if ($636) {
                                $637 = ((($633)) + 16|0);
                                $638 = HEAP32[$637>>2]|0;
                                __ZL25parse_resize_geometry_optP13Gt_OutputDataPKcP10Clp_Parser($638,$633);
                                continue L1;
                            } else {
                                HEAP32[(252)>>2] = 0;
                                continue L1;
                            }
                            break;
                        }
                        case 370:  {
                            $639 = HEAP32[844>>2]|0;
                            $640 = $639 & 8192;
                            $641 = ($640|0)==(0);
                            if (!($641)) {
                                $642 = HEAP32[(3180)>>2]|0;
                                __ZL24redundant_option_warningPKc($642);
                            }
                            $643 = HEAP32[844>>2]|0;
                            $644 = $643 | 8192;
                            HEAP32[844>>2] = $644;
                            $645 = HEAP32[828>>2]|0;
                            $646 = ((($645)) + 16|0);
                            $647 = HEAP32[$646>>2]|0;
                            HEAP32[(288)>>2] = $647;
                            continue L1;
                            break;
                        }
                        case 371:  {
                            $648 = HEAP32[844>>2]|0;
                            $649 = $648 & 16384;
                            $650 = ($649|0)==(0);
                            if (!($650)) {
                                $651 = HEAP32[(3184)>>2]|0;
                                __ZL24redundant_option_warningPKc($651);
                            }
                            $652 = HEAP32[844>>2]|0;
                            $653 = $652 | 16384;
                            HEAP32[844>>2] = $653;
                            $654 = HEAP32[828>>2]|0;
                            $655 = ((($654)) + 4|0);
                            $656 = HEAP32[$655>>2]|0;
                            $657 = ($656|0)==(0);
                            if (!($657)) {
                                HEAP32[(292)>>2] = 0;
                                continue L1;
                            }
                            $658 = ((($654)) + 16|0);
                            $659 = HEAP32[$658>>2]|0;
                            HEAP32[(292)>>2] = $659;
                            $660 = ($659|0)>(256);
                            if (!($660)) {
                                continue L1;
                            }
                            $661 = HEAP32[828>>2]|0;
                            $662 = (_Clp_CurOptionName($661)|0);
                            HEAP32[$vararg_buffer83>>2] = $662;
                            __Z5erroriPKcz(0,21378,$vararg_buffer83);
                            HEAP32[(292)>>2] = 256;
                            continue L1;
                            break;
                        }
                        case 356:  {
                            $663 = HEAP32[828>>2]|0;
                            $664 = ((($663)) + 4|0);
                            $665 = HEAP32[$664>>2]|0;
                            $666 = ($665|0)==(0);
                            $667 = $666&1;
                            HEAP32[564>>2] = $667;
                            continue L1;
                            break;
                        }
                        case 357:  {
                            $668 = HEAP32[828>>2]|0;
                            $669 = ((($668)) + 4|0);
                            $670 = HEAP32[$669>>2]|0;
                            HEAP32[564>>2] = $670;
                            continue L1;
                            break;
                        }
                        case 374:  {
                            $671 = HEAP32[828>>2]|0;
                            $672 = ((($671)) + 4|0);
                            $673 = HEAP32[$672>>2]|0;
                            HEAP32[860>>2] = $673;
                            continue L1;
                            break;
                        }
                        case 361:  {
                            $674 = HEAP32[844>>2]|0;
                            $675 = $674 & 2048;
                            $676 = ($675|0)==(0);
                            if (!($676)) {
                                $677 = HEAP32[(3172)>>2]|0;
                                __ZL24redundant_option_warningPKc($677);
                            }
                            $678 = HEAP32[844>>2]|0;
                            $679 = $678 | 2048;
                            HEAP32[844>>2] = $679;
                            $680 = HEAP32[828>>2]|0;
                            $681 = ((($680)) + 4|0);
                            $682 = HEAP32[$681>>2]|0;
                            $683 = ($682|0)!=(0);
                            $684 = $683 ? -1 : 1;
                            HEAP32[(296)>>2] = $684;
                            continue L1;
                            break;
                        }
                        case 362:  {
                            $685 = HEAP32[828>>2]|0;
                            $686 = ((($685)) + 4|0);
                            $687 = HEAP32[$686>>2]|0;
                            $688 = ($687|0)==(0);
                            $689 = HEAP32[852>>2]|0;
                            if ($688) {
                                $691 = $689 | 8;
                                HEAP32[852>>2] = $691;
                                HEAP32[856>>2] = 0;
                                continue L1;
                            } else {
                                $690 = $689 & -9;
                                HEAP32[852>>2] = $690;
                                continue L1;
                            }
                            break;
                        }
                        case 363:  {
                            $692 = HEAP32[828>>2]|0;
                            $693 = ((($692)) + 4|0);
                            $694 = HEAP32[$693>>2]|0;
                            $695 = ($694|0)==(0);
                            $696 = HEAP32[852>>2]|0;
                            if ($695) {
                                $698 = $696 | 8;
                                HEAP32[852>>2] = $698;
                                HEAP32[856>>2] = 1;
                                continue L1;
                            } else {
                                $697 = $696 & -9;
                                HEAP32[852>>2] = $697;
                                continue L1;
                            }
                            break;
                        }
                        case 331:  {
                            $699 = HEAP32[844>>2]|0;
                            $700 = $699 & 8;
                            $701 = ($700|0)==(0);
                            if (!($701)) {
                                $702 = HEAP32[(3140)>>2]|0;
                                __ZL24redundant_option_warningPKc($702);
                            }
                            $703 = HEAP32[844>>2]|0;
                            $704 = $703 | 8;
                            HEAP32[844>>2] = $704;
                            $705 = HEAP32[828>>2]|0;
                            $706 = ((($705)) + 12|0);
                            $707 = HEAP32[$706>>2]|0;
                            $708 = (_strcmp($707,20820)|0);
                            $709 = ($708|0)==(0);
                            if ($709) {
                                HEAP32[176>>2] = 0;
                                continue L1;
                            } else {
                                $710 = HEAP32[$706>>2]|0;
                                HEAP32[176>>2] = $710;
                                continue L1;
                            }
                            break;
                        }
                        case 0:  {
                            $711 = HEAP32[828>>2]|0;
                            $712 = ((($711)) + 12|0);
                            $713 = HEAP32[$712>>2]|0;
                            $714 = HEAP8[$713>>0]|0;
                            $715 = ($714<<24>>24)==(35);
                            if ($715) {
                                $716 = (__Z14frame_argumentP10Clp_ParserPKc($711,$713)|0);
                                $717 = ($716|0)==(0);
                                if (!($717)) {
                                    continue L1;
                                }
                            }
                            __Z10input_donev();
                            $718 = HEAP32[828>>2]|0;
                            $719 = ((($718)) + 12|0);
                            $720 = HEAP32[$719>>2]|0;
                            __Z12input_streamPKc($720);
                            continue L1;
                            break;
                        }
                        default: {
                            continue L1;
                        }
                    }
                } while(0);
                if ((label|0) == 29) {
                    label = 0;
                    $109 = HEAP32[836>>2]|0;
                    $110 = $109 & 32;
                    $111 = ($110|0)==(0);
                    if (!($111)) {
                        $112 = HEAP32[(3104)>>2]|0;
                        __ZL24redundant_option_warningPKc($112);
                    }
                    $113 = HEAP32[836>>2]|0;
                    $114 = $113 | 32;
                    HEAP32[836>>2] = $114;
                    HEAP32[(672)>>2] = 1;
                    HEAP32[(668)>>2] = 0;
                    continue;
                }
                else if ((label|0) == 39) {
                    label = 0;
                    $132 = HEAP32[(676)>>2]|0;
                    _Gif_DeleteComment($132);
                    HEAP32[(676)>>2] = 0;
                    HEAP32[(680)>>2] = 1;
                    continue;
                }
                else if ((label|0) == 75) {
                    label = 0;
                    HEAP32[(704)>>2] = 0;
                    continue;
                }
            }
            if ((label|0) == 244) {
                HEAP32[$vararg_buffer86>>2] = 21418;
                (_printf(21400,$vararg_buffer86)|0);
                (_puts(21433)|0);
                _exit(0);
                // unreachable;
            }
            else if ((label|0) == 245) {
                __Z5usagev();
                _exit(0);
                // unreachable;
            }
            else if ((label|0) == 254) {
                __Z11short_usagev();
                _exit(1);
                // unreachable;
            }
            else if ((label|0) == 255) {
                $721 = HEAP32[844>>2]|0;
                $722 = ($721|0)==(0);
                if (!($722)) {
                    __ZL22combine_output_optionsv();
                }
                $723 = HEAP32[848>>2]|0;
                $724 = ($723|0)==(0);
                if ($724) {
                    __Z12input_streamPKc(0);
                }
                __ZL17frame_change_donev();
                __Z10input_donev();
                $725 = HEAP32[816>>2]|0;
                $726 = HEAP32[560>>2]|0;
                $notlhs = ($725|0)==(1);
                $notrhs = ($726|0)==(0);
                $or$cond11$not = $notlhs & $notrhs;
                $727 = ($725|0)==(4);
                $or$cond13 = $727 | $or$cond11$not;
                if ($or$cond13) {
                    __Z13output_framesv();
                }
                __Z15verbose_endlinev();
                $728 = HEAP32[836>>2]|0;
                __ZL21print_useless_optionsPKciPS0_(21620,$728,3084);
                $729 = HEAP32[840>>2]|0;
                __ZL21print_useless_optionsPKciPS0_(21626,$729,3192);
                $730 = HEAP32[3200>>2]|0;
                $731 = ($730|0)==(0);
                if ($731) {
                    $733 = HEAP32[756>>2]|0;
                    __Z14blank_framesetP11Gt_Framesetiii($733,0,0,1);
                    $734 = HEAP32[828>>2]|0;
                    _Clp_DeleteParser($734);
                    $735 = HEAP32[560>>2]|0;
                    $736 = ($735|0)!=(0);
                    $737 = $736&1;
                    STACKTOP = sp;return ($737|0);
                }
                $732 = HEAP32[880>>2]|0;
                __ZL21print_useless_optionsPKciPS0_(21632,$732,3128);
                $733 = HEAP32[756>>2]|0;
                __Z14blank_framesetP11Gt_Framesetiii($733,0,0,1);
                $734 = HEAP32[828>>2]|0;
                _Clp_DeleteParser($734);
                $735 = HEAP32[560>>2]|0;
                $736 = ($735|0)!=(0);
                $737 = $736&1;
                STACKTOP = sp;return ($737|0);
            }
            return (0)|0;
        }
        function __ZL8set_modei($newmode) {
            $newmode = $newmode|0;
            var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = HEAP32[816>>2]|0;
            $1 = ($0|0)==(0);
            do {
                if ($1) {
                    $2 = ($newmode|0)==(0);
                    if (!($2)) {
                        HEAP32[816>>2] = $newmode;
                        break;
                    }
                    $3 = HEAP32[876>>2]|0;
                    $4 = ($3|0)==(1);
                    if ($4) {
                        HEAP32[816>>2] = 4;
                        break;
                    } else {
                        HEAP32[816>>2] = 1;
                        break;
                    }
                }
            } while(0);
            $5 = HEAP32[816>>2]|0;
            $6 = ($5|0)!=(4);
            $7 = HEAP32[876>>2]|0;
            $8 = ($7|0)==(1);
            $or$cond = $6 & $8;
            if ($or$cond) {
                __Z11fatal_errorPKcz(24119,$vararg_buffer);
                // unreachable;
            }
            $9 = ($newmode|0)==(0);
            $10 = ($5|0)==($newmode|0);
            $or$cond2 = $9 | $10;
            if ($or$cond2) {
                STACKTOP = sp;return;
            } else {
                __Z11fatal_errorPKcz(24278,$vararg_buffer1);
                // unreachable;
            }
        }
        function __ZL22combine_output_optionsv() {
            var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
            var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
            var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
            var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
            var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
            var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
            var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
            var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[844>>2]|0;
            $1 = HEAP32[880>>2]|0;
            HEAP32[844>>2] = $1;
            $2 = $0 & 8;
            $3 = ($2|0)==(0);
            if (!($3)) {
                $4 = $1 & 8;
                $5 = ($4|0)==(0);
                if (!($5)) {
                    $6 = HEAP32[(3140)>>2]|0;
                    __ZL24redundant_option_warningPKc($6);
                }
                $7 = HEAP32[844>>2]|0;
                $8 = $7 | 8;
                HEAP32[844>>2] = $8;
                $9 = HEAP32[176>>2]|0;
                HEAP32[48>>2] = $9;
            }
            $10 = $0 & 2;
            $11 = ($10|0)==(0);
            if (!($11)) {
                $12 = HEAP32[844>>2]|0;
                $13 = $12 & 2;
                $14 = ($13|0)==(0);
                if (!($14)) {
                    $15 = HEAP32[(3132)>>2]|0;
                    __ZL24redundant_option_warningPKc($15);
                }
                $16 = HEAP32[844>>2]|0;
                $17 = $16 | 2;
                HEAP32[844>>2] = $17;
                $18 = HEAP32[(184)>>2]|0;
                HEAP32[(56)>>2] = $18;
                $19 = HEAP32[(188)>>2]|0;
                HEAP32[(60)>>2] = $19;
            }
            $20 = $0 & 256;
            $21 = ($20|0)==(0);
            if (!($21)) {
                $22 = HEAP32[844>>2]|0;
                $23 = $22 & 256;
                $24 = ($23|0)==(0);
                if (!($24)) {
                    $25 = HEAP32[(3160)>>2]|0;
                    __ZL24redundant_option_warningPKc($25);
                }
                $26 = HEAP32[844>>2]|0;
                $27 = $26 | 256;
                HEAP32[844>>2] = $27;
                $28 = (192);
                $29 = $28;
                $30 = HEAP32[$29>>2]|0;
                $31 = (($28) + 4)|0;
                $32 = $31;
                $33 = HEAP32[$32>>2]|0;
                $34 = (64);
                $35 = $34;
                HEAP32[$35>>2] = $30;
                $36 = (($34) + 4)|0;
                $37 = $36;
                HEAP32[$37>>2] = $33;
            }
            $38 = $0 & 1;
            $39 = ($38|0)==(0);
            if (!($39)) {
                $40 = HEAP32[844>>2]|0;
                $41 = $40 & 1;
                $42 = ($41|0)==(0);
                if (!($42)) {
                    $43 = HEAP32[3128>>2]|0;
                    __ZL24redundant_option_warningPKc($43);
                }
                $44 = HEAP32[844>>2]|0;
                $45 = $44 | 1;
                HEAP32[844>>2] = $45;
                $46 = HEAP32[(200)>>2]|0;
                HEAP32[(72)>>2] = $46;
            }
            $47 = $0 & 4;
            $48 = ($47|0)==(0);
            if (!($48)) {
                $49 = HEAP32[844>>2]|0;
                $50 = $49 & 4;
                $51 = ($50|0)==(0);
                if (!($51)) {
                    $52 = HEAP32[(3136)>>2]|0;
                    __ZL24redundant_option_warningPKc($52);
                }
                $53 = HEAP32[844>>2]|0;
                $54 = $53 | 4;
                HEAP32[844>>2] = $54;
                $55 = HEAP32[(248)>>2]|0;
                HEAP32[(120)>>2] = $55;
            }
            $56 = $0 & 16;
            $57 = ($56|0)==(0);
            if (!($57)) {
                $58 = HEAP32[844>>2]|0;
                $59 = $58 & 16;
                $60 = ($59|0)==(0);
                if (!($60)) {
                    $61 = HEAP32[(3144)>>2]|0;
                    __ZL24redundant_option_warningPKc($61);
                }
                $62 = HEAP32[844>>2]|0;
                $63 = $62 | 16;
                HEAP32[844>>2] = $63;
                $64 = HEAP32[(204)>>2]|0;
                HEAP32[(76)>>2] = $64;
            }
            $65 = $0 & 128;
            $66 = ($65|0)==(0);
            if (!($66)) {
                $67 = HEAP32[844>>2]|0;
                $68 = $67 & 128;
                $69 = ($68|0)==(0);
                if (!($69)) {
                    $70 = HEAP32[(3156)>>2]|0;
                    __ZL24redundant_option_warningPKc($70);
                }
                $71 = HEAP32[844>>2]|0;
                $72 = $71 | 128;
                HEAP32[844>>2] = $72;
                $73 = HEAP32[(212)>>2]|0;
                HEAP32[(84)>>2] = $73;
            }
            $74 = $0 & 64;
            $75 = ($74|0)==(0);
            if (!($75)) {
                $76 = HEAP32[844>>2]|0;
                $77 = $76 & 64;
                $78 = ($77|0)==(0);
                if (!($78)) {
                    $79 = HEAP32[(3152)>>2]|0;
                    __ZL24redundant_option_warningPKc($79);
                }
                $80 = HEAP32[844>>2]|0;
                $81 = $80 | 64;
                HEAP32[844>>2] = $81;
                $82 = HEAP32[(208)>>2]|0;
                $83 = ($82|0)==(0|0);
                if (!($83)) {
                    $84 = ((($82)) + 12|0);
                    $85 = HEAP32[$84>>2]|0;
                    $86 = (($85) + 1)|0;
                    HEAP32[$84>>2] = $86;
                }
                $87 = HEAP32[(80)>>2]|0;
                _Gif_DeleteColormap($87);
                $88 = HEAP32[(208)>>2]|0;
                HEAP32[(80)>>2] = $88;
            }
            $89 = $0 & 32;
            $90 = ($89|0)==(0);
            if (!($90)) {
                $91 = HEAP32[844>>2]|0;
                $92 = $91 & 32;
                $93 = ($92|0)==(0);
                if (!($93)) {
                    $94 = HEAP32[(3148)>>2]|0;
                    __ZL24redundant_option_warningPKc($94);
                }
                $95 = HEAP32[844>>2]|0;
                $96 = $95 | 32;
                HEAP32[844>>2] = $96;
                $97 = HEAP32[(220)>>2]|0;
                HEAP32[(92)>>2] = $97;
                $98 = HEAP32[(224)>>2]|0;
                HEAP32[(96)>>2] = $98;
            }
            $99 = $0 & 4096;
            $100 = ($99|0)==(0);
            if (!($100)) {
                $101 = HEAP32[844>>2]|0;
                $102 = $101 & 4096;
                $103 = ($102|0)==(0);
                if (!($103)) {
                    $104 = HEAP32[(3176)>>2]|0;
                    __ZL24redundant_option_warningPKc($104);
                }
                $105 = HEAP32[844>>2]|0;
                $106 = $105 | 4096;
                HEAP32[844>>2] = $106;
                $107 = HEAP32[(232)>>2]|0;
                HEAP32[(104)>>2] = $107;
                $108 = +HEAPF64[(240)>>3];
                HEAPF64[(112)>>3] = $108;
            }
            $109 = $0 & 1024;
            $110 = ($109|0)==(0);
            if (!($110)) {
                $111 = HEAP32[844>>2]|0;
                $112 = $111 & 1024;
                $113 = ($112|0)==(0);
                if (!($113)) {
                    $114 = HEAP32[(3168)>>2]|0;
                    __ZL24redundant_option_warningPKc($114);
                }
                $115 = HEAP32[844>>2]|0;
                $116 = $115 | 1024;
                HEAP32[844>>2] = $116;
                $117 = HEAP32[(252)>>2]|0;
                HEAP32[(124)>>2] = $117;
                $118 = HEAP32[(256)>>2]|0;
                HEAP32[(128)>>2] = $118;
                $119 = HEAP32[(260)>>2]|0;
                HEAP32[(132)>>2] = $119;
                $120 = HEAP32[(264)>>2]|0;
                HEAP32[(136)>>2] = $120;
                $121 = +HEAPF64[(272)>>3];
                HEAPF64[(144)>>3] = $121;
                $122 = +HEAPF64[(280)>>3];
                HEAPF64[(152)>>3] = $122;
            }
            $123 = $0 & 8192;
            $124 = ($123|0)==(0);
            if (!($124)) {
                $125 = HEAP32[844>>2]|0;
                $126 = $125 & 8192;
                $127 = ($126|0)==(0);
                if (!($127)) {
                    $128 = HEAP32[(3180)>>2]|0;
                    __ZL24redundant_option_warningPKc($128);
                }
                $129 = HEAP32[844>>2]|0;
                $130 = $129 | 8192;
                HEAP32[844>>2] = $130;
                $131 = HEAP32[(288)>>2]|0;
                HEAP32[(160)>>2] = $131;
            }
            $132 = $0 & 16384;
            $133 = ($132|0)==(0);
            if (!($133)) {
                $134 = HEAP32[844>>2]|0;
                $135 = $134 & 16384;
                $136 = ($135|0)==(0);
                if (!($136)) {
                    $137 = HEAP32[(3184)>>2]|0;
                    __ZL24redundant_option_warningPKc($137);
                }
                $138 = HEAP32[844>>2]|0;
                $139 = $138 | 16384;
                HEAP32[844>>2] = $139;
                $140 = HEAP32[(292)>>2]|0;
                HEAP32[(164)>>2] = $140;
            }
            $141 = $0 & 2048;
            $142 = ($141|0)==(0);
            if ($142) {
                HEAP32[(208)>>2] = 0;
                HEAP32[176>>2] = 0;
                $150 = HEAP32[844>>2]|0;
                $151 = HEAP32[880>>2]|0;
                $152 = $151 | $150;
                HEAP32[880>>2] = $152;
                HEAP32[844>>2] = 0;
                return;
            }
            $143 = HEAP32[844>>2]|0;
            $144 = $143 & 2048;
            $145 = ($144|0)==(0);
            if (!($145)) {
                $146 = HEAP32[(3172)>>2]|0;
                __ZL24redundant_option_warningPKc($146);
            }
            $147 = HEAP32[844>>2]|0;
            $148 = $147 | 2048;
            HEAP32[844>>2] = $148;
            $149 = HEAP32[(296)>>2]|0;
            HEAP32[(168)>>2] = $149;
            HEAP32[(208)>>2] = 0;
            HEAP32[176>>2] = 0;
            $150 = HEAP32[844>>2]|0;
            $151 = HEAP32[880>>2]|0;
            $152 = $151 | $150;
            HEAP32[880>>2] = $152;
            HEAP32[844>>2] = 0;
            return;
        }
        function __ZL12open_giffilePKc($name) {
            $name = $name|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $sf$0 = 0, $sf$03 = 0, $sf$04 = 0, $sf$04$lcssa = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $0 = ($name|0)==(0|0);
            if (!($0)) {
                $1 = (_strcmp($name,20820)|0);
                $2 = ($1|0)==(0);
                if (!($2)) {
                    $4 = HEAP32[856>>2]|0;
                    $5 = ($4|0)==(0);
                    L4: do {
                        if (!($5)) {
                            $sf$03 = HEAP32[3208>>2]|0;
                            $6 = ($sf$03|0)==(0|0);
                            if (!($6)) {
                                $sf$04 = $sf$03;
                                while(1) {
                                    $7 = ((($sf$04)) + 8|0);
                                    $8 = (_strcmp($name,$7)|0);
                                    $9 = ($8|0)==(0);
                                    if ($9) {
                                        $sf$04$lcssa = $sf$04;
                                        break;
                                    }
                                    $11 = ((($sf$04)) + 4|0);
                                    $sf$0 = HEAP32[$11>>2]|0;
                                    $12 = ($sf$0|0)==(0|0);
                                    if ($12) {
                                        break L4;
                                    } else {
                                        $sf$04 = $sf$0;
                                    }
                                }
                                $10 = HEAP32[$sf$04$lcssa>>2]|0;
                                $$0 = $10;
                                STACKTOP = sp;return ($$0|0);
                            }
                        }
                    } while(0);
                    $13 = (_fopen($name,24116)|0);
                    $14 = ($13|0)!=(0|0);
                    $15 = HEAP32[856>>2]|0;
                    $16 = ($15|0)!=(0);
                    $or$cond = $14 & $16;
                    if ($or$cond) {
                        $17 = (_strlen($name)|0);
                        $18 = (($17) + 12)|0;
                        $19 = (_malloc($18)|0);
                        HEAP32[$19>>2] = $13;
                        $20 = HEAP32[3208>>2]|0;
                        $21 = ((($19)) + 4|0);
                        HEAP32[$21>>2] = $20;
                        HEAP32[3208>>2] = $19;
                        $22 = ((($19)) + 8|0);
                        (_strcpy($22,$name)|0);
                        $$0 = $13;
                        STACKTOP = sp;return ($$0|0);
                    }
                    if ($14) {
                        $$0 = $13;
                        STACKTOP = sp;return ($$0|0);
                    }
                    $23 = (___errno_location()|0);
                    $24 = HEAP32[$23>>2]|0;
                    $25 = (_strerror($24)|0);
                    HEAP32[$vararg_buffer>>2] = $25;
                    __Z6lerrorPKcS0_z($name,23375,$vararg_buffer);
                    $$0 = 0;
                    STACKTOP = sp;return ($$0|0);
                }
            }
            $3 = HEAP32[3476>>2]|0;
            $$0 = $3;
            STACKTOP = sp;return ($$0|0);
        }
        function __ZL13gifread_errorP10Gif_StreamP9Gif_ImageiPKc($gfs,$gfi,$is_error,$message) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $is_error = $is_error|0;
            $message = $message|0;
            var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $_Z6lerrorPKcS0_z$_Z8lwarningPKcS0_z = 0, $landmark = 0, $missing = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0;
            var $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr8 = 0, $which_image$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 320|0;
            $vararg_buffer20 = sp + 56|0;
            $vararg_buffer17 = sp + 48|0;
            $vararg_buffer15 = sp + 40|0;
            $vararg_buffer9 = sp + 24|0;
            $vararg_buffer5 = sp + 16|0;
            $vararg_buffer2 = sp + 8|0;
            $vararg_buffer = sp;
            $landmark = sp + 64|0;
            $missing = sp + 60|0;
            $0 = (_Gif_ImageNumber($gfs,$gfi)|0);
            $1 = ($gfs|0)!=(0|0);
            $2 = ($0|0)<(0);
            $or$cond = $1 & $2;
            if ($or$cond) {
                $3 = ((($gfs)) + 4|0);
                $4 = HEAP32[$3>>2]|0;
                $which_image$0 = $4;
            } else {
                $which_image$0 = $0;
            }
            $5 = HEAP32[564>>2]|0;
            $6 = ($5|0)!=(0);
            $7 = ($is_error|0)==(0);
            $or$cond3 = $7 & $6;
            if ($or$cond3) {
                STACKTOP = sp;return;
            }
            $8 = ($message|0)!=(0|0);
            L7: do {
                if ($8) {
                    if ($1) {
                        $9 = ((($gfs)) + 44|0);
                        $10 = HEAP32[$9>>2]|0;
                        $11 = ($10|0)==(0|0);
                        $$ = $11 ? 23445 : $10;
                        $20 = $$;
                    } else {
                        $20 = 23445;
                    }
                    $12 = ($gfi|0)==(0|0);
                    do {
                        if (!($12)) {
                            $13 = ($which_image$0|0)==(0);
                            if ($13) {
                                $14 = ((($gfs)) + 4|0);
                                $15 = HEAP32[$14>>2]|0;
                                $16 = ($15|0)==(1);
                                if ($16) {
                                    break;
                                } else {
                                    $21 = 0;
                                }
                            } else {
                                $17 = ($which_image$0|0)<(0);
                                if ($17) {
                                    $18 = ((($gfs)) + 4|0);
                                    $19 = HEAP32[$18>>2]|0;
                                    $21 = $19;
                                } else {
                                    $21 = $which_image$0;
                                }
                            }
                            HEAP32[$vararg_buffer>>2] = $20;
                            $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                            HEAP32[$vararg_ptr1>>2] = $21;
                            (_snprintf($landmark,256,23455,$vararg_buffer)|0);
                            break L7;
                        }
                    } while(0);
                    HEAP32[$vararg_buffer2>>2] = $20;
                    (_snprintf($landmark,256,23375,$vararg_buffer2)|0);
                }
            } while(0);
            $22 = HEAP8[23462>>0]|0;
            $23 = ($22<<24>>24)!=(0);
            $24 = HEAP32[3212>>2]|0;
            $25 = ($24|0)<(11);
            $or$cond5 = $23 & $25;
            do {
                if ($or$cond5) {
                    if ($8) {
                        $26 = (_strcmp($message,23462)|0);
                        $27 = ($26|0)==(0);
                        if ($27) {
                            $28 = (_strcmp($landmark,23718)|0);
                            $29 = ($28|0)==(0);
                            if ($29) {
                                label = 26;
                                break;
                            }
                        }
                    }
                    $30 = HEAP32[3216>>2]|0;
                    $31 = ($30|0)!=(0);
                    $32 = $31 ? 23974 : 23987;
                    $_Z6lerrorPKcS0_z$_Z8lwarningPKcS0_z = $31 ? 2 : 1;
                    $33 = ($gfi|0)==(0|0);
                    if ($33) {
                        label = 20;
                    } else {
                        $34 = ((($gfi)) + 60|0);
                        $35 = HEAP32[$34>>2]|0;
                        $36 = ($35|0)==(0);
                        if ($36) {
                            label = 20;
                        }
                    }
                    do {
                        if ((label|0) == 20) {
                            $37 = HEAP32[3220>>2]|0;
                            $38 = ($37|0)==(1);
                            if ($38) {
                                HEAP32[$vararg_buffer5>>2] = $32;
                                $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
                                HEAP32[$vararg_ptr8>>2] = 23462;
                                FUNCTION_TABLE_viii[$_Z6lerrorPKcS0_z$_Z8lwarningPKcS0_z & 7](23718,23988,$vararg_buffer5);
                                break;
                            }
                            $39 = ($37|0)>(0);
                            if ($39) {
                                HEAP32[$vararg_buffer9>>2] = $32;
                                $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
                                HEAP32[$vararg_ptr12>>2] = 23462;
                                $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
                                HEAP32[$vararg_ptr13>>2] = $37;
                                FUNCTION_TABLE_viii[$_Z6lerrorPKcS0_z$_Z8lwarningPKcS0_z & 7](23718,23993,$vararg_buffer9);
                            }
                        }
                    } while(0);
                    HEAP32[3220>>2] = 0;
                    HEAP8[23462>>0] = 0;
                    label = 25;
                } else {
                    label = 25;
                }
            } while(0);
            if ((label|0) == 25) {
                if ($8) {
                    label = 26;
                } else {
                    HEAP8[23462>>0] = 0;
                }
            }
            if ((label|0) == 26) {
                $40 = HEAP8[23462>>0]|0;
                $41 = ($40<<24>>24)==(0);
                if ($41) {
                    $42 = HEAP32[3212>>2]|0;
                    $43 = (($42) + 1)|0;
                    HEAP32[3212>>2] = $43;
                }
                $44 = HEAP32[3220>>2]|0;
                $45 = (($44) + 1)|0;
                HEAP32[3220>>2] = $45;
                (_strncpy(23462,$message,256)|0);
                HEAP8[(23717)>>0] = 0;
                (_strncpy(23718,$landmark,256)|0);
                HEAP8[(23973)>>0] = 0;
                HEAP32[3216>>2] = $is_error;
                $46 = HEAP32[3212>>2]|0;
                $47 = ($46|0)==(11);
                do {
                    if ($47) {
                        $48 = ($gfi|0)==(0|0);
                        if (!($48)) {
                            $49 = ((($gfi)) + 60|0);
                            $50 = HEAP32[$49>>2]|0;
                            $51 = ($50|0)==(0);
                            if (!($51)) {
                                $52 = HEAP32[3212>>2]|0;
                                $53 = (($52) + 1)|0;
                                HEAP32[3212>>2] = $53;
                                break;
                            }
                        }
                        __Z5erroriPKcz(0,24009,$vararg_buffer15);
                        $54 = HEAP32[3212>>2]|0;
                        $55 = (($54) + 1)|0;
                        HEAP32[3212>>2] = $55;
                    }
                } while(0);
                HEAP32[$vararg_buffer17>>2] = $missing;
                $56 = (_sscanf($message,24050,$vararg_buffer17)|0);
                $57 = ($56|0)==(1);
                $58 = HEAP32[$missing>>2]|0;
                $59 = ($58>>>0)>(10000);
                $or$cond7 = $57 & $59;
                $60 = HEAP32[860>>2]|0;
                $61 = ($60|0)!=(0);
                $or$cond9 = $or$cond7 & $61;
                if ($or$cond9) {
                    __ZL13gifread_errorP10Gif_StreamP9Gif_ImageiPKc($gfs,0,-1,0);
                    __Z6lerrorPKcS0_z($landmark,24068,$vararg_buffer20);
                    _exit(1);
                    // unreachable;
                }
            }
            $62 = ($gfi|0)!=(0|0);
            $63 = ($is_error|0)<(0);
            $or$cond11 = $62 & $63;
            if (!($or$cond11)) {
                STACKTOP = sp;return;
            }
            $64 = ((($gfi)) + 60|0);
            $65 = HEAP32[$64>>2]|0;
            $66 = $65 | 1;
            HEAP32[$64>>2] = $66;
            STACKTOP = sp;return;
        }
        function __ZL13close_giffileP8_IO_FILEi($f,$final) {
            $f = $f|0;
            $final = $final|0;
            var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
            var $or$cond = 0, $sf_pprev$04 = 0, $sf_pprev$04$lcssa = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($final|0)==(0);
            $1 = HEAP32[856>>2]|0;
            $2 = ($1|0)!=(0);
            $or$cond = $0 & $2;
            if ($or$cond) {
                $3 = (_getc($f)|0);
                $4 = ($3|0)==(-1);
                if ($4) {
                    $$0 = 1;
                } else {
                    (_ungetc($3,$f)|0);
                    $$0 = $final;
                }
            } else {
                $$0 = $final;
            }
            $5 = HEAP32[3208>>2]|0;
            $6 = ($5|0)==(0|0);
            L5: do {
                if (!($6)) {
                    $8 = $5;$sf_pprev$04 = 3208;
                    while(1) {
                        $7 = HEAP32[$8>>2]|0;
                        $9 = ($7|0)==($f|0);
                        if ($9) {
                            $$lcssa = $8;$sf_pprev$04$lcssa = $sf_pprev$04;
                            break;
                        }
                        $13 = ((($8)) + 4|0);
                        $14 = HEAP32[$13>>2]|0;
                        $15 = ($14|0)==(0|0);
                        if ($15) {
                            break L5;
                        } else {
                            $8 = $14;$sf_pprev$04 = $13;
                        }
                    }
                    $10 = ($$0|0)==(0);
                    if ($10) {
                        return;
                    }
                    (_fclose($f)|0);
                    $11 = ((($$lcssa)) + 4|0);
                    $12 = HEAP32[$11>>2]|0;
                    HEAP32[$sf_pprev$04$lcssa>>2] = $12;
                    _free($$lcssa);
                    return;
                }
            } while(0);
            $16 = HEAP32[3476>>2]|0;
            $17 = ($16|0)==($f|0);
            if ($17) {
                return;
            }
            (_fclose($f)|0);
            return;
        }
        function __ZL17frame_change_donev() {
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[820>>2]|0;
            $1 = ($0|0)==(0);
            if (!($1)) {
                HEAP32[816>>2] = $0;
            }
            $2 = HEAP32[764>>2]|0;
            $3 = ($2|0)==(0|0);
            if (!($3)) {
                HEAP32[756>>2] = $2;
            }
            HEAP32[820>>2] = 0;
            HEAP32[764>>2] = 0;
            return;
        }
        function __ZL18output_informationPKc($outfile) {
            $outfile = $outfile|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $f$0 = 0, $i$05 = 0, $i$13 = 0, $j$02 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $0 = HEAP32[876>>2]|0;
            $1 = ($0|0)==(2);
            do {
                if ($1) {
                    $2 = HEAP32[3472>>2]|0;
                    $f$0 = $2;
                } else {
                    $3 = ($outfile|0)==(0|0);
                    if ($3) {
                        $4 = HEAP32[3480>>2]|0;
                        $f$0 = $4;
                        break;
                    }
                    $5 = (_fopen($outfile,23443)|0);
                    $6 = ($5|0)==(0|0);
                    if ($6) {
                        $7 = (___errno_location()|0);
                        $8 = HEAP32[$7>>2]|0;
                        $9 = (_strerror($8)|0);
                        HEAP32[$vararg_buffer>>2] = $9;
                        __Z6lerrorPKcS0_z($outfile,23375,$vararg_buffer);
                        STACKTOP = sp;return;
                    } else {
                        $f$0 = $5;
                    }
                }
            } while(0);
            $10 = HEAP32[756>>2]|0;
            $11 = HEAP32[$10>>2]|0;
            $12 = ($11|0)>(0);
            if ($12) {
                $13 = HEAP32[756>>2]|0;
                $14 = HEAP32[$13>>2]|0;
                $19 = $10;$i$05 = 0;
                while(1) {
                    $18 = ((($19)) + 8|0);
                    $20 = HEAP32[$18>>2]|0;
                    $21 = (($20) + (($i$05*100)|0)|0);
                    $22 = HEAP32[$21>>2]|0;
                    $23 = ((($22)) + 40|0);
                    HEAP32[$23>>2] = 97;
                    $24 = (($i$05) + 1)|0;
                    $25 = ($24|0)<($14|0);
                    if ($25) {
                        $19 = $13;$i$05 = $24;
                    } else {
                        break;
                    }
                }
            }
            $15 = HEAP32[756>>2]|0;
            $16 = HEAP32[$15>>2]|0;
            $17 = ($16|0)>(0);
            if ($17) {
                $27 = $15;$i$13 = 0;
                while(1) {
                    $26 = ((($27)) + 8|0);
                    $28 = HEAP32[$26>>2]|0;
                    $29 = (($28) + (($i$13*100)|0)|0);
                    $30 = HEAP32[$29>>2]|0;
                    $31 = ((($30)) + 40|0);
                    $32 = HEAP32[$31>>2]|0;
                    $33 = ($32|0)==(97);
                    if ($33) {
                        HEAP32[$31>>2] = 0;
                        $34 = (((($28) + (($i$13*100)|0)|0)) + 96|0);
                        $35 = HEAP32[$34>>2]|0;
                        $36 = (((($28) + (($i$13*100)|0)|0)) + 88|0);
                        $37 = HEAP8[$36>>0]|0;
                        $38 = ($37&255) >>> 2;
                        $39 = $38 & 7;
                        $40 = $39&255;
                        __Z11stream_infoP8_IO_FILEP10Gif_StreamPKci($f$0,$30,$35,$40);
                        $41 = HEAP32[756>>2]|0;
                        $42 = HEAP32[$41>>2]|0;
                        $43 = ($i$13|0)<($42|0);
                        if ($43) {
                            $45 = $41;$j$02 = $i$13;
                            while(1) {
                                $44 = ((($45)) + 8|0);
                                $46 = HEAP32[$44>>2]|0;
                                $47 = (($46) + (($j$02*100)|0)|0);
                                $48 = HEAP32[$47>>2]|0;
                                $49 = ($48|0)==($30|0);
                                if ($49) {
                                    $50 = (((($46) + (($j$02*100)|0)|0)) + 4|0);
                                    $51 = HEAP32[$50>>2]|0;
                                    $52 = (((($46) + (($j$02*100)|0)|0)) + 88|0);
                                    $53 = HEAP8[$52>>0]|0;
                                    $54 = ($53&255) >>> 2;
                                    $55 = $54 & 7;
                                    $56 = $55&255;
                                    __Z10image_infoP8_IO_FILEP10Gif_StreamP9Gif_Imagei($f$0,$30,$51,$56);
                                }
                                $57 = (($j$02) + 1)|0;
                                $58 = HEAP32[756>>2]|0;
                                $59 = HEAP32[$58>>2]|0;
                                $60 = ($57|0)<($59|0);
                                if ($60) {
                                    $45 = $58;$j$02 = $57;
                                } else {
                                    break;
                                }
                            }
                        }
                    }
                    $61 = (($i$13) + 1)|0;
                    $62 = HEAP32[756>>2]|0;
                    $63 = HEAP32[$62>>2]|0;
                    $64 = ($61|0)<($63|0);
                    if ($64) {
                        $27 = $62;$i$13 = $61;
                    } else {
                        break;
                    }
                }
            }
            $65 = HEAP32[3472>>2]|0;
            $66 = ($f$0|0)==($65|0);
            $67 = HEAP32[3480>>2]|0;
            $68 = ($f$0|0)==($67|0);
            $or$cond = $66 | $68;
            if ($or$cond) {
                STACKTOP = sp;return;
            }
            (_fclose($f$0)|0);
            STACKTOP = sp;return;
        }
        function __ZL22merge_and_write_framesPKcii($outfile,$f1,$f2) {
            $outfile = $outfile|0;
            $f1 = $f1|0;
            $f2 = $f2|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compress_immediately$0 = 0, $h$0 = 0.0, $huge_stream = 0, $or$cond = 0, $w$0 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $huge_stream = sp;
            $0 = HEAP32[820>>2]|0;
            $1 = ($0|0)==(0);
            if (!($1)) {
                ___assert_fail((20438|0),(20451|0),997,(23331|0));
                // unreachable;
            }
            $2 = HEAP32[824>>2]|0;
            $3 = ($2|0)==(0);
            if (!($3)) {
                $4 = ($outfile|0)!=(0|0);
                $5 = $4 ? $outfile : 23354;
                __Z12verbose_opencPKc(91,$5);
            }
            HEAP32[(52)>>2] = $outfile;
            $6 = HEAP32[(76)>>2]|0;
            $7 = ($6|0)>(0);
            $8 = HEAP32[(80)>>2]|0;
            $9 = ($8|0)!=(0|0);
            $10 = $7 | $9;
            $11 = $10&1;
            $12 = $11 ^ 1;
            HEAP32[812>>2] = $12;
            $13 = HEAP32[(124)>>2]|0;
            $14 = ($13|0)==(0);
            if ($14) {
                $15 = HEAP32[(120)>>2]|0;
                $16 = $15 & 65535;
                $17 = ($16|0)!=(0);
                $or$cond = $10 | $17;
                if ($or$cond) {
                    label = 7;
                } else {
                    $compress_immediately$0 = 1;
                }
            } else {
                label = 7;
            }
            if ((label|0) == 7) {
                $18 = HEAP32[(168)>>2]|0;
                $compress_immediately$0 = $18;
            }
            $19 = HEAP32[756>>2]|0;
            $20 = (__Z20merge_frame_intervalP11Gt_FramesetiiP13Gt_OutputDataiPi($19,$f1,$f2,48,$compress_immediately$0,$huge_stream)|0);
            $21 = ($20|0)==(0|0);
            if (!($21)) {
                $22 = HEAP32[(124)>>2]|0;
                $23 = ($22|0)==(2);
                if ($23) {
                    $24 = +HEAPF64[(144)>>3];
                    $25 = ((($20)) + 18|0);
                    $26 = HEAP16[$25>>1]|0;
                    $27 = $26&65535;
                    $28 = (+($27|0));
                    $29 = $24 * $28;
                    $30 = +HEAPF64[(152)>>3];
                    $31 = ((($20)) + 20|0);
                    $32 = HEAP16[$31>>1]|0;
                    $33 = $32&65535;
                    $34 = (+($33|0));
                    $35 = $30 * $34;
                    $h$0 = $35;$w$0 = $29;
                } else {
                    $36 = HEAP32[(128)>>2]|0;
                    $37 = (+($36|0));
                    $38 = HEAP32[(132)>>2]|0;
                    $39 = (+($38|0));
                    $h$0 = $39;$w$0 = $37;
                }
                $40 = HEAP32[(124)>>2]|0;
                $41 = ($40|0)==(0);
                if (!($41)) {
                    $42 = HEAP32[(136)>>2]|0;
                    $43 = HEAP32[(160)>>2]|0;
                    $44 = HEAP32[(164)>>2]|0;
                    __Z13resize_streamP10Gif_Streamddiii($20,$w$0,$h$0,$42,$43,$44);
                }
                if ($10) {
                    __ZL18do_colormap_changeP10Gif_Stream($20);
                }
                $45 = HEAP32[3188>>2]|0;
                $46 = ($45|0)==(0|0);
                if (!($46)) {
                    __Z22apply_color_transformsP17Gt_ColorTransformP10Gif_Stream($45,$20);
                }
                $47 = HEAP32[(120)>>2]|0;
                $48 = $47 & 65535;
                $49 = ($48|0)==(0);
                if (!($49)) {
                    $50 = HEAP32[$huge_stream>>2]|0;
                    __Z18optimize_fragmentsP10Gif_Streamii($20,$47,$50);
                }
                __ZL12write_streamPKcP10Gif_Stream($outfile,$20);
                _Gif_DeleteStream($20);
            }
            $51 = HEAP32[824>>2]|0;
            $52 = ($51|0)==(0);
            if ($52) {
                HEAP32[(52)>>2] = 0;
                STACKTOP = sp;return;
            }
            __Z13verbose_closec(93);
            HEAP32[(52)>>2] = 0;
            STACKTOP = sp;return;
        }
        function __ZL10show_frameii($imagenumber,$usename) {
            $imagenumber = $imagenumber|0;
            $usename = $usename|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[768>>2]|0;
            $1 = ($0|0)==(0|0);
            if ($1) {
                return;
            }
            $2 = (_Gif_GetImage($0,$imagenumber)|0);
            $3 = ($2|0)==(0|0);
            if ($3) {
                return;
            }
            $4 = HEAP32[816>>2]|0;
            switch ($4|0) {
                case 2: case 4: case 3: case 6: case 1:  {
                $5 = HEAP32[832>>2]|0;
                $6 = ($5|0)==(0);
                if ($6) {
                    $7 = HEAP32[756>>2]|0;
                    $8 = HEAP32[760>>2]|0;
                    __Z14clear_framesetP11Gt_Frameseti($7,$8);
                }
                $9 = HEAP32[756>>2]|0;
                $10 = HEAP32[768>>2]|0;
                $11 = (__Z9add_frameP11Gt_FramesetP10Gif_StreamP9Gif_Image($9,$10,$2)|0);
                $12 = ($usename|0)==(0);
                if (!($12)) {
                    $13 = ((($11)) + 72|0);
                    HEAP32[$13>>2] = 1;
                }
                break;
            }
                case 5:  {
                    $14 = HEAP32[760>>2]|0;
                    $15 = (($14) + ($imagenumber))|0;
                    $16 = HEAP32[756>>2]|0;
                    $17 = ((($16)) + 8|0);
                    $18 = HEAP32[$17>>2]|0;
                    $19 = (((($18) + (($15*100)|0)|0)) + 8|0);
                    HEAP32[$19>>2] = 0;
                    break;
                }
                default: {
                }
            }
            HEAP32[836>>2] = 0;
            HEAP32[832>>2] = 1;
            return;
        }
        function __ZL20initialize_def_framev() {
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
            sp = STACKTOP;
            HEAP32[656>>2] = 0;
            HEAP32[(660)>>2] = 0;
            HEAP32[(664)>>2] = 1;
            ;HEAP32[(668)>>2]=0|0;HEAP32[(668)+4>>2]=0|0;HEAP32[(668)+8>>2]=0|0;HEAP32[(668)+12>>2]=0|0;
            HEAP32[(692)>>2] = -1;
            HEAP8[(684)>>0] = 0;
            HEAP32[(696)>>2] = -1;
            HEAP32[(700)>>2] = -1;
            $0 = HEAP8[(744)>>0]|0;
            $1 = $0 & -33;
            HEAP8[(744)>>0] = $1;
            HEAP32[(704)>>2] = 0;
            HEAP32[(716)>>2] = -1;
            HEAP32[(720)>>2] = -1;
            ;HEAP32[(724)>>2]=0|0;HEAP32[(724)+4>>2]=0|0;HEAP32[(724)+8>>2]=0|0;HEAP32[(724)+12>>2]=0|0;HEAP32[(724)+16>>2]=0|0;
            $2 = HEAP8[(744)>>0]|0;
            $3 = $2 & -68;
            HEAP8[(744)>>0] = $3;
            HEAP32[176>>2] = 0;
            HEAP32[(184)>>2] = -1;
            HEAP32[(188)>>2] = -1;
            HEAP8[(192)>>0] = 0;
            HEAP32[(200)>>2] = -2;
            HEAP32[(204)>>2] = 0;
            HEAP32[(208)>>2] = 0;
            HEAP32[(212)>>2] = 0;
            HEAP32[(220)>>2] = 0;
            HEAP32[(228)>>2] = 20839;
            HEAP32[(232)>>2] = 0;
            HEAPF64[(240)>>3] = 2.2000000000000002;
            HEAP32[(248)>>2] = 0;
            HEAP32[(252)>>2] = 0;
            HEAP32[(288)>>2] = 2;
            HEAP32[(292)>>2] = 0;
            HEAP32[(296)>>2] = 0;
            dest=48; src=176; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
            return;
        }
        function __ZL24redundant_option_warningPKc($opttype) {
            $opttype = $opttype|0;
            var $0 = 0, $1 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $vararg_buffer3 = sp + 16|0;
            $vararg_buffer = sp;
            $0 = HEAP32[3204>>2]|0;
            $1 = ($0|0)==(0);
            if ($1) {
                HEAP32[$vararg_buffer>>2] = $opttype;
                $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                HEAP32[$vararg_ptr1>>2] = $opttype;
                $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
                HEAP32[$vararg_ptr2>>2] = $opttype;
                __Z7warningiPKcz(0,22080,$vararg_buffer);
                HEAP32[3204>>2] = 1;
                STACKTOP = sp;return;
            } else {
                HEAP32[$vararg_buffer3>>2] = $opttype;
                __Z7warningiPKcz(0,22182,$vararg_buffer3);
                STACKTOP = sp;return;
            }
        }
        function __ZL9copy_cropP7Gt_Crop($oc) {
            $oc = $oc|0;
            var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
            sp = STACKTOP;
            $0 = (_Gif_Realloc(0,48,1,20451,1377)|0);
            $1 = ($oc|0)==(0|0);
            if ($1) {
                dest=$0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
                HEAP32[$0>>2] = 0;
                return ($0|0);
            } else {
                dest=$0; src=$oc; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
                HEAP32[$0>>2] = 0;
                return ($0|0);
            }
            return (0)|0;
        }
        function __ZL16handle_extensionP10Clp_Parseri($clp,$is_app) {
            $clp = $clp|0;
            $is_app = $is_app|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extension_type = 0, $gfex$0 = 0, $isdigit = 0, $isdigittmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $extension_type = sp + 12|0;
            $0 = ((($clp)) + 12|0);
            $1 = HEAP32[$0>>2]|0;
            HEAP32[$extension_type>>2] = $1;
            $2 = (_Clp_Shift($clp,1)|0);
            $3 = ($2|0)==(0|0);
            if ($3) {
                (_Clp_OptionError($clp,21821,$vararg_buffer)|0);
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            $4 = HEAP32[836>>2]|0;
            $5 = $4 | 256;
            HEAP32[836>>2] = $5;
            $6 = ($is_app|0)==(0);
            $7 = HEAP32[$extension_type>>2]|0;
            do {
                if ($6) {
                    $9 = HEAP8[$7>>0]|0;
                    $10 = $9 << 24 >> 24;
                    $isdigittmp = (($10) + -48)|0;
                    $isdigit = ($isdigittmp>>>0)<(10);
                    if (!($isdigit)) {
                        $11 = ((($7)) + 1|0);
                        $12 = HEAP8[$11>>0]|0;
                        $13 = ($12<<24>>24)==(0);
                        if ($13) {
                            $14 = (_Gif_NewExtension($10,0,0)|0);
                            $gfex$0 = $14;
                            break;
                        }
                    }
                    $15 = HEAP32[$extension_type>>2]|0;
                    $16 = (_strtol($15,$extension_type,0)|0);
                    $17 = HEAP32[$extension_type>>2]|0;
                    $18 = HEAP8[$17>>0]|0;
                    $19 = ($18<<24>>24)!=(0);
                    $20 = ($16>>>0)>(255);
                    $21 = $20 | $19;
                    if ($21) {
                        __Z11fatal_errorPKcz(21847,$vararg_buffer1);
                        // unreachable;
                    } else {
                        $22 = (_Gif_NewExtension($16,0,0)|0);
                        $gfex$0 = $22;
                        break;
                    }
                } else {
                    $8 = (_Gif_NewExtension(255,$7,11)|0);
                    $gfex$0 = $8;
                }
            } while(0);
            $23 = ((($gfex$0)) + 12|0);
            HEAP32[$23>>2] = $2;
            $24 = (_strlen($2)|0);
            $25 = ((($gfex$0)) + 16|0);
            HEAP32[$25>>2] = $24;
            $26 = HEAP32[(740)>>2]|0;
            $27 = ((($gfex$0)) + 32|0);
            HEAP32[$27>>2] = $26;
            HEAP32[(740)>>2] = $gfex$0;
            $$0 = 1;
            STACKTOP = sp;return ($$0|0);
        }
        function __ZL22set_new_fixed_colormapPKc($name) {
            $name = $name|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond5 = 0, $i$03 = 0, $i$14 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($name|0)==(0|0);
            do {
                if (!($0)) {
                    $1 = (_strcmp($name,21809)|0);
                    $2 = ($1|0)==(0);
                    if ($2) {
                        $3 = (_Gif_NewFullColormap(216,256)|0);
                        $4 = ((($3)) + 16|0);
                        $5 = HEAP32[$4>>2]|0;
                        $i$03 = 0;
                        while(1) {
                            $6 = (($i$03|0) / 36)&-1;
                            $7 = ($6*51)|0;
                            $8 = $7&255;
                            $9 = (((($5) + ($i$03<<3)|0)) + 1|0);
                            HEAP8[$9>>0] = $8;
                            $10 = (($i$03|0) / 6)&-1;
                            $11 = (($10|0) % 6)&-1;
                            $12 = ($11*51)|0;
                            $13 = $12&255;
                            $14 = (((($5) + ($i$03<<3)|0)) + 2|0);
                            HEAP8[$14>>0] = $13;
                            $15 = (($i$03|0) % 6)&-1;
                            $16 = ($15*51)|0;
                            $17 = $16&255;
                            $18 = (((($5) + ($i$03<<3)|0)) + 3|0);
                            HEAP8[$18>>0] = $17;
                            $19 = (($i$03) + 1)|0;
                            $exitcond = ($19|0)==(216);
                            if ($exitcond) {
                                break;
                            } else {
                                $i$03 = $19;
                            }
                        }
                        HEAP32[(208)>>2] = $3;
                        return;
                    }
                    $20 = (_strcmp($name,21171)|0);
                    $21 = ($20|0)==(0);
                    if (!($21)) {
                        $22 = (_strcmp($name,21813)|0);
                        $23 = ($22|0)==(0);
                        if (!($23)) {
                            $32 = (_strcmp($name,21818)|0);
                            $33 = ($32|0)==(0);
                            if (!($33)) {
                                break;
                            }
                            $34 = (_Gif_NewFullColormap(2,256)|0);
                            $35 = ((($34)) + 16|0);
                            $36 = HEAP32[$35>>2]|0;
                            $37 = ((($36)) + 3|0);
                            HEAP8[$37>>0] = 0;
                            $38 = HEAP32[$35>>2]|0;
                            $39 = ((($38)) + 2|0);
                            HEAP8[$39>>0] = 0;
                            $40 = HEAP32[$35>>2]|0;
                            $41 = ((($40)) + 1|0);
                            HEAP8[$41>>0] = 0;
                            $42 = HEAP32[$35>>2]|0;
                            $43 = ((($42)) + 11|0);
                            HEAP8[$43>>0] = -1;
                            $44 = HEAP32[$35>>2]|0;
                            $45 = ((($44)) + 10|0);
                            HEAP8[$45>>0] = -1;
                            $46 = HEAP32[$35>>2]|0;
                            $47 = ((($46)) + 9|0);
                            HEAP8[$47>>0] = -1;
                            HEAP32[(208)>>2] = $34;
                            return;
                        }
                    }
                    $24 = (_Gif_NewFullColormap(256,256)|0);
                    $25 = ((($24)) + 16|0);
                    $26 = HEAP32[$25>>2]|0;
                    $i$14 = 0;
                    while(1) {
                        $27 = $i$14&255;
                        $28 = (((($26) + ($i$14<<3)|0)) + 3|0);
                        HEAP8[$28>>0] = $27;
                        $29 = (((($26) + ($i$14<<3)|0)) + 2|0);
                        HEAP8[$29>>0] = $27;
                        $30 = (((($26) + ($i$14<<3)|0)) + 1|0);
                        HEAP8[$30>>0] = $27;
                        $31 = (($i$14) + 1)|0;
                        $exitcond5 = ($31|0)==(256);
                        if ($exitcond5) {
                            break;
                        } else {
                            $i$14 = $31;
                        }
                    }
                    HEAP32[(208)>>2] = $24;
                    return;
                }
            } while(0);
            $48 = (__Z18read_colormap_filePKcP8_IO_FILE($name,0)|0);
            HEAP32[(208)>>2] = $48;
            return;
        }
        function __ZL25parse_resize_geometry_optP13Gt_OutputDataPKcP10Clp_Parser($str,$clp) {
            $str = $str|0;
            $clp = $clp|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $flags$0 = 0, $flags$0$lcssa13 = 0, $flags$1 = 0, $isdigit = 0;
            var $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $scale$0 = 0, $scale$0$lcssa14 = 0, $scale$1 = 0, $vararg_buffer = 0, $x$0 = 0.0, $y$0$ph = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $0 = sp + 4|0;
            HEAP32[$0>>2] = $str;
            $1 = HEAP8[$str>>0]|0;
            switch ($1<<24>>24) {
                case 120: case 95:  {
                $2 = HEAP32[$0>>2]|0;
                $3 = HEAP8[$2>>0]|0;
                $4 = ($3<<24>>24)==(95);
                $5 = $4&1;
                $6 = (($2) + ($5)|0);
                HEAP32[$0>>2] = $6;
                $x$0 = 0.0;
                label = 5;
                break;
            }
                default: {
                    $7 = $1&255;
                    $isdigittmp = (($7) + -48)|0;
                    $isdigit = ($isdigittmp>>>0)<(10);
                    if ($isdigit) {
                        $8 = (_strtol($str,$0,10)|0);
                        $9 = (+($8|0));
                        $x$0 = $9;
                        label = 5;
                    }
                }
            }
            L5: do {
                if ((label|0) == 5) {
                    $10 = HEAP32[$0>>2]|0;
                    $11 = HEAP8[$10>>0]|0;
                    $12 = ($11<<24>>24)==(120);
                    do {
                        if ($12) {
                            $13 = ((($10)) + 1|0);
                            HEAP32[$0>>2] = $13;
                            $14 = HEAP8[$13>>0]|0;
                            $15 = ($14<<24>>24)==(95);
                            if (!($15)) {
                                $16 = $14&255;
                                $isdigittmp1 = (($16) + -48)|0;
                                $isdigit2 = ($isdigittmp1>>>0)<(10);
                                if ($isdigit2) {
                                    $22 = (_strtol($13,$0,10)|0);
                                    $23 = (+($22|0));
                                    $y$0$ph = $23;
                                    break;
                                }
                            }
                            $17 = HEAP32[$0>>2]|0;
                            $18 = HEAP8[$17>>0]|0;
                            $19 = ($18<<24>>24)==(95);
                            $20 = $19&1;
                            $21 = (($17) + ($20)|0);
                            HEAP32[$0>>2] = $21;
                            $y$0$ph = 0.0;
                        } else {
                            $y$0$ph = $x$0;
                        }
                    } while(0);
                    $flags$0 = 1;$scale$0 = 0;
                    L14: while(1) {
                        $24 = HEAP32[$0>>2]|0;
                        $25 = HEAP8[$24>>0]|0;
                        switch ($25<<24>>24) {
                            case 0:  {
                                $flags$0$lcssa13 = $flags$0;$scale$0$lcssa14 = $scale$0;
                                break L14;
                                break;
                            }
                            case 37:  {
                                $flags$1 = $flags$0;$scale$1 = 1;
                                break;
                            }
                            case 33:  {
                                $flags$1 = 0;$scale$1 = $scale$0;
                                break;
                            }
                            case 94:  {
                                $26 = $flags$0 | 9;
                                $flags$1 = $26;$scale$1 = $scale$0;
                                break;
                            }
                            case 60:  {
                                $27 = $flags$0 | 5;
                                $flags$1 = $27;$scale$1 = $scale$0;
                                break;
                            }
                            case 62:  {
                                $28 = $flags$0 | 3;
                                $flags$1 = $28;$scale$1 = $scale$0;
                                break;
                            }
                            default: {
                                break L5;
                            }
                        }
                        $29 = HEAP32[$0>>2]|0;
                        $30 = ((($29)) + 1|0);
                        HEAP32[$0>>2] = $30;
                        $flags$0 = $flags$1;$scale$0 = $scale$1;
                    }
                    $31 = ($scale$0$lcssa14|0)==(0);
                    if ($31) {
                        HEAP32[(252)>>2] = 1;
                        $34 = (~~(($x$0)));
                        HEAP32[(256)>>2] = $34;
                        $35 = (~~(($y$0$ph)));
                        HEAP32[(260)>>2] = $35;
                    } else {
                        HEAP32[(252)>>2] = 2;
                        $32 = $x$0 / 100.0;
                        HEAPF64[(272)>>3] = $32;
                        $33 = $y$0$ph / 100.0;
                        HEAPF64[(280)>>3] = $33;
                    }
                    HEAP32[(264)>>2] = $flags$0$lcssa13;
                    STACKTOP = sp;return;
                }
            } while(0);
            (_Clp_OptionError($clp,21755,$vararg_buffer)|0);
            STACKTOP = sp;return;
        }
        function __ZL21print_useless_optionsPKciPS0_($type_name,$value,$names) {
            $type_name = $type_name|0;
            $value = $value|0;
            $names = $names|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $explanation_printed$01 = 0, $explanation_printed$1 = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $vararg_buffer3 = sp + 16|0;
            $vararg_buffer = sp;
            $0 = ($value|0)==(0);
            if ($0) {
                STACKTOP = sp;return;
            } else {
                $explanation_printed$01 = 0;$i$02 = 0;
            }
            while(1) {
                $1 = 1 << $i$02;
                $2 = $1 & $value;
                $3 = ($2|0)==(0);
                do {
                    if ($3) {
                        $explanation_printed$1 = $explanation_printed$01;
                    } else {
                        $4 = ($explanation_printed$01|0)==(0);
                        $5 = (($names) + ($i$02<<2)|0);
                        $6 = HEAP32[$5>>2]|0;
                        if ($4) {
                            HEAP32[$vararg_buffer>>2] = $6;
                            $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                            HEAP32[$vararg_ptr1>>2] = $type_name;
                            $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
                            HEAP32[$vararg_ptr2>>2] = $type_name;
                            __Z7warningiPKcz(0,21667,$vararg_buffer);
                            $explanation_printed$1 = 1;
                            break;
                        } else {
                            HEAP32[$vararg_buffer3>>2] = $6;
                            $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
                            HEAP32[$vararg_ptr6>>2] = $type_name;
                            __Z7warningiPKcz(0,21726,$vararg_buffer3);
                            $explanation_printed$1 = $explanation_printed$01;
                            break;
                        }
                    }
                } while(0);
                $7 = (($i$02) + 1)|0;
                $exitcond = ($7|0)==(32);
                if ($exitcond) {
                    break;
                } else {
                    $explanation_printed$01 = $explanation_printed$1;$i$02 = $7;
                }
            }
            STACKTOP = sp;return;
        }
        function __ZL18do_colormap_changeP10Gif_Stream($gfs) {
            $gfs = $gfs|0;
            var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $adapt_func$0 = 0, $any_locals$0$ = 0, $any_locals$0$$lcssa = 0, $any_locals$0$lcssa = 0, $any_locals$07 = 0, $i$06 = 0;
            var $kch = 0, $ntransp = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            $kch = sp + 16|0;
            $ntransp = sp + 12|0;
            $0 = HEAP32[(80)>>2]|0;
            $1 = ($0|0)!=(0|0);
            $2 = HEAP32[(76)>>2]|0;
            $3 = ($2|0)>(0);
            $or$cond = $1 | $3;
            if ($or$cond) {
                $4 = HEAP32[(104)>>2]|0;
                $5 = +HEAPF64[(112)>>3];
                __Z12kc_set_gammaid($4,$5);
                $$pr = HEAP32[(80)>>2]|0;
                $6 = $$pr;
            } else {
                $6 = $0;
            }
            $7 = ($6|0)==(0|0);
            if (!($7)) {
                __Z15colormap_streamP10Gif_StreamP12Gif_ColormapP13Gt_OutputData($gfs,$6,48);
            }
            $8 = HEAP32[(76)>>2]|0;
            $9 = ($8|0)>(0);
            if (!($9)) {
                STACKTOP = sp;return;
            }
            $10 = ((($gfs)) + 4|0);
            $11 = HEAP32[$10>>2]|0;
            $12 = ($11|0)>(0);
            if ($12) {
                $13 = HEAP32[$gfs>>2]|0;
                $14 = HEAP32[$10>>2]|0;
                $any_locals$07 = 0;$i$06 = 0;
                while(1) {
                    $15 = (($13) + ($i$06<<2)|0);
                    $16 = HEAP32[$15>>2]|0;
                    $17 = ((($16)) + 24|0);
                    $18 = HEAP32[$17>>2]|0;
                    $19 = ($18|0)==(0|0);
                    $any_locals$0$ = $19 ? $any_locals$07 : 1;
                    $20 = (($i$06) + 1)|0;
                    $21 = ($20|0)<($14|0);
                    if ($21) {
                        $any_locals$07 = $any_locals$0$;$i$06 = $20;
                    } else {
                        $any_locals$0$$lcssa = $any_locals$0$;
                        break;
                    }
                }
                $phitmp = ($any_locals$0$$lcssa|0)!=(0);
                $any_locals$0$lcssa = $phitmp;
            } else {
                $any_locals$0$lcssa = 0;
            }
            __Z11kchist_makeP6kchistP10Gif_StreamPj($kch,$gfs,$ntransp);
            $22 = ((($kch)) + 4|0);
            $23 = HEAP32[$22>>2]|0;
            $24 = HEAP32[(76)>>2]|0;
            $25 = ($23|0)>($24|0);
            $or$cond3 = $any_locals$0$lcssa | $25;
            $26 = HEAP32[(80)>>2]|0;
            $27 = ($26|0)!=(0|0);
            $or$cond5 = $or$cond3 | $27;
            if (!($or$cond5)) {
                HEAP32[$vararg_buffer>>2] = $23;
                __Z7warningiPKcz(1,23378,$vararg_buffer);
                __Z14kchist_cleanupP6kchist($kch);
                STACKTOP = sp;return;
            }
            $28 = HEAP32[$ntransp>>2]|0;
            $29 = ($28|0)!=(0);
            $30 = $29&1;
            HEAP32[(88)>>2] = $30;
            $31 = HEAP32[(84)>>2]|0;
            switch ($31|0) {
                case 0:  {
                    $adapt_func$0 = 15;
                    break;
                }
                case 1:  {
                    $adapt_func$0 = 16;
                    break;
                }
                case 2:  {
                    $adapt_func$0 = 17;
                    break;
                }
                default: {
                    __Z11fatal_errorPKcz(23430,$vararg_buffer1);
                    // unreachable;
                }
            }
            $32 = (FUNCTION_TABLE_iii[$adapt_func$0 & 31]($kch,48)|0);
            __Z15colormap_streamP10Gif_StreamP12Gif_ColormapP13Gt_OutputData($gfs,$32,48);
            _Gif_DeleteColormap($32);
            __Z14kchist_cleanupP6kchist($kch);
            STACKTOP = sp;return;
        }
        function __ZL12write_streamPKcP10Gif_Stream($output_name,$gfs) {
            $output_name = $output_name|0;
            $gfs = $gfs|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $f$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $0 = ($output_name|0)==(0|0);
            if ($0) {
                $2 = HEAP32[3480>>2]|0;
                $$0 = 23366;$f$0 = $2;
            } else {
                $1 = (_fopen($output_name,23363)|0);
                $$0 = $output_name;$f$0 = $1;
            }
            $3 = ($f$0|0)==(0|0);
            if ($3) {
                $4 = (___errno_location()|0);
                $5 = HEAP32[$4>>2]|0;
                $6 = (_strerror($5)|0);
                HEAP32[$vararg_buffer>>2] = $6;
                __Z6lerrorPKcS0_z($$0,23375,$vararg_buffer);
                STACKTOP = sp;return;
            } else {
                (_Gif_FullWriteFile($gfs,780,$f$0)|0);
                (_fclose($f$0)|0);
                HEAP32[3200>>2] = 1;
                STACKTOP = sp;return;
            }
        }
        function _Gif_FullCompressImage($gfs,$gfi,$gcinfo) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $gcinfo = $gcinfo|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $grr = 0, $ok$0 = 0, $or$cond = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 96|0;
            $grr = sp;
            $0 = (__Z15gif_writer_initP10Gif_WriterP8_IO_FILEPK16Gif_CompressInfo($grr,0,$gcinfo)|0);
            $1 = ($0|0)==(0);
            if ($1) {
                $2 = ((($grr)) + 16|0);
                $3 = HEAP32[$2>>2]|0;
                $4 = $3 & 8;
                $5 = ($4|0)==(0);
                if ($5) {
                    _Gif_ReleaseCompressedImage($gfi);
                    $ok$0 = 0;
                } else {
                    $ok$0 = 0;
                }
            } else {
                $6 = (__Z20get_color_table_sizePK10Gif_StreamP9Gif_ImageP10Gif_Writer($gfs,0,$grr)|0);
                $7 = ((($grr)) + 48|0);
                HEAP32[$7>>2] = $6;
                $8 = (__Z20get_color_table_sizePK10Gif_StreamP9Gif_ImageP10Gif_Writer($gfs,$gfi,$grr)|0);
                $9 = ((($grr)) + 52|0);
                HEAP32[$9>>2] = $8;
                $10 = (__Z23calculate_min_code_bitsP9Gif_ImagePK10Gif_Writer($gfi,$grr)|0);
                $11 = $10 & 255;
                $12 = (__Z21write_compressed_dataP9Gif_ImageiP10Gif_Writer($gfi,$11,$grr)|0);
                __Z23save_compression_resultP9Gif_ImageP10Gif_Writeri($gfi,$grr,$12);
                $13 = ((($grr)) + 16|0);
                $14 = HEAP32[$13>>2]|0;
                $15 = $14 & 6;
                $16 = ($15|0)==(4);
                if ($16) {
                    $17 = ((($grr)) + 60|0);
                    $18 = HEAP32[$17>>2]|0;
                    $19 = ($18|0)!=(0);
                    $20 = ($12|0)!=(0);
                    $or$cond = $20 & $19;
                    if ($or$cond) {
                        $21 = $14 | 10;
                        HEAP32[$13>>2] = $21;
                        $22 = (__Z21write_compressed_dataP9Gif_ImageiP10Gif_Writer($gfi,$11,$grr)|0);
                        $23 = ($22|0)==(0);
                        if ($23) {
                            $ok$0 = $12;
                        } else {
                            __Z23save_compression_resultP9Gif_ImageP10Gif_Writeri($gfi,$grr,1);
                            $ok$0 = $12;
                        }
                    } else {
                        $ok$0 = $12;
                    }
                } else {
                    $ok$0 = $12;
                }
            }
            __Z18gif_writer_cleanupP10Gif_Writer($grr);
            STACKTOP = sp;return ($ok$0|0);
        }
        function _Gif_FullWriteFile($gfs,$gcinfo,$f) {
            $gfs = $gfs|0;
            $gcinfo = $gcinfo|0;
            $f = $f|0;
            var $0 = 0, $1 = 0, $2 = 0, $grr = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 96|0;
            $grr = sp;
            $0 = (__Z15gif_writer_initP10Gif_WriterP8_IO_FILEPK16Gif_CompressInfo($grr,$f,$gcinfo)|0);
            $1 = ($0|0)==(0);
            if ($1) {
                $2 = 0;
            } else {
                __Z9write_gifP10Gif_StreamP10Gif_Writer($gfs,$grr);
                $2 = 1;
            }
            __Z18gif_writer_cleanupP10Gif_Writer($grr);
            STACKTOP = sp;return ($2|0);
        }
        function _Gif_IncrementalWriteImage($grr,$gfs,$gfi) {
            $grr = $grr|0;
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gfex$0 = 0;
            var $gfex$01 = 0, $gfex$02 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 36|0);
            $gfex$01 = HEAP32[$0>>2]|0;
            $1 = ($gfex$01|0)==(0|0);
            if (!($1)) {
                $gfex$02 = $gfex$01;
                while(1) {
                    __Z23write_generic_extensionP13Gif_ExtensionP10Gif_Writer($gfex$02,$grr);
                    $2 = ((($gfex$02)) + 32|0);
                    $gfex$0 = HEAP32[$2>>2]|0;
                    $3 = ($gfex$0|0)==(0|0);
                    if ($3) {
                        break;
                    } else {
                        $gfex$02 = $gfex$0;
                    }
                }
            }
            $4 = ((($gfi)) + 32|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = ($5|0)==(0|0);
            if (!($6)) {
                __Z24write_comment_extensionsP11Gif_CommentP10Gif_Writer($5,$grr);
            }
            $7 = ((($gfi)) + 28|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = ($8|0)==(0|0);
            if (!($9)) {
                __Z20write_name_extensionPcP10Gif_Writer($8,$grr);
            }
            $10 = ((($gfi)) + 20|0);
            $11 = HEAP16[$10>>1]|0;
            $12 = ($11<<16>>16)==(-1);
            if ($12) {
                $13 = ((($gfi)) + 18|0);
                $14 = HEAP8[$13>>0]|0;
                $15 = ($14<<24>>24)==(0);
                if ($15) {
                    $16 = ((($gfi)) + 16|0);
                    $17 = HEAP16[$16>>1]|0;
                    $18 = ($17<<16>>16)==(0);
                    if ($18) {
                        __Z11write_imageP10Gif_StreamP9Gif_ImageP10Gif_Writer($gfs,$gfi,$grr);
                        return 1;
                    }
                }
            }
            __Z31write_graphic_control_extensionP9Gif_ImageP10Gif_Writer($gfi,$grr);
            __Z11write_imageP10Gif_StreamP9Gif_ImageP10Gif_Writer($gfs,$gfi,$grr);
            return 1;
        }
        function __Z15gif_writer_initP10Gif_WriterP8_IO_FILEPK16Gif_CompressInfo($grr,$f,$gcinfo) {
            $grr = $grr|0;
            $f = $f|0;
            $gcinfo = $gcinfo|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
            var $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            HEAP32[$grr>>2] = $f;
            $0 = ((($grr)) + 4|0);
            HEAP32[$0>>2] = 0;
            $1 = ((($grr)) + 12|0);
            HEAP32[$1>>2] = 0;
            $2 = ((($grr)) + 8|0);
            HEAP32[$2>>2] = 0;
            $3 = ($gcinfo|0)==(0|0);
            $4 = ((($grr)) + 16|0);
            if ($3) {
                _Gif_InitCompressInfo($4);
            } else {
                ;HEAP32[$4>>2]=HEAP32[$gcinfo>>2]|0;HEAP32[$4+4>>2]=HEAP32[$gcinfo+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$gcinfo+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$gcinfo+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$gcinfo+16>>2]|0;HEAP32[$4+20>>2]=HEAP32[$gcinfo+20>>2]|0;HEAP32[$4+24>>2]=HEAP32[$gcinfo+24>>2]|0;HEAP32[$4+28>>2]=HEAP32[$gcinfo+28>>2]|0;
            }
            $5 = ((($grr)) + 56|0);
            HEAP32[$5>>2] = 0;
            $6 = ((($grr)) + 60|0);
            HEAP32[$6>>2] = 0;
            $7 = (_Gif_Realloc(0,12,4096,24303,153)|0);
            $8 = ((($grr)) + 64|0);
            HEAP32[$8>>2] = $7;
            $9 = (_Gif_Realloc(0,4,4096,24303,154)|0);
            $10 = ((($grr)) + 72|0);
            HEAP32[$10>>2] = $9;
            $11 = ($f|0)==(0|0);
            $12 = ((($grr)) + 84|0);
            if ($11) {
                HEAP32[$12>>2] = 5;
                $14 = ((($grr)) + 88|0);
                HEAP32[$14>>2] = 4;
            } else {
                HEAP32[$12>>2] = 4;
                $13 = ((($grr)) + 88|0);
                HEAP32[$13>>2] = 3;
            }
            $15 = HEAP32[$8>>2]|0;
            $16 = ($15|0)==(0|0);
            if ($16) {
                $20 = 0;
                $19 = $20&1;
                return ($19|0);
            }
            $17 = HEAP32[$10>>2]|0;
            $18 = ($17|0)!=(0|0);
            $20 = $18;
            $19 = $20&1;
            return ($19|0);
        }
        function __Z20get_color_table_sizePK10Gif_StreamP9Gif_ImageP10Gif_Writer($gfs,$gfi,$grr) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $grr = $grr|0;
            var $$ = 0, $$0 = 0, $$in = 0, $$ncol$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $ncol$0$ = 0, $ncol$02 = 0;
            var $ncol$2 = 0, $totalcol$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($gfi|0)!=(0|0);
            $1 = ((($gfi)) + 24|0);
            $2 = ((($gfs)) + 12|0);
            $$in = $0 ? $1 : $2;
            $3 = HEAP32[$$in>>2]|0;
            $4 = ($3|0)==(0|0);
            if ($4) {
                $$0 = 0;
                return ($$0|0);
            }
            $5 = HEAP32[$3>>2]|0;
            $6 = ($5|0)<(1);
            if ($6) {
                $$0 = 0;
                return ($$0|0);
            }
            $7 = ((($grr)) + 16|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = $8 & 1;
            $10 = ($9|0)==(0);
            do {
                if ($10) {
                    $ncol$2 = $5;
                } else {
                    if ($0) {
                        $16 = ((($gfi)) + 20|0);
                        $17 = HEAP16[$16>>1]|0;
                        $18 = $17 << 16 >> 16;
                        $19 = ($18|0)<($5|0);
                        $20 = (($18) + 1)|0;
                        $$ = $19 ? $5 : $20;
                        $ncol$2 = $$;
                        break;
                    }
                    $11 = ((($gfs)) + 4|0);
                    $12 = HEAP32[$11>>2]|0;
                    $13 = ($12|0)>(0);
                    if ($13) {
                        $14 = HEAP32[$gfs>>2]|0;
                        $15 = HEAP32[$11>>2]|0;
                        $i$03 = 0;$ncol$02 = $5;
                        while(1) {
                            $21 = (($14) + ($i$03<<2)|0);
                            $22 = HEAP32[$21>>2]|0;
                            $23 = ((($22)) + 20|0);
                            $24 = HEAP16[$23>>1]|0;
                            $25 = $24 << 16 >> 16;
                            $26 = ($25|0)<($ncol$02|0);
                            $27 = (($25) + 1)|0;
                            $ncol$0$ = $26 ? $ncol$02 : $27;
                            $28 = (($i$03) + 1)|0;
                            $29 = ($28|0)<($15|0);
                            if ($29) {
                                $i$03 = $28;$ncol$02 = $ncol$0$;
                            } else {
                                $ncol$2 = $ncol$0$;
                                break;
                            }
                        }
                    } else {
                        $ncol$2 = $5;
                    }
                }
            } while(0);
            $30 = ($ncol$2|0)>(256);
            $$ncol$2 = $30 ? 256 : $ncol$2;
            $totalcol$0 = 2;
            while(1) {
                $31 = ($totalcol$0|0)<($$ncol$2|0);
                $32 = $totalcol$0 << 1;
                if ($31) {
                    $totalcol$0 = $32;
                } else {
                    $$0 = $totalcol$0;
                    break;
                }
            }
            return ($$0|0);
        }
        function __Z23calculate_min_code_bitsP9Gif_ImagePK10Gif_Writer($gfi,$grr) {
            $gfi = $gfi|0;
            $grr = $grr|0;
            var $$colors_used$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $colors_used$0$lcssa = 0, $colors_used$011 = 0, $colors_used$1$lcssa = 0, $colors_used$14 = 0, $colors_used$3 = 0, $colors_used$316 = 0, $data$05 = 0, $i$01 = 0, $min_code_bits$0$lcssa = 0, $min_code_bits$02 = 0, $x$03 = 0, $y$010 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 16|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = $1 & 1;
            $3 = ($2|0)==(0);
            do {
                if ($3) {
                    $10 = HEAP32[$gfi>>2]|0;
                    $11 = ($10|0)==(0|0);
                    if ($11) {
                        $34 = ((($gfi)) + 52|0);
                        $35 = HEAP32[$34>>2]|0;
                        $36 = ($35|0)==(0|0);
                        if ($36) {
                            $colors_used$316 = 256;
                            break;
                        }
                        $37 = HEAP8[$35>>0]|0;
                        $38 = $37&255;
                        $39 = 1 << $38;
                        $colors_used$3 = $39;
                        label = 14;
                        break;
                    }
                    $12 = ((($gfi)) + 8|0);
                    $13 = HEAP16[$12>>1]|0;
                    $14 = $13&65535;
                    $15 = ((($gfi)) + 10|0);
                    $16 = HEAP16[$15>>1]|0;
                    $17 = $16&65535;
                    $18 = ($16<<16>>16)==(0);
                    if ($18) {
                        $colors_used$0$lcssa = 0;
                    } else {
                        $19 = HEAP32[$gfi>>2]|0;
                        $20 = ($13<<16>>16)==(0);
                        $colors_used$011 = 0;$y$010 = 0;
                        while(1) {
                            if ($20) {
                                $colors_used$1$lcssa = $colors_used$011;
                            } else {
                                $21 = (($19) + ($y$010<<2)|0);
                                $22 = HEAP32[$21>>2]|0;
                                $colors_used$14 = $colors_used$011;$data$05 = $22;$x$03 = $14;
                                while(1) {
                                    $23 = HEAP8[$data$05>>0]|0;
                                    $24 = $23&255;
                                    $25 = ($24|0)>($colors_used$14|0);
                                    $$colors_used$1 = $25 ? $24 : $colors_used$14;
                                    $26 = (($x$03) + -1)|0;
                                    $27 = ((($data$05)) + 1|0);
                                    $28 = ($x$03|0)>(1);
                                    if ($28) {
                                        $colors_used$14 = $$colors_used$1;$data$05 = $27;$x$03 = $26;
                                    } else {
                                        $colors_used$1$lcssa = $$colors_used$1;
                                        break;
                                    }
                                }
                            }
                            $29 = (($y$010) + 1)|0;
                            $30 = ($29|0)<($17|0);
                            $31 = ($colors_used$1$lcssa|0)<(128);
                            $32 = $30 & $31;
                            if ($32) {
                                $colors_used$011 = $colors_used$1$lcssa;$y$010 = $29;
                            } else {
                                $colors_used$0$lcssa = $colors_used$1$lcssa;
                                break;
                            }
                        }
                    }
                    $33 = (($colors_used$0$lcssa) + 1)|0;
                    $colors_used$3 = $33;
                    label = 14;
                } else {
                    $4 = ((($grr)) + 52|0);
                    $5 = HEAP32[$4>>2]|0;
                    $6 = ($5|0)>(0);
                    if ($6) {
                        $colors_used$3 = $5;
                        label = 14;
                    } else {
                        $7 = ((($grr)) + 48|0);
                        $8 = HEAP32[$7>>2]|0;
                        $9 = ($8|0)>(0);
                        if ($9) {
                            $colors_used$3 = $8;
                            label = 14;
                        } else {
                            $min_code_bits$0$lcssa = 2;
                            return ($min_code_bits$0$lcssa|0);
                        }
                    }
                }
            } while(0);
            if ((label|0) == 14) {
                $40 = ($colors_used$3|0)>(4);
                if ($40) {
                    $colors_used$316 = $colors_used$3;
                } else {
                    $min_code_bits$0$lcssa = 2;
                    return ($min_code_bits$0$lcssa|0);
                }
            }
            $i$01 = 4;$min_code_bits$02 = 2;
            while(1) {
                $41 = (($min_code_bits$02) + 1)|0;
                $42 = $i$01 << 1;
                $43 = ($42|0)<($colors_used$316|0);
                if ($43) {
                    $i$01 = $42;$min_code_bits$02 = $41;
                } else {
                    $min_code_bits$0$lcssa = $41;
                    break;
                }
            }
            return ($min_code_bits$0$lcssa|0);
        }
        function __Z21write_compressed_dataP9Gif_ImageiP10Gif_Writer($gfi,$min_code_bits,$grr) {
            $gfi = $gfi|0;
            $min_code_bits = $min_code_bits|0;
            $grr = $grr|0;
            var $$ = 0, $$0 = 0, $$clear_bufpos$1 = 0, $$clear_pos$1 = 0, $$cur_code_bits$0 = 0, $$lcssa = 0, $$lcssa222 = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
            var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
            var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
            var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
            var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
            var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
            var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
            var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf$0 = 0, $buf$0$lcssa = 0, $buf$0$ph = 0, $buf$1 = 0, $buf$1$lcssa = 0, $buf$1$lcssa200 = 0, $buf$1203 = 0, $bufcap$0 = 0, $bufcap$0$ph = 0, $bufcap$1 = 0, $bufcap$1$lcssa196 = 0;
            var $bufcap$1199 = 0, $bufpos$0 = 0, $bufpos$0$ph = 0, $bufpos$1 = 0, $clear_bufpos$0 = 0, $clear_bufpos$0$ph = 0, $clear_bufpos$1$ph = 0, $clear_bufpos$1$ph$lcssa = 0, $clear_bufpos$1$ph205 = 0, $clear_bufpos$2 = 0, $clear_bufpos$3 = 0, $clear_pos$0 = 0, $clear_pos$0$ph = 0, $clear_pos$1$ph = 0, $clear_pos$1$ph$lcssa = 0, $clear_pos$1$ph207 = 0, $clear_pos$2 = 0, $clear_pos$3 = 0, $cur_code_bits$0 = 0, $cur_code_bits$0$ph = 0;
            var $cur_code_bits$2$ph = 0, $cur_code_bits$2$ph$lcssa = 0, $cur_code_bits$2$ph216 = 0, $do_clear$0 = 0, $endpos$0 = 0, $endpos$1 = 0, $endpos$1$lcssa = 0, $endpos$1$lcssa$lcssa = 0, $endpos$1$lcssa$lcssa183 = 0, $endpos$1$lcssa185 = 0, $endpos$1$lcssa186 = 0, $imageline$0 = 0, $imageline$0$lcssa188 = 0, $imageline$0$ph = 0, $imageline$122 = 0, $imageline$2 = 0, $imageline$2$lcssa = 0, $line_endpos$0$ph = 0, $line_endpos$1$lcssa44 = 0, $line_endpos$121 = 0;
            var $line_endpos$2 = 0, $line_endpos$2$lcssa = 0, $next_code$0 = 0, $next_code$0$ph = 0, $next_code$1$ph = 0, $next_code$1$ph$lcssa = 0, $next_code$1$ph213 = 0, $next_code$212 = 0, $next_code$213 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond5$not = 0, $or$cond7 = 0, $or$cond9 = 0, $output_code$0 = 0, $output_code$0$ph = 0, $pos$0$ph = 0, $pos$1$lcssa41 = 0;
            var $pos$125 = 0, $run$0 = 0, $run$0$ph = 0, $run$1$lcssa43 = 0, $run$1$ph = 0, $run$1$ph$lcssa = 0, $run$123 = 0, $run$123$lcssa = 0, $run_ewma$0 = 0, $run_ewma$0$ph = 0, $run_ewma$1 = 0, $run_ewma$2$ph = 0, $run_ewma$2$ph$lcssa = 0, $run_ewma$2$ph211 = 0, $stack_buffer = 0, $work_node$0 = 0, $work_node$0$lcssa191 = 0, $work_node$0$ph = 0, $work_node$1$lcssa42 = 0, $work_node$124 = 0;
            var $work_node$124$lcssa = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 496|0;
            $stack_buffer = sp;
            $0 = ((($grr)) + 64|0);
            $1 = ((($grr)) + 84|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = $min_code_bits&255;
            FUNCTION_TABLE_vii[$2 & 7]($3,$grr);
            $4 = ((($grr)) + 60|0);
            HEAP32[$4>>2] = 0;
            $5 = (($min_code_bits) + 1)|0;
            $6 = 1 << $min_code_bits;
            $7 = $6&65535;
            $8 = ((($gfi)) + 8|0);
            $9 = HEAP16[$8>>1]|0;
            $10 = $9&65535;
            $11 = (__Z13gif_imagelineP9Gif_Imagej($gfi,0)|0);
            $12 = $6 & 65535;
            $13 = (($6) + 2)|0;
            $14 = $13&65535;
            $15 = (($6) + 1)|0;
            $16 = $15 & 65535;
            $17 = (($6) + 1)|0;
            $18 = $17&65535;
            $19 = ((($grr)) + 16|0);
            $20 = ((($gfi)) + 10|0);
            $buf$0$ph = $stack_buffer;$bufcap$0$ph = 3904;$bufpos$0$ph = 0;$clear_bufpos$0$ph = 0;$clear_pos$0$ph = 0;$cur_code_bits$0$ph = $5;$imageline$0$ph = $11;$line_endpos$0$ph = $10;$next_code$0$ph = 0;$output_code$0$ph = $7;$pos$0$ph = 0;$run$0$ph = 0;$run_ewma$0$ph = 0;$work_node$0$ph = 0;
            L1: while(1) {
                $buf$0 = $buf$0$ph;$bufcap$0 = $bufcap$0$ph;$bufpos$0 = $bufpos$0$ph;$clear_bufpos$0 = $clear_bufpos$0$ph;$clear_pos$0 = $clear_pos$0$ph;$cur_code_bits$0 = $cur_code_bits$0$ph;$imageline$0 = $imageline$0$ph;$next_code$0 = $next_code$0$ph;$output_code$0 = $output_code$0$ph;$run$0 = $run$0$ph;$run_ewma$0 = $run_ewma$0$ph;$work_node$0 = $work_node$0$ph;
                while(1) {
                    $21 = (($bufpos$0) + 32)|0;
                    $22 = ($21>>>0)<($bufcap$0>>>0);
                    if ($22) {
                        $buf$1 = $buf$0;$bufcap$1 = $bufcap$0;
                    } else {
                        $23 = $bufcap$0 << 1;
                        $24 = (($23) + 192)|0;
                        $25 = $24 >>> 3;
                        $26 = (_Gif_Realloc(0,1,$25,24303,330)|0);
                        $27 = ($26|0)==(0|0);
                        if ($27) {
                            $buf$0$lcssa = $buf$0;
                            label = 42;
                            break L1;
                        }
                        $28 = $bufcap$0 >>> 3;
                        _memcpy(($26|0),($buf$0|0),($28|0))|0;
                        $29 = ($buf$0|0)==($stack_buffer|0);
                        if ($29) {
                            $buf$1 = $26;$bufcap$1 = $24;
                        } else {
                            _free($buf$0);
                            $buf$1 = $26;$bufcap$1 = $24;
                        }
                    }
                    $30 = (($bufpos$0) + ($cur_code_bits$0))|0;
                    $31 = $output_code$0&65535;
                    $32 = $output_code$0&65535;
                    $bufpos$1 = $bufpos$0;$endpos$0 = $30;
                    while(1) {
                        $33 = $bufpos$1 & 7;
                        $34 = ($33|0)==(0);
                        do {
                            if ($34) {
                                $42 = $bufpos$1 & 2047;
                                $43 = ($42|0)==(0);
                                if ($43) {
                                    $50 = $bufpos$1 >>> 3;
                                    $51 = (($buf$1) + ($50)|0);
                                    HEAP8[$51>>0] = -1;
                                    $52 = (($endpos$0) + 8)|0;
                                    $endpos$1 = $52;
                                    break;
                                } else {
                                    $44 = (($bufpos$1) + ($cur_code_bits$0))|0;
                                    $45 = (($44) - ($endpos$0))|0;
                                    $46 = $31 >>> $45;
                                    $47 = $46&255;
                                    $48 = $bufpos$1 >>> 3;
                                    $49 = (($buf$1) + ($48)|0);
                                    HEAP8[$49>>0] = $47;
                                    $endpos$1 = $endpos$0;
                                    break;
                                }
                            } else {
                                $35 = $32 << $33;
                                $36 = $bufpos$1 >>> 3;
                                $37 = (($buf$1) + ($36)|0);
                                $38 = HEAP8[$37>>0]|0;
                                $39 = $38&255;
                                $40 = $39 | $35;
                                $41 = $40&255;
                                HEAP8[$37>>0] = $41;
                                $endpos$1 = $endpos$0;
                            }
                        } while(0);
                        $53 = (8 - ($33))|0;
                        $54 = (($53) + ($bufpos$1))|0;
                        $55 = ($54>>>0)<($endpos$1>>>0);
                        if ($55) {
                            $bufpos$1 = $54;$endpos$0 = $endpos$1;
                        } else {
                            $endpos$1$lcssa = $endpos$1;
                            break;
                        }
                    }
                    $56 = $output_code$0&65535;
                    $57 = ($56|0)==($12|0);
                    if ($57) {
                        __Z9gfc_clearP13Gif_CodeTablet($0,$7);
                        $clear_bufpos$1$ph = 0;$clear_pos$1$ph = 0;$cur_code_bits$2$ph = $5;$next_code$1$ph = $14;$run$1$ph = 0;$run_ewma$2$ph = 524288;
                    } else {
                        $58 = ($56|0)==($16|0);
                        if ($58) {
                            $buf$1$lcssa = $buf$1;$endpos$1$lcssa$lcssa = $endpos$1$lcssa;
                            label = 40;
                            break L1;
                        }
                        $59 = $next_code$0&65535;
                        $60 = 1 << $cur_code_bits$0;
                        $61 = ($59|0)>($60|0);
                        $62 = ($cur_code_bits$0|0)<(12);
                        $or$cond = $62 & $61;
                        $63 = $or$cond&1;
                        $$cur_code_bits$0 = (($63) + ($cur_code_bits$0))|0;
                        $64 = $run$0 << 19;
                        $65 = $64 | 8;
                        $66 = ($65>>>0)<($run_ewma$0>>>0);
                        if ($66) {
                            $67 = (($run_ewma$0) - ($65))|0;
                            $68 = $67 >>> 4;
                            $69 = (($run_ewma$0) - ($68))|0;
                            $run_ewma$1 = $69;
                        } else {
                            $70 = (($65) - ($run_ewma$0))|0;
                            $71 = $70 >>> 4;
                            $72 = (($71) + ($run_ewma$0))|0;
                            $run_ewma$1 = $72;
                        }
                        $73 = ($work_node$0|0)!=(0|0);
                        $74 = $73&1;
                        $clear_bufpos$1$ph = $clear_bufpos$0;$clear_pos$1$ph = $clear_pos$0;$cur_code_bits$2$ph = $$cur_code_bits$0;$next_code$1$ph = $next_code$0;$run$1$ph = $74;$run_ewma$2$ph = $run_ewma$1;
                    }
                    $75 = ($imageline$0|0)==(0|0);
                    if (!($75)) {
                        $buf$1$lcssa200 = $buf$1;$bufcap$1$lcssa196 = $bufcap$1;$clear_bufpos$1$ph$lcssa = $clear_bufpos$1$ph;$clear_pos$1$ph$lcssa = $clear_pos$1$ph;$cur_code_bits$2$ph$lcssa = $cur_code_bits$2$ph;$endpos$1$lcssa$lcssa183 = $endpos$1$lcssa;$imageline$0$lcssa188 = $imageline$0;$next_code$1$ph$lcssa = $next_code$1$ph;$run$1$ph$lcssa = $run$1$ph;$run_ewma$2$ph$lcssa = $run_ewma$2$ph;$work_node$0$lcssa191 = $work_node$0;
                        label = 22;
                        break;
                    }
                    $127 = ($work_node$0|0)==(0|0);
                    if ($127) {
                        $buf$0 = $buf$1;$bufcap$0 = $bufcap$1;$bufpos$0 = $endpos$1$lcssa;$clear_bufpos$0 = $clear_bufpos$1$ph;$clear_pos$0 = $clear_pos$1$ph;$cur_code_bits$0 = $cur_code_bits$2$ph;$imageline$0 = 0;$next_code$0 = $next_code$1$ph;$output_code$0 = $18;$run$0 = $run$1$ph;$run_ewma$0 = $run_ewma$2$ph;$work_node$0 = 0;
                    } else {
                        $buf$1203 = $buf$1;$bufcap$1199 = $bufcap$1;$clear_bufpos$1$ph205 = $clear_bufpos$1$ph;$clear_pos$1$ph207 = $clear_pos$1$ph;$cur_code_bits$2$ph216 = $cur_code_bits$2$ph;$endpos$1$lcssa186 = $endpos$1$lcssa;$line_endpos$1$lcssa44 = $line_endpos$0$ph;$next_code$1$ph213 = $next_code$1$ph;$pos$1$lcssa41 = $pos$0$ph;$run$1$lcssa43 = $run$1$ph;$run_ewma$2$ph211 = $run_ewma$2$ph;$work_node$1$lcssa42 = $work_node$0;
                        break;
                    }
                }
                L30: do {
                    if ((label|0) == 22) {
                        label = 0;
                        $imageline$122 = $imageline$0$lcssa188;$line_endpos$121 = $line_endpos$0$ph;$pos$125 = $pos$0$ph;$run$123 = $run$1$ph$lcssa;$work_node$124 = $work_node$0$lcssa191;
                        while(1) {
                            $76 = HEAP8[$imageline$122>>0]|0;
                            $77 = (__Z10gfc_lookupP13Gif_CodeTableP8Gif_Nodeh($0,$work_node$124,$76)|0);
                            $78 = ((($imageline$122)) + 1|0);
                            $79 = (($pos$125) + 1)|0;
                            $80 = ($79|0)==($line_endpos$121|0);
                            if ($80) {
                                $81 = (__Z13gif_imagelineP9Gif_Imagej($gfi,$79)|0);
                                $82 = HEAP16[$8>>1]|0;
                                $83 = $82&65535;
                                $84 = (($83) + ($line_endpos$121))|0;
                                $imageline$2 = $81;$line_endpos$2 = $84;
                            } else {
                                $imageline$2 = $78;$line_endpos$2 = $line_endpos$121;
                            }
                            $85 = ($77|0)==(0|0);
                            if ($85) {
                                $$lcssa = $76;$$lcssa222 = $79;$imageline$2$lcssa = $imageline$2;$line_endpos$2$lcssa = $line_endpos$2;$run$123$lcssa = $run$123;$work_node$124$lcssa = $work_node$124;
                                break;
                            }
                            $86 = (($run$123) + 1)|0;
                            $87 = ($imageline$2|0)==(0|0);
                            if ($87) {
                                $buf$1203 = $buf$1$lcssa200;$bufcap$1199 = $bufcap$1$lcssa196;$clear_bufpos$1$ph205 = $clear_bufpos$1$ph$lcssa;$clear_pos$1$ph207 = $clear_pos$1$ph$lcssa;$cur_code_bits$2$ph216 = $cur_code_bits$2$ph$lcssa;$endpos$1$lcssa186 = $endpos$1$lcssa$lcssa183;$line_endpos$1$lcssa44 = $line_endpos$2;$next_code$1$ph213 = $next_code$1$ph$lcssa;$pos$1$lcssa41 = $79;$run$1$lcssa43 = $86;$run_ewma$2$ph211 = $run_ewma$2$ph$lcssa;$work_node$1$lcssa42 = $77;
                                break L30;
                            } else {
                                $imageline$122 = $imageline$2;$line_endpos$121 = $line_endpos$2;$pos$125 = $79;$run$123 = $86;$work_node$124 = $77;
                            }
                        }
                        $88 = ($next_code$1$ph$lcssa&65535)<(4096);
                        if ($88) {
                            __Z10gfc_defineP13Gif_CodeTableP8Gif_Nodeht($0,$work_node$124$lcssa,$$lcssa,$next_code$1$ph$lcssa);
                            $89 = (($next_code$1$ph$lcssa) + 1)<<16>>16;
                            $90 = ($89&65535)>(4094);
                            if ($90) {
                                $next_code$212 = $89;
                                label = 29;
                            } else {
                                $clear_bufpos$3 = $clear_bufpos$1$ph$lcssa;$clear_pos$3 = $clear_pos$1$ph$lcssa;$endpos$1$lcssa185 = $endpos$1$lcssa$lcssa183;$next_code$213 = $89;
                            }
                        } else {
                            $next_code$212 = 4097;
                            label = 29;
                        }
                        if ((label|0) == 29) {
                            label = 0;
                            $91 = HEAP32[$19>>2]|0;
                            $92 = $91 & 2;
                            $93 = ($92|0)==(0);
                            if ($93) {
                                $94 = HEAP16[$8>>1]|0;
                                $95 = $94&65535;
                                $96 = HEAP16[$20>>1]|0;
                                $97 = $96&65535;
                                $98 = Math_imul($97, $95)|0;
                                $99 = (($98) - ($$lcssa222))|0;
                                $100 = ($98|0)==($$lcssa222|0);
                                if ($100) {
                                    $do_clear$0 = 0;
                                } else {
                                    $101 = (18874368 / ($min_code_bits>>>0))&-1;
                                    $102 = ($run_ewma$2$ph$lcssa>>>0)<($101>>>0);
                                    $103 = ($99>>>0)>(24683720);
                                    $or$cond3 = $103 | $102;
                                    $104 = ($99*174)|0;
                                    $105 = ($run_ewma$2$ph$lcssa>>>0)<($104>>>0);
                                    $or$cond11 = $105 | $or$cond3;
                                    $$ = $or$cond11 ? 1 : $92;
                                    $do_clear$0 = $$;
                                }
                            } else {
                                $do_clear$0 = $92;
                            }
                            $106 = ($do_clear$0|0)!=(0);
                            $107 = ($run$123$lcssa>>>0)<(7);
                            $or$cond5 = $107 | $106;
                            $or$cond5$not = $or$cond5 ^ 1;
                            $108 = ($clear_pos$1$ph$lcssa|0)!=(0);
                            $or$cond7 = $108 | $or$cond5$not;
                            if ($or$cond7) {
                                $110 = ($do_clear$0|0)==(0);
                                $111 = ($run$123$lcssa>>>0)>(50);
                                $or$cond9 = $111 & $110;
                                $$clear_bufpos$1 = $or$cond9 ? 0 : $clear_bufpos$1$ph$lcssa;
                                $$clear_pos$1 = $or$cond9 ? 0 : $clear_pos$1$ph$lcssa;
                                $clear_bufpos$2 = $$clear_bufpos$1;$clear_pos$2 = $$clear_pos$1;
                            } else {
                                $$neg = $run$123$lcssa ^ -1;
                                $109 = (($$lcssa222) + ($$neg))|0;
                                $clear_bufpos$2 = $endpos$1$lcssa$lcssa183;$clear_pos$2 = $109;
                            }
                            if ($106) {
                                $112 = (__Z13gif_imagelineP9Gif_Imagej($gfi,$clear_pos$2)|0);
                                $113 = (__Z15gif_line_endposP9Gif_Imagej($gfi,$clear_pos$2)|0);
                                $114 = $clear_bufpos$2 & 7;
                                $115 = 1 << $114;
                                $116 = (($115) + 255)|0;
                                $117 = $clear_bufpos$2 >>> 3;
                                $118 = (($buf$1$lcssa200) + ($117)|0);
                                $119 = HEAP8[$118>>0]|0;
                                $120 = $119&255;
                                $121 = $120 & $116;
                                $122 = $121&255;
                                HEAP8[$118>>0] = $122;
                                HEAP32[$4>>2] = 1;
                                $buf$0$ph = $buf$1$lcssa200;$bufcap$0$ph = $bufcap$1$lcssa196;$bufpos$0$ph = $clear_bufpos$2;$clear_bufpos$0$ph = $clear_bufpos$2;$clear_pos$0$ph = $clear_pos$2;$cur_code_bits$0$ph = $cur_code_bits$2$ph$lcssa;$imageline$0$ph = $112;$line_endpos$0$ph = $113;$next_code$0$ph = $next_code$212;$output_code$0$ph = $7;$pos$0$ph = $clear_pos$2;$run$0$ph = $run$123$lcssa;$run_ewma$0$ph = $run_ewma$2$ph$lcssa;$work_node$0$ph = 0;
                                continue L1;
                            } else {
                                $clear_bufpos$3 = $clear_bufpos$2;$clear_pos$3 = $clear_pos$2;$endpos$1$lcssa185 = $endpos$1$lcssa$lcssa183;$next_code$213 = $next_code$212;
                            }
                        }
                        $123 = HEAP16[$work_node$124$lcssa>>1]|0;
                        $124 = $$lcssa&255;
                        $125 = HEAP32[$0>>2]|0;
                        $126 = (($125) + (($124*12)|0)|0);
                        $buf$0$ph = $buf$1$lcssa200;$bufcap$0$ph = $bufcap$1$lcssa196;$bufpos$0$ph = $endpos$1$lcssa185;$clear_bufpos$0$ph = $clear_bufpos$3;$clear_pos$0$ph = $clear_pos$3;$cur_code_bits$0$ph = $cur_code_bits$2$ph$lcssa;$imageline$0$ph = $imageline$2$lcssa;$line_endpos$0$ph = $line_endpos$2$lcssa;$next_code$0$ph = $next_code$213;$output_code$0$ph = $123;$pos$0$ph = $$lcssa222;$run$0$ph = $run$123$lcssa;$run_ewma$0$ph = $run_ewma$2$ph$lcssa;$work_node$0$ph = $126;
                        continue L1;
                    }
                } while(0);
                $128 = HEAP16[$work_node$1$lcssa42>>1]|0;
                $buf$0$ph = $buf$1203;$bufcap$0$ph = $bufcap$1199;$bufpos$0$ph = $endpos$1$lcssa186;$clear_bufpos$0$ph = $clear_bufpos$1$ph205;$clear_pos$0$ph = $clear_pos$1$ph207;$cur_code_bits$0$ph = $cur_code_bits$2$ph216;$imageline$0$ph = 0;$line_endpos$0$ph = $line_endpos$1$lcssa44;$next_code$0$ph = $next_code$1$ph213;$output_code$0$ph = $128;$pos$0$ph = $pos$1$lcssa41;$run$0$ph = $run$1$lcssa43;$run_ewma$0$ph = $run_ewma$2$ph211;$work_node$0$ph = 0;
            }
            if ((label|0) == 40) {
                $129 = (($endpos$1$lcssa$lcssa) + 7)|0;
                $130 = $129 >>> 3;
                $131 = (($130) + -1)|0;
                $132 = $131&255;
                $133 = $131 & -256;
                $134 = (($buf$1$lcssa) + ($133)|0);
                HEAP8[$134>>0] = $132;
                $135 = (($buf$1$lcssa) + ($130)|0);
                HEAP8[$135>>0] = 0;
                $136 = ((($grr)) + 88|0);
                $137 = HEAP32[$136>>2]|0;
                $138 = (($130) + 1)|0;
                FUNCTION_TABLE_viii[$137 & 7]($buf$1$lcssa,$138,$grr);
                $139 = ($buf$1$lcssa|0)==($stack_buffer|0);
                if ($139) {
                    $$0 = 1;
                    STACKTOP = sp;return ($$0|0);
                }
                _free($buf$1$lcssa);
                $$0 = 1;
                STACKTOP = sp;return ($$0|0);
            }
            else if ((label|0) == 42) {
                $140 = ($buf$0$lcssa|0)==($stack_buffer|0);
                if ($140) {
                    $$0 = 0;
                    STACKTOP = sp;return ($$0|0);
                }
                _free($buf$0$lcssa);
                $$0 = 0;
                STACKTOP = sp;return ($$0|0);
            }
            return (0)|0;
        }
        function __Z23save_compression_resultP9Gif_ImageP10Gif_Writeri($gfi,$grr,$ok) {
            $gfi = $gfi|0;
            $grr = $grr|0;
            $ok = $ok|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 16|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = $1 & 8;
            $3 = ($2|0)==(0);
            if (!($3)) {
                $4 = ($ok|0)==(0);
                if ($4) {
                    $27 = ((($grr)) + 8|0);
                    HEAP32[$27>>2] = 0;
                    return;
                }
                $5 = ((($gfi)) + 52|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = ($6|0)==(0|0);
                if (!($7)) {
                    $8 = ((($gfi)) + 44|0);
                    $9 = HEAP32[$8>>2]|0;
                    $10 = ((($grr)) + 8|0);
                    $11 = HEAP32[$10>>2]|0;
                    $12 = ($9>>>0)>($11>>>0);
                    if (!($12)) {
                        $27 = ((($grr)) + 8|0);
                        HEAP32[$27>>2] = 0;
                        return;
                    }
                }
            }
            $13 = ((($gfi)) + 52|0);
            $14 = HEAP32[$13>>2]|0;
            $15 = ($14|0)==(0|0);
            if (!($15)) {
                $16 = ((($gfi)) + 56|0);
                $17 = HEAP32[$16>>2]|0;
                FUNCTION_TABLE_vi[$17 & 7]($14);
            }
            $18 = ($ok|0)==(0);
            if ($18) {
                HEAP32[$13>>2] = 0;
                $27 = ((($grr)) + 8|0);
                HEAP32[$27>>2] = 0;
                return;
            } else {
                $19 = ((($grr)) + 8|0);
                $20 = HEAP32[$19>>2]|0;
                $21 = ((($gfi)) + 44|0);
                HEAP32[$21>>2] = $20;
                $22 = ((($gfi)) + 48|0);
                HEAP32[$22>>2] = 0;
                $23 = ((($grr)) + 4|0);
                $24 = HEAP32[$23>>2]|0;
                HEAP32[$13>>2] = $24;
                $25 = ((($gfi)) + 56|0);
                HEAP32[$25>>2] = 1;
                HEAP32[$23>>2] = 0;
                $26 = ((($grr)) + 12|0);
                HEAP32[$26>>2] = 0;
                $27 = ((($grr)) + 8|0);
                HEAP32[$27>>2] = 0;
                return;
            }
        }
        function __Z18gif_writer_cleanupP10Gif_Writer($grr) {
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            _free($1);
            $2 = ((($grr)) + 64|0);
            $3 = HEAP32[$2>>2]|0;
            _free($3);
            $4 = ((($grr)) + 72|0);
            $5 = HEAP32[$4>>2]|0;
            _free($5);
            return;
        }
        function __Z9write_gifP10Gif_StreamP10Gif_Writer($gfs,$grr) {
            $gfs = $gfs|0;
            $grr = $grr|0;
            var $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $7 = 0, $8 = 0, $9 = 0, $gfex$0 = 0, $gfex$03 = 0, $gfex$04 = 0, $i$09 = 0, $i$15 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfs)) + 28|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            L1: do {
                if ($2) {
                    $3 = ((($gfs)) + 32|0);
                    $4 = HEAP32[$3>>2]|0;
                    $5 = ($4|0)==(0|0);
                    if ($5) {
                        $6 = ((($gfs)) + 24|0);
                        $7 = HEAP32[$6>>2]|0;
                        $8 = ($7|0)>(-1);
                        if ($8) {
                            label = 4;
                        } else {
                            $10 = ((($gfs)) + 4|0);
                            $11 = HEAP32[$10>>2]|0;
                            $12 = ($11|0)>(0);
                            if ($12) {
                                $13 = HEAP32[$gfs>>2]|0;
                                $14 = HEAP32[$10>>2]|0;
                                $i$09 = 0;
                                while(1) {
                                    $15 = (($13) + ($i$09<<2)|0);
                                    $16 = HEAP32[$15>>2]|0;
                                    $17 = ((($16)) + 28|0);
                                    $18 = HEAP32[$17>>2]|0;
                                    $19 = ($18|0)==(0|0);
                                    if (!($19)) {
                                        $$ph = $10;
                                        label = 14;
                                        break L1;
                                    }
                                    $20 = ((($16)) + 20|0);
                                    $21 = HEAP16[$20>>1]|0;
                                    $22 = ($21<<16>>16)==(-1);
                                    if (!($22)) {
                                        $$ph = $10;
                                        label = 14;
                                        break L1;
                                    }
                                    $23 = ((($16)) + 18|0);
                                    $24 = HEAP8[$23>>0]|0;
                                    $25 = ($24<<24>>24)==(0);
                                    if (!($25)) {
                                        $$ph = $10;
                                        label = 14;
                                        break L1;
                                    }
                                    $26 = ((($16)) + 16|0);
                                    $27 = HEAP16[$26>>1]|0;
                                    $28 = ($27<<16>>16)==(0);
                                    if (!($28)) {
                                        $$ph = $10;
                                        label = 14;
                                        break L1;
                                    }
                                    $29 = ((($16)) + 32|0);
                                    $30 = HEAP32[$29>>2]|0;
                                    $31 = ($30|0)==(0|0);
                                    if (!($31)) {
                                        $$ph = $10;
                                        label = 14;
                                        break L1;
                                    }
                                    $32 = ((($16)) + 36|0);
                                    $33 = HEAP32[$32>>2]|0;
                                    $34 = ($33|0)==(0|0);
                                    if (!($34)) {
                                        $$ph = $10;
                                        label = 14;
                                        break L1;
                                    }
                                    $35 = (($i$09) + 1)|0;
                                    $36 = ($35|0)<($14|0);
                                    if ($36) {
                                        $i$09 = $35;
                                    } else {
                                        break;
                                    }
                                }
                            }
                            $39 = ((($grr)) + 88|0);
                            $40 = HEAP32[$39>>2]|0;
                            FUNCTION_TABLE_viii[$40 & 7](24340,6,$grr);
                            $46 = $10;
                        }
                    } else {
                        label = 4;
                    }
                } else {
                    label = 4;
                }
            } while(0);
            if ((label|0) == 4) {
                $9 = ((($gfs)) + 4|0);
                $$ph = $9;
                label = 14;
            }
            if ((label|0) == 14) {
                $37 = ((($grr)) + 88|0);
                $38 = HEAP32[$37>>2]|0;
                FUNCTION_TABLE_viii[$38 & 7](24316,6,$grr);
                $46 = $$ph;
            }
            __Z31write_logical_screen_descriptorP10Gif_StreamP10Gif_Writer($gfs,$grr);
            $41 = ((($gfs)) + 24|0);
            $42 = HEAP32[$41>>2]|0;
            $43 = ($42|0)>(-1);
            if ($43) {
                $44 = $42&65535;
                __Z29write_netscape_loop_extensiontP10Gif_Writer($44,$grr);
            }
            $45 = HEAP32[$46>>2]|0;
            $47 = ($45|0)>(0);
            if ($47) {
                $i$15 = 0;
                while(1) {
                    $48 = HEAP32[$gfs>>2]|0;
                    $49 = (($48) + ($i$15<<2)|0);
                    $50 = HEAP32[$49>>2]|0;
                    (_Gif_IncrementalWriteImage($grr,$gfs,$50)|0);
                    $51 = (($i$15) + 1)|0;
                    $52 = HEAP32[$46>>2]|0;
                    $53 = ($51|0)<($52|0);
                    if ($53) {
                        $i$15 = $51;
                    } else {
                        break;
                    }
                }
            }
            $54 = ((($gfs)) + 32|0);
            $gfex$03 = HEAP32[$54>>2]|0;
            $55 = ($gfex$03|0)==(0|0);
            if (!($55)) {
                $gfex$04 = $gfex$03;
                while(1) {
                    __Z23write_generic_extensionP13Gif_ExtensionP10Gif_Writer($gfex$04,$grr);
                    $56 = ((($gfex$04)) + 32|0);
                    $gfex$0 = HEAP32[$56>>2]|0;
                    $57 = ($gfex$0|0)==(0|0);
                    if ($57) {
                        break;
                    } else {
                        $gfex$04 = $gfex$0;
                    }
                }
            }
            $58 = HEAP32[$0>>2]|0;
            $59 = ($58|0)==(0|0);
            if ($59) {
                $60 = ((($grr)) + 84|0);
                $61 = HEAP32[$60>>2]|0;
                FUNCTION_TABLE_vii[$61 & 7](59,$grr);
                return;
            }
            __Z24write_comment_extensionsP11Gif_CommentP10Gif_Writer($58,$grr);
            $60 = ((($grr)) + 84|0);
            $61 = HEAP32[$60>>2]|0;
            FUNCTION_TABLE_vii[$61 & 7](59,$grr);
            return;
        }
        function __Z31write_logical_screen_descriptorP10Gif_StreamP10Gif_Writer($gfs,$grr) {
            $gfs = $gfs|0;
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $packed$01 = 0, $packed$1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (__Z20get_color_table_sizePK10Gif_StreamP9Gif_ImageP10Gif_Writer($gfs,0,$grr)|0);
            $1 = ((($grr)) + 48|0);
            HEAP32[$1>>2] = $0;
            _Gif_CalculateScreenSize($gfs,0);
            $2 = ((($gfs)) + 18|0);
            $3 = HEAP16[$2>>1]|0;
            __Z14gifputunsignedtP10Gif_Writer($3,$grr);
            $4 = ((($gfs)) + 20|0);
            $5 = HEAP16[$4>>1]|0;
            __Z14gifputunsignedtP10Gif_Writer($5,$grr);
            $6 = HEAP32[$1>>2]|0;
            $7 = ($6|0)>(0);
            if ($7) {
                $8 = HEAP32[$1>>2]|0;
                $9 = ($8|0)>(2);
                if ($9) {
                    $10 = HEAP32[$1>>2]|0;
                    $12 = 2;$packed$01 = -16;
                    while(1) {
                        $11 = $12 << 1;
                        $13 = (($packed$01) + 1)<<24>>24;
                        $14 = $11 & 65532;
                        $15 = ($14|0)<($10|0);
                        if ($15) {
                            $12 = $14;$packed$01 = $13;
                        } else {
                            $packed$1 = $13;
                            break;
                        }
                    }
                } else {
                    $packed$1 = -16;
                }
            } else {
                $packed$1 = 112;
            }
            $16 = ((($grr)) + 84|0);
            $17 = HEAP32[$16>>2]|0;
            FUNCTION_TABLE_vii[$17 & 7]($packed$1,$grr);
            $18 = ((($gfs)) + 16|0);
            $19 = HEAP16[$18>>1]|0;
            $20 = $19&65535;
            $21 = HEAP32[$1>>2]|0;
            $22 = ($20|0)<($21|0);
            $23 = HEAP32[$16>>2]|0;
            if ($22) {
                $24 = $19&255;
                FUNCTION_TABLE_vii[$23 & 7]($24,$grr);
            } else {
                FUNCTION_TABLE_vii[$23 & 7](-1,$grr);
            }
            $25 = HEAP32[$16>>2]|0;
            FUNCTION_TABLE_vii[$25 & 7](0,$grr);
            $26 = HEAP32[$1>>2]|0;
            $27 = ($26|0)>(0);
            if (!($27)) {
                return;
            }
            $28 = ((($gfs)) + 12|0);
            $29 = HEAP32[$28>>2]|0;
            __Z17write_color_tableP12Gif_ColormapiP10Gif_Writer($29,$26,$grr);
            return;
        }
        function __Z29write_netscape_loop_extensiontP10Gif_Writer($value,$grr) {
            $value = $value|0;
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 88|0);
            $1 = HEAP32[$0>>2]|0;
            FUNCTION_TABLE_viii[$1 & 7](24323,16,$grr);
            __Z14gifputunsignedtP10Gif_Writer($value,$grr);
            $2 = ((($grr)) + 84|0);
            $3 = HEAP32[$2>>2]|0;
            FUNCTION_TABLE_vii[$3 & 7](0,$grr);
            return;
        }
        function __Z23write_generic_extensionP13Gif_ExtensionP10Gif_Writer($gfex,$grr) {
            $gfex = $gfex|0;
            $grr = $grr|0;
            var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pos$0$lcssa = 0, $pos$01 = 0, $pos$01$phi = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$gfex>>2]|0;
            $1 = ($0|0)<(0);
            if ($1) {
                return;
            }
            $2 = ((($grr)) + 84|0);
            $3 = HEAP32[$2>>2]|0;
            FUNCTION_TABLE_vii[$3 & 7](33,$grr);
            $4 = HEAP32[$2>>2]|0;
            $5 = HEAP32[$gfex>>2]|0;
            $6 = $5&255;
            FUNCTION_TABLE_vii[$4 & 7]($6,$grr);
            $7 = HEAP32[$gfex>>2]|0;
            $8 = ($7|0)==(255);
            if ($8) {
                $9 = ((($gfex)) + 8|0);
                $10 = HEAP32[$9>>2]|0;
                $11 = ($10|0)==(0);
                if (!($11)) {
                    $12 = HEAP32[$2>>2]|0;
                    $13 = $10&255;
                    FUNCTION_TABLE_vii[$12 & 7]($13,$grr);
                    $14 = ((($grr)) + 88|0);
                    $15 = HEAP32[$14>>2]|0;
                    $16 = ((($gfex)) + 4|0);
                    $17 = HEAP32[$16>>2]|0;
                    $18 = HEAP32[$9>>2]|0;
                    FUNCTION_TABLE_viii[$15 & 7]($17,$18,$grr);
                }
            }
            $19 = ((($gfex)) + 20|0);
            $20 = HEAP32[$19>>2]|0;
            $21 = ($20|0)==(0);
            if ($21) {
                $22 = ((($gfex)) + 16|0);
                $23 = HEAP32[$22>>2]|0;
                $24 = ($23>>>0)>(255);
                if ($24) {
                    $25 = ((($grr)) + 88|0);
                    $26 = ((($gfex)) + 12|0);
                    $38 = 255;$pos$01 = 0;
                    while(1) {
                        $33 = HEAP32[$2>>2]|0;
                        FUNCTION_TABLE_vii[$33 & 7](-1,$grr);
                        $34 = HEAP32[$25>>2]|0;
                        $35 = HEAP32[$26>>2]|0;
                        $36 = (($35) + ($pos$01)|0);
                        FUNCTION_TABLE_viii[$34 & 7]($36,255,$grr);
                        $37 = (($38) + 255)|0;
                        $39 = HEAP32[$22>>2]|0;
                        $40 = ($37>>>0)<($39>>>0);
                        if ($40) {
                            $pos$01$phi = $38;$38 = $37;$pos$01 = $pos$01$phi;
                        } else {
                            $$lcssa = $39;$pos$0$lcssa = $38;
                            break;
                        }
                    }
                } else {
                    $$lcssa = $23;$pos$0$lcssa = 0;
                }
                $41 = ($$lcssa>>>0)>($pos$0$lcssa>>>0);
                if ($41) {
                    $42 = (($$lcssa) - ($pos$0$lcssa))|0;
                    $43 = HEAP32[$2>>2]|0;
                    $44 = $42&255;
                    FUNCTION_TABLE_vii[$43 & 7]($44,$grr);
                    $45 = ((($grr)) + 88|0);
                    $46 = HEAP32[$45>>2]|0;
                    $47 = ((($gfex)) + 12|0);
                    $48 = HEAP32[$47>>2]|0;
                    $49 = (($48) + ($pos$0$lcssa)|0);
                    FUNCTION_TABLE_viii[$46 & 7]($49,$42,$grr);
                }
            } else {
                $27 = ((($grr)) + 88|0);
                $28 = HEAP32[$27>>2]|0;
                $29 = ((($gfex)) + 12|0);
                $30 = HEAP32[$29>>2]|0;
                $31 = ((($gfex)) + 16|0);
                $32 = HEAP32[$31>>2]|0;
                FUNCTION_TABLE_viii[$28 & 7]($30,$32,$grr);
            }
            $50 = HEAP32[$2>>2]|0;
            FUNCTION_TABLE_vii[$50 & 7](0,$grr);
            return;
        }
        function __Z24write_comment_extensionsP11Gif_CommentP10Gif_Writer($gfcom,$grr) {
            $gfcom = $gfcom|0;
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfcom)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)>(0);
            if (!($2)) {
                return;
            }
            $3 = ((($grr)) + 84|0);
            $4 = ((($gfcom)) + 4|0);
            $i$01 = 0;
            while(1) {
                $5 = HEAP32[$3>>2]|0;
                FUNCTION_TABLE_vii[$5 & 7](33,$grr);
                $6 = HEAP32[$3>>2]|0;
                FUNCTION_TABLE_vii[$6 & 7](-2,$grr);
                $7 = HEAP32[$gfcom>>2]|0;
                $8 = (($7) + ($i$01<<2)|0);
                $9 = HEAP32[$8>>2]|0;
                $10 = HEAP32[$4>>2]|0;
                $11 = (($10) + ($i$01<<2)|0);
                $12 = HEAP32[$11>>2]|0;
                __Z10blast_dataPKhiP10Gif_Writer($9,$12,$grr);
                $13 = (($i$01) + 1)|0;
                $14 = HEAP32[$0>>2]|0;
                $15 = ($13|0)<($14|0);
                if ($15) {
                    $i$01 = $13;
                } else {
                    break;
                }
            }
            return;
        }
        function __Z20write_name_extensionPcP10Gif_Writer($id,$grr) {
            $id = $id|0;
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 84|0);
            $1 = HEAP32[$0>>2]|0;
            FUNCTION_TABLE_vii[$1 & 7](33,$grr);
            $2 = HEAP32[$0>>2]|0;
            FUNCTION_TABLE_vii[$2 & 7](-50,$grr);
            $3 = (_strlen($id)|0);
            __Z10blast_dataPKhiP10Gif_Writer($id,$3,$grr);
            return;
        }
        function __Z31write_graphic_control_extensionP9Gif_ImageP10Gif_Writer($gfi,$grr) {
            $gfi = $gfi|0;
            $grr = $grr|0;
            var $$lobit = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
            var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 84|0);
            $1 = HEAP32[$0>>2]|0;
            FUNCTION_TABLE_vii[$1 & 7](33,$grr);
            $2 = HEAP32[$0>>2]|0;
            FUNCTION_TABLE_vii[$2 & 7](-7,$grr);
            $3 = HEAP32[$0>>2]|0;
            FUNCTION_TABLE_vii[$3 & 7](4,$grr);
            $4 = ((($gfi)) + 20|0);
            $5 = HEAP16[$4>>1]|0;
            $$lobit = ($5&65535) >>> 15;
            $6 = $$lobit&65535;
            $7 = ((($gfi)) + 18|0);
            $8 = HEAP8[$7>>0]|0;
            $9 = $8&255;
            $10 = $9 << 2;
            $11 = $10 & 28;
            $$not = $11 | $6;
            $12 = $$not ^ 1;
            $13 = $12&255;
            $14 = HEAP32[$0>>2]|0;
            FUNCTION_TABLE_vii[$14 & 7]($13,$grr);
            $15 = ((($gfi)) + 16|0);
            $16 = HEAP16[$15>>1]|0;
            __Z14gifputunsignedtP10Gif_Writer($16,$grr);
            $17 = HEAP32[$0>>2]|0;
            $18 = HEAP16[$4>>1]|0;
            $19 = $18&255;
            FUNCTION_TABLE_vii[$17 & 7]($19,$grr);
            $20 = HEAP32[$0>>2]|0;
            FUNCTION_TABLE_vii[$20 & 7](0,$grr);
            return;
        }
        function __Z11write_imageP10Gif_StreamP9Gif_ImageP10Gif_Writer($gfs,$gfi,$grr) {
            $gfs = $gfs|0;
            $gfi = $gfi|0;
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compressed$02 = 0, $compressed_len$03 = 0;
            var $packed$05 = 0, $packed$1 = 0, $packed$2 = 0, $size$04 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (__Z20get_color_table_sizePK10Gif_StreamP9Gif_ImageP10Gif_Writer($gfs,$gfi,$grr)|0);
            $1 = ((($grr)) + 52|0);
            HEAP32[$1>>2] = $0;
            $2 = ((($grr)) + 84|0);
            $3 = HEAP32[$2>>2]|0;
            FUNCTION_TABLE_vii[$3 & 7](44,$grr);
            $4 = ((($gfi)) + 12|0);
            $5 = HEAP16[$4>>1]|0;
            __Z14gifputunsignedtP10Gif_Writer($5,$grr);
            $6 = ((($gfi)) + 14|0);
            $7 = HEAP16[$6>>1]|0;
            __Z14gifputunsignedtP10Gif_Writer($7,$grr);
            $8 = ((($gfi)) + 8|0);
            $9 = HEAP16[$8>>1]|0;
            __Z14gifputunsignedtP10Gif_Writer($9,$grr);
            $10 = ((($gfi)) + 10|0);
            $11 = HEAP16[$10>>1]|0;
            __Z14gifputunsignedtP10Gif_Writer($11,$grr);
            $12 = HEAP32[$1>>2]|0;
            $13 = ($12|0)>(0);
            if ($13) {
                $14 = HEAP32[$1>>2]|0;
                $15 = ($14|0)>(2);
                if ($15) {
                    $16 = HEAP32[$1>>2]|0;
                    $packed$05 = -128;$size$04 = 2;
                    while(1) {
                        $17 = $size$04 << 1;
                        $18 = (($packed$05) + 1)<<24>>24;
                        $19 = ($17|0)<($16|0);
                        if ($19) {
                            $packed$05 = $18;$size$04 = $17;
                        } else {
                            $packed$1 = $18;
                            break;
                        }
                    }
                } else {
                    $packed$1 = -128;
                }
            } else {
                $packed$1 = 0;
            }
            $20 = ((($gfi)) + 19|0);
            $21 = HEAP8[$20>>0]|0;
            $22 = ($21<<24>>24)==(0);
            if ($22) {
                $packed$2 = $packed$1;
            } else {
                $23 = $packed$1&255;
                $24 = $23 | 64;
                $25 = $24&255;
                $packed$2 = $25;
            }
            $26 = HEAP32[$2>>2]|0;
            FUNCTION_TABLE_vii[$26 & 7]($packed$2,$grr);
            $27 = HEAP32[$1>>2]|0;
            $28 = ($27|0)>(0);
            if ($28) {
                $29 = ((($gfi)) + 24|0);
                $30 = HEAP32[$29>>2]|0;
                __Z17write_color_tableP12Gif_ColormapiP10Gif_Writer($30,$27,$grr);
            }
            $31 = (__Z23calculate_min_code_bitsP9Gif_ImagePK10Gif_Writer($gfi,$grr)|0);
            $32 = ((($gfi)) + 52|0);
            $33 = HEAP32[$32>>2]|0;
            $34 = ($33|0)==(0|0);
            do {
                if (!($34)) {
                    $35 = ((($grr)) + 16|0);
                    $36 = HEAP32[$35>>2]|0;
                    $37 = $36 & 1;
                    $38 = ($37|0)==(0);
                    if (!($38)) {
                        $39 = HEAP8[$33>>0]|0;
                        $40 = $31&255;
                        $41 = ($39<<24>>24)==($40<<24>>24);
                        if (!($41)) {
                            break;
                        }
                    }
                    $42 = ((($gfi)) + 44|0);
                    $43 = HEAP32[$42>>2]|0;
                    $44 = ($43|0)==(0);
                    if ($44) {
                        return;
                    }
                    $45 = HEAP32[$32>>2]|0;
                    $46 = ((($grr)) + 88|0);
                    $compressed$02 = $45;$compressed_len$03 = $43;
                    while(1) {
                        $47 = ($compressed_len$03>>>0)>(28672);
                        $48 = HEAP32[$46>>2]|0;
                        $49 = $compressed_len$03 & 65535;
                        $50 = $47 ? 28672 : $49;
                        FUNCTION_TABLE_viii[$48 & 7]($compressed$02,$50,$grr);
                        $51 = (($compressed$02) + ($50)|0);
                        $52 = (($compressed_len$03) - ($50))|0;
                        $53 = ($compressed_len$03|0)==($50|0);
                        if ($53) {
                            break;
                        } else {
                            $compressed$02 = $51;$compressed_len$03 = $52;
                        }
                    }
                    return;
                }
            } while(0);
            $54 = HEAP32[$gfi>>2]|0;
            $55 = ($54|0)==(0|0);
            if ($55) {
                (_Gif_FullUncompressImage($gfs,$gfi,0)|0);
                $56 = $31 & 255;
                (__Z21write_compressed_dataP9Gif_ImageiP10Gif_Writer($gfi,$56,$grr)|0);
                _Gif_ReleaseUncompressedImage($gfi);
                return;
            } else {
                $57 = $31 & 255;
                (__Z21write_compressed_dataP9Gif_ImageiP10Gif_Writer($gfi,$57,$grr)|0);
                return;
            }
        }
        function __Z14gifputunsignedtP10Gif_Writer($uns,$grr) {
            $uns = $uns|0;
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 84|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = $uns&255;
            FUNCTION_TABLE_vii[$1 & 7]($2,$grr);
            $3 = HEAP32[$0>>2]|0;
            $4 = ($uns&65535) >>> 8;
            $5 = $4&255;
            FUNCTION_TABLE_vii[$3 & 7]($5,$grr);
            return;
        }
        function __Z17write_color_tableP12Gif_ColormapiP10Gif_Writer($gfcm,$totalcol,$grr) {
            $gfcm = $gfcm|0;
            $totalcol = $totalcol|0;
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$04 = 0, $exitcond = 0, $exitcond6 = 0, $i$0$lcssa = 0, $i$03 = 0, $i$11 = 0, $or$cond2 = 0, $umax = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$gfcm>>2]|0;
            $1 = ($0|0)>(0);
            $2 = ($totalcol|0)>(0);
            $or$cond2 = $1 & $2;
            if ($or$cond2) {
                $3 = ((($gfcm)) + 16|0);
                $4 = HEAP32[$3>>2]|0;
                $5 = ((($grr)) + 84|0);
                $6 = (0 - ($0))|0;
                $7 = (0 - ($totalcol))|0;
                $8 = ($6>>>0)>($7>>>0);
                $umax = $8 ? $6 : $7;
                $9 = (0 - ($umax))|0;
                $c$04 = $4;$i$03 = 0;
                while(1) {
                    $12 = HEAP32[$5>>2]|0;
                    $13 = ((($c$04)) + 1|0);
                    $14 = HEAP8[$13>>0]|0;
                    FUNCTION_TABLE_vii[$12 & 7]($14,$grr);
                    $15 = HEAP32[$5>>2]|0;
                    $16 = ((($c$04)) + 2|0);
                    $17 = HEAP8[$16>>0]|0;
                    FUNCTION_TABLE_vii[$15 & 7]($17,$grr);
                    $18 = HEAP32[$5>>2]|0;
                    $19 = ((($c$04)) + 3|0);
                    $20 = HEAP8[$19>>0]|0;
                    FUNCTION_TABLE_vii[$18 & 7]($20,$grr);
                    $21 = (($i$03) + 1)|0;
                    $22 = ((($c$04)) + 8|0);
                    $exitcond6 = ($21|0)==($9|0);
                    if ($exitcond6) {
                        $i$0$lcssa = $9;
                        break;
                    } else {
                        $c$04 = $22;$i$03 = $21;
                    }
                }
            } else {
                $i$0$lcssa = 0;
            }
            $10 = ($i$0$lcssa|0)<($totalcol|0);
            if (!($10)) {
                return;
            }
            $11 = ((($grr)) + 84|0);
            $i$11 = $i$0$lcssa;
            while(1) {
                $23 = HEAP32[$11>>2]|0;
                FUNCTION_TABLE_vii[$23 & 7](0,$grr);
                $24 = HEAP32[$11>>2]|0;
                FUNCTION_TABLE_vii[$24 & 7](0,$grr);
                $25 = HEAP32[$11>>2]|0;
                FUNCTION_TABLE_vii[$25 & 7](0,$grr);
                $26 = (($i$11) + 1)|0;
                $exitcond = ($26|0)==($totalcol|0);
                if ($exitcond) {
                    break;
                } else {
                    $i$11 = $26;
                }
            }
            return;
        }
        function __Z10blast_dataPKhiP10Gif_Writer($data,$len,$grr) {
            $data = $data|0;
            $len = $len|0;
            $grr = $grr|0;
            var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($len|0)>(0);
            if ($0) {
                $1 = ((($grr)) + 84|0);
                $2 = ((($grr)) + 88|0);
                $$012 = $len;$$03 = $data;
                while(1) {
                    $3 = ($$012|0)>(255);
                    $4 = $3 ? 255 : $$012;
                    $5 = HEAP32[$1>>2]|0;
                    $6 = $4&255;
                    FUNCTION_TABLE_vii[$5 & 7]($6,$grr);
                    $7 = HEAP32[$2>>2]|0;
                    FUNCTION_TABLE_viii[$7 & 7]($$03,$4,$grr);
                    $8 = (($$03) + ($4)|0);
                    $9 = (($$012) - ($4))|0;
                    $10 = ($9|0)>(0);
                    if ($10) {
                        $$012 = $9;$$03 = $8;
                    } else {
                        break;
                    }
                }
            }
            $11 = ((($grr)) + 84|0);
            $12 = HEAP32[$11>>2]|0;
            FUNCTION_TABLE_vii[$12 & 7](0,$grr);
            return;
        }
        function __Z13gif_imagelineP9Gif_Imagej($gfi,$pos) {
            $gfi = $gfi|0;
            $pos = $pos|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 8|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = ($1<<16>>16)==(0);
            if ($3) {
                $$0 = 0;
                return ($$0|0);
            }
            $4 = (($pos>>>0) / ($2>>>0))&-1;
            $5 = Math_imul($4, $2)|0;
            $6 = (($pos) - ($5))|0;
            $7 = ((($gfi)) + 10|0);
            $8 = HEAP16[$7>>1]|0;
            $9 = $8&65535;
            $10 = ($4|0)==($9|0);
            if ($10) {
                $$0 = 0;
                return ($$0|0);
            }
            $11 = ((($gfi)) + 19|0);
            $12 = HEAP8[$11>>0]|0;
            $13 = ($12<<24>>24)==(0);
            if ($13) {
                $14 = HEAP32[$gfi>>2]|0;
                $15 = (($14) + ($4<<2)|0);
                $16 = HEAP32[$15>>2]|0;
                $17 = (($16) + ($6)|0);
                $$0 = $17;
                return ($$0|0);
            } else {
                $18 = (_Gif_InterlaceLine($4,$9)|0);
                $19 = HEAP32[$gfi>>2]|0;
                $20 = (($19) + ($18<<2)|0);
                $21 = HEAP32[$20>>2]|0;
                $22 = (($21) + ($6)|0);
                $$0 = $22;
                return ($$0|0);
            }
            return (0)|0;
        }
        function __Z9gfc_clearP13Gif_CodeTablet($gfc,$clear_code) {
            $gfc = $gfc|0;
            $clear_code = $clear_code|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$01 = 0, $exitcond = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            $0 = $clear_code&65535;
            $1 = ((($gfc)) + 4|0);
            HEAP32[$1>>2] = $0;
            $2 = ((($gfc)) + 12|0);
            HEAP32[$2>>2] = 0;
            $3 = ($clear_code<<16>>16)==(0);
            if ($3) {
                $16 = ((($gfc)) + 16|0);
                HEAP32[$16>>2] = $0;
                return;
            }
            $4 = $clear_code&65535;
            $c$01 = 0;
            while(1) {
                $5 = $c$01&65535;
                $6 = HEAP32[$gfc>>2]|0;
                $7 = (($6) + (($c$01*12)|0)|0);
                HEAP16[$7>>1] = $5;
                $8 = HEAP32[$gfc>>2]|0;
                $9 = (((($8) + (($c$01*12)|0)|0)) + 2|0);
                HEAP8[$9>>0] = 1;
                $10 = $c$01&255;
                $11 = HEAP32[$gfc>>2]|0;
                $12 = (((($11) + (($c$01*12)|0)|0)) + 3|0);
                HEAP8[$12>>0] = $10;
                $13 = HEAP32[$gfc>>2]|0;
                $14 = (((($13) + (($c$01*12)|0)|0)) + 8|0);
                HEAP32[$14>>2] = 0;
                $15 = (($c$01) + 1)|0;
                $exitcond = ($15|0)==($4|0);
                if ($exitcond) {
                    break;
                } else {
                    $c$01 = $15;
                }
            }
            $16 = ((($gfc)) + 16|0);
            HEAP32[$16>>2] = $0;
            return;
        }
        function __Z10gfc_lookupP13Gif_CodeTableP8Gif_Nodeh($gfc,$node,$suffix) {
            $gfc = $gfc|0;
            $node = $node|0;
            $suffix = $suffix|0;
            var $$0 = 0, $$01 = 0, $$013 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($node|0)!=(0|0);
            if ($0) {
                $1 = HEAP32[$gfc>>2]|0;
                $2 = ($1>>>0)<=($node>>>0);
                $3 = ((($1)) + 49152|0);
                $4 = ($3>>>0)>($node>>>0);
                $or$cond = $2 & $4;
                if (!($or$cond)) {
                    ___assert_fail((24347|0),(24303|0),193,(24411|0));
                    // unreachable;
                }
            }
            $5 = $suffix&255;
            $6 = ((($gfc)) + 16|0);
            $7 = HEAP32[$6>>2]|0;
            $8 = ($5|0)<($7|0);
            if (!($8)) {
                ___assert_fail((24422|0),(24303|0),194,(24411|0));
                // unreachable;
            }
            if (!($0)) {
                $9 = HEAP32[$gfc>>2]|0;
                $10 = (($9) + (($5*12)|0)|0);
                $$0 = $10;
                return ($$0|0);
            }
            $11 = ((($node)) + 2|0);
            $12 = HEAP8[$11>>0]|0;
            $13 = ($12<<24>>24)==(0);
            if ($13) {
                $14 = ((($node)) + 8|0);
                $15 = HEAP32[$14>>2]|0;
                $16 = (($15) + ($5<<2)|0);
                $17 = HEAP32[$16>>2]|0;
                $$0 = $17;
                return ($$0|0);
            }
            $18 = ((($node)) + 8|0);
            $$013 = HEAP32[$18>>2]|0;
            $19 = ($$013|0)==(0|0);
            if ($19) {
                $$0 = 0;
                return ($$0|0);
            } else {
                $$014 = $$013;
            }
            while(1) {
                $20 = ((($$014)) + 3|0);
                $21 = HEAP8[$20>>0]|0;
                $22 = ($21<<24>>24)==($suffix<<24>>24);
                if ($22) {
                    $$0 = $$014;
                    label = 13;
                    break;
                }
                $23 = ((($$014)) + 4|0);
                $$01 = HEAP32[$23>>2]|0;
                $24 = ($$01|0)==(0|0);
                if ($24) {
                    $$0 = 0;
                    label = 13;
                    break;
                } else {
                    $$014 = $$01;
                }
            }
            if ((label|0) == 13) {
                return ($$0|0);
            }
            return (0)|0;
        }
        function __Z10gfc_defineP13Gif_CodeTableP8Gif_Nodeht($gfc,$work_node,$suffix,$next_code) {
            $gfc = $gfc|0;
            $work_node = $work_node|0;
            $suffix = $suffix|0;
            $next_code = $next_code|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfc)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = HEAP32[$gfc>>2]|0;
            $3 = (($2) + (($1*12)|0)|0);
            $4 = (($1) + 1)|0;
            HEAP32[$0>>2] = $4;
            HEAP16[$3>>1] = $next_code;
            $5 = (((($2) + (($1*12)|0)|0)) + 2|0);
            HEAP8[$5>>0] = 1;
            $6 = (((($2) + (($1*12)|0)|0)) + 3|0);
            HEAP8[$6>>0] = $suffix;
            $7 = (((($2) + (($1*12)|0)|0)) + 8|0);
            HEAP32[$7>>2] = 0;
            $8 = ((($work_node)) + 2|0);
            $9 = HEAP8[$8>>0]|0;
            $10 = ($9<<24>>24)==(0);
            if ($10) {
                $11 = $suffix&255;
                $12 = ((($work_node)) + 8|0);
                $13 = HEAP32[$12>>2]|0;
                $14 = (($13) + ($11<<2)|0);
                HEAP32[$14>>2] = $3;
                return;
            }
            $15 = ($9&255)<(5);
            if (!($15)) {
                $16 = ((($gfc)) + 12|0);
                $17 = HEAP32[$16>>2]|0;
                $18 = ((($gfc)) + 16|0);
                $19 = HEAP32[$18>>2]|0;
                $20 = (($19) + ($17))|0;
                $21 = ($20|0)>(4096);
                if (!($21)) {
                    __Z24gfc_change_node_to_tableP13Gif_CodeTableP8Gif_NodeS2_($gfc,$work_node,$3);
                    return;
                }
            }
            $22 = ((($work_node)) + 8|0);
            $23 = HEAP32[$22>>2]|0;
            $24 = (((($2) + (($1*12)|0)|0)) + 4|0);
            HEAP32[$24>>2] = $23;
            HEAP32[$22>>2] = $3;
            $25 = HEAP8[$8>>0]|0;
            $26 = ($25&255)<(5);
            if (!($26)) {
                return;
            }
            $27 = (($25) + 1)<<24>>24;
            HEAP8[$8>>0] = $27;
            return;
        }
        function __Z15gif_line_endposP9Gif_Imagej($gfi,$pos) {
            $gfi = $gfi|0;
            $pos = $pos|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfi)) + 8|0);
            $1 = HEAP16[$0>>1]|0;
            $2 = $1&65535;
            $3 = (($pos>>>0) / ($2>>>0))&-1;
            $4 = (($3) + 1)|0;
            $5 = Math_imul($4, $2)|0;
            return ($5|0);
        }
        function __Z24gfc_change_node_to_tableP13Gif_CodeTableP8Gif_NodeS2_($gfc,$work_node,$next_node) {
            $gfc = $gfc|0;
            $work_node = $work_node|0;
            $next_node = $next_node|0;
            var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $n$0 = 0, $n$03 = 0, $n$04 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($gfc)) + 12|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($gfc)) + 8|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = (($3) + ($1<<2)|0);
            $5 = ((($gfc)) + 16|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = (($6) + ($1))|0;
            HEAP32[$0>>2] = $7;
            $8 = HEAP32[$5>>2]|0;
            $9 = ($8|0)>(0);
            if ($9) {
                $10 = HEAP32[$5>>2]|0;
                $11 = 0;$c$05 = 0;
                while(1) {
                    $$sum2 = (($11) + ($1))|0;
                    $12 = (($3) + ($$sum2<<2)|0);
                    HEAP32[$12>>2] = 0;
                    $13 = (($c$05) + 1)<<16>>16;
                    $14 = $13&65535;
                    $15 = ($14|0)<($10|0);
                    if ($15) {
                        $11 = $14;$c$05 = $13;
                    } else {
                        break;
                    }
                }
            }
            $16 = ((($next_node)) + 3|0);
            $17 = HEAP8[$16>>0]|0;
            $18 = $17&255;
            $$sum = (($18) + ($1))|0;
            $19 = (($3) + ($$sum<<2)|0);
            HEAP32[$19>>2] = $next_node;
            $20 = ((($work_node)) + 8|0);
            $n$03 = HEAP32[$20>>2]|0;
            $21 = ($n$03|0)==(0|0);
            if ($21) {
                $28 = ((($work_node)) + 2|0);
                HEAP8[$28>>0] = 0;
                HEAP32[$20>>2] = $4;
                return;
            } else {
                $n$04 = $n$03;
            }
            while(1) {
                $22 = ((($n$04)) + 3|0);
                $23 = HEAP8[$22>>0]|0;
                $24 = $23&255;
                $$sum1 = (($24) + ($1))|0;
                $25 = (($3) + ($$sum1<<2)|0);
                HEAP32[$25>>2] = $n$04;
                $26 = ((($n$04)) + 4|0);
                $n$0 = HEAP32[$26>>2]|0;
                $27 = ($n$0|0)==(0|0);
                if ($27) {
                    break;
                } else {
                    $n$04 = $n$0;
                }
            }
            $28 = ((($work_node)) + 2|0);
            HEAP8[$28>>0] = 0;
            HEAP32[$20>>2] = $4;
            return;
        }
        function __Z16file_byte_putterhP10Gif_Writer($b,$grr) {
            $b = $b|0;
            $grr = $grr|0;
            var $0 = 0, $1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = $b&255;
            $1 = HEAP32[$grr>>2]|0;
            (_fputc($0,$1)|0);
            return;
        }
        function __Z17file_block_putterPKhjP10Gif_Writer($block,$size,$grr) {
            $block = $block|0;
            $size = $size|0;
            $grr = $grr|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[$grr>>2]|0;
            $1 = (_fwrite($block,1,$size,$0)|0);
            $2 = ($1|0)==($size|0);
            if ($2) {
                return;
            }
            $3 = ((($grr)) + 56|0);
            HEAP32[$3>>2] = 1;
            return;
        }
        function __Z18memory_byte_putterhP10Gif_Writer($b,$grr) {
            $b = $b|0;
            $grr = $grr|0;
            var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($grr)) + 12|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($1>>>0)<($3>>>0);
            if (!($4)) {
                $5 = ($3|0)==(0);
                $6 = $3 << 1;
                $$ = $5 ? 1024 : $6;
                HEAP32[$2>>2] = $$;
                $7 = ((($grr)) + 4|0);
                $8 = HEAP32[$7>>2]|0;
                $9 = (_Gif_Realloc($8,1,$$,24303,119)|0);
                HEAP32[$7>>2] = $9;
            }
            $10 = ((($grr)) + 4|0);
            $11 = HEAP32[$10>>2]|0;
            $12 = ($11|0)==(0|0);
            if ($12) {
                return;
            }
            $13 = HEAP32[$0>>2]|0;
            $14 = (($11) + ($13)|0);
            HEAP8[$14>>0] = $b;
            $15 = HEAP32[$0>>2]|0;
            $16 = (($15) + 1)|0;
            HEAP32[$0>>2] = $16;
            return;
        }
        function __Z19memory_block_putterPKhjP10Gif_Writer($data,$len,$grr) {
            $data = $data|0;
            $len = $len|0;
            $grr = $grr|0;
            var $$ = 0, $$lcssa1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($grr)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = (($1) + ($len))|0;
            $3 = ((($grr)) + 12|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = ($2>>>0)<($4>>>0);
            if ($5) {
                $$lcssa1 = $1;
            } else {
                $6 = ((($grr)) + 4|0);
                $7 = $4;
                while(1) {
                    $8 = ($7|0)==(0);
                    $9 = $7 << 1;
                    $$ = $8 ? 1024 : $9;
                    HEAP32[$3>>2] = $$;
                    $10 = HEAP32[$6>>2]|0;
                    $11 = (_Gif_Realloc($10,1,$$,24303,132)|0);
                    HEAP32[$6>>2] = $11;
                    $12 = HEAP32[$0>>2]|0;
                    $13 = (($12) + ($len))|0;
                    $14 = HEAP32[$3>>2]|0;
                    $15 = ($13>>>0)<($14>>>0);
                    if ($15) {
                        $$lcssa1 = $12;
                        break;
                    } else {
                        $7 = $14;
                    }
                }
            }
            $16 = ((($grr)) + 4|0);
            $17 = HEAP32[$16>>2]|0;
            $18 = ($17|0)==(0|0);
            if ($18) {
                return;
            }
            $19 = (($17) + ($$lcssa1)|0);
            _memcpy(($19|0),($data|0),($len|0))|0;
            $20 = HEAP32[$0>>2]|0;
            $21 = (($20) + ($len))|0;
            HEAP32[$0>>2] = $21;
            return;
        }
        function _isspace($c) {
            $c = $c|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($c|0)==(32);
            $1 = (($c) + -9)|0;
            $2 = ($1>>>0)<(5);
            $3 = $0 | $2;
            $4 = $3&1;
            return ($4|0);
        }
        function _isupper($c) {
            $c = $c|0;
            var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (($c) + -65)|0;
            $1 = ($0>>>0)<(26);
            $2 = $1&1;
            return ($2|0);
        }
        function _tolower($c) {
            $c = $c|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_isupper($c)|0);
            $1 = ($0|0)==(0);
            $2 = $c | 32;
            $$0 = $1 ? $c : $2;
            return ($$0|0);
        }
        function _strerror($e) {
            $e = $e|0;
            var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            $i$03 = 0;
            while(1) {
                $1 = (24447 + ($i$03)|0);
                $2 = HEAP8[$1>>0]|0;
                $3 = $2&255;
                $4 = ($3|0)==($e|0);
                if ($4) {
                    $i$03$lcssa = $i$03;
                    label = 2;
                    break;
                }
                $5 = (($i$03) + 1)|0;
                $6 = ($5|0)==(87);
                if ($6) {
                    $i$12 = 87;$s$01 = 24535;
                    label = 5;
                    break;
                } else {
                    $i$03 = $5;
                }
            }
            if ((label|0) == 2) {
                $0 = ($i$03$lcssa|0)==(0);
                if ($0) {
                    $s$0$lcssa = 24535;
                } else {
                    $i$12 = $i$03$lcssa;$s$01 = 24535;
                    label = 5;
                }
            }
            if ((label|0) == 5) {
                while(1) {
                    label = 0;
                    $s$1 = $s$01;
                    while(1) {
                        $7 = HEAP8[$s$1>>0]|0;
                        $8 = ($7<<24>>24)==(0);
                        $9 = ((($s$1)) + 1|0);
                        if ($8) {
                            $$lcssa = $9;
                            break;
                        } else {
                            $s$1 = $9;
                        }
                    }
                    $10 = (($i$12) + -1)|0;
                    $11 = ($10|0)==(0);
                    if ($11) {
                        $s$0$lcssa = $$lcssa;
                        break;
                    } else {
                        $i$12 = $10;$s$01 = $$lcssa;
                        label = 5;
                    }
                }
            }
            return ($s$0$lcssa|0);
        }
        function ___errno_location() {
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[3224>>2]|0;
            $1 = ($0|0)==(0|0);
            if ($1) {
                $$0 = 3488;
            } else {
                $2 = (_pthread_self()|0);
                $3 = ((($2)) + 60|0);
                $4 = HEAP32[$3>>2]|0;
                $$0 = $4;
            }
            return ($$0|0);
        }
        function ___floatscan($f,$prec,$pok) {
            $f = $f|0;
            $prec = $prec|0;
            $pok = $pok|0;
            var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
            var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
            var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
            var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
            var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
            var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
            var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
            var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
            var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
            var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
            var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
            var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
            var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
            var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
            var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
            var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
            var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
            var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
            var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
            var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
            var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
            var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
            var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
            var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
            var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
            var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
            var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
            var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
            var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
            var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
            var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
            var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
            var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
            var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
            var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
            var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
            var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
            var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
            var $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
            var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0;
            var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0;
            var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
            var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0;
            var $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0;
            var $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0;
            var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
            var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0;
            var $z$7$i = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 512|0;
            $x$i = sp;
            switch ($prec|0) {
                case 0:  {
                    $bits$0$ph = 24;$emin$0$ph = -149;
                    label = 4;
                    break;
                }
                case 1:  {
                    $bits$0$ph = 53;$emin$0$ph = -1074;
                    label = 4;
                    break;
                }
                case 2:  {
                    $bits$0$ph = 53;$emin$0$ph = -1074;
                    label = 4;
                    break;
                }
                default: {
                    $$0 = 0.0;
                }
            }
            L4: do {
                if ((label|0) == 4) {
                    $0 = ((($f)) + 4|0);
                    $1 = ((($f)) + 100|0);
                    while(1) {
                        $2 = HEAP32[$0>>2]|0;
                        $3 = HEAP32[$1>>2]|0;
                        $4 = ($2>>>0)<($3>>>0);
                        if ($4) {
                            $5 = ((($2)) + 1|0);
                            HEAP32[$0>>2] = $5;
                            $6 = HEAP8[$2>>0]|0;
                            $7 = $6&255;
                            $9 = $7;
                        } else {
                            $8 = (___shgetc($f)|0);
                            $9 = $8;
                        }
                        $10 = (_isspace($9)|0);
                        $11 = ($10|0)==(0);
                        if ($11) {
                            $$lcssa275 = $9;
                            break;
                        }
                    }
                    $12 = ($$lcssa275|0)==(45);
                    L13: do {
                        switch ($$lcssa275|0) {
                            case 43: case 45:  {
                            $13 = $12&1;
                            $14 = $13 << 1;
                            $15 = (1 - ($14))|0;
                            $16 = HEAP32[$0>>2]|0;
                            $17 = HEAP32[$1>>2]|0;
                            $18 = ($16>>>0)<($17>>>0);
                            if ($18) {
                                $19 = ((($16)) + 1|0);
                                HEAP32[$0>>2] = $19;
                                $20 = HEAP8[$16>>0]|0;
                                $21 = $20&255;
                                $c$0 = $21;$sign$0 = $15;
                                break L13;
                            } else {
                                $22 = (___shgetc($f)|0);
                                $c$0 = $22;$sign$0 = $15;
                                break L13;
                            }
                            break;
                        }
                            default: {
                                $c$0 = $$lcssa275;$sign$0 = 1;
                            }
                        }
                    } while(0);
                    $c$179 = $c$0;$i$078 = 0;
                    while(1) {
                        $23 = $c$179 | 32;
                        $24 = (26339 + ($i$078)|0);
                        $25 = HEAP8[$24>>0]|0;
                        $26 = $25 << 24 >> 24;
                        $27 = ($23|0)==($26|0);
                        if (!($27)) {
                            $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
                            break;
                        }
                        $28 = ($i$078>>>0)<(7);
                        do {
                            if ($28) {
                                $29 = HEAP32[$0>>2]|0;
                                $30 = HEAP32[$1>>2]|0;
                                $31 = ($29>>>0)<($30>>>0);
                                if ($31) {
                                    $32 = ((($29)) + 1|0);
                                    HEAP32[$0>>2] = $32;
                                    $33 = HEAP8[$29>>0]|0;
                                    $34 = $33&255;
                                    $c$2 = $34;
                                    break;
                                } else {
                                    $35 = (___shgetc($f)|0);
                                    $c$2 = $35;
                                    break;
                                }
                            } else {
                                $c$2 = $c$179;
                            }
                        } while(0);
                        $36 = (($i$078) + 1)|0;
                        $37 = ($36>>>0)<(8);
                        if ($37) {
                            $c$179 = $c$2;$i$078 = $36;
                        } else {
                            $c$1$lcssa = $c$2;$i$0$lcssa = $36;
                            break;
                        }
                    }
                    L29: do {
                        switch ($i$0$lcssa|0) {
                            case 8:  {
                                break;
                            }
                            case 3:  {
                                label = 23;
                                break;
                            }
                            default: {
                                $38 = ($i$0$lcssa>>>0)>(3);
                                $39 = ($pok|0)!=(0);
                                $or$cond5 = $39 & $38;
                                if ($or$cond5) {
                                    $40 = ($i$0$lcssa|0)==(8);
                                    if ($40) {
                                        break L29;
                                    } else {
                                        label = 23;
                                        break L29;
                                    }
                                }
                                $53 = ($i$0$lcssa|0)==(0);
                                L34: do {
                                    if ($53) {
                                        $c$377 = $c$1$lcssa;$i$276 = 0;
                                        while(1) {
                                            $54 = $c$377 | 32;
                                            $55 = (29251 + ($i$276)|0);
                                            $56 = HEAP8[$55>>0]|0;
                                            $57 = $56 << 24 >> 24;
                                            $58 = ($54|0)==($57|0);
                                            if (!($58)) {
                                                $c$5 = $c$377;$i$3 = $i$276;
                                                break L34;
                                            }
                                            $59 = ($i$276>>>0)<(2);
                                            do {
                                                if ($59) {
                                                    $60 = HEAP32[$0>>2]|0;
                                                    $61 = HEAP32[$1>>2]|0;
                                                    $62 = ($60>>>0)<($61>>>0);
                                                    if ($62) {
                                                        $63 = ((($60)) + 1|0);
                                                        HEAP32[$0>>2] = $63;
                                                        $64 = HEAP8[$60>>0]|0;
                                                        $65 = $64&255;
                                                        $c$4 = $65;
                                                        break;
                                                    } else {
                                                        $66 = (___shgetc($f)|0);
                                                        $c$4 = $66;
                                                        break;
                                                    }
                                                } else {
                                                    $c$4 = $c$377;
                                                }
                                            } while(0);
                                            $67 = (($i$276) + 1)|0;
                                            $68 = ($67>>>0)<(3);
                                            if ($68) {
                                                $c$377 = $c$4;$i$276 = $67;
                                            } else {
                                                $c$5 = $c$4;$i$3 = $67;
                                                break;
                                            }
                                        }
                                    } else {
                                        $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
                                    }
                                } while(0);
                                switch ($i$3|0) {
                                    case 3:  {
                                        $69 = HEAP32[$0>>2]|0;
                                        $70 = HEAP32[$1>>2]|0;
                                        $71 = ($69>>>0)<($70>>>0);
                                        if ($71) {
                                            $72 = ((($69)) + 1|0);
                                            HEAP32[$0>>2] = $72;
                                            $73 = HEAP8[$69>>0]|0;
                                            $74 = $73&255;
                                            $76 = $74;
                                        } else {
                                            $75 = (___shgetc($f)|0);
                                            $76 = $75;
                                        }
                                        $77 = ($76|0)==(40);
                                        if ($77) {
                                            $i$4 = 1;
                                        } else {
                                            $78 = HEAP32[$1>>2]|0;
                                            $79 = ($78|0)==(0|0);
                                            if ($79) {
                                                $$0 = nan;
                                                break L4;
                                            }
                                            $80 = HEAP32[$0>>2]|0;
                                            $81 = ((($80)) + -1|0);
                                            HEAP32[$0>>2] = $81;
                                            $$0 = nan;
                                            break L4;
                                        }
                                        while(1) {
                                            $82 = HEAP32[$0>>2]|0;
                                            $83 = HEAP32[$1>>2]|0;
                                            $84 = ($82>>>0)<($83>>>0);
                                            if ($84) {
                                                $85 = ((($82)) + 1|0);
                                                HEAP32[$0>>2] = $85;
                                                $86 = HEAP8[$82>>0]|0;
                                                $87 = $86&255;
                                                $90 = $87;
                                            } else {
                                                $88 = (___shgetc($f)|0);
                                                $90 = $88;
                                            }
                                            $89 = (($90) + -48)|0;
                                            $91 = ($89>>>0)<(10);
                                            $92 = (($90) + -65)|0;
                                            $93 = ($92>>>0)<(26);
                                            $or$cond = $91 | $93;
                                            if (!($or$cond)) {
                                                $94 = (($90) + -97)|0;
                                                $95 = ($94>>>0)<(26);
                                                $96 = ($90|0)==(95);
                                                $or$cond7 = $96 | $95;
                                                if (!($or$cond7)) {
                                                    $$lcssa = $90;$i$4$lcssa = $i$4;
                                                    break;
                                                }
                                            }
                                            $108 = (($i$4) + 1)|0;
                                            $i$4 = $108;
                                        }
                                        $97 = ($$lcssa|0)==(41);
                                        if ($97) {
                                            $$0 = nan;
                                            break L4;
                                        }
                                        $98 = HEAP32[$1>>2]|0;
                                        $99 = ($98|0)==(0|0);
                                        if (!($99)) {
                                            $100 = HEAP32[$0>>2]|0;
                                            $101 = ((($100)) + -1|0);
                                            HEAP32[$0>>2] = $101;
                                        }
                                        if (!($39)) {
                                            $103 = (___errno_location()|0);
                                            HEAP32[$103>>2] = 22;
                                            ___shlim($f,0);
                                            $$0 = 0.0;
                                            break L4;
                                        }
                                        $102 = ($i$4$lcssa|0)==(0);
                                        if ($102) {
                                            $$0 = nan;
                                            break L4;
                                        } else {
                                            $$in = $i$4$lcssa;
                                        }
                                        while(1) {
                                            $104 = (($$in) + -1)|0;
                                            if (!($99)) {
                                                $105 = HEAP32[$0>>2]|0;
                                                $106 = ((($105)) + -1|0);
                                                HEAP32[$0>>2] = $106;
                                            }
                                            $107 = ($104|0)==(0);
                                            if ($107) {
                                                $$0 = nan;
                                                break L4;
                                            } else {
                                                $$in = $104;
                                            }
                                        }
                                        break;
                                    }
                                    case 0:  {
                                        $114 = ($c$5|0)==(48);
                                        do {
                                            if ($114) {
                                                $115 = HEAP32[$0>>2]|0;
                                                $116 = HEAP32[$1>>2]|0;
                                                $117 = ($115>>>0)<($116>>>0);
                                                if ($117) {
                                                    $118 = ((($115)) + 1|0);
                                                    HEAP32[$0>>2] = $118;
                                                    $119 = HEAP8[$115>>0]|0;
                                                    $120 = $119&255;
                                                    $123 = $120;
                                                } else {
                                                    $121 = (___shgetc($f)|0);
                                                    $123 = $121;
                                                }
                                                $122 = $123 | 32;
                                                $124 = ($122|0)==(120);
                                                if (!($124)) {
                                                    $326 = HEAP32[$1>>2]|0;
                                                    $327 = ($326|0)==(0|0);
                                                    if ($327) {
                                                        $c$6 = 48;
                                                        break;
                                                    }
                                                    $328 = HEAP32[$0>>2]|0;
                                                    $329 = ((($328)) + -1|0);
                                                    HEAP32[$0>>2] = $329;
                                                    $c$6 = 48;
                                                    break;
                                                }
                                                $125 = HEAP32[$0>>2]|0;
                                                $126 = HEAP32[$1>>2]|0;
                                                $127 = ($125>>>0)<($126>>>0);
                                                if ($127) {
                                                    $128 = ((($125)) + 1|0);
                                                    HEAP32[$0>>2] = $128;
                                                    $129 = HEAP8[$125>>0]|0;
                                                    $130 = $129&255;
                                                    $c$0$i = $130;$gotdig$0$i = 0;
                                                } else {
                                                    $131 = (___shgetc($f)|0);
                                                    $c$0$i = $131;$gotdig$0$i = 0;
                                                }
                                                L94: while(1) {
                                                    switch ($c$0$i|0) {
                                                        case 46:  {
                                                            $gotdig$0$i$lcssa242 = $gotdig$0$i;
                                                            label = 74;
                                                            break L94;
                                                            break;
                                                        }
                                                        case 48:  {
                                                            break;
                                                        }
                                                        default: {
                                                            $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
                                                            break L94;
                                                        }
                                                    }
                                                    $132 = HEAP32[$0>>2]|0;
                                                    $133 = HEAP32[$1>>2]|0;
                                                    $134 = ($132>>>0)<($133>>>0);
                                                    if ($134) {
                                                        $135 = ((($132)) + 1|0);
                                                        HEAP32[$0>>2] = $135;
                                                        $136 = HEAP8[$132>>0]|0;
                                                        $137 = $136&255;
                                                        $c$0$i = $137;$gotdig$0$i = 1;
                                                        continue;
                                                    } else {
                                                        $138 = (___shgetc($f)|0);
                                                        $c$0$i = $138;$gotdig$0$i = 1;
                                                        continue;
                                                    }
                                                }
                                                if ((label|0) == 74) {
                                                    $139 = HEAP32[$0>>2]|0;
                                                    $140 = HEAP32[$1>>2]|0;
                                                    $141 = ($139>>>0)<($140>>>0);
                                                    if ($141) {
                                                        $142 = ((($139)) + 1|0);
                                                        HEAP32[$0>>2] = $142;
                                                        $143 = HEAP8[$139>>0]|0;
                                                        $144 = $143&255;
                                                        $c$1$ph$i = $144;
                                                    } else {
                                                        $145 = (___shgetc($f)|0);
                                                        $c$1$ph$i = $145;
                                                    }
                                                    $146 = ($c$1$ph$i|0)==(48);
                                                    if ($146) {
                                                        $154 = 0;$155 = 0;
                                                        while(1) {
                                                            $147 = HEAP32[$0>>2]|0;
                                                            $148 = HEAP32[$1>>2]|0;
                                                            $149 = ($147>>>0)<($148>>>0);
                                                            if ($149) {
                                                                $150 = ((($147)) + 1|0);
                                                                HEAP32[$0>>2] = $150;
                                                                $151 = HEAP8[$147>>0]|0;
                                                                $152 = $151&255;
                                                                $158 = $152;
                                                            } else {
                                                                $153 = (___shgetc($f)|0);
                                                                $158 = $153;
                                                            }
                                                            $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
                                                            $157 = tempRet0;
                                                            $159 = ($158|0)==(48);
                                                            if ($159) {
                                                                $154 = $156;$155 = $157;
                                                            } else {
                                                                $168 = 0;$170 = 0;$694 = $156;$695 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
                                                                break;
                                                            }
                                                        }
                                                    } else {
                                                        $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
                                                    }
                                                }
                                                while(1) {
                                                    $160 = (($c$2$i) + -48)|0;
                                                    $161 = ($160>>>0)<(10);
                                                    $$pre$i = $c$2$i | 32;
                                                    if ($161) {
                                                        label = 86;
                                                    } else {
                                                        $162 = (($$pre$i) + -97)|0;
                                                        $163 = ($162>>>0)<(6);
                                                        $164 = ($c$2$i|0)==(46);
                                                        $or$cond6$i = $164 | $163;
                                                        if (!($or$cond6$i)) {
                                                            $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
                                                            break;
                                                        }
                                                        if ($164) {
                                                            $165 = ($gotrad$0$i|0)==(0);
                                                            if ($165) {
                                                                $696 = $170;$697 = $168;$698 = $170;$699 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
                                                            } else {
                                                                $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
                                                                break;
                                                            }
                                                        } else {
                                                            label = 86;
                                                        }
                                                    }
                                                    if ((label|0) == 86) {
                                                        label = 0;
                                                        $166 = ($c$2$i|0)>(57);
                                                        $167 = (($$pre$i) + -87)|0;
                                                        $d$0$i = $166 ? $167 : $160;
                                                        $169 = ($168|0)<(0);
                                                        $171 = ($170>>>0)<(8);
                                                        $172 = ($168|0)==(0);
                                                        $173 = $172 & $171;
                                                        $174 = $169 | $173;
                                                        do {
                                                            if ($174) {
                                                                $175 = $x$0$i << 4;
                                                                $176 = (($d$0$i) + ($175))|0;
                                                                $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
                                                            } else {
                                                                $177 = ($168|0)<(0);
                                                                $178 = ($170>>>0)<(14);
                                                                $179 = ($168|0)==(0);
                                                                $180 = $179 & $178;
                                                                $181 = $177 | $180;
                                                                if ($181) {
                                                                    $182 = (+($d$0$i|0));
                                                                    $183 = $scale$0$i * 0.0625;
                                                                    $184 = $183 * $182;
                                                                    $185 = $y$0$i + $184;
                                                                    $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
                                                                    break;
                                                                }
                                                                $186 = ($d$0$i|0)==(0);
                                                                $187 = ($gottail$0$i|0)!=(0);
                                                                $or$cond$i = $187 | $186;
                                                                if ($or$cond$i) {
                                                                    $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
                                                                } else {
                                                                    $188 = $scale$0$i * 0.5;
                                                                    $189 = $y$0$i + $188;
                                                                    $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
                                                                }
                                                            }
                                                        } while(0);
                                                        $190 = (_i64Add(($170|0),($168|0),1,0)|0);
                                                        $191 = tempRet0;
                                                        $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
                                                    }
                                                    $192 = HEAP32[$0>>2]|0;
                                                    $193 = HEAP32[$1>>2]|0;
                                                    $194 = ($192>>>0)<($193>>>0);
                                                    if ($194) {
                                                        $195 = ((($192)) + 1|0);
                                                        HEAP32[$0>>2] = $195;
                                                        $196 = HEAP8[$192>>0]|0;
                                                        $197 = $196&255;
                                                        $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
                                                        continue;
                                                    } else {
                                                        $198 = (___shgetc($f)|0);
                                                        $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
                                                        continue;
                                                    }
                                                }
                                                $199 = ($gotdig$2$i$lcssa|0)==(0);
                                                if ($199) {
                                                    $200 = HEAP32[$1>>2]|0;
                                                    $201 = ($200|0)==(0|0);
                                                    if (!($201)) {
                                                        $202 = HEAP32[$0>>2]|0;
                                                        $203 = ((($202)) + -1|0);
                                                        HEAP32[$0>>2] = $203;
                                                    }
                                                    $204 = ($pok|0)==(0);
                                                    if ($204) {
                                                        ___shlim($f,0);
                                                    } else {
                                                        if (!($201)) {
                                                            $205 = HEAP32[$0>>2]|0;
                                                            $206 = ((($205)) + -1|0);
                                                            HEAP32[$0>>2] = $206;
                                                            $207 = ($gotrad$0$i$lcssa|0)==(0);
                                                            if (!($207)) {
                                                                $208 = ((($205)) + -2|0);
                                                                HEAP32[$0>>2] = $208;
                                                            }
                                                        }
                                                    }
                                                    $209 = (+($sign$0|0));
                                                    $210 = $209 * 0.0;
                                                    $$0 = $210;
                                                    break L4;
                                                }
                                                $211 = ($gotrad$0$i$lcssa|0)==(0);
                                                $214 = $211 ? $213 : $212;
                                                $217 = $211 ? $216 : $215;
                                                $218 = ($216|0)<(0);
                                                $219 = ($213>>>0)<(8);
                                                $220 = ($216|0)==(0);
                                                $221 = $220 & $219;
                                                $222 = $218 | $221;
                                                if ($222) {
                                                    $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
                                                    while(1) {
                                                        $223 = $x$324$i << 4;
                                                        $226 = (_i64Add(($224|0),($225|0),1,0)|0);
                                                        $227 = tempRet0;
                                                        $228 = ($227|0)<(0);
                                                        $229 = ($226>>>0)<(8);
                                                        $230 = ($227|0)==(0);
                                                        $231 = $230 & $229;
                                                        $232 = $228 | $231;
                                                        if ($232) {
                                                            $224 = $226;$225 = $227;$x$324$i = $223;
                                                        } else {
                                                            $x$3$lcssa$i = $223;
                                                            break;
                                                        }
                                                    }
                                                } else {
                                                    $x$3$lcssa$i = $x$0$i$lcssa;
                                                }
                                                $233 = $c$2$lcssa$i | 32;
                                                $234 = ($233|0)==(112);
                                                if ($234) {
                                                    $235 = (_scanexp($f,$pok)|0);
                                                    $236 = tempRet0;
                                                    $237 = ($235|0)==(0);
                                                    $238 = ($236|0)==(-2147483648);
                                                    $239 = $237 & $238;
                                                    if ($239) {
                                                        $240 = ($pok|0)==(0);
                                                        if ($240) {
                                                            ___shlim($f,0);
                                                            $$0 = 0.0;
                                                            break L4;
                                                        }
                                                        $241 = HEAP32[$1>>2]|0;
                                                        $242 = ($241|0)==(0|0);
                                                        if ($242) {
                                                            $253 = 0;$254 = 0;
                                                        } else {
                                                            $243 = HEAP32[$0>>2]|0;
                                                            $244 = ((($243)) + -1|0);
                                                            HEAP32[$0>>2] = $244;
                                                            $253 = 0;$254 = 0;
                                                        }
                                                    } else {
                                                        $253 = $235;$254 = $236;
                                                    }
                                                } else {
                                                    $245 = HEAP32[$1>>2]|0;
                                                    $246 = ($245|0)==(0|0);
                                                    if ($246) {
                                                        $253 = 0;$254 = 0;
                                                    } else {
                                                        $247 = HEAP32[$0>>2]|0;
                                                        $248 = ((($247)) + -1|0);
                                                        HEAP32[$0>>2] = $248;
                                                        $253 = 0;$254 = 0;
                                                    }
                                                }
                                                $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
                                                $250 = tempRet0;
                                                $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
                                                $252 = tempRet0;
                                                $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
                                                $256 = tempRet0;
                                                $257 = ($x$3$lcssa$i|0)==(0);
                                                if ($257) {
                                                    $258 = (+($sign$0|0));
                                                    $259 = $258 * 0.0;
                                                    $$0 = $259;
                                                    break L4;
                                                }
                                                $260 = (0 - ($emin$0$ph))|0;
                                                $261 = ($256|0)>(0);
                                                $262 = ($255>>>0)>($260>>>0);
                                                $263 = ($256|0)==(0);
                                                $264 = $263 & $262;
                                                $265 = $261 | $264;
                                                if ($265) {
                                                    $266 = (___errno_location()|0);
                                                    HEAP32[$266>>2] = 34;
                                                    $267 = (+($sign$0|0));
                                                    $268 = $267 * 1.7976931348623157E+308;
                                                    $269 = $268 * 1.7976931348623157E+308;
                                                    $$0 = $269;
                                                    break L4;
                                                }
                                                $270 = (($emin$0$ph) + -106)|0;
                                                $271 = ($270|0)<(0);
                                                $272 = $271 << 31 >> 31;
                                                $273 = ($256|0)<($272|0);
                                                $274 = ($255>>>0)<($270>>>0);
                                                $275 = ($256|0)==($272|0);
                                                $276 = $275 & $274;
                                                $277 = $273 | $276;
                                                if ($277) {
                                                    $279 = (___errno_location()|0);
                                                    HEAP32[$279>>2] = 34;
                                                    $280 = (+($sign$0|0));
                                                    $281 = $280 * 2.2250738585072014E-308;
                                                    $282 = $281 * 2.2250738585072014E-308;
                                                    $$0 = $282;
                                                    break L4;
                                                }
                                                $278 = ($x$3$lcssa$i|0)>(-1);
                                                if ($278) {
                                                    $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
                                                    while(1) {
                                                        $283 = !($y$320$i >= 0.5);
                                                        $284 = $x$419$i << 1;
                                                        $285 = $y$320$i + -1.0;
                                                        $286 = $283&1;
                                                        $287 = $286 | $284;
                                                        $x$5$i = $287 ^ 1;
                                                        $$pn$i = $283 ? $y$320$i : $285;
                                                        $y$4$i = $y$320$i + $$pn$i;
                                                        $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
                                                        $291 = tempRet0;
                                                        $292 = ($287|0)>(-1);
                                                        if ($292) {
                                                            $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
                                                        } else {
                                                            $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
                                                            break;
                                                        }
                                                    }
                                                } else {
                                                    $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
                                                }
                                                $293 = ($emin$0$ph|0)<(0);
                                                $294 = $293 << 31 >> 31;
                                                $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
                                                $296 = tempRet0;
                                                $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
                                                $300 = tempRet0;
                                                $301 = (0)>($300|0);
                                                $302 = ($bits$0$ph>>>0)>($299>>>0);
                                                $303 = (0)==($300|0);
                                                $304 = $303 & $302;
                                                $305 = $301 | $304;
                                                if ($305) {
                                                    $306 = ($299|0)<(0);
                                                    if ($306) {
                                                        $$0710$i = 0;
                                                        label = 127;
                                                    } else {
                                                        $$07$i = $299;
                                                        label = 125;
                                                    }
                                                } else {
                                                    $$07$i = $bits$0$ph;
                                                    label = 125;
                                                }
                                                if ((label|0) == 125) {
                                                    $307 = ($$07$i|0)<(53);
                                                    if ($307) {
                                                        $$0710$i = $$07$i;
                                                        label = 127;
                                                    } else {
                                                        $$pre41$i = (+($sign$0|0));
                                                        $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
                                                    }
                                                }
                                                if ((label|0) == 127) {
                                                    $308 = (84 - ($$0710$i))|0;
                                                    $309 = (+_scalbn(1.0,$308));
                                                    $310 = (+($sign$0|0));
                                                    $311 = (+_copysignl($309,$310));
                                                    $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
                                                }
                                                $312 = ($$0711$i|0)<(32);
                                                $313 = $y$3$lcssa$i != 0.0;
                                                $or$cond4$i = $313 & $312;
                                                $314 = $x$4$lcssa$i & 1;
                                                $315 = ($314|0)==(0);
                                                $or$cond9$i = $315 & $or$cond4$i;
                                                $316 = $or$cond9$i&1;
                                                $x$6$i = (($316) + ($x$4$lcssa$i))|0;
                                                $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
                                                $317 = (+($x$6$i>>>0));
                                                $318 = $$pre$phi42$iZ2D * $317;
                                                $319 = $bias$0$i + $318;
                                                $320 = $$pre$phi42$iZ2D * $y$5$i;
                                                $321 = $320 + $319;
                                                $322 = $321 - $bias$0$i;
                                                $323 = $322 != 0.0;
                                                if (!($323)) {
                                                    $324 = (___errno_location()|0);
                                                    HEAP32[$324>>2] = 34;
                                                }
                                                $325 = (+_scalbnl($322,$297));
                                                $$0 = $325;
                                                break L4;
                                            } else {
                                                $c$6 = $c$5;
                                            }
                                        } while(0);
                                        $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
                                        $330 = (0 - ($sum$i))|0;
                                        $$09$i = $c$6;$gotdig$0$i12 = 0;
                                        L184: while(1) {
                                            switch ($$09$i|0) {
                                                case 46:  {
                                                    $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
                                                    label = 138;
                                                    break L184;
                                                    break;
                                                }
                                                case 48:  {
                                                    break;
                                                }
                                                default: {
                                                    $$2$i = $$09$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
                                                    break L184;
                                                }
                                            }
                                            $331 = HEAP32[$0>>2]|0;
                                            $332 = HEAP32[$1>>2]|0;
                                            $333 = ($331>>>0)<($332>>>0);
                                            if ($333) {
                                                $334 = ((($331)) + 1|0);
                                                HEAP32[$0>>2] = $334;
                                                $335 = HEAP8[$331>>0]|0;
                                                $336 = $335&255;
                                                $$09$i = $336;$gotdig$0$i12 = 1;
                                                continue;
                                            } else {
                                                $337 = (___shgetc($f)|0);
                                                $$09$i = $337;$gotdig$0$i12 = 1;
                                                continue;
                                            }
                                        }
                                        if ((label|0) == 138) {
                                            $338 = HEAP32[$0>>2]|0;
                                            $339 = HEAP32[$1>>2]|0;
                                            $340 = ($338>>>0)<($339>>>0);
                                            if ($340) {
                                                $341 = ((($338)) + 1|0);
                                                HEAP32[$0>>2] = $341;
                                                $342 = HEAP8[$338>>0]|0;
                                                $343 = $342&255;
                                                $$1$ph$i = $343;
                                            } else {
                                                $344 = (___shgetc($f)|0);
                                                $$1$ph$i = $344;
                                            }
                                            $345 = ($$1$ph$i|0)==(48);
                                            if ($345) {
                                                $346 = 0;$347 = 0;
                                                while(1) {
                                                    $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
                                                    $349 = tempRet0;
                                                    $350 = HEAP32[$0>>2]|0;
                                                    $351 = HEAP32[$1>>2]|0;
                                                    $352 = ($350>>>0)<($351>>>0);
                                                    if ($352) {
                                                        $353 = ((($350)) + 1|0);
                                                        HEAP32[$0>>2] = $353;
                                                        $354 = HEAP8[$350>>0]|0;
                                                        $355 = $354&255;
                                                        $$1$be$i = $355;
                                                    } else {
                                                        $356 = (___shgetc($f)|0);
                                                        $$1$be$i = $356;
                                                    }
                                                    $357 = ($$1$be$i|0)==(48);
                                                    if ($357) {
                                                        $346 = $348;$347 = $349;
                                                    } else {
                                                        $$2$i = $$1$be$i;$700 = $348;$701 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
                                                        break;
                                                    }
                                                }
                                            } else {
                                                $$2$i = $$1$ph$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa273;$gotrad$0$i14 = 1;
                                            }
                                        }
                                        HEAP32[$x$i>>2] = 0;
                                        $358 = (($$2$i) + -48)|0;
                                        $359 = ($358>>>0)<(10);
                                        $360 = ($$2$i|0)==(46);
                                        $361 = $360 | $359;
                                        L203: do {
                                            if ($361) {
                                                $362 = ((($x$i)) + 496|0);
                                                $$3105$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3101$i = $gotdig$2$i13;$gotrad$1102$i = $gotrad$0$i14;$j$0104$i = 0;$k$0103$i = 0;$lnz$0100$i = 0;
                                                L205: while(1) {
                                                    do {
                                                        if ($702) {
                                                            $cond$i = ($gotrad$1102$i|0)==(0);
                                                            if ($cond$i) {
                                                                $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = 1;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
                                                            } else {
                                                                $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3101$i$lcssa = $gotdig$3101$i;$j$0104$i$lcssa = $j$0104$i;$k$0103$i$lcssa = $k$0103$i;$lnz$0100$i$lcssa = $lnz$0100$i;
                                                                break L205;
                                                            }
                                                        } else {
                                                            $364 = ($k$0103$i|0)<(125);
                                                            $367 = (_i64Add(($365|0),($366|0),1,0)|0);
                                                            $368 = tempRet0;
                                                            $369 = ($$3105$i|0)!=(48);
                                                            if (!($364)) {
                                                                if (!($369)) {
                                                                    $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
                                                                    break;
                                                                }
                                                                $379 = HEAP32[$362>>2]|0;
                                                                $380 = $379 | 1;
                                                                HEAP32[$362>>2] = $380;
                                                                $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
                                                                break;
                                                            }
                                                            $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
                                                            $370 = ($j$0104$i|0)==(0);
                                                            $371 = (($x$i) + ($k$0103$i<<2)|0);
                                                            if ($370) {
                                                                $storemerge$i = $703;
                                                            } else {
                                                                $372 = HEAP32[$371>>2]|0;
                                                                $373 = ($372*10)|0;
                                                                $374 = (($$3105$i) + -48)|0;
                                                                $375 = (($374) + ($373))|0;
                                                                $storemerge$i = $375;
                                                            }
                                                            HEAP32[$371>>2] = $storemerge$i;
                                                            $376 = (($j$0104$i) + 1)|0;
                                                            $377 = ($376|0)==(9);
                                                            $378 = $377&1;
                                                            $$k$0$i = (($378) + ($k$0103$i))|0;
                                                            $$11$i = $377 ? 0 : $376;
                                                            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
                                                        }
                                                    } while(0);
                                                    $381 = HEAP32[$0>>2]|0;
                                                    $382 = HEAP32[$1>>2]|0;
                                                    $383 = ($381>>>0)<($382>>>0);
                                                    if ($383) {
                                                        $384 = ((($381)) + 1|0);
                                                        HEAP32[$0>>2] = $384;
                                                        $385 = HEAP8[$381>>0]|0;
                                                        $386 = $385&255;
                                                        $$3$be$i = $386;
                                                    } else {
                                                        $387 = (___shgetc($f)|0);
                                                        $$3$be$i = $387;
                                                    }
                                                    $388 = (($$3$be$i) + -48)|0;
                                                    $389 = ($388>>>0)<(10);
                                                    $390 = ($$3$be$i|0)==(46);
                                                    $391 = $390 | $389;
                                                    if ($391) {
                                                        $$3105$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3101$i = $gotdig$4$i;$gotrad$1102$i = $gotrad$2$i;$j$0104$i = $j$2$i;$k$0103$i = $k$2$i;$lnz$0100$i = $lnz$2$i;
                                                    } else {
                                                        $$3$lcssa$i = $$3$be$i;$393 = $706;$394 = $708;$396 = $707;$397 = $709;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
                                                        label = 161;
                                                        break L203;
                                                    }
                                                }
                                                $363 = ($gotdig$3101$i$lcssa|0)!=(0);
                                                $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$069$i = $j$0104$i$lcssa;$k$065$i = $k$0103$i$lcssa;$lnz$059$i = $lnz$0100$i$lcssa;
                                                label = 169;
                                            } else {
                                                $$3$lcssa$i = $$2$i;$393 = $700;$394 = 0;$396 = $701;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
                                                label = 161;
                                            }
                                        } while(0);
                                        do {
                                            if ((label|0) == 161) {
                                                $392 = ($gotrad$1$lcssa$i|0)==(0);
                                                $395 = $392 ? $394 : $393;
                                                $398 = $392 ? $397 : $396;
                                                $399 = ($gotdig$3$lcssa$i|0)!=(0);
                                                $400 = $$3$lcssa$i | 32;
                                                $401 = ($400|0)==(101);
                                                $or$cond13$i = $401 & $399;
                                                if (!($or$cond13$i)) {
                                                    $416 = ($$3$lcssa$i|0)>(-1);
                                                    if ($416) {
                                                        $714 = $394;$715 = $397;$716 = $395;$717 = $398;$718 = $399;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
                                                        label = 169;
                                                        break;
                                                    } else {
                                                        $719 = $394;$720 = $397;$721 = $399;$722 = $395;$723 = $398;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
                                                        label = 171;
                                                        break;
                                                    }
                                                }
                                                $402 = (_scanexp($f,$pok)|0);
                                                $403 = tempRet0;
                                                $404 = ($402|0)==(0);
                                                $405 = ($403|0)==(-2147483648);
                                                $406 = $404 & $405;
                                                if ($406) {
                                                    $407 = ($pok|0)==(0);
                                                    if ($407) {
                                                        ___shlim($f,0);
                                                        $$0$i27 = 0.0;
                                                        break;
                                                    }
                                                    $408 = HEAP32[$1>>2]|0;
                                                    $409 = ($408|0)==(0|0);
                                                    if ($409) {
                                                        $412 = 0;$413 = 0;
                                                    } else {
                                                        $410 = HEAP32[$0>>2]|0;
                                                        $411 = ((($410)) + -1|0);
                                                        HEAP32[$0>>2] = $411;
                                                        $412 = 0;$413 = 0;
                                                    }
                                                } else {
                                                    $412 = $402;$413 = $403;
                                                }
                                                $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
                                                $415 = tempRet0;
                                                $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
                                                label = 173;
                                            }
                                        } while(0);
                                        if ((label|0) == 169) {
                                            $417 = HEAP32[$1>>2]|0;
                                            $418 = ($417|0)==(0|0);
                                            if ($418) {
                                                $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
                                                label = 171;
                                            } else {
                                                $419 = HEAP32[$0>>2]|0;
                                                $420 = ((($419)) + -1|0);
                                                HEAP32[$0>>2] = $420;
                                                if ($718) {
                                                    $426 = $716;$428 = $714;$429 = $717;$431 = $715;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
                                                    label = 173;
                                                } else {
                                                    label = 172;
                                                }
                                            }
                                        }
                                        if ((label|0) == 171) {
                                            if ($721) {
                                                $426 = $722;$428 = $719;$429 = $723;$431 = $720;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
                                                label = 173;
                                            } else {
                                                label = 172;
                                            }
                                        }
                                        do {
                                            if ((label|0) == 172) {
                                                $421 = (___errno_location()|0);
                                                HEAP32[$421>>2] = 22;
                                                ___shlim($f,0);
                                                $$0$i27 = 0.0;
                                            }
                                            else if ((label|0) == 173) {
                                                $422 = HEAP32[$x$i>>2]|0;
                                                $423 = ($422|0)==(0);
                                                if ($423) {
                                                    $424 = (+($sign$0|0));
                                                    $425 = $424 * 0.0;
                                                    $$0$i27 = $425;
                                                    break;
                                                }
                                                $427 = ($426|0)==($428|0);
                                                $430 = ($429|0)==($431|0);
                                                $432 = $427 & $430;
                                                $433 = ($431|0)<(0);
                                                $434 = ($428>>>0)<(10);
                                                $435 = ($431|0)==(0);
                                                $436 = $435 & $434;
                                                $437 = $433 | $436;
                                                $or$cond$i16 = $437 & $432;
                                                if ($or$cond$i16) {
                                                    $438 = ($bits$0$ph>>>0)>(30);
                                                    $439 = $422 >>> $bits$0$ph;
                                                    $440 = ($439|0)==(0);
                                                    $or$cond15$i = $438 | $440;
                                                    if ($or$cond15$i) {
                                                        $441 = (+($sign$0|0));
                                                        $442 = (+($422>>>0));
                                                        $443 = $441 * $442;
                                                        $$0$i27 = $443;
                                                        break;
                                                    }
                                                }
                                                $444 = (($emin$0$ph|0) / -2)&-1;
                                                $445 = ($444|0)<(0);
                                                $446 = $445 << 31 >> 31;
                                                $447 = ($429|0)>($446|0);
                                                $448 = ($426>>>0)>($444>>>0);
                                                $449 = ($429|0)==($446|0);
                                                $450 = $449 & $448;
                                                $451 = $447 | $450;
                                                if ($451) {
                                                    $452 = (___errno_location()|0);
                                                    HEAP32[$452>>2] = 34;
                                                    $453 = (+($sign$0|0));
                                                    $454 = $453 * 1.7976931348623157E+308;
                                                    $455 = $454 * 1.7976931348623157E+308;
                                                    $$0$i27 = $455;
                                                    break;
                                                }
                                                $456 = (($emin$0$ph) + -106)|0;
                                                $457 = ($456|0)<(0);
                                                $458 = $457 << 31 >> 31;
                                                $459 = ($429|0)<($458|0);
                                                $460 = ($426>>>0)<($456>>>0);
                                                $461 = ($429|0)==($458|0);
                                                $462 = $461 & $460;
                                                $463 = $459 | $462;
                                                if ($463) {
                                                    $464 = (___errno_location()|0);
                                                    HEAP32[$464>>2] = 34;
                                                    $465 = (+($sign$0|0));
                                                    $466 = $465 * 2.2250738585072014E-308;
                                                    $467 = $466 * 2.2250738585072014E-308;
                                                    $$0$i27 = $467;
                                                    break;
                                                }
                                                $468 = ($j$067$i|0)==(0);
                                                if ($468) {
                                                    $k$3$i = $k$063$i;
                                                } else {
                                                    $469 = ($j$067$i|0)<(9);
                                                    if ($469) {
                                                        $470 = (($x$i) + ($k$063$i<<2)|0);
                                                        $$promoted$i = HEAP32[$470>>2]|0;
                                                        $472 = $$promoted$i;$j$394$i = $j$067$i;
                                                        while(1) {
                                                            $471 = ($472*10)|0;
                                                            $473 = (($j$394$i) + 1)|0;
                                                            $exitcond$i = ($473|0)==(9);
                                                            if ($exitcond$i) {
                                                                $$lcssa265 = $471;
                                                                break;
                                                            } else {
                                                                $472 = $471;$j$394$i = $473;
                                                            }
                                                        }
                                                        HEAP32[$470>>2] = $$lcssa265;
                                                    }
                                                    $474 = (($k$063$i) + 1)|0;
                                                    $k$3$i = $474;
                                                }
                                                $475 = ($lnz$057$i|0)<(9);
                                                if ($475) {
                                                    $476 = ($lnz$057$i|0)<=($426|0);
                                                    $477 = ($426|0)<(18);
                                                    $or$cond3$i = $476 & $477;
                                                    if ($or$cond3$i) {
                                                        $478 = ($426|0)==(9);
                                                        if ($478) {
                                                            $479 = (+($sign$0|0));
                                                            $480 = HEAP32[$x$i>>2]|0;
                                                            $481 = (+($480>>>0));
                                                            $482 = $479 * $481;
                                                            $$0$i27 = $482;
                                                            break;
                                                        }
                                                        $483 = ($426|0)<(9);
                                                        if ($483) {
                                                            $484 = (+($sign$0|0));
                                                            $485 = HEAP32[$x$i>>2]|0;
                                                            $486 = (+($485>>>0));
                                                            $487 = $484 * $486;
                                                            $488 = (8 - ($426))|0;
                                                            $489 = (3492 + ($488<<2)|0);
                                                            $490 = HEAP32[$489>>2]|0;
                                                            $491 = (+($490|0));
                                                            $492 = $487 / $491;
                                                            $$0$i27 = $492;
                                                            break;
                                                        }
                                                        $$neg32$i = (($bits$0$ph) + 27)|0;
                                                        $493 = Math_imul($426, -3)|0;
                                                        $494 = (($$neg32$i) + ($493))|0;
                                                        $495 = ($494|0)>(30);
                                                        $$pre$i17 = HEAP32[$x$i>>2]|0;
                                                        $496 = $$pre$i17 >>> $494;
                                                        $497 = ($496|0)==(0);
                                                        $or$cond182$i = $495 | $497;
                                                        if ($or$cond182$i) {
                                                            $498 = (+($sign$0|0));
                                                            $499 = (+($$pre$i17>>>0));
                                                            $500 = $498 * $499;
                                                            $501 = (($426) + -10)|0;
                                                            $502 = (3492 + ($501<<2)|0);
                                                            $503 = HEAP32[$502>>2]|0;
                                                            $504 = (+($503|0));
                                                            $505 = $500 * $504;
                                                            $$0$i27 = $505;
                                                            break;
                                                        }
                                                    }
                                                }
                                                $506 = (($426|0) % 9)&-1;
                                                $507 = ($506|0)==(0);
                                                if ($507) {
                                                    $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $426;$z$1$ph37$i = $k$3$i;
                                                } else {
                                                    $508 = ($426|0)>(-1);
                                                    $509 = (($506) + 9)|0;
                                                    $510 = $508 ? $506 : $509;
                                                    $511 = (8 - ($510))|0;
                                                    $512 = (3492 + ($511<<2)|0);
                                                    $513 = HEAP32[$512>>2]|0;
                                                    $514 = ($k$3$i|0)==(0);
                                                    if ($514) {
                                                        $a$0$lcssa151$i = 0;$rp$0$lcssa152$i = $426;$z$0$i = 0;
                                                    } else {
                                                        $515 = (1000000000 / ($513|0))&-1;
                                                        $a$085$i = 0;$carry$087$i = 0;$k$486$i = 0;$rp$084$i = $426;
                                                        while(1) {
                                                            $516 = (($x$i) + ($k$486$i<<2)|0);
                                                            $517 = HEAP32[$516>>2]|0;
                                                            $518 = (($517>>>0) % ($513>>>0))&-1;
                                                            $519 = (($517>>>0) / ($513>>>0))&-1;
                                                            $520 = (($519) + ($carry$087$i))|0;
                                                            HEAP32[$516>>2] = $520;
                                                            $521 = Math_imul($518, $515)|0;
                                                            $522 = ($k$486$i|0)==($a$085$i|0);
                                                            $523 = ($520|0)==(0);
                                                            $or$cond16$i = $522 & $523;
                                                            $524 = (($k$486$i) + 1)|0;
                                                            $525 = $524 & 127;
                                                            $526 = (($rp$084$i) + -9)|0;
                                                            $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
                                                            $a$1$i = $or$cond16$i ? $525 : $a$085$i;
                                                            $527 = ($524|0)==($k$3$i|0);
                                                            if ($527) {
                                                                $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
                                                                break;
                                                            } else {
                                                                $a$085$i = $a$1$i;$carry$087$i = $521;$k$486$i = $524;$rp$084$i = $rp$1$i18;
                                                            }
                                                        }
                                                        $528 = ($$lcssa264|0)==(0);
                                                        if ($528) {
                                                            $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
                                                        } else {
                                                            $529 = (($k$3$i) + 1)|0;
                                                            $530 = (($x$i) + ($k$3$i<<2)|0);
                                                            HEAP32[$530>>2] = $$lcssa264;
                                                            $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $529;
                                                        }
                                                    }
                                                    $531 = (9 - ($510))|0;
                                                    $532 = (($531) + ($rp$0$lcssa152$i))|0;
                                                    $a$2$ph38$i = $a$0$lcssa151$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $532;$z$1$ph37$i = $z$0$i;
                                                }
                                                L284: while(1) {
                                                    $533 = ($rp$2$ph36$i|0)<(18);
                                                    $534 = ($rp$2$ph36$i|0)==(18);
                                                    $535 = (($x$i) + ($a$2$ph38$i<<2)|0);
                                                    $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph37$i;
                                                    while(1) {
                                                        if (!($533)) {
                                                            if (!($534)) {
                                                                $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$i;
                                                                break L284;
                                                            }
                                                            $536 = HEAP32[$535>>2]|0;
                                                            $537 = ($536>>>0)<(9007199);
                                                            if (!($537)) {
                                                                $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$i;
                                                                break L284;
                                                            }
                                                        }
                                                        $538 = (($z$1$i) + 127)|0;
                                                        $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
                                                        while(1) {
                                                            $k$5$i = $k$5$in$i & 127;
                                                            $539 = (($x$i) + ($k$5$i<<2)|0);
                                                            $540 = HEAP32[$539>>2]|0;
                                                            $541 = (_bitshift64Shl(($540|0),0,29)|0);
                                                            $542 = tempRet0;
                                                            $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
                                                            $544 = tempRet0;
                                                            $545 = ($544>>>0)>(0);
                                                            $546 = ($543>>>0)>(1000000000);
                                                            $547 = ($544|0)==(0);
                                                            $548 = $547 & $546;
                                                            $549 = $545 | $548;
                                                            if ($549) {
                                                                $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
                                                                $551 = tempRet0;
                                                                $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
                                                                $553 = tempRet0;
                                                                $$sink$off0$i = $552;$carry1$1$i = $550;
                                                            } else {
                                                                $$sink$off0$i = $543;$carry1$1$i = 0;
                                                            }
                                                            HEAP32[$539>>2] = $$sink$off0$i;
                                                            $554 = (($z$2$i) + 127)|0;
                                                            $555 = $554 & 127;
                                                            $556 = ($k$5$i|0)!=($555|0);
                                                            $557 = ($k$5$i|0)==($a$2$ph38$i|0);
                                                            $or$cond17$i = $556 | $557;
                                                            $558 = ($$sink$off0$i|0)==(0);
                                                            $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
                                                            $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
                                                            $559 = (($k$5$i) + -1)|0;
                                                            if ($557) {
                                                                $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
                                                                break;
                                                            } else {
                                                                $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
                                                            }
                                                        }
                                                        $560 = (($e2$0$i19) + -29)|0;
                                                        $561 = ($carry1$1$i$lcssa|0)==(0);
                                                        if ($561) {
                                                            $e2$0$i19 = $560;$z$1$i = $z$3$i$lcssa;
                                                        } else {
                                                            $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
                                                            break;
                                                        }
                                                    }
                                                    $562 = (($rp$2$ph36$i) + 9)|0;
                                                    $563 = (($a$2$ph38$i) + 127)|0;
                                                    $564 = $563 & 127;
                                                    $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
                                                    if ($565) {
                                                        $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
                                                        $567 = $566 & 127;
                                                        $568 = (($x$i) + ($567<<2)|0);
                                                        $569 = HEAP32[$568>>2]|0;
                                                        $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
                                                        $571 = $570 & 127;
                                                        $572 = (($x$i) + ($571<<2)|0);
                                                        $573 = HEAP32[$572>>2]|0;
                                                        $574 = $573 | $569;
                                                        HEAP32[$572>>2] = $574;
                                                        $z$4$i = $567;
                                                    } else {
                                                        $z$4$i = $z$3$i$lcssa$lcssa;
                                                    }
                                                    $575 = (($x$i) + ($564<<2)|0);
                                                    HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
                                                    $a$2$ph38$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph36$i = $562;$z$1$ph37$i = $z$4$i;
                                                }
                                                L302: while(1) {
                                                    $606 = (($z$5$ph$i) + 1)|0;
                                                    $603 = $606 & 127;
                                                    $607 = (($z$5$ph$i) + 127)|0;
                                                    $608 = $607 & 127;
                                                    $609 = (($x$i) + ($608<<2)|0);
                                                    $a$3$ph157$i = $a$3$ph$i;$e2$1$ph156$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
                                                    while(1) {
                                                        $610 = ($rp$3$ph$i|0)==(18);
                                                        $611 = ($rp$3$ph$i|0)>(27);
                                                        $$18$i = $611 ? 9 : 1;
                                                        $$not$i = $610 ^ 1;
                                                        $a$3$i = $a$3$ph157$i;$e2$1$i = $e2$1$ph156$i;
                                                        while(1) {
                                                            $576 = $a$3$i & 127;
                                                            $577 = ($576|0)==($z$5$ph$i|0);
                                                            do {
                                                                if ($577) {
                                                                    label = 219;
                                                                } else {
                                                                    $578 = (($x$i) + ($576<<2)|0);
                                                                    $579 = HEAP32[$578>>2]|0;
                                                                    $580 = ($579>>>0)<(9007199);
                                                                    if ($580) {
                                                                        label = 219;
                                                                        break;
                                                                    }
                                                                    $581 = ($579>>>0)>(9007199);
                                                                    if ($581) {
                                                                        break;
                                                                    }
                                                                    $582 = (($a$3$i) + 1)|0;
                                                                    $583 = $582 & 127;
                                                                    $584 = ($583|0)==($z$5$ph$i|0);
                                                                    if ($584) {
                                                                        label = 219;
                                                                        break;
                                                                    }
                                                                    $690 = (($x$i) + ($583<<2)|0);
                                                                    $691 = HEAP32[$690>>2]|0;
                                                                    $692 = ($691>>>0)<(254740991);
                                                                    if ($692) {
                                                                        label = 219;
                                                                        break;
                                                                    }
                                                                    $693 = ($691>>>0)>(254740991);
                                                                    $brmerge$i28 = $693 | $$not$i;
                                                                    if (!($brmerge$i28)) {
                                                                        $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
                                                                        break L302;
                                                                    }
                                                                }
                                                            } while(0);
                                                            if ((label|0) == 219) {
                                                                label = 0;
                                                                if ($610) {
                                                                    label = 220;
                                                                    break L302;
                                                                }
                                                            }
                                                            $585 = (($e2$1$i) + ($$18$i))|0;
                                                            $586 = ($a$3$i|0)==($z$5$ph$i|0);
                                                            if ($586) {
                                                                $a$3$i = $z$5$ph$i;$e2$1$i = $585;
                                                            } else {
                                                                $$lcssa256 = $585;$a$3$i$lcssa248 = $a$3$i;
                                                                break;
                                                            }
                                                        }
                                                        $587 = 1 << $$18$i;
                                                        $588 = (($587) + -1)|0;
                                                        $589 = 1000000000 >>> $$18$i;
                                                        $a$478$i = $a$3$i$lcssa248;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa248;$rp$477$i = $rp$3$ph$i;
                                                        while(1) {
                                                            $590 = (($x$i) + ($k$679$i<<2)|0);
                                                            $591 = HEAP32[$590>>2]|0;
                                                            $592 = $591 & $588;
                                                            $593 = $591 >>> $$18$i;
                                                            $594 = (($593) + ($carry3$081$i))|0;
                                                            HEAP32[$590>>2] = $594;
                                                            $595 = Math_imul($592, $589)|0;
                                                            $596 = ($k$679$i|0)==($a$478$i|0);
                                                            $597 = ($594|0)==(0);
                                                            $or$cond19$i = $596 & $597;
                                                            $598 = (($k$679$i) + 1)|0;
                                                            $599 = $598 & 127;
                                                            $600 = (($rp$477$i) + -9)|0;
                                                            $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
                                                            $a$5$i = $or$cond19$i ? $599 : $a$478$i;
                                                            $601 = ($599|0)==($z$5$ph$i|0);
                                                            if ($601) {
                                                                $$lcssa257 = $595;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
                                                                break;
                                                            } else {
                                                                $a$478$i = $a$5$i;$carry3$081$i = $595;$k$679$i = $599;$rp$477$i = $rp$5$i;
                                                            }
                                                        }
                                                        $602 = ($$lcssa257|0)==(0);
                                                        if ($602) {
                                                            $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
                                                            continue;
                                                        }
                                                        $604 = ($603|0)==($a$5$i$lcssa|0);
                                                        if (!($604)) {
                                                            $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
                                                            break;
                                                        }
                                                        $612 = HEAP32[$609>>2]|0;
                                                        $613 = $612 | 1;
                                                        HEAP32[$609>>2] = $613;
                                                        $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
                                                    }
                                                    $605 = (($x$i) + ($z$5$ph$i<<2)|0);
                                                    HEAP32[$605>>2] = $$lcssa257$lcssa;
                                                    $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $603;
                                                }
                                                if ((label|0) == 220) {
                                                    if ($577) {
                                                        $614 = (($603) + -1)|0;
                                                        $615 = (($x$i) + ($614<<2)|0);
                                                        HEAP32[$615>>2] = 0;
                                                        $617 = $z$5$ph$i;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $603;
                                                    } else {
                                                        $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
                                                    }
                                                }
                                                $616 = (($x$i) + ($617<<2)|0);
                                                $618 = HEAP32[$616>>2]|0;
                                                $619 = (+($618>>>0));
                                                $620 = (($a$3$i249) + 1)|0;
                                                $621 = $620 & 127;
                                                $622 = ($621|0)==($z$7$i|0);
                                                if ($622) {
                                                    $679 = (($a$3$i249) + 2)|0;
                                                    $680 = $679 & 127;
                                                    $681 = (($680) + -1)|0;
                                                    $682 = (($x$i) + ($681<<2)|0);
                                                    HEAP32[$682>>2] = 0;
                                                    $z$7$1$i = $680;
                                                } else {
                                                    $z$7$1$i = $z$7$i;
                                                }
                                                $683 = $619 * 1.0E+9;
                                                $684 = (($x$i) + ($621<<2)|0);
                                                $685 = HEAP32[$684>>2]|0;
                                                $686 = (+($685>>>0));
                                                $687 = $683 + $686;
                                                $643 = (+($sign$0|0));
                                                $625 = $643 * $687;
                                                $663 = (($e2$1$i246) + 53)|0;
                                                $669 = (($663) - ($emin$0$ph))|0;
                                                $670 = ($669|0)<($bits$0$ph|0);
                                                $688 = ($669|0)<(0);
                                                $$$i = $688 ? 0 : $669;
                                                $denormal$0$i = $670&1;
                                                $$010$i = $670 ? $$$i : $bits$0$ph;
                                                $689 = ($$010$i|0)<(53);
                                                if ($689) {
                                                    $623 = (105 - ($$010$i))|0;
                                                    $624 = (+_scalbn(1.0,$623));
                                                    $626 = (+_copysignl($624,$625));
                                                    $627 = (53 - ($$010$i))|0;
                                                    $628 = (+_scalbn(1.0,$627));
                                                    $629 = (+_fmodl($625,$628));
                                                    $630 = $625 - $629;
                                                    $631 = $626 + $630;
                                                    $bias$0$i25 = $626;$frac$0$i = $629;$y$1$i24 = $631;
                                                } else {
                                                    $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $625;
                                                }
                                                $632 = (($a$3$i249) + 2)|0;
                                                $633 = $632 & 127;
                                                $634 = ($633|0)==($z$7$1$i|0);
                                                do {
                                                    if ($634) {
                                                        $frac$2$i = $frac$0$i;
                                                    } else {
                                                        $635 = (($x$i) + ($633<<2)|0);
                                                        $636 = HEAP32[$635>>2]|0;
                                                        $637 = ($636>>>0)<(500000000);
                                                        do {
                                                            if ($637) {
                                                                $638 = ($636|0)==(0);
                                                                if ($638) {
                                                                    $639 = (($a$3$i249) + 3)|0;
                                                                    $640 = $639 & 127;
                                                                    $641 = ($640|0)==($z$7$1$i|0);
                                                                    if ($641) {
                                                                        $frac$1$i = $frac$0$i;
                                                                        break;
                                                                    }
                                                                }
                                                                $642 = $643 * 0.25;
                                                                $644 = $642 + $frac$0$i;
                                                                $frac$1$i = $644;
                                                            } else {
                                                                $645 = ($636>>>0)>(500000000);
                                                                if ($645) {
                                                                    $646 = $643 * 0.75;
                                                                    $647 = $646 + $frac$0$i;
                                                                    $frac$1$i = $647;
                                                                    break;
                                                                }
                                                                $648 = (($a$3$i249) + 3)|0;
                                                                $649 = $648 & 127;
                                                                $650 = ($649|0)==($z$7$1$i|0);
                                                                if ($650) {
                                                                    $651 = $643 * 0.5;
                                                                    $652 = $651 + $frac$0$i;
                                                                    $frac$1$i = $652;
                                                                    break;
                                                                } else {
                                                                    $653 = $643 * 0.75;
                                                                    $654 = $653 + $frac$0$i;
                                                                    $frac$1$i = $654;
                                                                    break;
                                                                }
                                                            }
                                                        } while(0);
                                                        $655 = (53 - ($$010$i))|0;
                                                        $656 = ($655|0)>(1);
                                                        if (!($656)) {
                                                            $frac$2$i = $frac$1$i;
                                                            break;
                                                        }
                                                        $657 = (+_fmodl($frac$1$i,1.0));
                                                        $658 = $657 != 0.0;
                                                        if ($658) {
                                                            $frac$2$i = $frac$1$i;
                                                            break;
                                                        }
                                                        $659 = $frac$1$i + 1.0;
                                                        $frac$2$i = $659;
                                                    }
                                                } while(0);
                                                $660 = $y$1$i24 + $frac$2$i;
                                                $661 = $660 - $bias$0$i25;
                                                $662 = $663 & 2147483647;
                                                $664 = (-2 - ($sum$i))|0;
                                                $665 = ($662|0)>($664|0);
                                                do {
                                                    if ($665) {
                                                        $666 = (+Math_abs((+$661)));
                                                        $667 = !($666 >= 9007199254740992.0);
                                                        if ($667) {
                                                            $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i246;$y$2$i26 = $661;
                                                        } else {
                                                            $668 = ($$010$i|0)==($669|0);
                                                            $or$cond20$i = $670 & $668;
                                                            $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
                                                            $671 = $661 * 0.5;
                                                            $672 = (($e2$1$i246) + 1)|0;
                                                            $denormal$2$i = $denormal$1$i;$e2$2$i = $672;$y$2$i26 = $671;
                                                        }
                                                        $673 = (($e2$2$i) + 50)|0;
                                                        $674 = ($673|0)>($330|0);
                                                        if (!($674)) {
                                                            $675 = ($denormal$2$i|0)!=(0);
                                                            $676 = $frac$2$i != 0.0;
                                                            $or$cond8$i = $676 & $675;
                                                            if (!($or$cond8$i)) {
                                                                $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
                                                                break;
                                                            }
                                                        }
                                                        $677 = (___errno_location()|0);
                                                        HEAP32[$677>>2] = 34;
                                                        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
                                                    } else {
                                                        $e2$3$i = $e2$1$i246;$y$3$i = $661;
                                                    }
                                                } while(0);
                                                $678 = (+_scalbnl($y$3$i,$e2$3$i));
                                                $$0$i27 = $678;
                                            }
                                        } while(0);
                                        $$0 = $$0$i27;
                                        break L4;
                                        break;
                                    }
                                    default: {
                                        $109 = HEAP32[$1>>2]|0;
                                        $110 = ($109|0)==(0|0);
                                        if (!($110)) {
                                            $111 = HEAP32[$0>>2]|0;
                                            $112 = ((($111)) + -1|0);
                                            HEAP32[$0>>2] = $112;
                                        }
                                        $113 = (___errno_location()|0);
                                        HEAP32[$113>>2] = 22;
                                        ___shlim($f,0);
                                        $$0 = 0.0;
                                        break L4;
                                    }
                                }
                            }
                        }
                    } while(0);
                    if ((label|0) == 23) {
                        $41 = HEAP32[$1>>2]|0;
                        $42 = ($41|0)==(0|0);
                        if (!($42)) {
                            $43 = HEAP32[$0>>2]|0;
                            $44 = ((($43)) + -1|0);
                            HEAP32[$0>>2] = $44;
                        }
                        $45 = ($pok|0)!=(0);
                        $46 = ($i$0$lcssa>>>0)>(3);
                        $or$cond9 = $45 & $46;
                        if ($or$cond9) {
                            $i$1 = $i$0$lcssa;
                            while(1) {
                                if (!($42)) {
                                    $47 = HEAP32[$0>>2]|0;
                                    $48 = ((($47)) + -1|0);
                                    HEAP32[$0>>2] = $48;
                                }
                                $49 = (($i$1) + -1)|0;
                                $$old8 = ($49>>>0)>(3);
                                if ($$old8) {
                                    $i$1 = $49;
                                } else {
                                    break;
                                }
                            }
                        }
                    }
                    $50 = (+($sign$0|0));
                    $51 = $50 * inf;
                    $52 = $51;
                    $$0 = $52;
                }
            } while(0);
            STACKTOP = sp;return (+$$0);
        }
        function ___intscan($f,$base,$pok,$0,$1) {
            $f = $f|0;
            $base = $base|0;
            $pok = $pok|0;
            $0 = $0|0;
            $1 = $1|0;
            var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
            var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
            var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
            var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
            var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
            var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
            var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
            var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
            var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
            var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
            var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
            var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0;
            var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
            var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
            var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
            var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
            var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0;
            var $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $2 = ($base>>>0)>(36);
            L1: do {
                if ($2) {
                    $5 = (___errno_location()|0);
                    HEAP32[$5>>2] = 22;
                    $286 = 0;$287 = 0;
                } else {
                    $3 = ((($f)) + 4|0);
                    $4 = ((($f)) + 100|0);
                    while(1) {
                        $6 = HEAP32[$3>>2]|0;
                        $7 = HEAP32[$4>>2]|0;
                        $8 = ($6>>>0)<($7>>>0);
                        if ($8) {
                            $9 = ((($6)) + 1|0);
                            HEAP32[$3>>2] = $9;
                            $10 = HEAP8[$6>>0]|0;
                            $11 = $10&255;
                            $13 = $11;
                        } else {
                            $12 = (___shgetc($f)|0);
                            $13 = $12;
                        }
                        $14 = (_isspace($13)|0);
                        $15 = ($14|0)==(0);
                        if ($15) {
                            $$lcssa135 = $13;
                            break;
                        }
                    }
                    $16 = ($$lcssa135|0)==(45);
                    L11: do {
                        switch ($$lcssa135|0) {
                            case 43: case 45:  {
                            $17 = $16 << 31 >> 31;
                            $18 = HEAP32[$3>>2]|0;
                            $19 = HEAP32[$4>>2]|0;
                            $20 = ($18>>>0)<($19>>>0);
                            if ($20) {
                                $21 = ((($18)) + 1|0);
                                HEAP32[$3>>2] = $21;
                                $22 = HEAP8[$18>>0]|0;
                                $23 = $22&255;
                                $c$0 = $23;$neg$0 = $17;
                                break L11;
                            } else {
                                $24 = (___shgetc($f)|0);
                                $c$0 = $24;$neg$0 = $17;
                                break L11;
                            }
                            break;
                        }
                            default: {
                                $c$0 = $$lcssa135;$neg$0 = 0;
                            }
                        }
                    } while(0);
                    $25 = ($base|0)==(0);
                    $26 = $base & -17;
                    $27 = ($26|0)==(0);
                    $28 = ($c$0|0)==(48);
                    $or$cond5 = $27 & $28;
                    do {
                        if ($or$cond5) {
                            $29 = HEAP32[$3>>2]|0;
                            $30 = HEAP32[$4>>2]|0;
                            $31 = ($29>>>0)<($30>>>0);
                            if ($31) {
                                $32 = ((($29)) + 1|0);
                                HEAP32[$3>>2] = $32;
                                $33 = HEAP8[$29>>0]|0;
                                $34 = $33&255;
                                $37 = $34;
                            } else {
                                $35 = (___shgetc($f)|0);
                                $37 = $35;
                            }
                            $36 = $37 | 32;
                            $38 = ($36|0)==(120);
                            if (!($38)) {
                                if ($25) {
                                    $$123 = 8;$c$124 = $37;
                                    label = 46;
                                    break;
                                } else {
                                    $$1 = $base;$c$1 = $37;
                                    label = 32;
                                    break;
                                }
                            }
                            $39 = HEAP32[$3>>2]|0;
                            $40 = HEAP32[$4>>2]|0;
                            $41 = ($39>>>0)<($40>>>0);
                            if ($41) {
                                $42 = ((($39)) + 1|0);
                                HEAP32[$3>>2] = $42;
                                $43 = HEAP8[$39>>0]|0;
                                $44 = $43&255;
                                $46 = $44;
                            } else {
                                $45 = (___shgetc($f)|0);
                                $46 = $45;
                            }
                            $$sum20 = (($46) + 1)|0;
                            $47 = (26348 + ($$sum20)|0);
                            $48 = HEAP8[$47>>0]|0;
                            $49 = ($48&255)>(15);
                            if ($49) {
                                $50 = HEAP32[$4>>2]|0;
                                $51 = ($50|0)==(0|0);
                                if (!($51)) {
                                    $52 = HEAP32[$3>>2]|0;
                                    $53 = ((($52)) + -1|0);
                                    HEAP32[$3>>2] = $53;
                                }
                                $54 = ($pok|0)==(0);
                                if ($54) {
                                    ___shlim($f,0);
                                    $286 = 0;$287 = 0;
                                    break L1;
                                }
                                if ($51) {
                                    $286 = 0;$287 = 0;
                                    break L1;
                                }
                                $55 = HEAP32[$3>>2]|0;
                                $56 = ((($55)) + -1|0);
                                HEAP32[$3>>2] = $56;
                                $286 = 0;$287 = 0;
                                break L1;
                            } else {
                                $$123 = 16;$c$124 = $46;
                                label = 46;
                            }
                        } else {
                            $$base21 = $25 ? 10 : $base;
                            $$sum = (($c$0) + 1)|0;
                            $57 = (26348 + ($$sum)|0);
                            $58 = HEAP8[$57>>0]|0;
                            $59 = $58&255;
                            $60 = ($59>>>0)<($$base21>>>0);
                            if ($60) {
                                $$1 = $$base21;$c$1 = $c$0;
                                label = 32;
                            } else {
                                $61 = HEAP32[$4>>2]|0;
                                $62 = ($61|0)==(0|0);
                                if (!($62)) {
                                    $63 = HEAP32[$3>>2]|0;
                                    $64 = ((($63)) + -1|0);
                                    HEAP32[$3>>2] = $64;
                                }
                                ___shlim($f,0);
                                $65 = (___errno_location()|0);
                                HEAP32[$65>>2] = 22;
                                $286 = 0;$287 = 0;
                                break L1;
                            }
                        }
                    } while(0);
                    if ((label|0) == 32) {
                        $66 = ($$1|0)==(10);
                        if ($66) {
                            $67 = (($c$1) + -48)|0;
                            $68 = ($67>>>0)<(10);
                            if ($68) {
                                $71 = $67;$x$082 = 0;
                                while(1) {
                                    $69 = ($x$082*10)|0;
                                    $70 = (($69) + ($71))|0;
                                    $72 = HEAP32[$3>>2]|0;
                                    $73 = HEAP32[$4>>2]|0;
                                    $74 = ($72>>>0)<($73>>>0);
                                    if ($74) {
                                        $75 = ((($72)) + 1|0);
                                        HEAP32[$3>>2] = $75;
                                        $76 = HEAP8[$72>>0]|0;
                                        $77 = $76&255;
                                        $c$2$be = $77;
                                    } else {
                                        $78 = (___shgetc($f)|0);
                                        $c$2$be = $78;
                                    }
                                    $79 = (($c$2$be) + -48)|0;
                                    $80 = ($79>>>0)<(10);
                                    $81 = ($70>>>0)<(429496729);
                                    $82 = $80 & $81;
                                    if ($82) {
                                        $71 = $79;$x$082 = $70;
                                    } else {
                                        $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
                                        break;
                                    }
                                }
                                $288 = $$lcssa134;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
                            } else {
                                $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
                            }
                            $83 = (($c$2$lcssa) + -48)|0;
                            $84 = ($83>>>0)<(10);
                            if ($84) {
                                $85 = $288;$86 = $289;$89 = $83;$c$371 = $c$2$lcssa;
                                while(1) {
                                    $87 = (___muldi3(($85|0),($86|0),10,0)|0);
                                    $88 = tempRet0;
                                    $90 = ($89|0)<(0);
                                    $91 = $90 << 31 >> 31;
                                    $92 = $89 ^ -1;
                                    $93 = $91 ^ -1;
                                    $94 = ($88>>>0)>($93>>>0);
                                    $95 = ($87>>>0)>($92>>>0);
                                    $96 = ($88|0)==($93|0);
                                    $97 = $96 & $95;
                                    $98 = $94 | $97;
                                    if ($98) {
                                        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$371;
                                        break;
                                    }
                                    $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
                                    $100 = tempRet0;
                                    $101 = HEAP32[$3>>2]|0;
                                    $102 = HEAP32[$4>>2]|0;
                                    $103 = ($101>>>0)<($102>>>0);
                                    if ($103) {
                                        $104 = ((($101)) + 1|0);
                                        HEAP32[$3>>2] = $104;
                                        $105 = HEAP8[$101>>0]|0;
                                        $106 = $105&255;
                                        $c$3$be = $106;
                                    } else {
                                        $107 = (___shgetc($f)|0);
                                        $c$3$be = $107;
                                    }
                                    $108 = (($c$3$be) + -48)|0;
                                    $109 = ($108>>>0)<(10);
                                    $110 = ($100>>>0)<(429496729);
                                    $111 = ($99>>>0)<(2576980378);
                                    $112 = ($100|0)==(429496729);
                                    $113 = $112 & $111;
                                    $114 = $110 | $113;
                                    $or$cond7 = $109 & $114;
                                    if ($or$cond7) {
                                        $85 = $99;$86 = $100;$89 = $108;$c$371 = $c$3$be;
                                    } else {
                                        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
                                        break;
                                    }
                                }
                                $115 = ($$lcssa>>>0)>(9);
                                if ($115) {
                                    $259 = $291;$261 = $290;$neg$1 = $neg$0;
                                } else {
                                    $$122 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
                                    label = 72;
                                }
                            } else {
                                $259 = $289;$261 = $288;$neg$1 = $neg$0;
                            }
                        } else {
                            $$123 = $$1;$c$124 = $c$1;
                            label = 46;
                        }
                    }
                    L63: do {
                        if ((label|0) == 46) {
                            $116 = (($$123) + -1)|0;
                            $117 = $116 & $$123;
                            $118 = ($117|0)==(0);
                            if ($118) {
                                $123 = ($$123*23)|0;
                                $124 = $123 >>> 5;
                                $125 = $124 & 7;
                                $126 = (26605 + ($125)|0);
                                $127 = HEAP8[$126>>0]|0;
                                $128 = $127 << 24 >> 24;
                                $$sum1445 = (($c$124) + 1)|0;
                                $129 = (26348 + ($$sum1445)|0);
                                $130 = HEAP8[$129>>0]|0;
                                $131 = $130&255;
                                $132 = ($131>>>0)<($$123>>>0);
                                if ($132) {
                                    $135 = $131;$x$146 = 0;
                                    while(1) {
                                        $133 = $x$146 << $128;
                                        $134 = $135 | $133;
                                        $136 = HEAP32[$3>>2]|0;
                                        $137 = HEAP32[$4>>2]|0;
                                        $138 = ($136>>>0)<($137>>>0);
                                        if ($138) {
                                            $139 = ((($136)) + 1|0);
                                            HEAP32[$3>>2] = $139;
                                            $140 = HEAP8[$136>>0]|0;
                                            $141 = $140&255;
                                            $c$4$be = $141;
                                        } else {
                                            $142 = (___shgetc($f)|0);
                                            $c$4$be = $142;
                                        }
                                        $$sum14 = (($c$4$be) + 1)|0;
                                        $143 = (26348 + ($$sum14)|0);
                                        $144 = HEAP8[$143>>0]|0;
                                        $145 = $144&255;
                                        $146 = ($145>>>0)<($$123>>>0);
                                        $147 = ($134>>>0)<(134217728);
                                        $148 = $147 & $146;
                                        if ($148) {
                                            $135 = $145;$x$146 = $134;
                                        } else {
                                            $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
                                            break;
                                        }
                                    }
                                    $152 = $$lcssa131;$154 = 0;$156 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
                                } else {
                                    $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$124;
                                }
                                $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
                                $150 = tempRet0;
                                $151 = $152&255;
                                $153 = ($151>>>0)>=($$123>>>0);
                                $155 = ($154>>>0)>($150>>>0);
                                $157 = ($156>>>0)>($149>>>0);
                                $158 = ($154|0)==($150|0);
                                $159 = $158 & $157;
                                $160 = $155 | $159;
                                $or$cond40 = $153 | $160;
                                if ($or$cond40) {
                                    $$122 = $$123;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
                                    label = 72;
                                    break;
                                } else {
                                    $161 = $156;$162 = $154;$166 = $152;
                                }
                                while(1) {
                                    $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
                                    $164 = tempRet0;
                                    $165 = $166&255;
                                    $167 = $165 | $163;
                                    $168 = HEAP32[$3>>2]|0;
                                    $169 = HEAP32[$4>>2]|0;
                                    $170 = ($168>>>0)<($169>>>0);
                                    if ($170) {
                                        $171 = ((($168)) + 1|0);
                                        HEAP32[$3>>2] = $171;
                                        $172 = HEAP8[$168>>0]|0;
                                        $173 = $172&255;
                                        $c$5$be = $173;
                                    } else {
                                        $174 = (___shgetc($f)|0);
                                        $c$5$be = $174;
                                    }
                                    $$sum15 = (($c$5$be) + 1)|0;
                                    $175 = (26348 + ($$sum15)|0);
                                    $176 = HEAP8[$175>>0]|0;
                                    $177 = $176&255;
                                    $178 = ($177>>>0)>=($$123>>>0);
                                    $179 = ($164>>>0)>($150>>>0);
                                    $180 = ($167>>>0)>($149>>>0);
                                    $181 = ($164|0)==($150|0);
                                    $182 = $181 & $180;
                                    $183 = $179 | $182;
                                    $or$cond = $178 | $183;
                                    if ($or$cond) {
                                        $$122 = $$123;$292 = $167;$293 = $164;$c$8 = $c$5$be;
                                        label = 72;
                                        break L63;
                                    } else {
                                        $161 = $167;$162 = $164;$166 = $176;
                                    }
                                }
                            }
                            $$sum1865 = (($c$124) + 1)|0;
                            $119 = (26348 + ($$sum1865)|0);
                            $120 = HEAP8[$119>>0]|0;
                            $121 = $120&255;
                            $122 = ($121>>>0)<($$123>>>0);
                            if ($122) {
                                $186 = $121;$x$266 = 0;
                                while(1) {
                                    $184 = Math_imul($x$266, $$123)|0;
                                    $185 = (($186) + ($184))|0;
                                    $187 = HEAP32[$3>>2]|0;
                                    $188 = HEAP32[$4>>2]|0;
                                    $189 = ($187>>>0)<($188>>>0);
                                    if ($189) {
                                        $190 = ((($187)) + 1|0);
                                        HEAP32[$3>>2] = $190;
                                        $191 = HEAP8[$187>>0]|0;
                                        $192 = $191&255;
                                        $c$6$be = $192;
                                    } else {
                                        $193 = (___shgetc($f)|0);
                                        $c$6$be = $193;
                                    }
                                    $$sum18 = (($c$6$be) + 1)|0;
                                    $194 = (26348 + ($$sum18)|0);
                                    $195 = HEAP8[$194>>0]|0;
                                    $196 = $195&255;
                                    $197 = ($196>>>0)<($$123>>>0);
                                    $198 = ($185>>>0)<(119304647);
                                    $199 = $198 & $197;
                                    if ($199) {
                                        $186 = $196;$x$266 = $185;
                                    } else {
                                        $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
                                        break;
                                    }
                                }
                                $201 = $$lcssa133;$294 = $$lcssa132;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
                            } else {
                                $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$124;
                            }
                            $200 = $201&255;
                            $202 = ($200>>>0)<($$123>>>0);
                            if ($202) {
                                $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
                                $204 = tempRet0;
                                $205 = $295;$207 = $294;$215 = $201;$c$753 = $c$6$lcssa;
                                while(1) {
                                    $206 = ($205>>>0)>($204>>>0);
                                    $208 = ($207>>>0)>($203>>>0);
                                    $209 = ($205|0)==($204|0);
                                    $210 = $209 & $208;
                                    $211 = $206 | $210;
                                    if ($211) {
                                        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
                                        label = 72;
                                        break L63;
                                    }
                                    $212 = (___muldi3(($207|0),($205|0),($$123|0),0)|0);
                                    $213 = tempRet0;
                                    $214 = $215&255;
                                    $216 = $214 ^ -1;
                                    $217 = ($213>>>0)>(4294967295);
                                    $218 = ($212>>>0)>($216>>>0);
                                    $219 = ($213|0)==(-1);
                                    $220 = $219 & $218;
                                    $221 = $217 | $220;
                                    if ($221) {
                                        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
                                        label = 72;
                                        break L63;
                                    }
                                    $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
                                    $223 = tempRet0;
                                    $224 = HEAP32[$3>>2]|0;
                                    $225 = HEAP32[$4>>2]|0;
                                    $226 = ($224>>>0)<($225>>>0);
                                    if ($226) {
                                        $227 = ((($224)) + 1|0);
                                        HEAP32[$3>>2] = $227;
                                        $228 = HEAP8[$224>>0]|0;
                                        $229 = $228&255;
                                        $c$7$be = $229;
                                    } else {
                                        $230 = (___shgetc($f)|0);
                                        $c$7$be = $230;
                                    }
                                    $$sum19 = (($c$7$be) + 1)|0;
                                    $231 = (26348 + ($$sum19)|0);
                                    $232 = HEAP8[$231>>0]|0;
                                    $233 = $232&255;
                                    $234 = ($233>>>0)<($$123>>>0);
                                    if ($234) {
                                        $205 = $223;$207 = $222;$215 = $232;$c$753 = $c$7$be;
                                    } else {
                                        $$122 = $$123;$292 = $222;$293 = $223;$c$8 = $c$7$be;
                                        label = 72;
                                        break;
                                    }
                                }
                            } else {
                                $$122 = $$123;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
                                label = 72;
                            }
                        }
                    } while(0);
                    if ((label|0) == 72) {
                        $$sum16 = (($c$8) + 1)|0;
                        $235 = (26348 + ($$sum16)|0);
                        $236 = HEAP8[$235>>0]|0;
                        $237 = $236&255;
                        $238 = ($237>>>0)<($$122>>>0);
                        if ($238) {
                            while(1) {
                                $239 = HEAP32[$3>>2]|0;
                                $240 = HEAP32[$4>>2]|0;
                                $241 = ($239>>>0)<($240>>>0);
                                if ($241) {
                                    $242 = ((($239)) + 1|0);
                                    HEAP32[$3>>2] = $242;
                                    $243 = HEAP8[$239>>0]|0;
                                    $244 = $243&255;
                                    $c$9$be = $244;
                                } else {
                                    $245 = (___shgetc($f)|0);
                                    $c$9$be = $245;
                                }
                                $$sum17 = (($c$9$be) + 1)|0;
                                $246 = (26348 + ($$sum17)|0);
                                $247 = HEAP8[$246>>0]|0;
                                $248 = $247&255;
                                $249 = ($248>>>0)<($$122>>>0);
                                if (!($249)) {
                                    break;
                                }
                            }
                            $250 = (___errno_location()|0);
                            HEAP32[$250>>2] = 34;
                            $251 = $0 & 1;
                            $252 = ($251|0)==(0);
                            $253 = (0)==(0);
                            $254 = $252 & $253;
                            $neg$0$ = $254 ? $neg$0 : 0;
                            $259 = $1;$261 = $0;$neg$1 = $neg$0$;
                        } else {
                            $259 = $293;$261 = $292;$neg$1 = $neg$0;
                        }
                    }
                    $255 = HEAP32[$4>>2]|0;
                    $256 = ($255|0)==(0|0);
                    if (!($256)) {
                        $257 = HEAP32[$3>>2]|0;
                        $258 = ((($257)) + -1|0);
                        HEAP32[$3>>2] = $258;
                    }
                    $260 = ($259>>>0)<($1>>>0);
                    $262 = ($261>>>0)<($0>>>0);
                    $263 = ($259|0)==($1|0);
                    $264 = $263 & $262;
                    $265 = $260 | $264;
                    if (!($265)) {
                        $266 = $0 & 1;
                        $267 = ($266|0)!=(0);
                        $268 = (0)!=(0);
                        $269 = $267 | $268;
                        $270 = ($neg$1|0)!=(0);
                        $or$cond12 = $269 | $270;
                        if (!($or$cond12)) {
                            $271 = (___errno_location()|0);
                            HEAP32[$271>>2] = 34;
                            $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
                            $273 = tempRet0;
                            $286 = $273;$287 = $272;
                            break;
                        }
                        $274 = ($259>>>0)>($1>>>0);
                        $275 = ($261>>>0)>($0>>>0);
                        $276 = ($259|0)==($1|0);
                        $277 = $276 & $275;
                        $278 = $274 | $277;
                        if ($278) {
                            $279 = (___errno_location()|0);
                            HEAP32[$279>>2] = 34;
                            $286 = $1;$287 = $0;
                            break;
                        }
                    }
                    $280 = ($neg$1|0)<(0);
                    $281 = $280 << 31 >> 31;
                    $282 = $261 ^ $neg$1;
                    $283 = $259 ^ $281;
                    $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
                    $285 = tempRet0;
                    $286 = $285;$287 = $284;
                }
            } while(0);
            tempRet0 = ($286);
            return ($287|0);
        }
        function ___shlim($f,$lim) {
            $f = $f|0;
            $lim = $lim|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 104|0);
            HEAP32[$0>>2] = $lim;
            $1 = ((($f)) + 8|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ((($f)) + 4|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = $2;
            $6 = $4;
            $7 = (($5) - ($6))|0;
            $8 = ((($f)) + 108|0);
            HEAP32[$8>>2] = $7;
            $9 = ($lim|0)!=(0);
            $10 = ($7|0)>($lim|0);
            $or$cond = $9 & $10;
            if ($or$cond) {
                $11 = (($4) + ($lim)|0);
                $12 = ((($f)) + 100|0);
                HEAP32[$12>>2] = $11;
            } else {
                $13 = ((($f)) + 100|0);
                HEAP32[$13>>2] = $5;
            }
            return;
        }
        function ___shgetc($f) {
            $f = $f|0;
            var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
            var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
            var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 104|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0);
            if ($2) {
                label = 3;
            } else {
                $3 = ((($f)) + 108|0);
                $4 = HEAP32[$3>>2]|0;
                $5 = ($4|0)<($1|0);
                if ($5) {
                    label = 3;
                } else {
                    label = 4;
                }
            }
            if ((label|0) == 3) {
                $6 = (___uflow($f)|0);
                $7 = ($6|0)<(0);
                if ($7) {
                    label = 4;
                } else {
                    $9 = HEAP32[$0>>2]|0;
                    $10 = ($9|0)==(0);
                    $$phi$trans$insert = ((($f)) + 8|0);
                    if ($10) {
                        $$pre = HEAP32[$$phi$trans$insert>>2]|0;
                        $11 = $$pre;
                        $26 = $$pre;$41 = $11;
                        label = 9;
                    } else {
                        $12 = HEAP32[$$phi$trans$insert>>2]|0;
                        $13 = ((($f)) + 4|0);
                        $14 = HEAP32[$13>>2]|0;
                        $15 = $12;
                        $16 = $14;
                        $17 = (($15) - ($16))|0;
                        $18 = ((($f)) + 108|0);
                        $19 = HEAP32[$18>>2]|0;
                        $20 = (($9) - ($19))|0;
                        $21 = (($20) + -1)|0;
                        $22 = ($17|0)>($21|0);
                        if ($22) {
                            $23 = (($14) + ($21)|0);
                            $24 = ((($f)) + 100|0);
                            HEAP32[$24>>2] = $23;
                            $27 = $12;
                        } else {
                            $26 = $15;$41 = $12;
                            label = 9;
                        }
                    }
                    if ((label|0) == 9) {
                        $25 = ((($f)) + 100|0);
                        HEAP32[$25>>2] = $26;
                        $27 = $41;
                    }
                    $28 = ($27|0)==(0|0);
                    $$phi$trans$insert3 = ((($f)) + 4|0);
                    $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
                    if (!($28)) {
                        $29 = $27;
                        $30 = $$pre4;
                        $31 = ((($f)) + 108|0);
                        $32 = HEAP32[$31>>2]|0;
                        $33 = (($29) + 1)|0;
                        $34 = (($33) - ($30))|0;
                        $35 = (($34) + ($32))|0;
                        HEAP32[$31>>2] = $35;
                    }
                    $36 = ((($$pre4)) + -1|0);
                    $37 = HEAP8[$36>>0]|0;
                    $38 = $37&255;
                    $39 = ($38|0)==($6|0);
                    if ($39) {
                        $$0 = $6;
                    } else {
                        $40 = $6&255;
                        HEAP8[$36>>0] = $40;
                        $$0 = $6;
                    }
                }
            }
            if ((label|0) == 4) {
                $8 = ((($f)) + 100|0);
                HEAP32[$8>>2] = 0;
                $$0 = -1;
            }
            return ($$0|0);
        }
        function ___syscall_ret($r) {
            $r = $r|0;
            var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($r>>>0)>(4294963200);
            if ($0) {
                $1 = (0 - ($r))|0;
                $2 = (___errno_location()|0);
                HEAP32[$2>>2] = $1;
                $$0 = -1;
            } else {
                $$0 = $r;
            }
            return ($$0|0);
        }
        function _copysign($x,$y) {
            $x = +$x;
            $y = +$y;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
            $1 = HEAP32[tempDoublePtr+4>>2]|0;
            HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
            $3 = HEAP32[tempDoublePtr+4>>2]|0;
            $4 = $1 & 2147483647;
            $5 = $3 & -2147483648;
            $6 = $5 | $4;
            HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
            return (+$7);
        }
        function _copysignl($x,$y) {
            $x = +$x;
            $y = +$y;
            var $0 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+_copysign($x,$y));
            return (+$0);
        }
        function _fmod($x,$y) {
            $x = +$x;
            $y = +$y;
            var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
            var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
            var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
            var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
            var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
            var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
            sp = STACKTOP;
            HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
            $1 = HEAP32[tempDoublePtr+4>>2]|0;
            HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
            $3 = HEAP32[tempDoublePtr+4>>2]|0;
            $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
            $5 = tempRet0;
            $6 = $4 & 2047;
            $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
            $8 = tempRet0;
            $9 = $7 & 2047;
            $10 = $1 & -2147483648;
            $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
            $12 = tempRet0;
            $13 = ($11|0)==(0);
            $14 = ($12|0)==(0);
            $15 = $13 & $14;
            L1: do {
                if ($15) {
                    label = 3;
                } else {
                    $16 = $3 & 2147483647;
                    $17 = ($16>>>0)>(2146435072);
                    $18 = ($2>>>0)>(0);
                    $19 = ($16|0)==(2146435072);
                    $20 = $19 & $18;
                    $21 = $17 | $20;
                    $22 = ($6|0)==(2047);
                    $or$cond = $21 | $22;
                    if ($or$cond) {
                        label = 3;
                    } else {
                        $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
                        $26 = tempRet0;
                        $27 = ($26>>>0)>($12>>>0);
                        $28 = ($25>>>0)>($11>>>0);
                        $29 = ($26|0)==($12|0);
                        $30 = $29 & $28;
                        $31 = $27 | $30;
                        if (!($31)) {
                            $32 = ($25|0)==($11|0);
                            $33 = ($26|0)==($12|0);
                            $34 = $32 & $33;
                            $35 = $x * 0.0;
                            $$x = $34 ? $35 : $x;
                            return (+$$x);
                        }
                        $36 = ($6|0)==(0);
                        if ($36) {
                            $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
                            $38 = tempRet0;
                            $39 = ($38|0)>(-1);
                            $40 = ($37>>>0)>(4294967295);
                            $41 = ($38|0)==(-1);
                            $42 = $41 & $40;
                            $43 = $39 | $42;
                            if ($43) {
                                $45 = $37;$46 = $38;$ex$026 = 0;
                                while(1) {
                                    $44 = (($ex$026) + -1)|0;
                                    $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
                                    $48 = tempRet0;
                                    $49 = ($48|0)>(-1);
                                    $50 = ($47>>>0)>(4294967295);
                                    $51 = ($48|0)==(-1);
                                    $52 = $51 & $50;
                                    $53 = $49 | $52;
                                    if ($53) {
                                        $45 = $47;$46 = $48;$ex$026 = $44;
                                    } else {
                                        $ex$0$lcssa = $44;
                                        break;
                                    }
                                }
                            } else {
                                $ex$0$lcssa = 0;
                            }
                            $54 = (1 - ($ex$0$lcssa))|0;
                            $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
                            $56 = tempRet0;
                            $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
                        } else {
                            $57 = $1 & 1048575;
                            $58 = $57 | 1048576;
                            $83 = $0;$84 = $58;$ex$1 = $6;
                        }
                        $59 = ($9|0)==(0);
                        if ($59) {
                            $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
                            $61 = tempRet0;
                            $62 = ($61|0)>(-1);
                            $63 = ($60>>>0)>(4294967295);
                            $64 = ($61|0)==(-1);
                            $65 = $64 & $63;
                            $66 = $62 | $65;
                            if ($66) {
                                $68 = $60;$69 = $61;$ey$020 = 0;
                                while(1) {
                                    $67 = (($ey$020) + -1)|0;
                                    $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
                                    $71 = tempRet0;
                                    $72 = ($71|0)>(-1);
                                    $73 = ($70>>>0)>(4294967295);
                                    $74 = ($71|0)==(-1);
                                    $75 = $74 & $73;
                                    $76 = $72 | $75;
                                    if ($76) {
                                        $68 = $70;$69 = $71;$ey$020 = $67;
                                    } else {
                                        $ey$0$lcssa = $67;
                                        break;
                                    }
                                }
                            } else {
                                $ey$0$lcssa = 0;
                            }
                            $77 = (1 - ($ey$0$lcssa))|0;
                            $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
                            $79 = tempRet0;
                            $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
                        } else {
                            $80 = $3 & 1048575;
                            $81 = $80 | 1048576;
                            $85 = $2;$86 = $81;$ey$1$ph = $9;
                        }
                        $82 = ($ex$1|0)>($ey$1$ph|0);
                        $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
                        $88 = tempRet0;
                        $89 = ($88|0)>(-1);
                        $90 = ($87>>>0)>(4294967295);
                        $91 = ($88|0)==(-1);
                        $92 = $91 & $90;
                        $93 = $89 | $92;
                        L23: do {
                            if ($82) {
                                $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
                                while(1) {
                                    if ($152) {
                                        $95 = ($94|0)==($85|0);
                                        $97 = ($96|0)==($86|0);
                                        $98 = $95 & $97;
                                        if ($98) {
                                            break;
                                        } else {
                                            $100 = $153;$101 = $154;
                                        }
                                    } else {
                                        $100 = $94;$101 = $96;
                                    }
                                    $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
                                    $103 = tempRet0;
                                    $104 = (($ex$212) + -1)|0;
                                    $105 = ($104|0)>($ey$1$ph|0);
                                    $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
                                    $107 = tempRet0;
                                    $108 = ($107|0)>(-1);
                                    $109 = ($106>>>0)>(4294967295);
                                    $110 = ($107|0)==(-1);
                                    $111 = $110 & $109;
                                    $112 = $108 | $111;
                                    if ($105) {
                                        $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
                                    } else {
                                        $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
                                        break L23;
                                    }
                                }
                                $99 = $x * 0.0;
                                $$0 = $99;
                                break L1;
                            } else {
                                $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
                            }
                        } while(0);
                        if ($$lcssa7) {
                            $114 = ($113|0)==($85|0);
                            $116 = ($115|0)==($86|0);
                            $117 = $114 & $116;
                            if ($117) {
                                $125 = $x * 0.0;
                                $$0 = $125;
                                break;
                            } else {
                                $118 = $156;$120 = $155;
                            }
                        } else {
                            $118 = $115;$120 = $113;
                        }
                        $119 = ($118>>>0)<(1048576);
                        $121 = ($120>>>0)<(0);
                        $122 = ($118|0)==(1048576);
                        $123 = $122 & $121;
                        $124 = $119 | $123;
                        if ($124) {
                            $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
                            while(1) {
                                $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
                                $129 = tempRet0;
                                $130 = (($ex$39) + -1)|0;
                                $131 = ($129>>>0)<(1048576);
                                $132 = ($128>>>0)<(0);
                                $133 = ($129|0)==(1048576);
                                $134 = $133 & $132;
                                $135 = $131 | $134;
                                if ($135) {
                                    $126 = $128;$127 = $129;$ex$39 = $130;
                                } else {
                                    $137 = $128;$138 = $129;$ex$3$lcssa = $130;
                                    break;
                                }
                            }
                        } else {
                            $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
                        }
                        $136 = ($ex$3$lcssa|0)>(0);
                        if ($136) {
                            $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
                            $140 = tempRet0;
                            $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
                            $142 = tempRet0;
                            $143 = $139 | $141;
                            $144 = $140 | $142;
                            $149 = $144;$151 = $143;
                        } else {
                            $145 = (1 - ($ex$3$lcssa))|0;
                            $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
                            $147 = tempRet0;
                            $149 = $147;$151 = $146;
                        }
                        $148 = $149 | $10;
                        HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
                        $$0 = $150;
                    }
                }
            } while(0);
            if ((label|0) == 3) {
                $23 = $x * $y;
                $24 = $23 / $23;
                $$0 = $24;
            }
            return (+$$0);
        }
        function _fmodl($x,$y) {
            $x = +$x;
            $y = +$y;
            var $0 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+_fmod($x,$y));
            return (+$0);
        }
        function _frexp($x,$e) {
            $x = +$x;
            $e = $e|0;
            var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
            sp = STACKTOP;
            HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
            $1 = HEAP32[tempDoublePtr+4>>2]|0;
            $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
            $3 = tempRet0;
            $4 = $2 & 2047;
            switch ($4|0) {
                case 0:  {
                    $5 = $x != 0.0;
                    if ($5) {
                        $6 = $x * 1.8446744073709552E+19;
                        $7 = (+_frexp($6,$e));
                        $8 = HEAP32[$e>>2]|0;
                        $9 = (($8) + -64)|0;
                        $$01 = $7;$storemerge = $9;
                    } else {
                        $$01 = $x;$storemerge = 0;
                    }
                    HEAP32[$e>>2] = $storemerge;
                    $$0 = $$01;
                    break;
                }
                case 2047:  {
                    $$0 = $x;
                    break;
                }
                default: {
                    $10 = (($4) + -1022)|0;
                    HEAP32[$e>>2] = $10;
                    $11 = $1 & -2146435073;
                    $12 = $11 | 1071644672;
                    HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
                    $$0 = $13;
                }
            }
            return (+$$0);
        }
        function _frexpl($x,$e) {
            $x = +$x;
            $e = $e|0;
            var $0 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+_frexp($x,$e));
            return (+$0);
        }
        function _scalbn($x,$n) {
            $x = +$x;
            $n = $n|0;
            var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
            var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($n|0)>(1023);
            if ($0) {
                $1 = $x * 8.9884656743115795E+307;
                $2 = (($n) + -1023)|0;
                $3 = ($2|0)>(1023);
                if ($3) {
                    $4 = $1 * 8.9884656743115795E+307;
                    $5 = (($n) + -2046)|0;
                    $6 = ($5|0)>(1023);
                    $$ = $6 ? 1023 : $5;
                    $$0 = $$;$y$0 = $4;
                } else {
                    $$0 = $2;$y$0 = $1;
                }
            } else {
                $7 = ($n|0)<(-1022);
                if ($7) {
                    $8 = $x * 2.2250738585072014E-308;
                    $9 = (($n) + 1022)|0;
                    $10 = ($9|0)<(-1022);
                    if ($10) {
                        $11 = $8 * 2.2250738585072014E-308;
                        $12 = (($n) + 2044)|0;
                        $13 = ($12|0)<(-1022);
                        $$1 = $13 ? -1022 : $12;
                        $$0 = $$1;$y$0 = $11;
                    } else {
                        $$0 = $9;$y$0 = $8;
                    }
                } else {
                    $$0 = $n;$y$0 = $x;
                }
            }
            $14 = (($$0) + 1023)|0;
            $15 = (_bitshift64Shl(($14|0),0,52)|0);
            $16 = tempRet0;
            HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
            $18 = $y$0 * $17;
            return (+$18);
        }
        function _scalbnl($x,$n) {
            $x = +$x;
            $n = $n|0;
            var $0 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+_scalbn($x,$n));
            return (+$0);
        }
        function _mbrtowc($wc,$src,$n,$st) {
            $wc = $wc|0;
            $src = $src|0;
            $n = $n|0;
            $st = $st|0;
            var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
            var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
            var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $dummy = sp;
            $0 = ($st|0)==(0|0);
            $$st = $0 ? 3524 : $st;
            $1 = HEAP32[$$st>>2]|0;
            $2 = ($src|0)==(0|0);
            L1: do {
                if ($2) {
                    $3 = ($1|0)==(0);
                    if ($3) {
                        $$0 = 0;
                    } else {
                        label = 15;
                    }
                } else {
                    $4 = ($wc|0)==(0|0);
                    $dummy$wc = $4 ? $dummy : $wc;
                    $5 = ($n|0)==(0);
                    if ($5) {
                        $$0 = -2;
                    } else {
                        $6 = ($1|0)==(0);
                        if ($6) {
                            $7 = HEAP8[$src>>0]|0;
                            $8 = $7&255;
                            $9 = ($7<<24>>24)>(-1);
                            if ($9) {
                                HEAP32[$dummy$wc>>2] = $8;
                                $10 = ($7<<24>>24)!=(0);
                                $11 = $10&1;
                                $$0 = $11;
                                break;
                            }
                            $12 = (($8) + -194)|0;
                            $13 = ($12>>>0)>(50);
                            if ($13) {
                                label = 15;
                                break;
                            }
                            $14 = ((($src)) + 1|0);
                            $15 = (3268 + ($12<<2)|0);
                            $16 = HEAP32[$15>>2]|0;
                            $17 = (($n) + -1)|0;
                            $18 = ($17|0)==(0);
                            if ($18) {
                                $c$2 = $16;
                            } else {
                                $$024 = $17;$c$05 = $16;$s$06 = $14;
                                label = 9;
                            }
                        } else {
                            $$024 = $n;$c$05 = $1;$s$06 = $src;
                            label = 9;
                        }
                        L11: do {
                            if ((label|0) == 9) {
                                $19 = HEAP8[$s$06>>0]|0;
                                $20 = $19&255;
                                $21 = $20 >>> 3;
                                $22 = (($21) + -16)|0;
                                $23 = $c$05 >> 26;
                                $24 = (($21) + ($23))|0;
                                $25 = $22 | $24;
                                $26 = ($25>>>0)>(7);
                                if ($26) {
                                    label = 15;
                                    break L1;
                                } else {
                                    $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
                                }
                                while(1) {
                                    $27 = $c$1 << 6;
                                    $28 = ((($s$1)) + 1|0);
                                    $29 = $30&255;
                                    $31 = (($29) + -128)|0;
                                    $32 = $31 | $27;
                                    $33 = (($$1) + -1)|0;
                                    $34 = ($32|0)<(0);
                                    if (!($34)) {
                                        $$lcssa = $32;$$lcssa35 = $33;
                                        break;
                                    }
                                    $36 = ($33|0)==(0);
                                    if ($36) {
                                        $c$2 = $32;
                                        break L11;
                                    }
                                    $37 = HEAP8[$28>>0]|0;
                                    $38 = $37 & -64;
                                    $39 = ($38<<24>>24)==(-128);
                                    if ($39) {
                                        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
                                    } else {
                                        label = 15;
                                        break L1;
                                    }
                                }
                                HEAP32[$$st>>2] = 0;
                                HEAP32[$dummy$wc>>2] = $$lcssa;
                                $35 = (($n) - ($$lcssa35))|0;
                                $$0 = $35;
                                break L1;
                            }
                        } while(0);
                        HEAP32[$$st>>2] = $c$2;
                        $$0 = -2;
                    }
                }
            } while(0);
            if ((label|0) == 15) {
                HEAP32[$$st>>2] = 0;
                $40 = (___errno_location()|0);
                HEAP32[$40>>2] = 84;
                $$0 = -1;
            }
            STACKTOP = sp;return ($$0|0);
        }
        function _mbsinit($st) {
            $st = $st|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($st|0)==(0|0);
            if ($0) {
                $4 = 1;
            } else {
                $1 = HEAP32[$st>>2]|0;
                $2 = ($1|0)==(0);
                $4 = $2;
            }
            $3 = $4&1;
            return ($3|0);
        }
        function _wcrtomb($s,$wc,$st) {
            $s = $s|0;
            $wc = $wc|0;
            $st = $st|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($s|0)==(0|0);
            do {
                if ($0) {
                    $$0 = 1;
                } else {
                    $1 = ($wc>>>0)<(128);
                    if ($1) {
                        $2 = $wc&255;
                        HEAP8[$s>>0] = $2;
                        $$0 = 1;
                        break;
                    }
                    $3 = ($wc>>>0)<(2048);
                    if ($3) {
                        $4 = $wc >>> 6;
                        $5 = $4 | 192;
                        $6 = $5&255;
                        $7 = ((($s)) + 1|0);
                        HEAP8[$s>>0] = $6;
                        $8 = $wc & 63;
                        $9 = $8 | 128;
                        $10 = $9&255;
                        HEAP8[$7>>0] = $10;
                        $$0 = 2;
                        break;
                    }
                    $11 = ($wc>>>0)<(55296);
                    $12 = $wc & -8192;
                    $13 = ($12|0)==(57344);
                    $or$cond = $11 | $13;
                    if ($or$cond) {
                        $14 = $wc >>> 12;
                        $15 = $14 | 224;
                        $16 = $15&255;
                        $17 = ((($s)) + 1|0);
                        HEAP8[$s>>0] = $16;
                        $18 = $wc >>> 6;
                        $19 = $18 & 63;
                        $20 = $19 | 128;
                        $21 = $20&255;
                        $22 = ((($s)) + 2|0);
                        HEAP8[$17>>0] = $21;
                        $23 = $wc & 63;
                        $24 = $23 | 128;
                        $25 = $24&255;
                        HEAP8[$22>>0] = $25;
                        $$0 = 3;
                        break;
                    }
                    $26 = (($wc) + -65536)|0;
                    $27 = ($26>>>0)<(1048576);
                    if ($27) {
                        $28 = $wc >>> 18;
                        $29 = $28 | 240;
                        $30 = $29&255;
                        $31 = ((($s)) + 1|0);
                        HEAP8[$s>>0] = $30;
                        $32 = $wc >>> 12;
                        $33 = $32 & 63;
                        $34 = $33 | 128;
                        $35 = $34&255;
                        $36 = ((($s)) + 2|0);
                        HEAP8[$31>>0] = $35;
                        $37 = $wc >>> 6;
                        $38 = $37 & 63;
                        $39 = $38 | 128;
                        $40 = $39&255;
                        $41 = ((($s)) + 3|0);
                        HEAP8[$36>>0] = $40;
                        $42 = $wc & 63;
                        $43 = $42 | 128;
                        $44 = $43&255;
                        HEAP8[$41>>0] = $44;
                        $$0 = 4;
                        break;
                    } else {
                        $45 = (___errno_location()|0);
                        HEAP32[$45>>2] = 84;
                        $$0 = -1;
                        break;
                    }
                }
            } while(0);
            return ($$0|0);
        }
        function _wctomb($s,$wc) {
            $s = $s|0;
            $wc = $wc|0;
            var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($s|0)==(0|0);
            if ($0) {
                $$0 = 0;
            } else {
                $1 = (_wcrtomb($s,$wc,0)|0);
                $$0 = $1;
            }
            return ($$0|0);
        }
        function _rand() {
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = 304;
            $1 = $0;
            $2 = HEAP32[$1>>2]|0;
            $3 = (($0) + 4)|0;
            $4 = $3;
            $5 = HEAP32[$4>>2]|0;
            $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
            $7 = tempRet0;
            $8 = (_i64Add(($6|0),($7|0),1,0)|0);
            $9 = tempRet0;
            $10 = 304;
            $11 = $10;
            HEAP32[$11>>2] = $8;
            $12 = (($10) + 4)|0;
            $13 = $12;
            HEAP32[$13>>2] = $9;
            $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
            $15 = tempRet0;
            return ($14|0);
        }
        function _fclose($f) {
            $f = $f|0;
            var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 76|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)>(-1);
            if ($2) {
                (___lockfile($f)|0);
            }
            $3 = HEAP32[$f>>2]|0;
            $4 = $3 & 1;
            $5 = ($4|0)!=(0);
            if (!($5)) {
                ___lock(((3252)|0));
                $6 = ((($f)) + 52|0);
                $7 = HEAP32[$6>>2]|0;
                $8 = ($7|0)==(0|0);
                $9 = $7;
                $$pre = ((($f)) + 56|0);
                if (!($8)) {
                    $10 = HEAP32[$$pre>>2]|0;
                    $11 = ((($7)) + 56|0);
                    HEAP32[$11>>2] = $10;
                }
                $12 = HEAP32[$$pre>>2]|0;
                $13 = ($12|0)==(0|0);
                $14 = $12;
                if (!($13)) {
                    $15 = ((($12)) + 52|0);
                    HEAP32[$15>>2] = $9;
                }
                $16 = HEAP32[(3248)>>2]|0;
                $17 = ($16|0)==($f|0);
                if ($17) {
                    HEAP32[(3248)>>2] = $14;
                }
                ___unlock(((3252)|0));
            }
            $18 = (_fflush($f)|0);
            $19 = ((($f)) + 12|0);
            $20 = HEAP32[$19>>2]|0;
            $21 = (FUNCTION_TABLE_ii[$20 & 7]($f)|0);
            $22 = $21 | $18;
            $23 = ((($f)) + 92|0);
            $24 = HEAP32[$23>>2]|0;
            $25 = ($24|0)==(0|0);
            if (!($25)) {
                _free($24);
            }
            if (!($5)) {
                _free($f);
            }
            return ($22|0);
        }
        function _feof($f) {
            $f = $f|0;
            var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 76|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)>(-1);
            if ($2) {
                $5 = (___lockfile($f)|0);
                $phitmp = ($5|0)==(0);
                $6 = HEAP32[$f>>2]|0;
                $7 = $6 >>> 4;
                $$lobit = $7 & 1;
                if ($phitmp) {
                    $$lobit2 = $$lobit;
                } else {
                    ___unlockfile($f);
                    $$lobit2 = $$lobit;
                }
            } else {
                $3 = HEAP32[$f>>2]|0;
                $4 = $3 >>> 4;
                $$lobit1 = $4 & 1;
                $$lobit2 = $$lobit1;
            }
            return ($$lobit2|0);
        }
        function _fflush($f) {
            $f = $f|0;
            var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($f|0)==(0|0);
            do {
                if ($0) {
                    $7 = HEAP32[3484>>2]|0;
                    $8 = ($7|0)==(0|0);
                    if ($8) {
                        $27 = 0;
                    } else {
                        $9 = HEAP32[3484>>2]|0;
                        $10 = (_fflush($9)|0);
                        $27 = $10;
                    }
                    ___lock(((3252)|0));
                    $$012 = HEAP32[(3248)>>2]|0;
                    $11 = ($$012|0)==(0|0);
                    if ($11) {
                        $r$0$lcssa = $27;
                    } else {
                        $$014 = $$012;$r$03 = $27;
                        while(1) {
                            $12 = ((($$014)) + 76|0);
                            $13 = HEAP32[$12>>2]|0;
                            $14 = ($13|0)>(-1);
                            if ($14) {
                                $15 = (___lockfile($$014)|0);
                                $23 = $15;
                            } else {
                                $23 = 0;
                            }
                            $16 = ((($$014)) + 20|0);
                            $17 = HEAP32[$16>>2]|0;
                            $18 = ((($$014)) + 28|0);
                            $19 = HEAP32[$18>>2]|0;
                            $20 = ($17>>>0)>($19>>>0);
                            if ($20) {
                                $21 = (___fflush_unlocked($$014)|0);
                                $22 = $21 | $r$03;
                                $r$1 = $22;
                            } else {
                                $r$1 = $r$03;
                            }
                            $24 = ($23|0)==(0);
                            if (!($24)) {
                                ___unlockfile($$014);
                            }
                            $25 = ((($$014)) + 56|0);
                            $$01 = HEAP32[$25>>2]|0;
                            $26 = ($$01|0)==(0|0);
                            if ($26) {
                                $r$0$lcssa = $r$1;
                                break;
                            } else {
                                $$014 = $$01;$r$03 = $r$1;
                            }
                        }
                    }
                    ___unlock(((3252)|0));
                    $$0 = $r$0$lcssa;
                } else {
                    $1 = ((($f)) + 76|0);
                    $2 = HEAP32[$1>>2]|0;
                    $3 = ($2|0)>(-1);
                    if (!($3)) {
                        $4 = (___fflush_unlocked($f)|0);
                        $$0 = $4;
                        break;
                    }
                    $5 = (___lockfile($f)|0);
                    $phitmp = ($5|0)==(0);
                    $6 = (___fflush_unlocked($f)|0);
                    if ($phitmp) {
                        $$0 = $6;
                    } else {
                        ___unlockfile($f);
                        $$0 = $6;
                    }
                }
            } while(0);
            return ($$0|0);
        }
        function _fgets($s,$n,$f) {
            $s = $s|0;
            $n = $n|0;
            $f = $f|0;
            var $$0 = 0, $$048 = 0, $$05 = 0, $$lcssa14 = 0, $$old2 = 0, $$pre = 0, $$sum$pre$phiZZ2D = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
            var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
            var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0;
            var $9 = 0, $or$cond = 0, $or$cond3 = 0, $p$0 = 0, $p$1 = 0, $sext$mask = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 76|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)>(-1);
            if ($2) {
                $3 = (___lockfile($f)|0);
                $12 = $3;
            } else {
                $12 = 0;
            }
            $4 = (($n) + -1)|0;
            $5 = ($n|0)<(2);
            if ($5) {
                $6 = ((($f)) + 74|0);
                $7 = HEAP8[$6>>0]|0;
                $8 = $7 << 24 >> 24;
                $9 = (($8) + 255)|0;
                $10 = $9 | $8;
                $11 = $10&255;
                HEAP8[$6>>0] = $11;
                $13 = ($12|0)==(0);
                if (!($13)) {
                    ___unlockfile($f);
                }
                $14 = ($4|0)==(0);
                if ($14) {
                    HEAP8[$s>>0] = 0;
                    $$0 = $s;
                } else {
                    $$0 = 0;
                }
            } else {
                $$old2 = ($4|0)==(0);
                L11: do {
                    if ($$old2) {
                        $p$1 = $s;
                        label = 18;
                    } else {
                        $15 = ((($f)) + 4|0);
                        $16 = ((($f)) + 8|0);
                        $$05 = $4;$p$0 = $s;
                        while(1) {
                            $17 = HEAP32[$15>>2]|0;
                            $18 = HEAP32[$16>>2]|0;
                            $19 = $18;
                            $20 = $17;
                            $21 = (($19) - ($20))|0;
                            $22 = (_memchr($17,10,$21)|0);
                            $23 = ($22|0)==(0|0);
                            $24 = $22;
                            $25 = (1 - ($20))|0;
                            $26 = (($25) + ($24))|0;
                            $27 = $23 ? $21 : $26;
                            $28 = ($27>>>0)<($$05>>>0);
                            $29 = $28 ? $27 : $$05;
                            _memcpy(($p$0|0),($17|0),($29|0))|0;
                            $30 = HEAP32[$15>>2]|0;
                            $31 = (($30) + ($29)|0);
                            HEAP32[$15>>2] = $31;
                            $32 = (($p$0) + ($29)|0);
                            $33 = (($$05) - ($29))|0;
                            $or$cond = $23 & $28;
                            if (!($or$cond)) {
                                $p$1 = $32;
                                label = 18;
                                break L11;
                            }
                            $34 = HEAP32[$16>>2]|0;
                            $35 = ($31>>>0)<($34>>>0);
                            if ($35) {
                                $$sum6 = (($29) + 1)|0;
                                $36 = (($30) + ($$sum6)|0);
                                HEAP32[$15>>2] = $36;
                                $37 = HEAP8[$31>>0]|0;
                                $38 = $37&255;
                                $$sum$pre$phiZZ2D = $$sum6;$47 = $38;
                            } else {
                                $39 = (___uflow($f)|0);
                                $40 = ($39|0)<(0);
                                if ($40) {
                                    $$lcssa14 = $32;
                                    break;
                                }
                                $$pre = (($29) + 1)|0;
                                $$sum$pre$phiZZ2D = $$pre;$47 = $39;
                            }
                            $45 = (($33) + -1)|0;
                            $46 = $47&255;
                            $48 = (($p$0) + ($$sum$pre$phiZZ2D)|0);
                            HEAP8[$32>>0] = $46;
                            $sext$mask = $47 & 255;
                            $49 = ($sext$mask|0)!=(10);
                            $50 = ($45|0)!=(0);
                            $or$cond3 = $50 & $49;
                            if ($or$cond3) {
                                $$05 = $45;$p$0 = $48;
                            } else {
                                $p$1 = $48;
                                label = 18;
                                break L11;
                            }
                        }
                        $41 = ($$lcssa14|0)==($s|0);
                        if ($41) {
                            $$048 = 0;
                        } else {
                            $42 = HEAP32[$f>>2]|0;
                            $43 = $42 & 16;
                            $44 = ($43|0)==(0);
                            if ($44) {
                                $$048 = 0;
                            } else {
                                $p$1 = $$lcssa14;
                                label = 18;
                            }
                        }
                    }
                } while(0);
                if ((label|0) == 18) {
                    $51 = ($s|0)==(0|0);
                    if ($51) {
                        $$048 = 0;
                    } else {
                        HEAP8[$p$1>>0] = 0;
                        $$048 = $s;
                    }
                }
                $52 = ($12|0)==(0);
                if ($52) {
                    $$0 = $$048;
                } else {
                    ___unlockfile($f);
                    $$0 = $$048;
                }
            }
            return ($$0|0);
        }
        function _fopen($filename,$mode) {
            $filename = $filename|0;
            $mode = $mode|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $vararg_buffer3 = sp + 16|0;
            $vararg_buffer = sp;
            $0 = HEAP8[$mode>>0]|0;
            $1 = $0 << 24 >> 24;
            $memchr = (_memchr(26651,$1,4)|0);
            $2 = ($memchr|0)==(0|0);
            if ($2) {
                $3 = (___errno_location()|0);
                HEAP32[$3>>2] = 22;
                $$0 = 0;
            } else {
                $4 = (___fmodeflags($mode)|0);
                $5 = $4 | 32768;
                HEAP32[$vararg_buffer>>2] = $filename;
                $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                HEAP32[$vararg_ptr1>>2] = $5;
                $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
                HEAP32[$vararg_ptr2>>2] = 438;
                $6 = (___syscall5(5,($vararg_buffer|0))|0);
                $7 = (___syscall_ret($6)|0);
                $8 = ($7|0)<(0);
                if ($8) {
                    $$0 = 0;
                } else {
                    $9 = (___fdopen($7,$mode)|0);
                    $10 = ($9|0)==(0|0);
                    if ($10) {
                        HEAP32[$vararg_buffer3>>2] = $7;
                        (___syscall6(6,($vararg_buffer3|0))|0);
                        $$0 = 0;
                    } else {
                        $$0 = $9;
                    }
                }
            }
            STACKTOP = sp;return ($$0|0);
        }
        function _fprintf($f,$fmt,$varargs) {
            $f = $f|0;
            $fmt = $fmt|0;
            $varargs = $varargs|0;
            var $0 = 0, $ap = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ap = sp;
            HEAP32[$ap>>2] = $varargs;
            $0 = (_vfprintf($f,$fmt,$ap)|0);
            STACKTOP = sp;return ($0|0);
        }
        function _fputc($c,$f) {
            $c = $c|0;
            $f = $f|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 76|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)<(0);
            if ($2) {
                label = 3;
            } else {
                $3 = (___lockfile($f)|0);
                $4 = ($3|0)==(0);
                if ($4) {
                    label = 3;
                } else {
                    $18 = ((($f)) + 75|0);
                    $19 = HEAP8[$18>>0]|0;
                    $20 = $19 << 24 >> 24;
                    $21 = ($20|0)==($c|0);
                    if ($21) {
                        label = 10;
                    } else {
                        $22 = ((($f)) + 20|0);
                        $23 = HEAP32[$22>>2]|0;
                        $24 = ((($f)) + 16|0);
                        $25 = HEAP32[$24>>2]|0;
                        $26 = ($23>>>0)<($25>>>0);
                        if ($26) {
                            $27 = $c&255;
                            $28 = ((($23)) + 1|0);
                            HEAP32[$22>>2] = $28;
                            HEAP8[$23>>0] = $27;
                            $29 = $c & 255;
                            $31 = $29;
                        } else {
                            label = 10;
                        }
                    }
                    if ((label|0) == 10) {
                        $30 = (___overflow($f,$c)|0);
                        $31 = $30;
                    }
                    ___unlockfile($f);
                    $$0 = $31;
                }
            }
            do {
                if ((label|0) == 3) {
                    $5 = ((($f)) + 75|0);
                    $6 = HEAP8[$5>>0]|0;
                    $7 = $6 << 24 >> 24;
                    $8 = ($7|0)==($c|0);
                    if (!($8)) {
                        $9 = ((($f)) + 20|0);
                        $10 = HEAP32[$9>>2]|0;
                        $11 = ((($f)) + 16|0);
                        $12 = HEAP32[$11>>2]|0;
                        $13 = ($10>>>0)<($12>>>0);
                        if ($13) {
                            $14 = $c&255;
                            $15 = ((($10)) + 1|0);
                            HEAP32[$9>>2] = $15;
                            HEAP8[$10>>0] = $14;
                            $16 = $c & 255;
                            $$0 = $16;
                            break;
                        }
                    }
                    $17 = (___overflow($f,$c)|0);
                    $$0 = $17;
                }
            } while(0);
            return ($$0|0);
        }
        function _fputs($s,$f) {
            $s = $s|0;
            $f = $f|0;
            var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_strlen($s)|0);
            $1 = (_fwrite($s,$0,1,$f)|0);
            $2 = (($1) + -1)|0;
            return ($2|0);
        }
        function _fread($destv,$size,$nmemb,$f) {
            $destv = $destv|0;
            $size = $size|0;
            $nmemb = $nmemb|0;
            $f = $f|0;
            var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
            var $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = Math_imul($nmemb, $size)|0;
            $1 = ((($f)) + 76|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)>(-1);
            if ($3) {
                $4 = (___lockfile($f)|0);
                $31 = $4;
            } else {
                $31 = 0;
            }
            $5 = ((($f)) + 74|0);
            $6 = HEAP8[$5>>0]|0;
            $7 = $6 << 24 >> 24;
            $8 = (($7) + 255)|0;
            $9 = $8 | $7;
            $10 = $9&255;
            HEAP8[$5>>0] = $10;
            $11 = ((($f)) + 8|0);
            $12 = HEAP32[$11>>2]|0;
            $13 = ((($f)) + 4|0);
            $14 = HEAP32[$13>>2]|0;
            $15 = $12;
            $16 = $14;
            $17 = (($15) - ($16))|0;
            $18 = ($17|0)>(0);
            if ($18) {
                $19 = ($17>>>0)<($0>>>0);
                $$ = $19 ? $17 : $0;
                _memcpy(($destv|0),($14|0),($$|0))|0;
                $20 = (($14) + ($$)|0);
                HEAP32[$13>>2] = $20;
                $21 = (($destv) + ($$)|0);
                $22 = (($0) - ($$))|0;
                $dest$0$ph = $21;$l$0$ph = $22;
            } else {
                $dest$0$ph = $destv;$l$0$ph = $0;
            }
            $23 = ($l$0$ph|0)==(0);
            L7: do {
                if ($23) {
                    label = 13;
                } else {
                    $24 = ((($f)) + 32|0);
                    $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
                    while(1) {
                        $25 = (___toread($f)|0);
                        $26 = ($25|0)==(0);
                        if (!($26)) {
                            $l$03$lcssa = $l$03;
                            break;
                        }
                        $27 = HEAP32[$24>>2]|0;
                        $28 = (FUNCTION_TABLE_iiii[$27 & 15]($f,$dest$02,$l$03)|0);
                        $29 = (($28) + 1)|0;
                        $30 = ($29>>>0)<(2);
                        if ($30) {
                            $l$03$lcssa = $l$03;
                            break;
                        }
                        $35 = (($l$03) - ($28))|0;
                        $36 = (($dest$02) + ($28)|0);
                        $37 = ($l$03|0)==($28|0);
                        if ($37) {
                            label = 13;
                            break L7;
                        } else {
                            $dest$02 = $36;$l$03 = $35;
                        }
                    }
                    $32 = ($31|0)==(0);
                    if (!($32)) {
                        ___unlockfile($f);
                    }
                    $33 = (($0) - ($l$03$lcssa))|0;
                    $34 = (($33>>>0) / ($size>>>0))&-1;
                    $$0 = $34;
                }
            } while(0);
            if ((label|0) == 13) {
                $38 = ($31|0)==(0);
                if ($38) {
                    $$0 = $nmemb;
                } else {
                    ___unlockfile($f);
                    $$0 = $nmemb;
                }
            }
            return ($$0|0);
        }
        function ___fwritex($s,$l,$f) {
            $s = $s|0;
            $l = $l|0;
            $f = $f|0;
            var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
            var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
            var $i$1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 16|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            if ($2) {
                $3 = (___towrite($f)|0);
                $4 = ($3|0)==(0);
                if ($4) {
                    $$pre = HEAP32[$0>>2]|0;
                    $7 = $$pre;
                    label = 4;
                } else {
                    $$0 = 0;
                }
            } else {
                $7 = $1;
                label = 4;
            }
            L4: do {
                if ((label|0) == 4) {
                    $5 = ((($f)) + 20|0);
                    $6 = HEAP32[$5>>2]|0;
                    $8 = $7;
                    $9 = $6;
                    $10 = (($8) - ($9))|0;
                    $11 = ($10>>>0)<($l>>>0);
                    if ($11) {
                        $12 = ((($f)) + 36|0);
                        $13 = HEAP32[$12>>2]|0;
                        $14 = (FUNCTION_TABLE_iiii[$13 & 15]($f,$s,$l)|0);
                        $$0 = $14;
                        break;
                    }
                    $15 = ((($f)) + 75|0);
                    $16 = HEAP8[$15>>0]|0;
                    $17 = ($16<<24>>24)>(-1);
                    L9: do {
                        if ($17) {
                            $i$0 = $l;
                            while(1) {
                                $18 = ($i$0|0)==(0);
                                if ($18) {
                                    $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
                                    break L9;
                                }
                                $19 = (($i$0) + -1)|0;
                                $20 = (($s) + ($19)|0);
                                $21 = HEAP8[$20>>0]|0;
                                $22 = ($21<<24>>24)==(10);
                                if ($22) {
                                    $i$0$lcssa10 = $i$0;
                                    break;
                                } else {
                                    $i$0 = $19;
                                }
                            }
                            $23 = ((($f)) + 36|0);
                            $24 = HEAP32[$23>>2]|0;
                            $25 = (FUNCTION_TABLE_iiii[$24 & 15]($f,$s,$i$0$lcssa10)|0);
                            $26 = ($25>>>0)<($i$0$lcssa10>>>0);
                            if ($26) {
                                $$0 = $i$0$lcssa10;
                                break L4;
                            }
                            $27 = (($s) + ($i$0$lcssa10)|0);
                            $28 = (($l) - ($i$0$lcssa10))|0;
                            $$pre6 = HEAP32[$5>>2]|0;
                            $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
                        } else {
                            $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
                        }
                    } while(0);
                    _memcpy(($29|0),($$02|0),($$01|0))|0;
                    $30 = HEAP32[$5>>2]|0;
                    $31 = (($30) + ($$01)|0);
                    HEAP32[$5>>2] = $31;
                    $32 = (($i$1) + ($$01))|0;
                    $$0 = $32;
                }
            } while(0);
            return ($$0|0);
        }
        function _fwrite($src,$size,$nmemb,$f) {
            $src = $src|0;
            $size = $size|0;
            $nmemb = $nmemb|0;
            $f = $f|0;
            var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = Math_imul($nmemb, $size)|0;
            $1 = ((($f)) + 76|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)>(-1);
            if ($3) {
                $5 = (___lockfile($f)|0);
                $phitmp = ($5|0)==(0);
                $6 = (___fwritex($src,$0,$f)|0);
                if ($phitmp) {
                    $7 = $6;
                } else {
                    ___unlockfile($f);
                    $7 = $6;
                }
            } else {
                $4 = (___fwritex($src,$0,$f)|0);
                $7 = $4;
            }
            $8 = ($7|0)==($0|0);
            if ($8) {
                $10 = $nmemb;
            } else {
                $9 = (($7>>>0) / ($size>>>0))&-1;
                $10 = $9;
            }
            return ($10|0);
        }
        function _getc($f) {
            $f = $f|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
            var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 76|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)<(0);
            if ($2) {
                label = 3;
            } else {
                $3 = (___lockfile($f)|0);
                $4 = ($3|0)==(0);
                if ($4) {
                    label = 3;
                } else {
                    $14 = ((($f)) + 4|0);
                    $15 = HEAP32[$14>>2]|0;
                    $16 = ((($f)) + 8|0);
                    $17 = HEAP32[$16>>2]|0;
                    $18 = ($15>>>0)<($17>>>0);
                    if ($18) {
                        $19 = ((($15)) + 1|0);
                        HEAP32[$14>>2] = $19;
                        $20 = HEAP8[$15>>0]|0;
                        $21 = $20&255;
                        $23 = $21;
                    } else {
                        $22 = (___uflow($f)|0);
                        $23 = $22;
                    }
                    ___unlockfile($f);
                    $$0 = $23;
                }
            }
            do {
                if ((label|0) == 3) {
                    $5 = ((($f)) + 4|0);
                    $6 = HEAP32[$5>>2]|0;
                    $7 = ((($f)) + 8|0);
                    $8 = HEAP32[$7>>2]|0;
                    $9 = ($6>>>0)<($8>>>0);
                    if ($9) {
                        $10 = ((($6)) + 1|0);
                        HEAP32[$5>>2] = $10;
                        $11 = HEAP8[$6>>0]|0;
                        $12 = $11&255;
                        $$0 = $12;
                        break;
                    } else {
                        $13 = (___uflow($f)|0);
                        $$0 = $13;
                        break;
                    }
                }
            } while(0);
            return ($$0|0);
        }
        function _printf($fmt,$varargs) {
            $fmt = $fmt|0;
            $varargs = $varargs|0;
            var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ap = sp;
            HEAP32[$ap>>2] = $varargs;
            $0 = HEAP32[3480>>2]|0;
            $1 = (_vfprintf($0,$fmt,$ap)|0);
            STACKTOP = sp;return ($1|0);
        }
        function _putc($c,$f) {
            $c = $c|0;
            $f = $f|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 76|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)<(0);
            if ($2) {
                label = 3;
            } else {
                $3 = (___lockfile($f)|0);
                $4 = ($3|0)==(0);
                if ($4) {
                    label = 3;
                } else {
                    $18 = ((($f)) + 75|0);
                    $19 = HEAP8[$18>>0]|0;
                    $20 = $19 << 24 >> 24;
                    $21 = ($20|0)==($c|0);
                    if ($21) {
                        label = 10;
                    } else {
                        $22 = ((($f)) + 20|0);
                        $23 = HEAP32[$22>>2]|0;
                        $24 = ((($f)) + 16|0);
                        $25 = HEAP32[$24>>2]|0;
                        $26 = ($23>>>0)<($25>>>0);
                        if ($26) {
                            $27 = $c&255;
                            $28 = ((($23)) + 1|0);
                            HEAP32[$22>>2] = $28;
                            HEAP8[$23>>0] = $27;
                            $29 = $c & 255;
                            $31 = $29;
                        } else {
                            label = 10;
                        }
                    }
                    if ((label|0) == 10) {
                        $30 = (___overflow($f,$c)|0);
                        $31 = $30;
                    }
                    ___unlockfile($f);
                    $$0 = $31;
                }
            }
            do {
                if ((label|0) == 3) {
                    $5 = ((($f)) + 75|0);
                    $6 = HEAP8[$5>>0]|0;
                    $7 = $6 << 24 >> 24;
                    $8 = ($7|0)==($c|0);
                    if (!($8)) {
                        $9 = ((($f)) + 20|0);
                        $10 = HEAP32[$9>>2]|0;
                        $11 = ((($f)) + 16|0);
                        $12 = HEAP32[$11>>2]|0;
                        $13 = ($10>>>0)<($12>>>0);
                        if ($13) {
                            $14 = $c&255;
                            $15 = ((($10)) + 1|0);
                            HEAP32[$9>>2] = $15;
                            HEAP8[$10>>0] = $14;
                            $16 = $c & 255;
                            $$0 = $16;
                            break;
                        }
                    }
                    $17 = (___overflow($f,$c)|0);
                    $$0 = $17;
                }
            } while(0);
            return ($$0|0);
        }
        function _puts($s) {
            $s = $s|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
            var $9 = 0, $phitmp = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = HEAP32[3480>>2]|0;
            $1 = ((($0)) + 76|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)>(-1);
            if ($3) {
                $4 = (___lockfile($0)|0);
                $19 = $4;
            } else {
                $19 = 0;
            }
            $5 = (_fputs($s,$0)|0);
            $6 = ($5|0)<(0);
            do {
                if ($6) {
                    $18 = 1;
                } else {
                    $7 = ((($0)) + 75|0);
                    $8 = HEAP8[$7>>0]|0;
                    $9 = ($8<<24>>24)==(10);
                    if (!($9)) {
                        $10 = ((($0)) + 20|0);
                        $11 = HEAP32[$10>>2]|0;
                        $12 = ((($0)) + 16|0);
                        $13 = HEAP32[$12>>2]|0;
                        $14 = ($11>>>0)<($13>>>0);
                        if ($14) {
                            $15 = ((($11)) + 1|0);
                            HEAP32[$10>>2] = $15;
                            HEAP8[$11>>0] = 10;
                            $18 = 0;
                            break;
                        }
                    }
                    $16 = (___overflow($0,10)|0);
                    $phitmp = ($16|0)<(0);
                    $18 = $phitmp;
                }
            } while(0);
            $17 = $18 << 31 >> 31;
            $20 = ($19|0)==(0);
            if (!($20)) {
                ___unlockfile($0);
            }
            return ($17|0);
        }
        function _remove($path) {
            $path = $path|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer1 = sp + 8|0;
            $vararg_buffer = sp;
            HEAP32[$vararg_buffer>>2] = $path;
            $0 = (___syscall10(10,($vararg_buffer|0))|0);
            $1 = (___syscall_ret($0)|0);
            $2 = ($1|0)==(0);
            if ($2) {
                $8 = 0;
            } else {
                $3 = (___errno_location()|0);
                $4 = HEAP32[$3>>2]|0;
                $5 = ($4|0)==(21);
                if ($5) {
                    HEAP32[$vararg_buffer1>>2] = $path;
                    $6 = (___syscall40(40,($vararg_buffer1|0))|0);
                    $7 = (___syscall_ret($6)|0);
                    $8 = $7;
                } else {
                    $8 = $1;
                }
            }
            STACKTOP = sp;return ($8|0);
        }
        function _snprintf($s,$n,$fmt,$varargs) {
            $s = $s|0;
            $n = $n|0;
            $fmt = $fmt|0;
            $varargs = $varargs|0;
            var $0 = 0, $ap = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ap = sp;
            HEAP32[$ap>>2] = $varargs;
            $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
            STACKTOP = sp;return ($0|0);
        }
        function _sprintf($s,$fmt,$varargs) {
            $s = $s|0;
            $fmt = $fmt|0;
            $varargs = $varargs|0;
            var $0 = 0, $ap = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ap = sp;
            HEAP32[$ap>>2] = $varargs;
            $0 = (_vsprintf($s,$fmt,$ap)|0);
            STACKTOP = sp;return ($0|0);
        }
        function _sscanf($s,$fmt,$varargs) {
            $s = $s|0;
            $fmt = $fmt|0;
            $varargs = $varargs|0;
            var $0 = 0, $ap = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $ap = sp;
            HEAP32[$ap>>2] = $varargs;
            $0 = (_vsscanf($s,$fmt,$ap)|0);
            STACKTOP = sp;return ($0|0);
        }
        function _tmpnam($s) {
            $s = $s|0;
            var $$0 = 0, $$s = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
            var $8 = 0, $9 = 0, $try$0 = 0, $try$1 = 0, $ts = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 64|0;
            $vararg_buffer11 = sp + 32|0;
            $vararg_buffer7 = sp + 24|0;
            $vararg_buffer2 = sp + 8|0;
            $vararg_buffer = sp;
            $0 = sp + 48|0;
            $ts = sp + 40|0;
            $1 = ($s|0)==(0|0);
            $$s = $1 ? 26614 : $s;
            HEAP32[$0>>2] = $$s;
            HEAP32[$vararg_buffer>>2] = 26634;
            $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
            HEAP32[$vararg_ptr1>>2] = 7;
            $2 = (___syscall33(33,($vararg_buffer|0))|0);
            $3 = ($2|0)==(0);
            if ($3) {
                $4 = ((($ts)) + 4|0);
                $5 = $0;
                $try$0 = 0;
                while(1) {
                    HEAP32[$vararg_buffer2>>2] = 0;
                    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
                    HEAP32[$vararg_ptr5>>2] = $ts;
                    $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
                    HEAP32[$vararg_ptr6>>2] = 0;
                    (___syscall265(265,($vararg_buffer2|0))|0);
                    $6 = HEAP32[$4>>2]|0;
                    $7 = $6 ^ $5;
                    $8 = HEAP32[$0>>2]|0;
                    $9 = $8;
                    $10 = $7 ^ $9;
                    $11 = HEAP32[3528>>2]|0;HEAP32[3528>>2] = (($11+1)|0);
                    HEAP32[$vararg_buffer7>>2] = $11;
                    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
                    HEAP32[$vararg_ptr10>>2] = $10;
                    (_snprintf($8,20,26639,$vararg_buffer7)|0);
                    $12 = HEAP32[$0>>2]|0;
                    HEAP32[$vararg_buffer11>>2] = $12;
                    $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
                    HEAP32[$vararg_ptr14>>2] = 0;
                    $13 = (___syscall33(33,($vararg_buffer11|0))|0);
                    $14 = ($13|0)==(0);
                    if (!($14)) {
                        $try$1 = $try$0;
                        break;
                    }
                    $15 = (($try$0) + 1)|0;
                    $16 = ($try$0|0)<(100);
                    if ($16) {
                        $try$0 = $15;
                    } else {
                        $try$1 = $15;
                        break;
                    }
                }
                $17 = ($try$1|0)>(99);
                $18 = HEAP32[$0>>2]|0;
                $19 = $17 ? 0 : $18;
                $$0 = $19;
            } else {
                $$0 = 0;
            }
            STACKTOP = sp;return ($$0|0);
        }
        function _ungetc($c,$f) {
            $c = $c|0;
            $f = $f|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($c|0)==(-1);
            do {
                if ($0) {
                    $$0 = -1;
                } else {
                    $1 = ((($f)) + 76|0);
                    $2 = HEAP32[$1>>2]|0;
                    $3 = ($2|0)>(-1);
                    if ($3) {
                        $4 = (___lockfile($f)|0);
                        $16 = $4;
                    } else {
                        $16 = 0;
                    }
                    $5 = ((($f)) + 8|0);
                    $6 = HEAP32[$5>>2]|0;
                    $7 = ($6|0)==(0|0);
                    if ($7) {
                        $8 = (___toread($f)|0);
                        $9 = ($8|0)==(0);
                        if ($9) {
                            label = 6;
                        }
                    } else {
                        label = 6;
                    }
                    if ((label|0) == 6) {
                        $10 = ((($f)) + 4|0);
                        $11 = HEAP32[$10>>2]|0;
                        $12 = ((($f)) + 44|0);
                        $13 = HEAP32[$12>>2]|0;
                        $14 = ((($13)) + -8|0);
                        $15 = ($11>>>0)>($14>>>0);
                        if ($15) {
                            $18 = $c&255;
                            $19 = ((($11)) + -1|0);
                            HEAP32[$10>>2] = $19;
                            HEAP8[$19>>0] = $18;
                            $20 = HEAP32[$f>>2]|0;
                            $21 = $20 & -17;
                            HEAP32[$f>>2] = $21;
                            $22 = ($16|0)==(0);
                            if ($22) {
                                $$0 = $c;
                                break;
                            }
                            ___unlockfile($f);
                            $$0 = $c;
                            break;
                        }
                    }
                    $17 = ($16|0)==(0);
                    if ($17) {
                        $$0 = -1;
                    } else {
                        ___unlockfile($f);
                        $$0 = -1;
                    }
                }
            } while(0);
            return ($$0|0);
        }
        function _vfprintf($f,$fmt,$ap) {
            $f = $f|0;
            $fmt = $fmt|0;
            $ap = $ap|0;
            var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
            var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
            var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 224|0;
            $ap2 = sp + 120|0;
            $nl_type = sp + 80|0;
            $nl_arg = sp;
            $internal_buf = sp + 136|0;
            dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2>>2] = $vacopy_currentptr;
            $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
            $1 = ($0|0)<(0);
            if ($1) {
                $$0 = -1;
            } else {
                $2 = ((($f)) + 76|0);
                $3 = HEAP32[$2>>2]|0;
                $4 = ($3|0)>(-1);
                if ($4) {
                    $5 = (___lockfile($f)|0);
                    $32 = $5;
                } else {
                    $32 = 0;
                }
                $6 = HEAP32[$f>>2]|0;
                $7 = $6 & 32;
                $8 = ((($f)) + 74|0);
                $9 = HEAP8[$8>>0]|0;
                $10 = ($9<<24>>24)<(1);
                if ($10) {
                    $11 = $6 & -33;
                    HEAP32[$f>>2] = $11;
                }
                $12 = ((($f)) + 48|0);
                $13 = HEAP32[$12>>2]|0;
                $14 = ($13|0)==(0);
                if ($14) {
                    $16 = ((($f)) + 44|0);
                    $17 = HEAP32[$16>>2]|0;
                    HEAP32[$16>>2] = $internal_buf;
                    $18 = ((($f)) + 28|0);
                    HEAP32[$18>>2] = $internal_buf;
                    $19 = ((($f)) + 20|0);
                    HEAP32[$19>>2] = $internal_buf;
                    HEAP32[$12>>2] = 80;
                    $20 = ((($internal_buf)) + 80|0);
                    $21 = ((($f)) + 16|0);
                    HEAP32[$21>>2] = $20;
                    $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
                    $23 = ($17|0)==(0|0);
                    if ($23) {
                        $ret$1 = $22;
                    } else {
                        $24 = ((($f)) + 36|0);
                        $25 = HEAP32[$24>>2]|0;
                        (FUNCTION_TABLE_iiii[$25 & 15]($f,0,0)|0);
                        $26 = HEAP32[$19>>2]|0;
                        $27 = ($26|0)==(0|0);
                        $$ = $27 ? -1 : $22;
                        HEAP32[$16>>2] = $17;
                        HEAP32[$12>>2] = 0;
                        HEAP32[$21>>2] = 0;
                        HEAP32[$18>>2] = 0;
                        HEAP32[$19>>2] = 0;
                        $ret$1 = $$;
                    }
                } else {
                    $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
                    $ret$1 = $15;
                }
                $28 = HEAP32[$f>>2]|0;
                $29 = $28 & 32;
                $30 = ($29|0)==(0);
                $ret$1$ = $30 ? $ret$1 : -1;
                $31 = $28 | $7;
                HEAP32[$f>>2] = $31;
                $33 = ($32|0)==(0);
                if (!($33)) {
                    ___unlockfile($f);
                }
                $$0 = $ret$1$;
            }
            STACKTOP = sp;return ($$0|0);
        }
        function _vfscanf($f,$fmt,$ap) {
            $f = $f|0;
            $fmt = $fmt|0;
            $ap = $ap|0;
            var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$9 = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa384 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi182Z2D = 0, $$pre168 = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre181 = 0;
            var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
            var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
            var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
            var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
            var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
            var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
            var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
            var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
            var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
            var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
            var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
            var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0;
            var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
            var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
            var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
            var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
            var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0400 = 0, $alloc$1 = 0;
            var $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0;
            var $factor16 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit795 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp694 = 0, $k$0$ph = 0;
            var $k$1$ph = 0, $matches$0$ = 0, $matches$0104 = 0, $matches$0104$lcssa = 0, $matches$0104376 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, $p$0109 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0;
            var $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0108 = 0, $pos$1 = 0, $pos$2 = 0, $s$0107 = 0, $s$0107$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0;
            var $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0103 = 0, $wcs$0103$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0;
            var $width$1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 304|0;
            $ap2$i = sp + 16|0;
            $st = sp + 8|0;
            $scanset = sp + 33|0;
            $wc = sp;
            $0 = sp + 32|0;
            $1 = ((($f)) + 76|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)>(-1);
            if ($3) {
                $4 = (___lockfile($f)|0);
                $333 = $4;
            } else {
                $333 = 0;
            }
            $5 = HEAP8[$fmt>>0]|0;
            $6 = ($5<<24>>24)==(0);
            L4: do {
                if ($6) {
                    $matches$3 = 0;
                } else {
                    $7 = ((($f)) + 4|0);
                    $8 = ((($f)) + 100|0);
                    $9 = ((($f)) + 108|0);
                    $10 = ((($f)) + 8|0);
                    $11 = ((($scanset)) + 10|0);
                    $12 = ((($scanset)) + 33|0);
                    $13 = ((($st)) + 4|0);
                    $14 = ((($scanset)) + 46|0);
                    $15 = ((($scanset)) + 94|0);
                    $17 = $5;$matches$0104 = 0;$p$0109 = $fmt;$pos$0108 = 0;$s$0107 = 0;$wcs$0103 = 0;
                    L6: while(1) {
                        $16 = $17&255;
                        $18 = (_isspace($16)|0);
                        $19 = ($18|0)==(0);
                        L8: do {
                            if ($19) {
                                $46 = HEAP8[$p$0109>>0]|0;
                                $47 = ($46<<24>>24)==(37);
                                L10: do {
                                    if ($47) {
                                        $48 = ((($p$0109)) + 1|0);
                                        $49 = HEAP8[$48>>0]|0;
                                        L12: do {
                                            switch ($49<<24>>24) {
                                                case 37:  {
                                                    break L10;
                                                    break;
                                                }
                                                case 42:  {
                                                    $70 = ((($p$0109)) + 2|0);
                                                    $dest$0 = 0;$p$2 = $70;
                                                    break;
                                                }
                                                default: {
                                                    $71 = $49&255;
                                                    $isdigittmp = (($71) + -48)|0;
                                                    $isdigit = ($isdigittmp>>>0)<(10);
                                                    if ($isdigit) {
                                                        $72 = ((($p$0109)) + 2|0);
                                                        $73 = HEAP8[$72>>0]|0;
                                                        $74 = ($73<<24>>24)==(36);
                                                        if ($74) {
                                                            $vacopy_currentptr = HEAP32[$ap>>2]|0;
                                                            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
                                                            $i$0$i = $isdigittmp;
                                                            while(1) {
                                                                $75 = ($i$0$i>>>0)>(1);
                                                                $arglist_current = HEAP32[$ap2$i>>2]|0;
                                                                $76 = $arglist_current;
                                                                $77 = ((0) + 4|0);
                                                                $expanded4 = $77;
                                                                $expanded = (($expanded4) - 1)|0;
                                                                $78 = (($76) + ($expanded))|0;
                                                                $79 = ((0) + 4|0);
                                                                $expanded8 = $79;
                                                                $expanded7 = (($expanded8) - 1)|0;
                                                                $expanded6 = $expanded7 ^ -1;
                                                                $80 = $78 & $expanded6;
                                                                $81 = $80;
                                                                $82 = HEAP32[$81>>2]|0;
                                                                $arglist_next = ((($81)) + 4|0);
                                                                HEAP32[$ap2$i>>2] = $arglist_next;
                                                                $83 = (($i$0$i) + -1)|0;
                                                                if ($75) {
                                                                    $i$0$i = $83;
                                                                } else {
                                                                    $$lcssa = $82;
                                                                    break;
                                                                }
                                                            }
                                                            $84 = ((($p$0109)) + 3|0);
                                                            $dest$0 = $$lcssa;$p$2 = $84;
                                                            break L12;
                                                        }
                                                    }
                                                    $arglist_current2 = HEAP32[$ap>>2]|0;
                                                    $85 = $arglist_current2;
                                                    $86 = ((0) + 4|0);
                                                    $expanded11 = $86;
                                                    $expanded10 = (($expanded11) - 1)|0;
                                                    $87 = (($85) + ($expanded10))|0;
                                                    $88 = ((0) + 4|0);
                                                    $expanded15 = $88;
                                                    $expanded14 = (($expanded15) - 1)|0;
                                                    $expanded13 = $expanded14 ^ -1;
                                                    $89 = $87 & $expanded13;
                                                    $90 = $89;
                                                    $91 = HEAP32[$90>>2]|0;
                                                    $arglist_next3 = ((($90)) + 4|0);
                                                    HEAP32[$ap>>2] = $arglist_next3;
                                                    $dest$0 = $91;$p$2 = $48;
                                                }
                                            }
                                        } while(0);
                                        $92 = HEAP8[$p$2>>0]|0;
                                        $93 = $92&255;
                                        $isdigittmp694 = (($93) + -48)|0;
                                        $isdigit795 = ($isdigittmp694>>>0)<(10);
                                        if ($isdigit795) {
                                            $97 = $93;$p$396 = $p$2;$width$097 = 0;
                                            while(1) {
                                                $94 = ($width$097*10)|0;
                                                $95 = (($94) + -48)|0;
                                                $96 = (($95) + ($97))|0;
                                                $98 = ((($p$396)) + 1|0);
                                                $99 = HEAP8[$98>>0]|0;
                                                $100 = $99&255;
                                                $isdigittmp6 = (($100) + -48)|0;
                                                $isdigit7 = ($isdigittmp6>>>0)<(10);
                                                if ($isdigit7) {
                                                    $97 = $100;$p$396 = $98;$width$097 = $96;
                                                } else {
                                                    $$lcssa38 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
                                                    break;
                                                }
                                            }
                                        } else {
                                            $$lcssa38 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
                                        }
                                        $101 = ($$lcssa38<<24>>24)==(109);
                                        if ($101) {
                                            $102 = ($dest$0|0)!=(0|0);
                                            $103 = $102&1;
                                            $104 = ((($p$3$lcssa)) + 1|0);
                                            $$pre168 = HEAP8[$104>>0]|0;
                                            $107 = $$pre168;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
                                        } else {
                                            $107 = $$lcssa38;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0107;$wcs$1 = $wcs$0103;
                                        }
                                        $105 = ((($p$4)) + 1|0);
                                        $106 = $107&255;
                                        switch ($106|0) {
                                            case 104:  {
                                                $108 = HEAP8[$105>>0]|0;
                                                $109 = ($108<<24>>24)==(104);
                                                $110 = ((($p$4)) + 2|0);
                                                $$9 = $109 ? $110 : $105;
                                                $$10 = $109 ? -2 : -1;
                                                $p$5 = $$9;$size$0 = $$10;
                                                break;
                                            }
                                            case 108:  {
                                                $111 = HEAP8[$105>>0]|0;
                                                $112 = ($111<<24>>24)==(108);
                                                $113 = ((($p$4)) + 2|0);
                                                $$11 = $112 ? $113 : $105;
                                                $$12 = $112 ? 3 : 1;
                                                $p$5 = $$11;$size$0 = $$12;
                                                break;
                                            }
                                            case 106:  {
                                                $p$5 = $105;$size$0 = 3;
                                                break;
                                            }
                                            case 116: case 122:  {
                                            $p$5 = $105;$size$0 = 1;
                                            break;
                                        }
                                            case 76:  {
                                                $p$5 = $105;$size$0 = 2;
                                                break;
                                            }
                                            case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
                                            $p$5 = $p$4;$size$0 = 0;
                                            break;
                                        }
                                            default: {
                                                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
                                                label = 152;
                                                break L6;
                                            }
                                        }
                                        $114 = HEAP8[$p$5>>0]|0;
                                        $115 = $114&255;
                                        $116 = $115 & 47;
                                        $117 = ($116|0)==(3);
                                        $118 = $115 | 32;
                                        $$ = $117 ? $118 : $115;
                                        $$size$0 = $117 ? 1 : $size$0;
                                        switch ($$|0) {
                                            case 99:  {
                                                $119 = ($width$0$lcssa|0)<(1);
                                                $$width$0 = $119 ? 1 : $width$0$lcssa;
                                                $pos$1 = $pos$0108;$width$1 = $$width$0;
                                                break;
                                            }
                                            case 91:  {
                                                $pos$1 = $pos$0108;$width$1 = $width$0$lcssa;
                                                break;
                                            }
                                            case 110:  {
                                                $120 = ($pos$0108|0)<(0);
                                                $121 = $120 << 31 >> 31;
                                                $122 = ($dest$0|0)==(0|0);
                                                if ($122) {
                                                    $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
                                                    break L8;
                                                }
                                                switch ($$size$0|0) {
                                                    case -2:  {
                                                        $123 = $pos$0108&255;
                                                        HEAP8[$dest$0>>0] = $123;
                                                        $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
                                                        break L8;
                                                        break;
                                                    }
                                                    case -1:  {
                                                        $124 = $pos$0108&65535;
                                                        HEAP16[$dest$0>>1] = $124;
                                                        $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
                                                        break L8;
                                                        break;
                                                    }
                                                    case 0:  {
                                                        HEAP32[$dest$0>>2] = $pos$0108;
                                                        $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
                                                        break L8;
                                                        break;
                                                    }
                                                    case 1:  {
                                                        HEAP32[$dest$0>>2] = $pos$0108;
                                                        $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
                                                        break L8;
                                                        break;
                                                    }
                                                    case 3:  {
                                                        $125 = $dest$0;
                                                        $126 = $125;
                                                        HEAP32[$126>>2] = $pos$0108;
                                                        $127 = (($125) + 4)|0;
                                                        $128 = $127;
                                                        HEAP32[$128>>2] = $121;
                                                        $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
                                                        break L8;
                                                        break;
                                                    }
                                                    default: {
                                                        $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
                                                        break L8;
                                                    }
                                                }
                                                break;
                                            }
                                            default: {
                                                ___shlim($f,0);
                                                while(1) {
                                                    $129 = HEAP32[$7>>2]|0;
                                                    $130 = HEAP32[$8>>2]|0;
                                                    $131 = ($129>>>0)<($130>>>0);
                                                    if ($131) {
                                                        $132 = ((($129)) + 1|0);
                                                        HEAP32[$7>>2] = $132;
                                                        $133 = HEAP8[$129>>0]|0;
                                                        $134 = $133&255;
                                                        $136 = $134;
                                                    } else {
                                                        $135 = (___shgetc($f)|0);
                                                        $136 = $135;
                                                    }
                                                    $137 = (_isspace($136)|0);
                                                    $138 = ($137|0)==(0);
                                                    if ($138) {
                                                        break;
                                                    }
                                                }
                                                $139 = HEAP32[$8>>2]|0;
                                                $140 = ($139|0)==(0|0);
                                                $$pre170 = HEAP32[$7>>2]|0;
                                                if ($140) {
                                                    $144 = $$pre170;
                                                } else {
                                                    $141 = ((($$pre170)) + -1|0);
                                                    HEAP32[$7>>2] = $141;
                                                    $144 = $141;
                                                }
                                                $142 = HEAP32[$9>>2]|0;
                                                $143 = HEAP32[$10>>2]|0;
                                                $145 = $144;
                                                $146 = $143;
                                                $147 = (($142) + ($pos$0108))|0;
                                                $148 = (($147) + ($145))|0;
                                                $149 = (($148) - ($146))|0;
                                                $pos$1 = $149;$width$1 = $width$0$lcssa;
                                            }
                                        }
                                        ___shlim($f,$width$1);
                                        $150 = HEAP32[$7>>2]|0;
                                        $151 = HEAP32[$8>>2]|0;
                                        $152 = ($150>>>0)<($151>>>0);
                                        if ($152) {
                                            $153 = ((($150)) + 1|0);
                                            HEAP32[$7>>2] = $153;
                                            $156 = $151;
                                        } else {
                                            $154 = (___shgetc($f)|0);
                                            $155 = ($154|0)<(0);
                                            if ($155) {
                                                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
                                                label = 152;
                                                break L6;
                                            }
                                            $$pre172 = HEAP32[$8>>2]|0;
                                            $156 = $$pre172;
                                        }
                                        $157 = ($156|0)==(0|0);
                                        if (!($157)) {
                                            $158 = HEAP32[$7>>2]|0;
                                            $159 = ((($158)) + -1|0);
                                            HEAP32[$7>>2] = $159;
                                        }
                                        L67: do {
                                            switch ($$|0) {
                                                case 91: case 99: case 115:  {
                                                $160 = ($$|0)==(99);
                                                $161 = $$ & 239;
                                                $162 = ($161|0)==(99);
                                                L69: do {
                                                    if ($162) {
                                                        $163 = ($$|0)==(115);
                                                        _memset(($scanset|0),-1,257)|0;
                                                        HEAP8[$scanset>>0] = 0;
                                                        if ($163) {
                                                            HEAP8[$12>>0] = 0;
                                                            ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
                                                            $p$9 = $p$5;
                                                        } else {
                                                            $p$9 = $p$5;
                                                        }
                                                    } else {
                                                        $164 = ((($p$5)) + 1|0);
                                                        $165 = HEAP8[$164>>0]|0;
                                                        $166 = ($165<<24>>24)==(94);
                                                        $167 = ((($p$5)) + 2|0);
                                                        $invert$0 = $166&1;
                                                        $168 = $166 ? $164 : $p$5;
                                                        $p$6 = $166 ? $167 : $164;
                                                        $169 = $166&1;
                                                        _memset(($scanset|0),($169|0),257)|0;
                                                        HEAP8[$scanset>>0] = 0;
                                                        $170 = HEAP8[$p$6>>0]|0;
                                                        switch ($170<<24>>24) {
                                                            case 45:  {
                                                                $171 = ((($168)) + 2|0);
                                                                $172 = $invert$0 ^ 1;
                                                                $173 = $172&255;
                                                                HEAP8[$14>>0] = $173;
                                                                $$pre$phi182Z2D = $173;$p$7$ph = $171;
                                                                break;
                                                            }
                                                            case 93:  {
                                                                $174 = ((($168)) + 2|0);
                                                                $175 = $invert$0 ^ 1;
                                                                $176 = $175&255;
                                                                HEAP8[$15>>0] = $176;
                                                                $$pre$phi182Z2D = $176;$p$7$ph = $174;
                                                                break;
                                                            }
                                                            default: {
                                                                $$pre180 = $invert$0 ^ 1;
                                                                $$pre181 = $$pre180&255;
                                                                $$pre$phi182Z2D = $$pre181;$p$7$ph = $p$6;
                                                            }
                                                        }
                                                        $p$7 = $p$7$ph;
                                                        while(1) {
                                                            $177 = HEAP8[$p$7>>0]|0;
                                                            L80: do {
                                                                switch ($177<<24>>24) {
                                                                    case 0:  {
                                                                        $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
                                                                        label = 152;
                                                                        break L6;
                                                                        break;
                                                                    }
                                                                    case 93:  {
                                                                        $p$9 = $p$7;
                                                                        break L69;
                                                                        break;
                                                                    }
                                                                    case 45:  {
                                                                        $178 = ((($p$7)) + 1|0);
                                                                        $179 = HEAP8[$178>>0]|0;
                                                                        switch ($179<<24>>24) {
                                                                            case 93: case 0:  {
                                                                            $190 = 45;$p$8 = $p$7;
                                                                            break L80;
                                                                            break;
                                                                        }
                                                                            default: {
                                                                            }
                                                                        }
                                                                        $180 = ((($p$7)) + -1|0);
                                                                        $181 = HEAP8[$180>>0]|0;
                                                                        $182 = ($181&255)<($179&255);
                                                                        if ($182) {
                                                                            $183 = $181&255;
                                                                            $c$0100 = $183;
                                                                            while(1) {
                                                                                $184 = (($c$0100) + 1)|0;
                                                                                $185 = (($scanset) + ($184)|0);
                                                                                HEAP8[$185>>0] = $$pre$phi182Z2D;
                                                                                $186 = HEAP8[$178>>0]|0;
                                                                                $187 = $186&255;
                                                                                $188 = ($184|0)<($187|0);
                                                                                if ($188) {
                                                                                    $c$0100 = $184;
                                                                                } else {
                                                                                    $190 = $186;$p$8 = $178;
                                                                                    break;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            $190 = $179;$p$8 = $178;
                                                                        }
                                                                        break;
                                                                    }
                                                                    default: {
                                                                        $190 = $177;$p$8 = $p$7;
                                                                    }
                                                                }
                                                            } while(0);
                                                            $189 = $190&255;
                                                            $191 = (($189) + 1)|0;
                                                            $192 = (($scanset) + ($191)|0);
                                                            HEAP8[$192>>0] = $$pre$phi182Z2D;
                                                            $193 = ((($p$8)) + 1|0);
                                                            $p$7 = $193;
                                                        }
                                                    }
                                                } while(0);
                                                $194 = (($width$1) + 1)|0;
                                                $195 = $160 ? $194 : 31;
                                                $196 = ($$size$0|0)==(1);
                                                $197 = ($alloc$0|0)!=(0);
                                                L88: do {
                                                    if ($196) {
                                                        if ($197) {
                                                            $198 = $195 << 2;
                                                            $199 = (_malloc($198)|0);
                                                            $200 = ($199|0)==(0|0);
                                                            if ($200) {
                                                                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $199;
                                                                label = 152;
                                                                break L6;
                                                            } else {
                                                                $wcs$2 = $199;
                                                            }
                                                        } else {
                                                            $wcs$2 = $dest$0;
                                                        }
                                                        HEAP32[$st>>2] = 0;
                                                        HEAP32[$13>>2] = 0;
                                                        $i$0$ph = 0;$k$0$ph = $195;$wcs$3$ph = $wcs$2;
                                                        L94: while(1) {
                                                            $201 = ($wcs$3$ph|0)==(0|0);
                                                            $i$0$ph20 = $i$0$ph;
                                                            while(1) {
                                                                L98: while(1) {
                                                                    $202 = HEAP32[$7>>2]|0;
                                                                    $203 = HEAP32[$8>>2]|0;
                                                                    $204 = ($202>>>0)<($203>>>0);
                                                                    if ($204) {
                                                                        $205 = ((($202)) + 1|0);
                                                                        HEAP32[$7>>2] = $205;
                                                                        $206 = HEAP8[$202>>0]|0;
                                                                        $207 = $206&255;
                                                                        $210 = $207;
                                                                    } else {
                                                                        $208 = (___shgetc($f)|0);
                                                                        $210 = $208;
                                                                    }
                                                                    $209 = (($210) + 1)|0;
                                                                    $211 = (($scanset) + ($209)|0);
                                                                    $212 = HEAP8[$211>>0]|0;
                                                                    $213 = ($212<<24>>24)==(0);
                                                                    if ($213) {
                                                                        $i$0$ph20$lcssa = $i$0$ph20;$wcs$3$ph$lcssa = $wcs$3$ph;
                                                                        break L94;
                                                                    }
                                                                    $214 = $210&255;
                                                                    HEAP8[$0>>0] = $214;
                                                                    $215 = (_mbrtowc($wc,$0,1,$st)|0);
                                                                    switch ($215|0) {
                                                                        case -1:  {
                                                                            $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
                                                                            label = 152;
                                                                            break L6;
                                                                            break;
                                                                        }
                                                                        case -2:  {
                                                                            break;
                                                                        }
                                                                        default: {
                                                                            break L98;
                                                                        }
                                                                    }
                                                                }
                                                                if ($201) {
                                                                    $i$1 = $i$0$ph20;
                                                                } else {
                                                                    $216 = HEAP32[$wc>>2]|0;
                                                                    $217 = (($i$0$ph20) + 1)|0;
                                                                    $218 = (($wcs$3$ph) + ($i$0$ph20<<2)|0);
                                                                    HEAP32[$218>>2] = $216;
                                                                    $i$1 = $217;
                                                                }
                                                                $219 = ($i$1|0)==($k$0$ph|0);
                                                                $or$cond = $197 & $219;
                                                                if ($or$cond) {
                                                                    break;
                                                                } else {
                                                                    $i$0$ph20 = $i$1;
                                                                }
                                                            }
                                                            $factor = $k$0$ph << 1;
                                                            $220 = $factor | 1;
                                                            $221 = $220 << 2;
                                                            $222 = (_realloc($wcs$3$ph,$221)|0);
                                                            $223 = ($222|0)==(0|0);
                                                            if ($223) {
                                                                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
                                                                label = 152;
                                                                break L6;
                                                            }
                                                            $i$0$ph$phi = $k$0$ph;$k$0$ph = $220;$wcs$3$ph = $222;$i$0$ph = $i$0$ph$phi;
                                                        }
                                                        $224 = (_mbsinit($st)|0);
                                                        $225 = ($224|0)==(0);
                                                        if ($225) {
                                                            $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa;
                                                            label = 152;
                                                            break L6;
                                                        } else {
                                                            $i$4 = $i$0$ph20$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph$lcssa;
                                                        }
                                                    } else {
                                                        if ($197) {
                                                            $226 = (_malloc($195)|0);
                                                            $227 = ($226|0)==(0|0);
                                                            if ($227) {
                                                                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = 0;
                                                                label = 152;
                                                                break L6;
                                                            } else {
                                                                $i$2$ph = 0;$k$1$ph = $195;$s$2$ph = $226;
                                                            }
                                                            while(1) {
                                                                $i$2 = $i$2$ph;
                                                                while(1) {
                                                                    $228 = HEAP32[$7>>2]|0;
                                                                    $229 = HEAP32[$8>>2]|0;
                                                                    $230 = ($228>>>0)<($229>>>0);
                                                                    if ($230) {
                                                                        $231 = ((($228)) + 1|0);
                                                                        HEAP32[$7>>2] = $231;
                                                                        $232 = HEAP8[$228>>0]|0;
                                                                        $233 = $232&255;
                                                                        $236 = $233;
                                                                    } else {
                                                                        $234 = (___shgetc($f)|0);
                                                                        $236 = $234;
                                                                    }
                                                                    $235 = (($236) + 1)|0;
                                                                    $237 = (($scanset) + ($235)|0);
                                                                    $238 = HEAP8[$237>>0]|0;
                                                                    $239 = ($238<<24>>24)==(0);
                                                                    if ($239) {
                                                                        $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
                                                                        break L88;
                                                                    }
                                                                    $240 = $236&255;
                                                                    $241 = (($i$2) + 1)|0;
                                                                    $242 = (($s$2$ph) + ($i$2)|0);
                                                                    HEAP8[$242>>0] = $240;
                                                                    $243 = ($241|0)==($k$1$ph|0);
                                                                    if ($243) {
                                                                        break;
                                                                    } else {
                                                                        $i$2 = $241;
                                                                    }
                                                                }
                                                                $factor16 = $k$1$ph << 1;
                                                                $244 = $factor16 | 1;
                                                                $245 = (_realloc($s$2$ph,$244)|0);
                                                                $246 = ($245|0)==(0|0);
                                                                if ($246) {
                                                                    $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$2$ph;$wcs$7 = 0;
                                                                    label = 152;
                                                                    break L6;
                                                                } else {
                                                                    $i$2$ph$phi = $k$1$ph;$k$1$ph = $244;$s$2$ph = $245;$i$2$ph = $i$2$ph$phi;
                                                                }
                                                            }
                                                        }
                                                        $247 = ($dest$0|0)==(0|0);
                                                        if ($247) {
                                                            $265 = $156;
                                                            while(1) {
                                                                $263 = HEAP32[$7>>2]|0;
                                                                $264 = ($263>>>0)<($265>>>0);
                                                                if ($264) {
                                                                    $266 = ((($263)) + 1|0);
                                                                    HEAP32[$7>>2] = $266;
                                                                    $267 = HEAP8[$263>>0]|0;
                                                                    $268 = $267&255;
                                                                    $271 = $268;
                                                                } else {
                                                                    $269 = (___shgetc($f)|0);
                                                                    $271 = $269;
                                                                }
                                                                $270 = (($271) + 1)|0;
                                                                $272 = (($scanset) + ($270)|0);
                                                                $273 = HEAP8[$272>>0]|0;
                                                                $274 = ($273<<24>>24)==(0);
                                                                if ($274) {
                                                                    $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
                                                                    break L88;
                                                                }
                                                                $$pre176 = HEAP32[$8>>2]|0;
                                                                $265 = $$pre176;
                                                            }
                                                        } else {
                                                            $250 = $156;$i$3 = 0;
                                                            while(1) {
                                                                $248 = HEAP32[$7>>2]|0;
                                                                $249 = ($248>>>0)<($250>>>0);
                                                                if ($249) {
                                                                    $251 = ((($248)) + 1|0);
                                                                    HEAP32[$7>>2] = $251;
                                                                    $252 = HEAP8[$248>>0]|0;
                                                                    $253 = $252&255;
                                                                    $256 = $253;
                                                                } else {
                                                                    $254 = (___shgetc($f)|0);
                                                                    $256 = $254;
                                                                }
                                                                $255 = (($256) + 1)|0;
                                                                $257 = (($scanset) + ($255)|0);
                                                                $258 = HEAP8[$257>>0]|0;
                                                                $259 = ($258<<24>>24)==(0);
                                                                if ($259) {
                                                                    $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
                                                                    break L88;
                                                                }
                                                                $260 = $256&255;
                                                                $261 = (($i$3) + 1)|0;
                                                                $262 = (($dest$0) + ($i$3)|0);
                                                                HEAP8[$262>>0] = $260;
                                                                $$pre174 = HEAP32[$8>>2]|0;
                                                                $250 = $$pre174;$i$3 = $261;
                                                            }
                                                        }
                                                    }
                                                } while(0);
                                                $275 = HEAP32[$8>>2]|0;
                                                $276 = ($275|0)==(0|0);
                                                $$pre178 = HEAP32[$7>>2]|0;
                                                if ($276) {
                                                    $280 = $$pre178;
                                                } else {
                                                    $277 = ((($$pre178)) + -1|0);
                                                    HEAP32[$7>>2] = $277;
                                                    $280 = $277;
                                                }
                                                $278 = HEAP32[$9>>2]|0;
                                                $279 = HEAP32[$10>>2]|0;
                                                $281 = $280;
                                                $282 = $279;
                                                $283 = (($281) - ($282))|0;
                                                $284 = (($283) + ($278))|0;
                                                $285 = ($284|0)==(0);
                                                if ($285) {
                                                    $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
                                                    break L6;
                                                }
                                                $$not = $160 ^ 1;
                                                $286 = ($284|0)==($width$1|0);
                                                $or$cond8 = $286 | $$not;
                                                if (!($or$cond8)) {
                                                    $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
                                                    break L6;
                                                }
                                                do {
                                                    if ($197) {
                                                        if ($196) {
                                                            HEAP32[$dest$0>>2] = $wcs$4;
                                                            break;
                                                        } else {
                                                            HEAP32[$dest$0>>2] = $s$3;
                                                            break;
                                                        }
                                                    }
                                                } while(0);
                                                if ($160) {
                                                    $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
                                                } else {
                                                    $287 = ($wcs$4|0)==(0|0);
                                                    if (!($287)) {
                                                        $288 = (($wcs$4) + ($i$4<<2)|0);
                                                        HEAP32[$288>>2] = 0;
                                                    }
                                                    $289 = ($s$3|0)==(0|0);
                                                    if ($289) {
                                                        $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
                                                        break L67;
                                                    }
                                                    $290 = (($s$3) + ($i$4)|0);
                                                    HEAP8[$290>>0] = 0;
                                                    $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
                                                }
                                                break;
                                            }
                                                case 120: case 88: case 112:  {
                                                $base$0 = 16;
                                                label = 134;
                                                break;
                                            }
                                                case 111:  {
                                                    $base$0 = 8;
                                                    label = 134;
                                                    break;
                                                }
                                                case 117: case 100:  {
                                                $base$0 = 10;
                                                label = 134;
                                                break;
                                            }
                                                case 105:  {
                                                    $base$0 = 0;
                                                    label = 134;
                                                    break;
                                                }
                                                case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
                                                $310 = (+___floatscan($f,$$size$0,0));
                                                $311 = HEAP32[$9>>2]|0;
                                                $312 = HEAP32[$7>>2]|0;
                                                $313 = HEAP32[$10>>2]|0;
                                                $314 = $312;
                                                $315 = $313;
                                                $316 = (($315) - ($314))|0;
                                                $317 = ($311|0)==($316|0);
                                                if ($317) {
                                                    $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
                                                    break L6;
                                                }
                                                $318 = ($dest$0|0)==(0|0);
                                                if ($318) {
                                                    $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                } else {
                                                    switch ($$size$0|0) {
                                                        case 0:  {
                                                            $319 = $310;
                                                            HEAPF32[$dest$0>>2] = $319;
                                                            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                            break L67;
                                                            break;
                                                        }
                                                        case 1:  {
                                                            HEAPF64[$dest$0>>3] = $310;
                                                            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                            break L67;
                                                            break;
                                                        }
                                                        case 2:  {
                                                            HEAPF64[$dest$0>>3] = $310;
                                                            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                            break L67;
                                                            break;
                                                        }
                                                        default: {
                                                            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                            break L67;
                                                        }
                                                    }
                                                }
                                                break;
                                            }
                                                default: {
                                                    $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                }
                                            }
                                        } while(0);
                                        L168: do {
                                            if ((label|0) == 134) {
                                                label = 0;
                                                $291 = (___intscan($f,$base$0,0,-1,-1)|0);
                                                $292 = tempRet0;
                                                $293 = HEAP32[$9>>2]|0;
                                                $294 = HEAP32[$7>>2]|0;
                                                $295 = HEAP32[$10>>2]|0;
                                                $296 = $294;
                                                $297 = $295;
                                                $298 = (($297) - ($296))|0;
                                                $299 = ($293|0)==($298|0);
                                                if ($299) {
                                                    $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
                                                    break L6;
                                                }
                                                $300 = ($$|0)==(112);
                                                $301 = ($dest$0|0)!=(0|0);
                                                $or$cond3 = $301 & $300;
                                                if ($or$cond3) {
                                                    $302 = $291;
                                                    HEAP32[$dest$0>>2] = $302;
                                                    $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                    break;
                                                }
                                                $303 = ($dest$0|0)==(0|0);
                                                if ($303) {
                                                    $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                } else {
                                                    switch ($$size$0|0) {
                                                        case -2:  {
                                                            $304 = $291&255;
                                                            HEAP8[$dest$0>>0] = $304;
                                                            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                            break L168;
                                                            break;
                                                        }
                                                        case -1:  {
                                                            $305 = $291&65535;
                                                            HEAP16[$dest$0>>1] = $305;
                                                            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                            break L168;
                                                            break;
                                                        }
                                                        case 0:  {
                                                            HEAP32[$dest$0>>2] = $291;
                                                            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                            break L168;
                                                            break;
                                                        }
                                                        case 1:  {
                                                            HEAP32[$dest$0>>2] = $291;
                                                            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                            break L168;
                                                            break;
                                                        }
                                                        case 3:  {
                                                            $306 = $dest$0;
                                                            $307 = $306;
                                                            HEAP32[$307>>2] = $291;
                                                            $308 = (($306) + 4)|0;
                                                            $309 = $308;
                                                            HEAP32[$309>>2] = $292;
                                                            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                            break L168;
                                                            break;
                                                        }
                                                        default: {
                                                            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
                                                            break L168;
                                                        }
                                                    }
                                                }
                                            }
                                        } while(0);
                                        $320 = HEAP32[$9>>2]|0;
                                        $321 = HEAP32[$7>>2]|0;
                                        $322 = HEAP32[$10>>2]|0;
                                        $323 = $321;
                                        $324 = $322;
                                        $325 = (($320) + ($pos$1))|0;
                                        $326 = (($325) + ($323))|0;
                                        $327 = (($326) - ($324))|0;
                                        $not$ = ($dest$0|0)!=(0|0);
                                        $328 = $not$&1;
                                        $matches$0$ = (($328) + ($matches$0104))|0;
                                        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $327;$s$5 = $s$4;$wcs$6 = $wcs$5;
                                        break L8;
                                    }
                                } while(0);
                                $50 = $47&1;
                                $51 = (($p$0109) + ($50)|0);
                                ___shlim($f,0);
                                $52 = HEAP32[$7>>2]|0;
                                $53 = HEAP32[$8>>2]|0;
                                $54 = ($52>>>0)<($53>>>0);
                                if ($54) {
                                    $55 = ((($52)) + 1|0);
                                    HEAP32[$7>>2] = $55;
                                    $56 = HEAP8[$52>>0]|0;
                                    $57 = $56&255;
                                    $61 = $57;
                                } else {
                                    $58 = (___shgetc($f)|0);
                                    $61 = $58;
                                }
                                $59 = HEAP8[$51>>0]|0;
                                $60 = $59&255;
                                $62 = ($61|0)==($60|0);
                                if (!($62)) {
                                    $$lcssa384 = $61;$matches$0104$lcssa = $matches$0104;$s$0107$lcssa = $s$0107;$wcs$0103$lcssa = $wcs$0103;
                                    label = 21;
                                    break L6;
                                }
                                $69 = (($pos$0108) + 1)|0;
                                $matches$1 = $matches$0104;$p$11 = $51;$pos$2 = $69;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
                            } else {
                                $p$1 = $p$0109;
                                while(1) {
                                    $20 = ((($p$1)) + 1|0);
                                    $21 = HEAP8[$20>>0]|0;
                                    $22 = $21&255;
                                    $23 = (_isspace($22)|0);
                                    $24 = ($23|0)==(0);
                                    if ($24) {
                                        $p$1$lcssa = $p$1;
                                        break;
                                    } else {
                                        $p$1 = $20;
                                    }
                                }
                                ___shlim($f,0);
                                while(1) {
                                    $25 = HEAP32[$7>>2]|0;
                                    $26 = HEAP32[$8>>2]|0;
                                    $27 = ($25>>>0)<($26>>>0);
                                    if ($27) {
                                        $28 = ((($25)) + 1|0);
                                        HEAP32[$7>>2] = $28;
                                        $29 = HEAP8[$25>>0]|0;
                                        $30 = $29&255;
                                        $32 = $30;
                                    } else {
                                        $31 = (___shgetc($f)|0);
                                        $32 = $31;
                                    }
                                    $33 = (_isspace($32)|0);
                                    $34 = ($33|0)==(0);
                                    if ($34) {
                                        break;
                                    }
                                }
                                $35 = HEAP32[$8>>2]|0;
                                $36 = ($35|0)==(0|0);
                                $$pre = HEAP32[$7>>2]|0;
                                if ($36) {
                                    $40 = $$pre;
                                } else {
                                    $37 = ((($$pre)) + -1|0);
                                    HEAP32[$7>>2] = $37;
                                    $40 = $37;
                                }
                                $38 = HEAP32[$9>>2]|0;
                                $39 = HEAP32[$10>>2]|0;
                                $41 = $40;
                                $42 = $39;
                                $43 = (($38) + ($pos$0108))|0;
                                $44 = (($43) + ($41))|0;
                                $45 = (($44) - ($42))|0;
                                $matches$1 = $matches$0104;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
                            }
                        } while(0);
                        $329 = ((($p$11)) + 1|0);
                        $330 = HEAP8[$329>>0]|0;
                        $331 = ($330<<24>>24)==(0);
                        if ($331) {
                            $matches$3 = $matches$1;
                            break L4;
                        } else {
                            $17 = $330;$matches$0104 = $matches$1;$p$0109 = $329;$pos$0108 = $pos$2;$s$0107 = $s$5;$wcs$0103 = $wcs$6;
                        }
                    }
                    if ((label|0) == 21) {
                        $63 = HEAP32[$8>>2]|0;
                        $64 = ($63|0)==(0|0);
                        if (!($64)) {
                            $65 = HEAP32[$7>>2]|0;
                            $66 = ((($65)) + -1|0);
                            HEAP32[$7>>2] = $66;
                        }
                        $67 = ($$lcssa384|0)>(-1);
                        $68 = ($matches$0104$lcssa|0)!=(0);
                        $or$cond5 = $68 | $67;
                        if ($or$cond5) {
                            $matches$3 = $matches$0104$lcssa;
                            break;
                        } else {
                            $alloc$1 = 0;$s$7 = $s$0107$lcssa;$wcs$8 = $wcs$0103$lcssa;
                            label = 153;
                        }
                    }
                    else if ((label|0) == 152) {
                        $$old4 = ($matches$0104376|0)==(0);
                        if ($$old4) {
                            $alloc$1 = $alloc$0400;$s$7 = $s$6;$wcs$8 = $wcs$7;
                            label = 153;
                        } else {
                            $alloc$2 = $alloc$0400;$matches$2 = $matches$0104376;$s$8 = $s$6;$wcs$9 = $wcs$7;
                        }
                    }
                    if ((label|0) == 153) {
                        $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
                    }
                    $332 = ($alloc$2|0)==(0);
                    if ($332) {
                        $matches$3 = $matches$2;
                    } else {
                        _free($s$8);
                        _free($wcs$9);
                        $matches$3 = $matches$2;
                    }
                }
            } while(0);
            $334 = ($333|0)==(0);
            if (!($334)) {
                ___unlockfile($f);
            }
            STACKTOP = sp;return ($matches$3|0);
        }
        function _vsnprintf($s,$n,$fmt,$ap) {
            $s = $s|0;
            $n = $n|0;
            $fmt = $fmt|0;
            $ap = $ap|0;
            var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 128|0;
            $b = sp + 112|0;
            $f = sp;
            dest=$f; src=3532; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
            $0 = (($n) + -1)|0;
            $1 = ($0>>>0)>(2147483646);
            if ($1) {
                $2 = ($n|0)==(0);
                if ($2) {
                    $$01 = $b;$$02 = 1;
                    label = 4;
                } else {
                    $3 = (___errno_location()|0);
                    HEAP32[$3>>2] = 75;
                    $$0 = -1;
                }
            } else {
                $$01 = $s;$$02 = $n;
                label = 4;
            }
            if ((label|0) == 4) {
                $4 = $$01;
                $5 = (-2 - ($4))|0;
                $6 = ($$02>>>0)>($5>>>0);
                $$$02 = $6 ? $5 : $$02;
                $7 = ((($f)) + 48|0);
                HEAP32[$7>>2] = $$$02;
                $8 = ((($f)) + 20|0);
                HEAP32[$8>>2] = $$01;
                $9 = ((($f)) + 44|0);
                HEAP32[$9>>2] = $$01;
                $10 = (($$01) + ($$$02)|0);
                $11 = ((($f)) + 16|0);
                HEAP32[$11>>2] = $10;
                $12 = ((($f)) + 28|0);
                HEAP32[$12>>2] = $10;
                $13 = (_vfprintf($f,$fmt,$ap)|0);
                $14 = ($$$02|0)==(0);
                if ($14) {
                    $$0 = $13;
                } else {
                    $15 = HEAP32[$8>>2]|0;
                    $16 = HEAP32[$11>>2]|0;
                    $17 = ($15|0)==($16|0);
                    $18 = $17 << 31 >> 31;
                    $19 = (($15) + ($18)|0);
                    HEAP8[$19>>0] = 0;
                    $$0 = $13;
                }
            }
            STACKTOP = sp;return ($$0|0);
        }
        function _vsprintf($s,$fmt,$ap) {
            $s = $s|0;
            $fmt = $fmt|0;
            $ap = $ap|0;
            var $0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
            return ($0|0);
        }
        function _vsscanf($s,$fmt,$ap) {
            $s = $s|0;
            $fmt = $fmt|0;
            $ap = $ap|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 112|0;
            $f = sp;
            dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
            $0 = ((($f)) + 32|0);
            HEAP32[$0>>2] = 8;
            $1 = ((($f)) + 44|0);
            HEAP32[$1>>2] = $s;
            $2 = ((($f)) + 76|0);
            HEAP32[$2>>2] = -1;
            $3 = ((($f)) + 84|0);
            HEAP32[$3>>2] = $s;
            $4 = (_vfscanf($f,$fmt,$ap)|0);
            STACKTOP = sp;return ($4|0);
        }
        function ___fdopen($fd,$mode) {
            $fd = $fd|0;
            $mode = $mode|0;
            var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
            var sp = 0, stop = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 112|0;
            $vararg_buffer12 = sp + 40|0;
            $vararg_buffer7 = sp + 24|0;
            $vararg_buffer3 = sp + 16|0;
            $vararg_buffer = sp;
            $tio = sp + 52|0;
            $0 = HEAP8[$mode>>0]|0;
            $1 = $0 << 24 >> 24;
            $memchr = (_memchr(26651,$1,4)|0);
            $2 = ($memchr|0)==(0|0);
            if ($2) {
                $3 = (___errno_location()|0);
                HEAP32[$3>>2] = 22;
                $$0 = 0;
            } else {
                $4 = (_malloc(1144)|0);
                $5 = ($4|0)==(0|0);
                if ($5) {
                    $$0 = 0;
                } else {
                    dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
                    $6 = (_strchr($mode,43)|0);
                    $7 = ($6|0)==(0|0);
                    if ($7) {
                        $8 = ($0<<24>>24)==(114);
                        $9 = $8 ? 8 : 4;
                        HEAP32[$4>>2] = $9;
                    }
                    $10 = (_strchr($mode,101)|0);
                    $11 = ($10|0)==(0|0);
                    if ($11) {
                        $12 = $0;
                    } else {
                        HEAP32[$vararg_buffer>>2] = $fd;
                        $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                        HEAP32[$vararg_ptr1>>2] = 2;
                        $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
                        HEAP32[$vararg_ptr2>>2] = 1;
                        (___syscall221(221,($vararg_buffer|0))|0);
                        $$pre = HEAP8[$mode>>0]|0;
                        $12 = $$pre;
                    }
                    $13 = ($12<<24>>24)==(97);
                    if ($13) {
                        HEAP32[$vararg_buffer3>>2] = $fd;
                        $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
                        HEAP32[$vararg_ptr6>>2] = 3;
                        $14 = (___syscall221(221,($vararg_buffer3|0))|0);
                        $15 = $14 & 1024;
                        $16 = ($15|0)==(0);
                        if ($16) {
                            $17 = $14 | 1024;
                            HEAP32[$vararg_buffer7>>2] = $fd;
                            $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
                            HEAP32[$vararg_ptr10>>2] = 4;
                            $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
                            HEAP32[$vararg_ptr11>>2] = $17;
                            (___syscall221(221,($vararg_buffer7|0))|0);
                        }
                        $18 = HEAP32[$4>>2]|0;
                        $19 = $18 | 128;
                        HEAP32[$4>>2] = $19;
                        $26 = $19;
                    } else {
                        $$pre1 = HEAP32[$4>>2]|0;
                        $26 = $$pre1;
                    }
                    $20 = ((($4)) + 60|0);
                    HEAP32[$20>>2] = $fd;
                    $21 = ((($4)) + 120|0);
                    $22 = ((($4)) + 44|0);
                    HEAP32[$22>>2] = $21;
                    $23 = ((($4)) + 48|0);
                    HEAP32[$23>>2] = 1024;
                    $24 = ((($4)) + 75|0);
                    HEAP8[$24>>0] = -1;
                    $25 = $26 & 8;
                    $27 = ($25|0)==(0);
                    if ($27) {
                        HEAP32[$vararg_buffer12>>2] = $fd;
                        $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
                        HEAP32[$vararg_ptr15>>2] = 21505;
                        $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
                        HEAP32[$vararg_ptr16>>2] = $tio;
                        $28 = (___syscall54(54,($vararg_buffer12|0))|0);
                        $29 = ($28|0)==(0);
                        if ($29) {
                            HEAP8[$24>>0] = 10;
                        }
                    }
                    $30 = ((($4)) + 32|0);
                    HEAP32[$30>>2] = 4;
                    $31 = ((($4)) + 36|0);
                    HEAP32[$31>>2] = 2;
                    $32 = ((($4)) + 40|0);
                    HEAP32[$32>>2] = 3;
                    $33 = ((($4)) + 12|0);
                    HEAP32[$33>>2] = 1;
                    $34 = HEAP32[(3228)>>2]|0;
                    $35 = ($34|0)==(0);
                    if ($35) {
                        $36 = ((($4)) + 76|0);
                        HEAP32[$36>>2] = -1;
                    }
                    ___lock(((3252)|0));
                    $37 = HEAP32[(3248)>>2]|0;
                    $38 = ((($4)) + 56|0);
                    HEAP32[$38>>2] = $37;
                    $39 = ($37|0)==(0);
                    if (!($39)) {
                        $40 = $37;
                        $41 = ((($40)) + 52|0);
                        HEAP32[$41>>2] = $4;
                    }
                    HEAP32[(3248)>>2] = $4;
                    ___unlock(((3252)|0));
                    $$0 = $4;
                }
            }
            STACKTOP = sp;return ($$0|0);
        }
        function ___fmodeflags($mode) {
            $mode = $mode|0;
            var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
            var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_strchr($mode,43)|0);
            $1 = ($0|0)==(0|0);
            $2 = HEAP8[$mode>>0]|0;
            $not$ = ($2<<24>>24)!=(114);
            $$ = $not$&1;
            $flags$0 = $1 ? $$ : 2;
            $3 = (_strchr($mode,120)|0);
            $4 = ($3|0)==(0|0);
            $5 = $flags$0 | 128;
            $flags$0$ = $4 ? $flags$0 : $5;
            $6 = (_strchr($mode,101)|0);
            $7 = ($6|0)==(0|0);
            $8 = $flags$0$ | 524288;
            $flags$2 = $7 ? $flags$0$ : $8;
            $9 = ($2<<24>>24)==(114);
            $10 = $flags$2 | 64;
            $flags$2$ = $9 ? $flags$2 : $10;
            $11 = ($2<<24>>24)==(119);
            $12 = $flags$2$ | 512;
            $flags$4 = $11 ? $12 : $flags$2$;
            $13 = ($2<<24>>24)==(97);
            $14 = $flags$4 | 1024;
            $$flags$4 = $13 ? $14 : $flags$4;
            return ($$flags$4|0);
        }
        function ___lockfile($f) {
            $f = $f|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            return 0;
        }
        function ___unlockfile($f) {
            $f = $f|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            return;
        }
        function ___overflow($f,$_c) {
            $f = $f|0;
            $_c = $_c|0;
            var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $c = sp;
            $0 = $_c&255;
            HEAP8[$c>>0] = $0;
            $1 = ((($f)) + 16|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)==(0|0);
            if ($3) {
                $4 = (___towrite($f)|0);
                $5 = ($4|0)==(0);
                if ($5) {
                    $$pre = HEAP32[$1>>2]|0;
                    $9 = $$pre;
                    label = 4;
                } else {
                    $$0 = -1;
                }
            } else {
                $9 = $2;
                label = 4;
            }
            do {
                if ((label|0) == 4) {
                    $6 = ((($f)) + 20|0);
                    $7 = HEAP32[$6>>2]|0;
                    $8 = ($7>>>0)<($9>>>0);
                    if ($8) {
                        $10 = $_c & 255;
                        $11 = ((($f)) + 75|0);
                        $12 = HEAP8[$11>>0]|0;
                        $13 = $12 << 24 >> 24;
                        $14 = ($10|0)==($13|0);
                        if (!($14)) {
                            $15 = ((($7)) + 1|0);
                            HEAP32[$6>>2] = $15;
                            HEAP8[$7>>0] = $0;
                            $$0 = $10;
                            break;
                        }
                    }
                    $16 = ((($f)) + 36|0);
                    $17 = HEAP32[$16>>2]|0;
                    $18 = (FUNCTION_TABLE_iiii[$17 & 15]($f,$c,1)|0);
                    $19 = ($18|0)==(1);
                    if ($19) {
                        $20 = HEAP8[$c>>0]|0;
                        $21 = $20&255;
                        $$0 = $21;
                    } else {
                        $$0 = -1;
                    }
                }
            } while(0);
            STACKTOP = sp;return ($$0|0);
        }
        function ___stdio_close($f) {
            $f = $f|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $vararg_buffer = sp;
            $0 = ((($f)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            HEAP32[$vararg_buffer>>2] = $1;
            $2 = (___syscall6(6,($vararg_buffer|0))|0);
            $3 = (___syscall_ret($2)|0);
            STACKTOP = sp;return ($3|0);
        }
        function ___stdio_read($f,$buf,$len) {
            $f = $f|0;
            $buf = $buf|0;
            $len = $len|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
            var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 48|0;
            $vararg_buffer3 = sp + 16|0;
            $vararg_buffer = sp;
            $iov = sp + 32|0;
            HEAP32[$iov>>2] = $buf;
            $0 = ((($iov)) + 4|0);
            $1 = ((($f)) + 48|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = ($2|0)!=(0);
            $4 = $3&1;
            $5 = (($len) - ($4))|0;
            HEAP32[$0>>2] = $5;
            $6 = ((($iov)) + 8|0);
            $7 = ((($f)) + 44|0);
            $8 = HEAP32[$7>>2]|0;
            HEAP32[$6>>2] = $8;
            $9 = ((($iov)) + 12|0);
            HEAP32[$9>>2] = $2;
            $10 = HEAP32[3224>>2]|0;
            $11 = ($10|0)==(0|0);
            if ($11) {
                $16 = ((($f)) + 60|0);
                $17 = HEAP32[$16>>2]|0;
                HEAP32[$vararg_buffer3>>2] = $17;
                $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
                HEAP32[$vararg_ptr6>>2] = $iov;
                $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
                HEAP32[$vararg_ptr7>>2] = 2;
                $18 = (___syscall145(145,($vararg_buffer3|0))|0);
                $19 = (___syscall_ret($18)|0);
                $cnt$0 = $19;
            } else {
                _pthread_cleanup_push((3|0),($f|0));
                $12 = ((($f)) + 60|0);
                $13 = HEAP32[$12>>2]|0;
                HEAP32[$vararg_buffer>>2] = $13;
                $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                HEAP32[$vararg_ptr1>>2] = $iov;
                $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
                HEAP32[$vararg_ptr2>>2] = 2;
                $14 = (___syscall145(145,($vararg_buffer|0))|0);
                $15 = (___syscall_ret($14)|0);
                _pthread_cleanup_pop(0);
                $cnt$0 = $15;
            }
            $20 = ($cnt$0|0)<(1);
            if ($20) {
                $21 = $cnt$0 & 48;
                $22 = $21 ^ 16;
                $23 = HEAP32[$f>>2]|0;
                $24 = $23 | $22;
                HEAP32[$f>>2] = $24;
                $25 = ((($f)) + 8|0);
                HEAP32[$25>>2] = 0;
                $26 = ((($f)) + 4|0);
                HEAP32[$26>>2] = 0;
                $$0 = $cnt$0;
            } else {
                $27 = HEAP32[$0>>2]|0;
                $28 = ($cnt$0>>>0)>($27>>>0);
                if ($28) {
                    $29 = (($cnt$0) - ($27))|0;
                    $30 = HEAP32[$7>>2]|0;
                    $31 = ((($f)) + 4|0);
                    HEAP32[$31>>2] = $30;
                    $32 = $30;
                    $33 = (($32) + ($29)|0);
                    $34 = ((($f)) + 8|0);
                    HEAP32[$34>>2] = $33;
                    $35 = HEAP32[$1>>2]|0;
                    $36 = ($35|0)==(0);
                    if ($36) {
                        $$0 = $len;
                    } else {
                        $37 = ((($32)) + 1|0);
                        HEAP32[$31>>2] = $37;
                        $38 = HEAP8[$32>>0]|0;
                        $39 = (($len) + -1)|0;
                        $40 = (($buf) + ($39)|0);
                        HEAP8[$40>>0] = $38;
                        $$0 = $len;
                    }
                } else {
                    $$0 = $cnt$0;
                }
            }
            STACKTOP = sp;return ($$0|0);
        }
        function ___stdio_seek($f,$off,$whence) {
            $f = $f|0;
            $off = $off|0;
            $whence = $whence|0;
            var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $vararg_buffer = sp;
            $ret = sp + 20|0;
            $0 = ((($f)) + 60|0);
            $1 = HEAP32[$0>>2]|0;
            HEAP32[$vararg_buffer>>2] = $1;
            $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
            HEAP32[$vararg_ptr1>>2] = 0;
            $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
            HEAP32[$vararg_ptr2>>2] = $off;
            $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
            HEAP32[$vararg_ptr3>>2] = $ret;
            $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
            HEAP32[$vararg_ptr4>>2] = $whence;
            $2 = (___syscall140(140,($vararg_buffer|0))|0);
            $3 = (___syscall_ret($2)|0);
            $4 = ($3|0)<(0);
            if ($4) {
                HEAP32[$ret>>2] = -1;
                $5 = -1;
            } else {
                $$pre = HEAP32[$ret>>2]|0;
                $5 = $$pre;
            }
            STACKTOP = sp;return ($5|0);
        }
        function ___stdio_write($f,$buf,$len) {
            $f = $f|0;
            $buf = $buf|0;
            $len = $len|0;
            var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
            var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
            var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 48|0;
            $vararg_buffer3 = sp + 16|0;
            $vararg_buffer = sp;
            $iovs = sp + 32|0;
            $0 = ((($f)) + 28|0);
            $1 = HEAP32[$0>>2]|0;
            HEAP32[$iovs>>2] = $1;
            $2 = ((($iovs)) + 4|0);
            $3 = ((($f)) + 20|0);
            $4 = HEAP32[$3>>2]|0;
            $5 = $4;
            $6 = (($5) - ($1))|0;
            HEAP32[$2>>2] = $6;
            $7 = ((($iovs)) + 8|0);
            HEAP32[$7>>2] = $buf;
            $8 = ((($iovs)) + 12|0);
            HEAP32[$8>>2] = $len;
            $9 = (($6) + ($len))|0;
            $10 = ((($f)) + 60|0);
            $11 = ((($f)) + 44|0);
            $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
            while(1) {
                $12 = HEAP32[3224>>2]|0;
                $13 = ($12|0)==(0|0);
                if ($13) {
                    $17 = HEAP32[$10>>2]|0;
                    HEAP32[$vararg_buffer3>>2] = $17;
                    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
                    HEAP32[$vararg_ptr6>>2] = $iov$0;
                    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
                    HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
                    $18 = (___syscall146(146,($vararg_buffer3|0))|0);
                    $19 = (___syscall_ret($18)|0);
                    $cnt$0 = $19;
                } else {
                    _pthread_cleanup_push((4|0),($f|0));
                    $14 = HEAP32[$10>>2]|0;
                    HEAP32[$vararg_buffer>>2] = $14;
                    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                    HEAP32[$vararg_ptr1>>2] = $iov$0;
                    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
                    HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
                    $15 = (___syscall146(146,($vararg_buffer|0))|0);
                    $16 = (___syscall_ret($15)|0);
                    _pthread_cleanup_pop(0);
                    $cnt$0 = $16;
                }
                $20 = ($rem$0|0)==($cnt$0|0);
                if ($20) {
                    label = 6;
                    break;
                }
                $27 = ($cnt$0|0)<(0);
                if ($27) {
                    $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
                    label = 8;
                    break;
                }
                $35 = (($rem$0) - ($cnt$0))|0;
                $36 = ((($iov$0)) + 4|0);
                $37 = HEAP32[$36>>2]|0;
                $38 = ($cnt$0>>>0)>($37>>>0);
                if ($38) {
                    $39 = HEAP32[$11>>2]|0;
                    HEAP32[$0>>2] = $39;
                    HEAP32[$3>>2] = $39;
                    $40 = (($cnt$0) - ($37))|0;
                    $41 = ((($iov$0)) + 8|0);
                    $42 = (($iovcnt$0) + -1)|0;
                    $$phi$trans$insert = ((($iov$0)) + 12|0);
                    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
                    $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
                } else {
                    $43 = ($iovcnt$0|0)==(2);
                    if ($43) {
                        $44 = HEAP32[$0>>2]|0;
                        $45 = (($44) + ($cnt$0)|0);
                        HEAP32[$0>>2] = $45;
                        $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
                    } else {
                        $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
                    }
                }
                $46 = HEAP32[$iov$1>>2]|0;
                $47 = (($46) + ($cnt$1)|0);
                HEAP32[$iov$1>>2] = $47;
                $48 = ((($iov$1)) + 4|0);
                $49 = (($50) - ($cnt$1))|0;
                HEAP32[$48>>2] = $49;
                $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
            }
            if ((label|0) == 6) {
                $21 = HEAP32[$11>>2]|0;
                $22 = ((($f)) + 48|0);
                $23 = HEAP32[$22>>2]|0;
                $24 = (($21) + ($23)|0);
                $25 = ((($f)) + 16|0);
                HEAP32[$25>>2] = $24;
                $26 = $21;
                HEAP32[$0>>2] = $26;
                HEAP32[$3>>2] = $26;
                $$0 = $len;
            }
            else if ((label|0) == 8) {
                $28 = ((($f)) + 16|0);
                HEAP32[$28>>2] = 0;
                HEAP32[$0>>2] = 0;
                HEAP32[$3>>2] = 0;
                $29 = HEAP32[$f>>2]|0;
                $30 = $29 | 32;
                HEAP32[$f>>2] = $30;
                $31 = ($iovcnt$0$lcssa12|0)==(2);
                if ($31) {
                    $$0 = 0;
                } else {
                    $32 = ((($iov$0$lcssa11)) + 4|0);
                    $33 = HEAP32[$32>>2]|0;
                    $34 = (($len) - ($33))|0;
                    $$0 = $34;
                }
            }
            STACKTOP = sp;return ($$0|0);
        }
        function ___stdout_write($f,$buf,$len) {
            $f = $f|0;
            $buf = $buf|0;
            $len = $len|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 80|0;
            $vararg_buffer = sp;
            $tio = sp + 12|0;
            $0 = ((($f)) + 36|0);
            HEAP32[$0>>2] = 2;
            $1 = HEAP32[$f>>2]|0;
            $2 = $1 & 64;
            $3 = ($2|0)==(0);
            if ($3) {
                $4 = ((($f)) + 60|0);
                $5 = HEAP32[$4>>2]|0;
                HEAP32[$vararg_buffer>>2] = $5;
                $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                HEAP32[$vararg_ptr1>>2] = 21505;
                $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
                HEAP32[$vararg_ptr2>>2] = $tio;
                $6 = (___syscall54(54,($vararg_buffer|0))|0);
                $7 = ($6|0)==(0);
                if (!($7)) {
                    $8 = ((($f)) + 75|0);
                    HEAP8[$8>>0] = -1;
                }
            }
            $9 = (___stdio_write($f,$buf,$len)|0);
            STACKTOP = sp;return ($9|0);
        }
        function ___string_read($f,$buf,$len) {
            $f = $f|0;
            $buf = $buf|0;
            $len = $len|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 84|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = (($len) + 256)|0;
            $3 = (_memchr($1,0,$2)|0);
            $4 = ($3|0)==(0|0);
            $5 = $3;
            $6 = $1;
            $7 = (($5) - ($6))|0;
            $k$0 = $4 ? $2 : $7;
            $8 = ($k$0>>>0)<($len>>>0);
            $k$0$len = $8 ? $k$0 : $len;
            _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
            $9 = (($1) + ($k$0$len)|0);
            $10 = ((($f)) + 4|0);
            HEAP32[$10>>2] = $9;
            $11 = (($1) + ($k$0)|0);
            $12 = ((($f)) + 8|0);
            HEAP32[$12>>2] = $11;
            HEAP32[$0>>2] = $11;
            return ($k$0$len|0);
        }
        function ___toread($f) {
            $f = $f|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
            var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 74|0);
            $1 = HEAP8[$0>>0]|0;
            $2 = $1 << 24 >> 24;
            $3 = (($2) + 255)|0;
            $4 = $3 | $2;
            $5 = $4&255;
            HEAP8[$0>>0] = $5;
            $6 = ((($f)) + 20|0);
            $7 = HEAP32[$6>>2]|0;
            $8 = ((($f)) + 44|0);
            $9 = HEAP32[$8>>2]|0;
            $10 = ($7>>>0)>($9>>>0);
            if ($10) {
                $11 = ((($f)) + 36|0);
                $12 = HEAP32[$11>>2]|0;
                (FUNCTION_TABLE_iiii[$12 & 15]($f,0,0)|0);
            }
            $13 = ((($f)) + 16|0);
            HEAP32[$13>>2] = 0;
            $14 = ((($f)) + 28|0);
            HEAP32[$14>>2] = 0;
            HEAP32[$6>>2] = 0;
            $15 = HEAP32[$f>>2]|0;
            $16 = $15 & 20;
            $17 = ($16|0)==(0);
            if ($17) {
                $21 = HEAP32[$8>>2]|0;
                $22 = ((($f)) + 8|0);
                HEAP32[$22>>2] = $21;
                $23 = ((($f)) + 4|0);
                HEAP32[$23>>2] = $21;
                $$0 = 0;
            } else {
                $18 = $15 & 4;
                $19 = ($18|0)==(0);
                if ($19) {
                    $$0 = -1;
                } else {
                    $20 = $15 | 32;
                    HEAP32[$f>>2] = $20;
                    $$0 = -1;
                }
            }
            return ($$0|0);
        }
        function ___towrite($f) {
            $f = $f|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
            var $8 = 0, $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 74|0);
            $1 = HEAP8[$0>>0]|0;
            $2 = $1 << 24 >> 24;
            $3 = (($2) + 255)|0;
            $4 = $3 | $2;
            $5 = $4&255;
            HEAP8[$0>>0] = $5;
            $6 = HEAP32[$f>>2]|0;
            $7 = $6 & 8;
            $8 = ($7|0)==(0);
            if ($8) {
                $10 = ((($f)) + 8|0);
                HEAP32[$10>>2] = 0;
                $11 = ((($f)) + 4|0);
                HEAP32[$11>>2] = 0;
                $12 = ((($f)) + 44|0);
                $13 = HEAP32[$12>>2]|0;
                $14 = ((($f)) + 28|0);
                HEAP32[$14>>2] = $13;
                $15 = ((($f)) + 20|0);
                HEAP32[$15>>2] = $13;
                $16 = $13;
                $17 = ((($f)) + 48|0);
                $18 = HEAP32[$17>>2]|0;
                $19 = (($16) + ($18)|0);
                $20 = ((($f)) + 16|0);
                HEAP32[$20>>2] = $19;
                $$0 = 0;
            } else {
                $9 = $6 | 32;
                HEAP32[$f>>2] = $9;
                $$0 = -1;
            }
            return ($$0|0);
        }
        function ___uflow($f) {
            $f = $f|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 16|0;
            $c = sp;
            $0 = ((($f)) + 8|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0|0);
            if ($2) {
                $3 = (___toread($f)|0);
                $4 = ($3|0)==(0);
                if ($4) {
                    label = 3;
                } else {
                    $$0 = -1;
                }
            } else {
                label = 3;
            }
            if ((label|0) == 3) {
                $5 = ((($f)) + 32|0);
                $6 = HEAP32[$5>>2]|0;
                $7 = (FUNCTION_TABLE_iiii[$6 & 15]($f,$c,1)|0);
                $8 = ($7|0)==(1);
                if ($8) {
                    $9 = HEAP8[$c>>0]|0;
                    $10 = $9&255;
                    $$0 = $10;
                } else {
                    $$0 = -1;
                }
            }
            STACKTOP = sp;return ($$0|0);
        }
        function _qsort($base,$nel,$width,$cmp) {
            $base = $base|0;
            $nel = $nel|0;
            $width = $width|0;
            $cmp = $cmp|0;
            var $$0$i = 0, $$0$i30 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$lcssa = 0, $$lcssa57 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre$i20 = 0, $$pre$i5 = 0, $$pre$i8 = 0, $$pre1$i = 0, $$pre1$i12 = 0, $$pre1$i27$pre = 0, $$pre1$i6 = 0, $$pre1$i9 = 0, $$sum = 0, $$sum2 = 0;
            var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
            var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
            var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
            var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
            var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $8$phi = 0, $80 = 0, $81 = 0, $82 = 0;
            var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $head$0$lcssa = 0, $head$036 = 0;
            var $head$1$be = 0, $head$153 = 0, $i$0 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond48 = 0, $or$cond4852 = 0, $or$cond51 = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$037 = 0, $pshift$1 = 0, $pshift$2$be = 0, $pshift$254 = 0, $sum = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 208|0;
            $lp = sp + 8|0;
            $p = sp;
            $0 = Math_imul($width, $nel)|0;
            $1 = $p;
            $2 = $1;
            HEAP32[$2>>2] = 1;
            $3 = (($1) + 4)|0;
            $4 = $3;
            HEAP32[$4>>2] = 0;
            $5 = ($0|0)==(0);
            if (!($5)) {
                $$sum = (($0) - ($width))|0;
                $6 = ((($lp)) + 4|0);
                HEAP32[$6>>2] = $width;
                HEAP32[$lp>>2] = $width;
                $10 = $width;$8 = $width;$i$0 = 2;
                while(1) {
                    $7 = (($8) + ($width))|0;
                    $9 = (($7) + ($10))|0;
                    $11 = (($lp) + ($i$0<<2)|0);
                    HEAP32[$11>>2] = $9;
                    $12 = ($9>>>0)<($0>>>0);
                    $13 = (($i$0) + 1)|0;
                    if ($12) {
                        $8$phi = $10;$10 = $9;$i$0 = $13;$8 = $8$phi;
                    } else {
                        break;
                    }
                }
                $14 = (0 - ($width))|0;
                $15 = (($base) + ($$sum)|0);
                $16 = ($$sum|0)>(0);
                $$phi$trans$insert$i = ((($p)) + 4|0);
                if ($16) {
                    $17 = $15;
                    $19 = 1;$head$036 = $base;$pshift$037 = 1;
                    while(1) {
                        $18 = $19 & 3;
                        $20 = ($18|0)==(3);
                        do {
                            if ($20) {
                                _sift($head$036,$width,$cmp,$pshift$037,$lp);
                                $$pre$i = HEAP32[$p>>2]|0;
                                $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
                                $21 = $$pre$i >>> 2;
                                $22 = $$pre1$i << 30;
                                $23 = $22 | $21;
                                HEAP32[$p>>2] = $23;
                                $24 = $$pre1$i >>> 2;
                                HEAP32[$$phi$trans$insert$i>>2] = $24;
                                $25 = (($pshift$037) + 2)|0;
                                $48 = $23;$pshift$1 = $25;
                            } else {
                                $26 = (($pshift$037) + -1)|0;
                                $27 = (($lp) + ($26<<2)|0);
                                $28 = HEAP32[$27>>2]|0;
                                $29 = $head$036;
                                $30 = (($17) - ($29))|0;
                                $31 = ($28>>>0)<($30>>>0);
                                if ($31) {
                                    _sift($head$036,$width,$cmp,$pshift$037,$lp);
                                } else {
                                    _trinkle($head$036,$width,$cmp,$p,$pshift$037,0,$lp);
                                }
                                $32 = ($pshift$037|0)==(1);
                                if ($32) {
                                    $$pre$i5 = HEAP32[$$phi$trans$insert$i>>2]|0;
                                    $$pre1$i6 = HEAP32[$p>>2]|0;
                                    $33 = $$pre$i5 << 1;
                                    $34 = $$pre1$i6 >>> 31;
                                    $35 = $34 | $33;
                                    HEAP32[$$phi$trans$insert$i>>2] = $35;
                                    $36 = $$pre1$i6 << 1;
                                    HEAP32[$p>>2] = $36;
                                    $48 = $36;$pshift$1 = 0;
                                    break;
                                }
                                $37 = ($26>>>0)>(31);
                                if ($37) {
                                    $38 = (($pshift$037) + -33)|0;
                                    $39 = HEAP32[$p>>2]|0;
                                    HEAP32[$$phi$trans$insert$i>>2] = $39;
                                    HEAP32[$p>>2] = 0;
                                    $$0$i = $38;$41 = $39;$44 = 0;
                                } else {
                                    $$pre$i11 = HEAP32[$$phi$trans$insert$i>>2]|0;
                                    $$pre1$i12 = HEAP32[$p>>2]|0;
                                    $$0$i = $26;$41 = $$pre$i11;$44 = $$pre1$i12;
                                }
                                $40 = $41 << $$0$i;
                                $42 = (32 - ($$0$i))|0;
                                $43 = $44 >>> $42;
                                $45 = $43 | $40;
                                HEAP32[$$phi$trans$insert$i>>2] = $45;
                                $46 = $44 << $$0$i;
                                HEAP32[$p>>2] = $46;
                                $48 = $46;$pshift$1 = 1;
                            }
                        } while(0);
                        $47 = $48 | 1;
                        HEAP32[$p>>2] = $47;
                        $49 = (($head$036) + ($width)|0);
                        $50 = ($49>>>0)<($15>>>0);
                        if ($50) {
                            $19 = $47;$head$036 = $49;$pshift$037 = $pshift$1;
                        } else {
                            $head$0$lcssa = $49;$pshift$0$lcssa = $pshift$1;
                            break;
                        }
                    }
                } else {
                    $head$0$lcssa = $base;$pshift$0$lcssa = 1;
                }
                _trinkle($head$0$lcssa,$width,$cmp,$p,$pshift$0$lcssa,0,$lp);
                $51 = ((($p)) + 4|0);
                $52 = ($pshift$0$lcssa|0)==(1);
                $53 = HEAP32[$p>>2]|0;
                $54 = ($53|0)==(1);
                $or$cond51 = $52 & $54;
                $55 = HEAP32[$51>>2]|0;
                $56 = ($55|0)==(0);
                $or$cond4852 = $or$cond51 & $56;
                if (!($or$cond4852)) {
                    $59 = $53;$head$153 = $head$0$lcssa;$pshift$254 = $pshift$0$lcssa;
                    while(1) {
                        $57 = ($pshift$254|0)<(2);
                        if ($57) {
                            $58 = (($59) + -1)|0;
                            $60 = ($58|0)==(0);
                            do {
                                if ($60) {
                                    $81 = 32;
                                    label = 30;
                                } else {
                                    $61 = $58 & 1;
                                    $62 = ($61|0)==(0);
                                    if ($62) {
                                        $$02$i$i = $58;$nTrailingZeros$03$i$i = 0;
                                        while(1) {
                                            $63 = (($nTrailingZeros$03$i$i) + 1)|0;
                                            $64 = $$02$i$i >>> 1;
                                            $65 = $64 & 1;
                                            $66 = ($65|0)==(0);
                                            if ($66) {
                                                $$02$i$i = $64;$nTrailingZeros$03$i$i = $63;
                                            } else {
                                                $$lcssa = $63;
                                                break;
                                            }
                                        }
                                        $67 = ($$lcssa|0)==(0);
                                        if ($67) {
                                            label = 24;
                                        } else {
                                            $78 = $$lcssa;
                                        }
                                    } else {
                                        label = 24;
                                    }
                                    if ((label|0) == 24) {
                                        label = 0;
                                        $68 = HEAP32[$$phi$trans$insert$i>>2]|0;
                                        $69 = ($68|0)==(0);
                                        if ($69) {
                                            $81 = 64;
                                            label = 30;
                                            break;
                                        }
                                        $70 = $68 & 1;
                                        $71 = ($70|0)==(0);
                                        if ($71) {
                                            $$02$i3$i = $68;$nTrailingZeros$03$i2$i = 0;
                                        } else {
                                            $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
                                            break;
                                        }
                                        while(1) {
                                            $72 = (($nTrailingZeros$03$i2$i) + 1)|0;
                                            $73 = $$02$i3$i >>> 1;
                                            $74 = $73 & 1;
                                            $75 = ($74|0)==(0);
                                            if ($75) {
                                                $$02$i3$i = $73;$nTrailingZeros$03$i2$i = $72;
                                            } else {
                                                $$lcssa57 = $72;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
                                                break;
                                            }
                                        }
                                        $76 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
                                        $77 = ($$lcssa57|0)==(0);
                                        if ($77) {
                                            $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
                                            break;
                                        } else {
                                            $78 = $76;
                                        }
                                    }
                                    $79 = ($78>>>0)>(31);
                                    if ($79) {
                                        $81 = $78;
                                        label = 30;
                                    } else {
                                        $$pre1$i27$pre = HEAP32[$$phi$trans$insert$i>>2]|0;
                                        $$0$i30 = $78;$84 = $59;$87 = $$pre1$i27$pre;$91 = $78;
                                    }
                                }
                            } while(0);
                            if ((label|0) == 30) {
                                label = 0;
                                $80 = (($81) + -32)|0;
                                $82 = HEAP32[$$phi$trans$insert$i>>2]|0;
                                HEAP32[$p>>2] = $82;
                                HEAP32[$$phi$trans$insert$i>>2] = 0;
                                $$0$i30 = $80;$84 = $82;$87 = 0;$91 = $81;
                            }
                            $83 = $84 >>> $$0$i30;
                            $85 = (32 - ($$0$i30))|0;
                            $86 = $87 << $85;
                            $88 = $86 | $83;
                            HEAP32[$p>>2] = $88;
                            $89 = $87 >>> $$0$i30;
                            HEAP32[$$phi$trans$insert$i>>2] = $89;
                            $90 = (($91) + ($pshift$254))|0;
                            $$pre = (($head$153) + ($14)|0);
                            $head$1$be = $$pre;$pshift$2$be = $90;
                        } else {
                            $$pre$i20 = HEAP32[$$phi$trans$insert$i>>2]|0;
                            $92 = $$pre$i20 << 2;
                            $93 = $59 >>> 30;
                            $94 = $93 | $92;
                            $95 = (($pshift$254) + -2)|0;
                            $96 = $59 << 1;
                            $97 = $96 & 2147483646;
                            $98 = $93 << 31;
                            $99 = $97 | $98;
                            $100 = $99 ^ 3;
                            HEAP32[$p>>2] = $100;
                            $101 = $94 >>> 1;
                            HEAP32[$$phi$trans$insert$i>>2] = $101;
                            $102 = (($lp) + ($95<<2)|0);
                            $103 = HEAP32[$102>>2]|0;
                            $sum = (($103) + ($width))|0;
                            $$sum2 = (0 - ($sum))|0;
                            $104 = (($head$153) + ($$sum2)|0);
                            $105 = (($pshift$254) + -1)|0;
                            _trinkle($104,$width,$cmp,$p,$105,1,$lp);
                            $$pre$i8 = HEAP32[$$phi$trans$insert$i>>2]|0;
                            $$pre1$i9 = HEAP32[$p>>2]|0;
                            $106 = $$pre$i8 << 1;
                            $107 = $$pre1$i9 >>> 31;
                            $108 = $107 | $106;
                            HEAP32[$$phi$trans$insert$i>>2] = $108;
                            $109 = $$pre1$i9 << 1;
                            $110 = $109 | 1;
                            HEAP32[$p>>2] = $110;
                            $111 = (($head$153) + ($14)|0);
                            _trinkle($111,$width,$cmp,$p,$95,1,$lp);
                            $head$1$be = $111;$pshift$2$be = $95;
                        }
                        $112 = ($pshift$2$be|0)==(1);
                        $113 = HEAP32[$p>>2]|0;
                        $114 = ($113|0)==(1);
                        $or$cond = $112 & $114;
                        $115 = HEAP32[$51>>2]|0;
                        $116 = ($115|0)==(0);
                        $or$cond48 = $or$cond & $116;
                        if ($or$cond48) {
                            break;
                        } else {
                            $59 = $113;$head$153 = $head$1$be;$pshift$254 = $pshift$2$be;
                        }
                    }
                }
            }
            STACKTOP = sp;return;
        }
        function _strtod($s,$p) {
            $s = $s|0;
            $p = $p|0;
            var $0 = 0.0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (+_strtox($s,$p,1));
            return (+$0);
        }
        function _strtoul($s,$p,$base) {
            $s = $s|0;
            $p = $p|0;
            $base = $base|0;
            var $0 = 0, $1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_strtox555($s,$p,$base,-1,0)|0);
            $1 = tempRet0;
            return ($0|0);
        }
        function _strtol($s,$p,$base) {
            $s = $s|0;
            $p = $p|0;
            $base = $base|0;
            var $0 = 0, $1 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_strtox555($s,$p,$base,-2147483648,0)|0);
            $1 = tempRet0;
            return ($0|0);
        }
        function _memchr($src,$c,$n) {
            $src = $src|0;
            $c = $c|0;
            $n = $n|0;
            var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
            var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
            var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = $c & 255;
            $1 = $src;
            $2 = $1 & 3;
            $3 = ($2|0)!=(0);
            $4 = ($n|0)!=(0);
            $or$cond18 = $4 & $3;
            L1: do {
                if ($or$cond18) {
                    $5 = $c&255;
                    $$019 = $n;$s$020 = $src;
                    while(1) {
                        $6 = HEAP8[$s$020>>0]|0;
                        $7 = ($6<<24>>24)==($5<<24>>24);
                        if ($7) {
                            $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
                            label = 6;
                            break L1;
                        }
                        $8 = ((($s$020)) + 1|0);
                        $9 = (($$019) + -1)|0;
                        $10 = $8;
                        $11 = $10 & 3;
                        $12 = ($11|0)!=(0);
                        $13 = ($9|0)!=(0);
                        $or$cond = $13 & $12;
                        if ($or$cond) {
                            $$019 = $9;$s$020 = $8;
                        } else {
                            $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
                            label = 5;
                            break;
                        }
                    }
                } else {
                    $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
                    label = 5;
                }
            } while(0);
            if ((label|0) == 5) {
                if ($$lcssa) {
                    $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
                    label = 6;
                } else {
                    $$3 = 0;$s$2 = $s$0$lcssa;
                }
            }
            L8: do {
                if ((label|0) == 6) {
                    $14 = HEAP8[$s$0$lcssa43>>0]|0;
                    $15 = $c&255;
                    $16 = ($14<<24>>24)==($15<<24>>24);
                    if ($16) {
                        $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
                    } else {
                        $17 = Math_imul($0, 16843009)|0;
                        $18 = ($$0$lcssa44>>>0)>(3);
                        L11: do {
                            if ($18) {
                                $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
                                while(1) {
                                    $19 = HEAP32[$w$011>>2]|0;
                                    $20 = $19 ^ $17;
                                    $21 = (($20) + -16843009)|0;
                                    $22 = $20 & -2139062144;
                                    $23 = $22 ^ -2139062144;
                                    $24 = $23 & $21;
                                    $25 = ($24|0)==(0);
                                    if (!($25)) {
                                        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
                                        break;
                                    }
                                    $26 = ((($w$011)) + 4|0);
                                    $27 = (($$110) + -4)|0;
                                    $28 = ($27>>>0)>(3);
                                    if ($28) {
                                        $$110 = $27;$w$011 = $26;
                                    } else {
                                        $$1$lcssa = $27;$w$0$lcssa = $26;
                                        label = 11;
                                        break L11;
                                    }
                                }
                                $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
                            } else {
                                $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
                                label = 11;
                            }
                        } while(0);
                        if ((label|0) == 11) {
                            $29 = ($$1$lcssa|0)==(0);
                            if ($29) {
                                $$3 = 0;$s$2 = $w$0$lcssa;
                                break;
                            } else {
                                $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
                            }
                        }
                        while(1) {
                            $30 = HEAP8[$s$15>>0]|0;
                            $31 = ($30<<24>>24)==($15<<24>>24);
                            if ($31) {
                                $$3 = $$24;$s$2 = $s$15;
                                break L8;
                            }
                            $32 = ((($s$15)) + 1|0);
                            $33 = (($$24) + -1)|0;
                            $34 = ($33|0)==(0);
                            if ($34) {
                                $$3 = 0;$s$2 = $32;
                                break;
                            } else {
                                $$24 = $33;$s$15 = $32;
                            }
                        }
                    }
                }
            } while(0);
            $35 = ($$3|0)!=(0);
            $36 = $35 ? $s$2 : 0;
            return ($36|0);
        }
        function _memcmp($vl,$vr,$n) {
            $vl = $vl|0;
            $vr = $vr|0;
            $n = $n|0;
            var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($n|0)==(0);
            L1: do {
                if ($0) {
                    $11 = 0;
                } else {
                    $$03 = $n;$l$04 = $vl;$r$05 = $vr;
                    while(1) {
                        $1 = HEAP8[$l$04>>0]|0;
                        $2 = HEAP8[$r$05>>0]|0;
                        $3 = ($1<<24>>24)==($2<<24>>24);
                        if (!($3)) {
                            $$lcssa = $1;$$lcssa19 = $2;
                            break;
                        }
                        $4 = (($$03) + -1)|0;
                        $5 = ((($l$04)) + 1|0);
                        $6 = ((($r$05)) + 1|0);
                        $7 = ($4|0)==(0);
                        if ($7) {
                            $11 = 0;
                            break L1;
                        } else {
                            $$03 = $4;$l$04 = $5;$r$05 = $6;
                        }
                    }
                    $8 = $$lcssa&255;
                    $9 = $$lcssa19&255;
                    $10 = (($8) - ($9))|0;
                    $11 = $10;
                }
            } while(0);
            return ($11|0);
        }
        function ___memrchr($m,$c,$n) {
            $m = $m|0;
            $c = $c|0;
            $n = $n|0;
            var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = $c&255;
            $$01 = $n;
            while(1) {
                $1 = (($$01) + -1)|0;
                $2 = ($$01|0)==(0);
                if ($2) {
                    $$0 = 0;
                    break;
                }
                $3 = (($m) + ($1)|0);
                $4 = HEAP8[$3>>0]|0;
                $5 = ($4<<24>>24)==($0<<24>>24);
                if ($5) {
                    $$0 = $3;
                    break;
                } else {
                    $$01 = $1;
                }
            }
            return ($$0|0);
        }
        function ___stpcpy($d,$s) {
            $d = $d|0;
            $s = $s|0;
            var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
            var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = $s;
            $1 = $d;
            $2 = $0 ^ $1;
            $3 = $2 & 3;
            $4 = ($3|0)==(0);
            L1: do {
                if ($4) {
                    $5 = $0 & 3;
                    $6 = ($5|0)==(0);
                    if ($6) {
                        $$0$lcssa = $s;$$01$lcssa = $d;
                    } else {
                        $$0115 = $d;$$016 = $s;
                        while(1) {
                            $7 = HEAP8[$$016>>0]|0;
                            HEAP8[$$0115>>0] = $7;
                            $8 = ($7<<24>>24)==(0);
                            if ($8) {
                                $$03 = $$0115;
                                break L1;
                            }
                            $9 = ((($$016)) + 1|0);
                            $10 = ((($$0115)) + 1|0);
                            $11 = $9;
                            $12 = $11 & 3;
                            $13 = ($12|0)==(0);
                            if ($13) {
                                $$0$lcssa = $9;$$01$lcssa = $10;
                                break;
                            } else {
                                $$0115 = $10;$$016 = $9;
                            }
                        }
                    }
                    $14 = HEAP32[$$0$lcssa>>2]|0;
                    $15 = (($14) + -16843009)|0;
                    $16 = $14 & -2139062144;
                    $17 = $16 ^ -2139062144;
                    $18 = $17 & $15;
                    $19 = ($18|0)==(0);
                    if ($19) {
                        $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
                        while(1) {
                            $20 = ((($ws$011)) + 4|0);
                            $21 = ((($wd$010)) + 4|0);
                            HEAP32[$wd$010>>2] = $22;
                            $23 = HEAP32[$20>>2]|0;
                            $24 = (($23) + -16843009)|0;
                            $25 = $23 & -2139062144;
                            $26 = $25 ^ -2139062144;
                            $27 = $26 & $24;
                            $28 = ($27|0)==(0);
                            if ($28) {
                                $22 = $23;$wd$010 = $21;$ws$011 = $20;
                            } else {
                                $wd$0$lcssa = $21;$ws$0$lcssa = $20;
                                break;
                            }
                        }
                    } else {
                        $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
                    }
                    $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
                    label = 8;
                } else {
                    $$1$ph = $s;$$12$ph = $d;
                    label = 8;
                }
            } while(0);
            if ((label|0) == 8) {
                $29 = HEAP8[$$1$ph>>0]|0;
                HEAP8[$$12$ph>>0] = $29;
                $30 = ($29<<24>>24)==(0);
                if ($30) {
                    $$03 = $$12$ph;
                } else {
                    $$128 = $$12$ph;$$19 = $$1$ph;
                    while(1) {
                        $31 = ((($$19)) + 1|0);
                        $32 = ((($$128)) + 1|0);
                        $33 = HEAP8[$31>>0]|0;
                        HEAP8[$32>>0] = $33;
                        $34 = ($33<<24>>24)==(0);
                        if ($34) {
                            $$03 = $32;
                            break;
                        } else {
                            $$128 = $32;$$19 = $31;
                        }
                    }
                }
            }
            return ($$03|0);
        }
        function ___stpncpy($d,$s,$n) {
            $d = $d|0;
            $s = $s|0;
            $n = $n|0;
            var $$0$lcssa = 0, $$0$lcssa60 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa61 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa62 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $wd$0$lcssa = 0;
            var $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = $s;
            $1 = $d;
            $2 = $0 ^ $1;
            $3 = $2 & 3;
            $4 = ($3|0)==(0);
            do {
                if ($4) {
                    $5 = $0 & 3;
                    $6 = ($5|0)!=(0);
                    $7 = ($n|0)!=(0);
                    $or$cond28 = $7 & $6;
                    L3: do {
                        if ($or$cond28) {
                            $$031 = $n;$$0430 = $s;$$0629 = $d;
                            while(1) {
                                $8 = HEAP8[$$0430>>0]|0;
                                HEAP8[$$0629>>0] = $8;
                                $9 = ($8<<24>>24)==(0);
                                if ($9) {
                                    $$0$lcssa60 = $$031;$$04$lcssa61 = $$0430;$$06$lcssa62 = $$0629;
                                    break L3;
                                }
                                $10 = (($$031) + -1)|0;
                                $11 = ((($$0430)) + 1|0);
                                $12 = ((($$0629)) + 1|0);
                                $13 = $11;
                                $14 = $13 & 3;
                                $15 = ($14|0)!=(0);
                                $16 = ($10|0)!=(0);
                                $or$cond = $16 & $15;
                                if ($or$cond) {
                                    $$031 = $10;$$0430 = $11;$$0629 = $12;
                                } else {
                                    $$0$lcssa = $10;$$04$lcssa = $11;$$06$lcssa = $12;$$lcssa = $16;
                                    label = 5;
                                    break;
                                }
                            }
                        } else {
                            $$0$lcssa = $n;$$04$lcssa = $s;$$06$lcssa = $d;$$lcssa = $7;
                            label = 5;
                        }
                    } while(0);
                    if ((label|0) == 5) {
                        if ($$lcssa) {
                            $$0$lcssa60 = $$0$lcssa;$$04$lcssa61 = $$04$lcssa;$$06$lcssa62 = $$06$lcssa;
                        } else {
                            $$28 = $$06$lcssa;$$3 = 0;
                            break;
                        }
                    }
                    $17 = HEAP8[$$04$lcssa61>>0]|0;
                    $18 = ($17<<24>>24)==(0);
                    if ($18) {
                        $$28 = $$06$lcssa62;$$3 = $$0$lcssa60;
                    } else {
                        $19 = ($$0$lcssa60>>>0)>(3);
                        L11: do {
                            if ($19) {
                                $$117 = $$0$lcssa60;$wd$018 = $$06$lcssa62;$ws$019 = $$04$lcssa61;
                                while(1) {
                                    $20 = HEAP32[$ws$019>>2]|0;
                                    $21 = (($20) + -16843009)|0;
                                    $22 = $20 & -2139062144;
                                    $23 = $22 ^ -2139062144;
                                    $24 = $23 & $21;
                                    $25 = ($24|0)==(0);
                                    if (!($25)) {
                                        $$1$lcssa = $$117;$wd$0$lcssa = $wd$018;$ws$0$lcssa = $ws$019;
                                        break L11;
                                    }
                                    HEAP32[$wd$018>>2] = $20;
                                    $26 = (($$117) + -4)|0;
                                    $27 = ((($ws$019)) + 4|0);
                                    $28 = ((($wd$018)) + 4|0);
                                    $29 = ($26>>>0)>(3);
                                    if ($29) {
                                        $$117 = $26;$wd$018 = $28;$ws$019 = $27;
                                    } else {
                                        $$1$lcssa = $26;$wd$0$lcssa = $28;$ws$0$lcssa = $27;
                                        break;
                                    }
                                }
                            } else {
                                $$1$lcssa = $$0$lcssa60;$wd$0$lcssa = $$06$lcssa62;$ws$0$lcssa = $$04$lcssa61;
                            }
                        } while(0);
                        $$15$ph = $ws$0$lcssa;$$17$ph = $wd$0$lcssa;$$2$ph = $$1$lcssa;
                        label = 11;
                    }
                } else {
                    $$15$ph = $s;$$17$ph = $d;$$2$ph = $n;
                    label = 11;
                }
            } while(0);
            L16: do {
                if ((label|0) == 11) {
                    $30 = ($$2$ph|0)==(0);
                    if ($30) {
                        $$28 = $$17$ph;$$3 = 0;
                    } else {
                        $$1511 = $$15$ph;$$1710 = $$17$ph;$$212 = $$2$ph;
                        while(1) {
                            $31 = HEAP8[$$1511>>0]|0;
                            HEAP8[$$1710>>0] = $31;
                            $32 = ($31<<24>>24)==(0);
                            if ($32) {
                                $$28 = $$1710;$$3 = $$212;
                                break L16;
                            }
                            $33 = (($$212) + -1)|0;
                            $34 = ((($$1511)) + 1|0);
                            $35 = ((($$1710)) + 1|0);
                            $36 = ($33|0)==(0);
                            if ($36) {
                                $$28 = $35;$$3 = 0;
                                break;
                            } else {
                                $$1511 = $34;$$1710 = $35;$$212 = $33;
                            }
                        }
                    }
                }
            } while(0);
            _memset(($$28|0),0,($$3|0))|0;
            return ($$28|0);
        }
        function _strchr($s,$c) {
            $s = $s|0;
            $c = $c|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (___strchrnul($s,$c)|0);
            $1 = HEAP8[$0>>0]|0;
            $2 = $c&255;
            $3 = ($1<<24>>24)==($2<<24>>24);
            $4 = $3 ? $0 : 0;
            return ($4|0);
        }
        function ___strchrnul($s,$c) {
            $s = $s|0;
            $c = $c|0;
            var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
            var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = $c & 255;
            $1 = ($0|0)==(0);
            L1: do {
                if ($1) {
                    $6 = (_strlen($s)|0);
                    $7 = (($s) + ($6)|0);
                    $$0 = $7;
                } else {
                    $2 = $s;
                    $3 = $2 & 3;
                    $4 = ($3|0)==(0);
                    if ($4) {
                        $$02$lcssa = $s;
                    } else {
                        $5 = $c&255;
                        $$0211 = $s;
                        while(1) {
                            $8 = HEAP8[$$0211>>0]|0;
                            $9 = ($8<<24>>24)==(0);
                            $10 = ($8<<24>>24)==($5<<24>>24);
                            $or$cond = $9 | $10;
                            if ($or$cond) {
                                $$0 = $$0211;
                                break L1;
                            }
                            $11 = ((($$0211)) + 1|0);
                            $12 = $11;
                            $13 = $12 & 3;
                            $14 = ($13|0)==(0);
                            if ($14) {
                                $$02$lcssa = $11;
                                break;
                            } else {
                                $$0211 = $11;
                            }
                        }
                    }
                    $15 = Math_imul($0, 16843009)|0;
                    $16 = HEAP32[$$02$lcssa>>2]|0;
                    $17 = (($16) + -16843009)|0;
                    $18 = $16 & -2139062144;
                    $19 = $18 ^ -2139062144;
                    $20 = $19 & $17;
                    $21 = ($20|0)==(0);
                    L10: do {
                        if ($21) {
                            $23 = $16;$w$08 = $$02$lcssa;
                            while(1) {
                                $22 = $23 ^ $15;
                                $24 = (($22) + -16843009)|0;
                                $25 = $22 & -2139062144;
                                $26 = $25 ^ -2139062144;
                                $27 = $26 & $24;
                                $28 = ($27|0)==(0);
                                if (!($28)) {
                                    $w$0$lcssa = $w$08;
                                    break L10;
                                }
                                $29 = ((($w$08)) + 4|0);
                                $30 = HEAP32[$29>>2]|0;
                                $31 = (($30) + -16843009)|0;
                                $32 = $30 & -2139062144;
                                $33 = $32 ^ -2139062144;
                                $34 = $33 & $31;
                                $35 = ($34|0)==(0);
                                if ($35) {
                                    $23 = $30;$w$08 = $29;
                                } else {
                                    $w$0$lcssa = $29;
                                    break;
                                }
                            }
                        } else {
                            $w$0$lcssa = $$02$lcssa;
                        }
                    } while(0);
                    $36 = $c&255;
                    $$1 = $w$0$lcssa;
                    while(1) {
                        $37 = HEAP8[$$1>>0]|0;
                        $38 = ($37<<24>>24)==(0);
                        $39 = ($37<<24>>24)==($36<<24>>24);
                        $or$cond5 = $38 | $39;
                        $40 = ((($$1)) + 1|0);
                        if ($or$cond5) {
                            $$0 = $$1;
                            break;
                        } else {
                            $$1 = $40;
                        }
                    }
                }
            } while(0);
            return ($$0|0);
        }
        function _strcmp($l,$r) {
            $l = $l|0;
            $r = $r|0;
            var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
            var sp = 0;
            sp = STACKTOP;
            $0 = HEAP8[$l>>0]|0;
            $1 = HEAP8[$r>>0]|0;
            $2 = ($0<<24>>24)!=($1<<24>>24);
            $3 = ($0<<24>>24)==(0);
            $or$cond3 = $3 | $2;
            if ($or$cond3) {
                $$lcssa = $0;$$lcssa2 = $1;
            } else {
                $$014 = $l;$$05 = $r;
                while(1) {
                    $4 = ((($$014)) + 1|0);
                    $5 = ((($$05)) + 1|0);
                    $6 = HEAP8[$4>>0]|0;
                    $7 = HEAP8[$5>>0]|0;
                    $8 = ($6<<24>>24)!=($7<<24>>24);
                    $9 = ($6<<24>>24)==(0);
                    $or$cond = $9 | $8;
                    if ($or$cond) {
                        $$lcssa = $6;$$lcssa2 = $7;
                        break;
                    } else {
                        $$014 = $4;$$05 = $5;
                    }
                }
            }
            $10 = $$lcssa&255;
            $11 = $$lcssa2&255;
            $12 = (($10) - ($11))|0;
            return ($12|0);
        }
        function _strcpy($dest,$src) {
            $dest = $dest|0;
            $src = $src|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            (___stpcpy($dest,$src)|0);
            return ($dest|0);
        }
        function _strlen($s) {
            $s = $s|0;
            var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
            var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = $s;
            $1 = $0 & 3;
            $2 = ($1|0)==(0);
            L1: do {
                if ($2) {
                    $$01$lcssa = $s;
                    label = 4;
                } else {
                    $$014 = $s;$21 = $0;
                    while(1) {
                        $3 = HEAP8[$$014>>0]|0;
                        $4 = ($3<<24>>24)==(0);
                        if ($4) {
                            $$pn = $21;
                            break L1;
                        }
                        $5 = ((($$014)) + 1|0);
                        $6 = $5;
                        $7 = $6 & 3;
                        $8 = ($7|0)==(0);
                        if ($8) {
                            $$01$lcssa = $5;
                            label = 4;
                            break;
                        } else {
                            $$014 = $5;$21 = $6;
                        }
                    }
                }
            } while(0);
            if ((label|0) == 4) {
                $w$0 = $$01$lcssa;
                while(1) {
                    $9 = HEAP32[$w$0>>2]|0;
                    $10 = (($9) + -16843009)|0;
                    $11 = $9 & -2139062144;
                    $12 = $11 ^ -2139062144;
                    $13 = $12 & $10;
                    $14 = ($13|0)==(0);
                    $15 = ((($w$0)) + 4|0);
                    if ($14) {
                        $w$0 = $15;
                    } else {
                        $$lcssa20 = $9;$w$0$lcssa = $w$0;
                        break;
                    }
                }
                $16 = $$lcssa20&255;
                $17 = ($16<<24>>24)==(0);
                if ($17) {
                    $$1$lcssa = $w$0$lcssa;
                } else {
                    $$pn15 = $w$0$lcssa;
                    while(1) {
                        $18 = ((($$pn15)) + 1|0);
                        $$pre = HEAP8[$18>>0]|0;
                        $19 = ($$pre<<24>>24)==(0);
                        if ($19) {
                            $$1$lcssa = $18;
                            break;
                        } else {
                            $$pn15 = $18;
                        }
                    }
                }
                $20 = $$1$lcssa;
                $$pn = $20;
            }
            $$0 = (($$pn) - ($0))|0;
            return ($$0|0);
        }
        function _strncmp($_l,$_r,$n) {
            $_l = $_l|0;
            $_r = $_r|0;
            $n = $n|0;
            var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
            var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($n|0)==(0);
            if ($0) {
                $$03 = 0;
            } else {
                $1 = HEAP8[$_l>>0]|0;
                $2 = ($1<<24>>24)==(0);
                L3: do {
                    if ($2) {
                        $13 = 0;$r$0$lcssa = $_r;
                    } else {
                        $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
                        while(1) {
                            $$08 = (($$08$in) + -1)|0;
                            $3 = HEAP8[$r$07>>0]|0;
                            $4 = ($3<<24>>24)!=(0);
                            $5 = ($$08|0)!=(0);
                            $or$cond = $5 & $4;
                            $7 = ($6<<24>>24)==($3<<24>>24);
                            $or$cond4 = $7 & $or$cond;
                            if (!($or$cond4)) {
                                $13 = $6;$r$0$lcssa = $r$07;
                                break L3;
                            }
                            $8 = ((($l$06)) + 1|0);
                            $9 = ((($r$07)) + 1|0);
                            $10 = HEAP8[$8>>0]|0;
                            $11 = ($10<<24>>24)==(0);
                            if ($11) {
                                $13 = 0;$r$0$lcssa = $9;
                                break;
                            } else {
                                $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
                            }
                        }
                    }
                } while(0);
                $12 = $13&255;
                $14 = HEAP8[$r$0$lcssa>>0]|0;
                $15 = $14&255;
                $16 = (($12) - ($15))|0;
                $$03 = $16;
            }
            return ($$03|0);
        }
        function _strncpy($d,$s,$n) {
            $d = $d|0;
            $s = $s|0;
            $n = $n|0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            (___stpncpy($d,$s,$n)|0);
            return ($d|0);
        }
        function _strrchr($s,$c) {
            $s = $s|0;
            $c = $c|0;
            var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (_strlen($s)|0);
            $1 = (($0) + 1)|0;
            $2 = (___memrchr($s,$c,$1)|0);
            return ($2|0);
        }
        function _strspn($s,$c) {
            $s = $s|0;
            $c = $c|0;
            var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
            var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0;
            var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, $div = 0, $div4 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 32|0;
            $byteset = sp;
            ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
            $0 = HEAP8[$c>>0]|0;
            $1 = ($0<<24>>24)==(0);
            do {
                if ($1) {
                    $$0 = 0;
                } else {
                    $2 = ((($c)) + 1|0);
                    $3 = HEAP8[$2>>0]|0;
                    $4 = ($3<<24>>24)==(0);
                    if ($4) {
                        $$03 = $s;
                        while(1) {
                            $5 = HEAP8[$$03>>0]|0;
                            $6 = ($5<<24>>24)==($0<<24>>24);
                            $7 = ((($$03)) + 1|0);
                            if ($6) {
                                $$03 = $7;
                            } else {
                                $$03$lcssa = $$03;
                                break;
                            }
                        }
                        $8 = $$03$lcssa;
                        $9 = $s;
                        $10 = (($8) - ($9))|0;
                        $$0 = $10;
                        break;
                    } else {
                        $$028 = $c;$14 = $0;
                    }
                    while(1) {
                        $13 = $14 & 31;
                        $15 = $13&255;
                        $16 = 1 << $15;
                        $div4 = ($14&255) >>> 5;
                        $17 = $div4&255;
                        $18 = (($byteset) + ($17<<2)|0);
                        $19 = HEAP32[$18>>2]|0;
                        $20 = $19 | $16;
                        HEAP32[$18>>2] = $20;
                        $21 = ((($$028)) + 1|0);
                        $22 = HEAP8[$21>>0]|0;
                        $23 = ($22<<24>>24)==(0);
                        if ($23) {
                            break;
                        } else {
                            $$028 = $21;$14 = $22;
                        }
                    }
                    $11 = HEAP8[$s>>0]|0;
                    $12 = ($11<<24>>24)==(0);
                    L10: do {
                        if ($12) {
                            $$1$lcssa = $s;
                        } else {
                            $$16 = $s;$24 = $11;
                            while(1) {
                                $div = ($24&255) >>> 5;
                                $25 = $div&255;
                                $26 = (($byteset) + ($25<<2)|0);
                                $27 = HEAP32[$26>>2]|0;
                                $28 = $24 & 31;
                                $29 = $28&255;
                                $30 = 1 << $29;
                                $31 = $27 & $30;
                                $32 = ($31|0)==(0);
                                if ($32) {
                                    $$1$lcssa = $$16;
                                    break L10;
                                }
                                $33 = ((($$16)) + 1|0);
                                $34 = HEAP8[$33>>0]|0;
                                $35 = ($34<<24>>24)==(0);
                                if ($35) {
                                    $$1$lcssa = $33;
                                    break;
                                } else {
                                    $$16 = $33;$24 = $34;
                                }
                            }
                        }
                    } while(0);
                    $36 = $$1$lcssa;
                    $37 = $s;
                    $38 = (($36) - ($37))|0;
                    $$0 = $38;
                }
            } while(0);
            STACKTOP = sp;return ($$0|0);
        }
        function _strstr($h,$n) {
            $h = $h|0;
            $n = $n|0;
            var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i11 = 0, $$01$i = 0, $$02$i = 0, $$02$i7 = 0, $$03$i = 0, $$lcssa$i = 0, $$lcssa$i10 = 0, $$lcssa$i4 = 0, $$lcssa281 = 0, $$lcssa284 = 0, $$lcssa287 = 0, $$lcssa301 = 0, $$lcssa304 = 0, $$lcssa307 = 0, $$lcssa322 = 0, $$pr$i = 0, $0 = 0;
            var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
            var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
            var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
            var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
            var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
            var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
            var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
            var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $233$phi = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
            var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
            var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
            var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
            var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
            var $byteset$i = 0, $div$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i6 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa143$i = 0, $ip$0$ph76$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0;
            var $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$4$i = 0, $l$080$i = 0, $l$080$i$lcssa321 = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$cond$i = 0, $or$cond$i2 = 0, $or$cond$i8 = 0, $or$cond5$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32147$i = 0, $p$0$ph$ph71$i = 0;
            var $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3$i = 0, $shift$i = 0, $z$0$i = 0, $z$1$i = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 1056|0;
            $byteset$i = sp + 1024|0;
            $shift$i = sp;
            $0 = HEAP8[$n>>0]|0;
            $1 = ($0<<24>>24)==(0);
            do {
                if ($1) {
                    $$0 = $h;
                } else {
                    $2 = $0 << 24 >> 24;
                    $3 = (_strchr($h,$2)|0);
                    $4 = ($3|0)==(0|0);
                    if ($4) {
                        $$0 = 0;
                    } else {
                        $5 = ((($n)) + 1|0);
                        $6 = HEAP8[$5>>0]|0;
                        $7 = ($6<<24>>24)==(0);
                        if ($7) {
                            $$0 = $3;
                        } else {
                            $8 = ((($3)) + 1|0);
                            $9 = HEAP8[$8>>0]|0;
                            $10 = ($9<<24>>24)==(0);
                            if ($10) {
                                $$0 = 0;
                            } else {
                                $11 = ((($n)) + 2|0);
                                $12 = HEAP8[$11>>0]|0;
                                $13 = ($12<<24>>24)==(0);
                                if ($13) {
                                    $14 = $0&255;
                                    $15 = $14 << 8;
                                    $16 = $6&255;
                                    $17 = $16 | $15;
                                    $18 = HEAP8[$3>>0]|0;
                                    $19 = $18&255;
                                    $20 = $19 << 8;
                                    $21 = $9&255;
                                    $22 = $20 | $21;
                                    $$01$i = $8;$232 = $9;$233 = $3;$hw$0$in2$i = $22;
                                    while(1) {
                                        $23 = $hw$0$in2$i & 65535;
                                        $24 = ($23|0)==($17|0);
                                        if ($24) {
                                            $$lcssa$i = $233;$31 = $232;
                                            break;
                                        }
                                        $25 = $23 << 8;
                                        $26 = ((($$01$i)) + 1|0);
                                        $27 = HEAP8[$26>>0]|0;
                                        $28 = $27&255;
                                        $29 = $28 | $25;
                                        $30 = ($27<<24>>24)==(0);
                                        if ($30) {
                                            $$lcssa$i = $$01$i;$31 = 0;
                                            break;
                                        } else {
                                            $233$phi = $$01$i;$$01$i = $26;$232 = $27;$hw$0$in2$i = $29;$233 = $233$phi;
                                        }
                                    }
                                    $32 = ($31<<24>>24)!=(0);
                                    $33 = $32 ? $$lcssa$i : 0;
                                    $$0 = $33;
                                    break;
                                }
                                $34 = ((($3)) + 2|0);
                                $35 = HEAP8[$34>>0]|0;
                                $36 = ($35<<24>>24)==(0);
                                if ($36) {
                                    $$0 = 0;
                                } else {
                                    $37 = ((($n)) + 3|0);
                                    $38 = HEAP8[$37>>0]|0;
                                    $39 = ($38<<24>>24)==(0);
                                    if ($39) {
                                        $40 = $0&255;
                                        $41 = $40 << 24;
                                        $42 = $6&255;
                                        $43 = $42 << 16;
                                        $44 = $43 | $41;
                                        $45 = $12&255;
                                        $46 = $45 << 8;
                                        $47 = $44 | $46;
                                        $48 = HEAP8[$3>>0]|0;
                                        $49 = $48&255;
                                        $50 = $49 << 24;
                                        $51 = $9&255;
                                        $52 = $51 << 16;
                                        $53 = $35&255;
                                        $54 = $53 << 8;
                                        $55 = $54 | $52;
                                        $56 = $55 | $50;
                                        $57 = ($56|0)==($47|0);
                                        if ($57) {
                                            $$0$lcssa$i = $34;$$lcssa$i4 = $35;
                                        } else {
                                            $$02$i = $34;$hw$03$i = $56;
                                            while(1) {
                                                $58 = ((($$02$i)) + 1|0);
                                                $59 = HEAP8[$58>>0]|0;
                                                $60 = $59&255;
                                                $61 = $60 | $hw$03$i;
                                                $62 = $61 << 8;
                                                $63 = ($59<<24>>24)==(0);
                                                $64 = ($62|0)==($47|0);
                                                $or$cond$i2 = $63 | $64;
                                                if ($or$cond$i2) {
                                                    $$0$lcssa$i = $58;$$lcssa$i4 = $59;
                                                    break;
                                                } else {
                                                    $$02$i = $58;$hw$03$i = $62;
                                                }
                                            }
                                        }
                                        $65 = ($$lcssa$i4<<24>>24)!=(0);
                                        $66 = ((($$0$lcssa$i)) + -2|0);
                                        $67 = $65 ? $66 : 0;
                                        $$0 = $67;
                                        break;
                                    }
                                    $68 = ((($3)) + 3|0);
                                    $69 = HEAP8[$68>>0]|0;
                                    $70 = ($69<<24>>24)==(0);
                                    if ($70) {
                                        $$0 = 0;
                                    } else {
                                        $71 = ((($n)) + 4|0);
                                        $72 = HEAP8[$71>>0]|0;
                                        $73 = ($72<<24>>24)==(0);
                                        if ($73) {
                                            $74 = $0&255;
                                            $75 = $74 << 24;
                                            $76 = $6&255;
                                            $77 = $76 << 16;
                                            $78 = $77 | $75;
                                            $79 = $12&255;
                                            $80 = $79 << 8;
                                            $81 = $78 | $80;
                                            $82 = $38&255;
                                            $83 = $81 | $82;
                                            $84 = HEAP8[$3>>0]|0;
                                            $85 = $84&255;
                                            $86 = $85 << 24;
                                            $87 = $9&255;
                                            $88 = $87 << 16;
                                            $89 = $35&255;
                                            $90 = $89 << 8;
                                            $91 = $69&255;
                                            $92 = $90 | $88;
                                            $93 = $92 | $91;
                                            $94 = $93 | $86;
                                            $95 = ($94|0)==($83|0);
                                            if ($95) {
                                                $$0$lcssa$i11 = $68;$$lcssa$i10 = $69;
                                            } else {
                                                $$02$i7 = $68;$hw$03$i6 = $94;
                                                while(1) {
                                                    $96 = $hw$03$i6 << 8;
                                                    $97 = ((($$02$i7)) + 1|0);
                                                    $98 = HEAP8[$97>>0]|0;
                                                    $99 = $98&255;
                                                    $100 = $99 | $96;
                                                    $101 = ($98<<24>>24)==(0);
                                                    $102 = ($100|0)==($83|0);
                                                    $or$cond$i8 = $101 | $102;
                                                    if ($or$cond$i8) {
                                                        $$0$lcssa$i11 = $97;$$lcssa$i10 = $98;
                                                        break;
                                                    } else {
                                                        $$02$i7 = $97;$hw$03$i6 = $100;
                                                    }
                                                }
                                            }
                                            $103 = ($$lcssa$i10<<24>>24)!=(0);
                                            $104 = ((($$0$lcssa$i11)) + -3|0);
                                            $105 = $103 ? $104 : 0;
                                            $$0 = $105;
                                            break;
                                        }
                                        ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
                                        $110 = $0;$l$080$i = 0;
                                        while(1) {
                                            $106 = (($3) + ($l$080$i)|0);
                                            $107 = HEAP8[$106>>0]|0;
                                            $108 = ($107<<24>>24)==(0);
                                            if ($108) {
                                                $$0$i = 0;
                                                break;
                                            }
                                            $109 = $110 & 31;
                                            $111 = $109&255;
                                            $112 = 1 << $111;
                                            $div4$i = ($110&255) >>> 5;
                                            $113 = $div4$i&255;
                                            $114 = (($byteset$i) + ($113<<2)|0);
                                            $115 = HEAP32[$114>>2]|0;
                                            $116 = $115 | $112;
                                            HEAP32[$114>>2] = $116;
                                            $117 = (($l$080$i) + 1)|0;
                                            $118 = $110&255;
                                            $119 = (($shift$i) + ($118<<2)|0);
                                            HEAP32[$119>>2] = $117;
                                            $120 = (($n) + ($117)|0);
                                            $121 = HEAP8[$120>>0]|0;
                                            $122 = ($121<<24>>24)==(0);
                                            if ($122) {
                                                $$lcssa322 = $117;$l$080$i$lcssa321 = $l$080$i;
                                                label = 23;
                                                break;
                                            } else {
                                                $110 = $121;$l$080$i = $117;
                                            }
                                        }
                                        L32: do {
                                            if ((label|0) == 23) {
                                                $123 = ($$lcssa322>>>0)>(1);
                                                L34: do {
                                                    if ($123) {
                                                        $234 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
                                                        L35: while(1) {
                                                            $235 = $234;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
                                                            while(1) {
                                                                $236 = $235;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
                                                                L39: while(1) {
                                                                    $133 = $236;$k$059$i = 1;
                                                                    while(1) {
                                                                        $129 = (($k$059$i) + ($ip$0$ph76$i))|0;
                                                                        $130 = (($n) + ($129)|0);
                                                                        $131 = HEAP8[$130>>0]|0;
                                                                        $132 = (($n) + ($133)|0);
                                                                        $134 = HEAP8[$132>>0]|0;
                                                                        $135 = ($131<<24>>24)==($134<<24>>24);
                                                                        if (!($135)) {
                                                                            $$lcssa301 = $133;$$lcssa304 = $131;$$lcssa307 = $134;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
                                                                            break L39;
                                                                        }
                                                                        $136 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
                                                                        $127 = (($k$059$i) + 1)|0;
                                                                        if ($136) {
                                                                            break;
                                                                        }
                                                                        $126 = (($127) + ($jp$0$ph1365$i))|0;
                                                                        $128 = ($126>>>0)<($$lcssa322>>>0);
                                                                        if ($128) {
                                                                            $133 = $126;$k$059$i = $127;
                                                                        } else {
                                                                            $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                                                                            break L35;
                                                                        }
                                                                    }
                                                                    $137 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
                                                                    $138 = (($137) + 1)|0;
                                                                    $139 = ($138>>>0)<($$lcssa322>>>0);
                                                                    if ($139) {
                                                                        $236 = $138;$jp$0$ph1365$i = $137;
                                                                    } else {
                                                                        $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                                                                        break L35;
                                                                    }
                                                                }
                                                                $140 = ($$lcssa304&255)>($$lcssa307&255);
                                                                $141 = (($$lcssa301) - ($ip$0$ph76$i))|0;
                                                                if (!($140)) {
                                                                    $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
                                                                    break;
                                                                }
                                                                $124 = (($$lcssa301) + 1)|0;
                                                                $125 = ($124>>>0)<($$lcssa322>>>0);
                                                                if ($125) {
                                                                    $235 = $124;$jp$0$ph13$ph70$i = $$lcssa301;$p$0$ph$ph71$i = $141;
                                                                } else {
                                                                    $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $141;
                                                                    break L35;
                                                                }
                                                            }
                                                            $142 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
                                                            $143 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
                                                            $144 = ($143>>>0)<($$lcssa322>>>0);
                                                            if ($144) {
                                                                $234 = $143;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $142;
                                                            } else {
                                                                $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
                                                                break;
                                                            }
                                                        }
                                                        $237 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
                                                        while(1) {
                                                            $239 = $237;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
                                                            while(1) {
                                                                $238 = $239;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
                                                                L54: while(1) {
                                                                    $152 = $238;$k$139$i = 1;
                                                                    while(1) {
                                                                        $148 = (($k$139$i) + ($ip$1$ph55$i))|0;
                                                                        $149 = (($n) + ($148)|0);
                                                                        $150 = HEAP8[$149>>0]|0;
                                                                        $151 = (($n) + ($152)|0);
                                                                        $153 = HEAP8[$151>>0]|0;
                                                                        $154 = ($150<<24>>24)==($153<<24>>24);
                                                                        if (!($154)) {
                                                                            $$lcssa281 = $152;$$lcssa284 = $150;$$lcssa287 = $153;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
                                                                            break L54;
                                                                        }
                                                                        $155 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
                                                                        $146 = (($k$139$i) + 1)|0;
                                                                        if ($155) {
                                                                            break;
                                                                        }
                                                                        $145 = (($146) + ($jp$1$ph944$i))|0;
                                                                        $147 = ($145>>>0)<($$lcssa322>>>0);
                                                                        if ($147) {
                                                                            $152 = $145;$k$139$i = $146;
                                                                        } else {
                                                                            $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                                                                            break L34;
                                                                        }
                                                                    }
                                                                    $156 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
                                                                    $157 = (($156) + 1)|0;
                                                                    $158 = ($157>>>0)<($$lcssa322>>>0);
                                                                    if ($158) {
                                                                        $238 = $157;$jp$1$ph944$i = $156;
                                                                    } else {
                                                                        $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                                                                        break L34;
                                                                    }
                                                                }
                                                                $159 = ($$lcssa284&255)<($$lcssa287&255);
                                                                $160 = (($$lcssa281) - ($ip$1$ph55$i))|0;
                                                                if (!($159)) {
                                                                    $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
                                                                    break;
                                                                }
                                                                $164 = (($$lcssa281) + 1)|0;
                                                                $165 = ($164>>>0)<($$lcssa322>>>0);
                                                                if ($165) {
                                                                    $239 = $164;$jp$1$ph9$ph49$i = $$lcssa281;$p$1$ph$ph50$i = $160;
                                                                } else {
                                                                    $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $160;
                                                                    break L34;
                                                                }
                                                            }
                                                            $161 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
                                                            $162 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
                                                            $163 = ($162>>>0)<($$lcssa322>>>0);
                                                            if ($163) {
                                                                $237 = $162;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $161;
                                                            } else {
                                                                $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
                                                                break;
                                                            }
                                                        }
                                                    } else {
                                                        $ip$0$ph$lcssa143$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32147$i = 1;$p$1$ph$ph$lcssa23$i = 1;
                                                    }
                                                } while(0);
                                                $166 = (($ip$1$ph$lcssa$i) + 1)|0;
                                                $167 = (($ip$0$ph$lcssa143$i) + 1)|0;
                                                $168 = ($166>>>0)>($167>>>0);
                                                $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32147$i;
                                                $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa143$i;
                                                $169 = (($n) + ($p$1$p$0$i)|0);
                                                $170 = (($ip$1$ip$0$i) + 1)|0;
                                                $171 = (_memcmp($n,$169,$170)|0);
                                                $172 = ($171|0)==(0);
                                                if ($172) {
                                                    $177 = (($$lcssa322) - ($p$1$p$0$i))|0;
                                                    $mem0$0$i = $177;$p$3$i = $p$1$p$0$i;
                                                } else {
                                                    $173 = (($$lcssa322) - ($ip$1$ip$0$i))|0;
                                                    $174 = (($173) + -1)|0;
                                                    $175 = ($ip$1$ip$0$i>>>0)>($174>>>0);
                                                    $ip$1$ip$0$$i = $175 ? $ip$1$ip$0$i : $174;
                                                    $176 = (($ip$1$ip$0$$i) + 1)|0;
                                                    $mem0$0$i = 0;$p$3$i = $176;
                                                }
                                                $178 = $$lcssa322 | 63;
                                                $179 = ($mem0$0$i|0)!=(0);
                                                $180 = (($$lcssa322) - ($p$3$i))|0;
                                                $$03$i = $3;$mem$0$i = 0;$z$0$i = $3;
                                                L69: while(1) {
                                                    $181 = $z$0$i;
                                                    $182 = $$03$i;
                                                    $183 = (($181) - ($182))|0;
                                                    $184 = ($183>>>0)<($$lcssa322>>>0);
                                                    do {
                                                        if ($184) {
                                                            $185 = (_memchr($z$0$i,0,$178)|0);
                                                            $186 = ($185|0)==(0|0);
                                                            if ($186) {
                                                                $190 = (($z$0$i) + ($178)|0);
                                                                $z$1$i = $190;
                                                                break;
                                                            } else {
                                                                $187 = $185;
                                                                $188 = (($187) - ($182))|0;
                                                                $189 = ($188>>>0)<($$lcssa322>>>0);
                                                                if ($189) {
                                                                    $$0$i = 0;
                                                                    break L32;
                                                                } else {
                                                                    $z$1$i = $185;
                                                                    break;
                                                                }
                                                            }
                                                        } else {
                                                            $z$1$i = $z$0$i;
                                                        }
                                                    } while(0);
                                                    $191 = (($$03$i) + ($l$080$i$lcssa321)|0);
                                                    $192 = HEAP8[$191>>0]|0;
                                                    $div$i = ($192&255) >>> 5;
                                                    $193 = $div$i&255;
                                                    $194 = (($byteset$i) + ($193<<2)|0);
                                                    $195 = HEAP32[$194>>2]|0;
                                                    $196 = $192 & 31;
                                                    $197 = $196&255;
                                                    $198 = 1 << $197;
                                                    $199 = $198 & $195;
                                                    $200 = ($199|0)==(0);
                                                    if ($200) {
                                                        $209 = (($$03$i) + ($$lcssa322)|0);
                                                        $$03$i = $209;$mem$0$i = 0;$z$0$i = $z$1$i;
                                                        continue;
                                                    }
                                                    $201 = $192&255;
                                                    $202 = (($shift$i) + ($201<<2)|0);
                                                    $203 = HEAP32[$202>>2]|0;
                                                    $204 = (($$lcssa322) - ($203))|0;
                                                    $205 = ($$lcssa322|0)==($203|0);
                                                    if (!($205)) {
                                                        $206 = ($mem$0$i|0)!=(0);
                                                        $or$cond$i = $179 & $206;
                                                        $207 = ($204>>>0)<($p$3$i>>>0);
                                                        $or$cond5$i = $or$cond$i & $207;
                                                        $k$2$i = $or$cond5$i ? $180 : $204;
                                                        $208 = (($$03$i) + ($k$2$i)|0);
                                                        $$03$i = $208;$mem$0$i = 0;$z$0$i = $z$1$i;
                                                        continue;
                                                    }
                                                    $210 = ($170>>>0)>($mem$0$i>>>0);
                                                    $211 = $210 ? $170 : $mem$0$i;
                                                    $212 = (($n) + ($211)|0);
                                                    $213 = HEAP8[$212>>0]|0;
                                                    $214 = ($213<<24>>24)==(0);
                                                    L83: do {
                                                        if ($214) {
                                                            $k$4$i = $170;
                                                        } else {
                                                            $$pr$i = $213;$k$338$i = $211;
                                                            while(1) {
                                                                $215 = (($$03$i) + ($k$338$i)|0);
                                                                $216 = HEAP8[$215>>0]|0;
                                                                $217 = ($$pr$i<<24>>24)==($216<<24>>24);
                                                                if (!($217)) {
                                                                    $k$338$i$lcssa = $k$338$i;
                                                                    break;
                                                                }
                                                                $218 = (($k$338$i) + 1)|0;
                                                                $219 = (($n) + ($218)|0);
                                                                $220 = HEAP8[$219>>0]|0;
                                                                $221 = ($220<<24>>24)==(0);
                                                                if ($221) {
                                                                    $k$4$i = $170;
                                                                    break L83;
                                                                } else {
                                                                    $$pr$i = $220;$k$338$i = $218;
                                                                }
                                                            }
                                                            $222 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
                                                            $223 = (($$03$i) + ($222)|0);
                                                            $$03$i = $223;$mem$0$i = 0;$z$0$i = $z$1$i;
                                                            continue L69;
                                                        }
                                                    } while(0);
                                                    while(1) {
                                                        $224 = ($k$4$i>>>0)>($mem$0$i>>>0);
                                                        if (!($224)) {
                                                            $$0$i = $$03$i;
                                                            break L32;
                                                        }
                                                        $225 = (($k$4$i) + -1)|0;
                                                        $226 = (($n) + ($225)|0);
                                                        $227 = HEAP8[$226>>0]|0;
                                                        $228 = (($$03$i) + ($225)|0);
                                                        $229 = HEAP8[$228>>0]|0;
                                                        $230 = ($227<<24>>24)==($229<<24>>24);
                                                        if ($230) {
                                                            $k$4$i = $225;
                                                        } else {
                                                            break;
                                                        }
                                                    }
                                                    $231 = (($$03$i) + ($p$3$i)|0);
                                                    $$03$i = $231;$mem$0$i = $mem0$0$i;$z$0$i = $z$1$i;
                                                }
                                            }
                                        } while(0);
                                        $$0 = $$0$i;
                                    }
                                }
                            }
                        }
                    }
                }
            } while(0);
            STACKTOP = sp;return ($$0|0);
        }
        function _scanexp($f,$pok) {
            $f = $f|0;
            $pok = $pok|0;
            var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
            var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
            var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
            var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
            var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
            var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($f)) + 100|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($1>>>0)<($3>>>0);
            if ($4) {
                $5 = ((($1)) + 1|0);
                HEAP32[$0>>2] = $5;
                $6 = HEAP8[$1>>0]|0;
                $7 = $6&255;
                $9 = $7;
            } else {
                $8 = (___shgetc($f)|0);
                $9 = $8;
            }
            $10 = ($9|0)==(45);
            switch ($9|0) {
                case 43: case 45:  {
                $11 = $10&1;
                $12 = HEAP32[$0>>2]|0;
                $13 = HEAP32[$2>>2]|0;
                $14 = ($12>>>0)<($13>>>0);
                if ($14) {
                    $15 = ((($12)) + 1|0);
                    HEAP32[$0>>2] = $15;
                    $16 = HEAP8[$12>>0]|0;
                    $17 = $16&255;
                    $20 = $17;
                } else {
                    $18 = (___shgetc($f)|0);
                    $20 = $18;
                }
                $19 = (($20) + -48)|0;
                $21 = ($19>>>0)>(9);
                $22 = ($pok|0)!=(0);
                $or$cond3 = $22 & $21;
                if ($or$cond3) {
                    $23 = HEAP32[$2>>2]|0;
                    $24 = ($23|0)==(0|0);
                    if ($24) {
                        $c$0 = $20;$neg$0 = $11;
                    } else {
                        $25 = HEAP32[$0>>2]|0;
                        $26 = ((($25)) + -1|0);
                        HEAP32[$0>>2] = $26;
                        $c$0 = $20;$neg$0 = $11;
                    }
                } else {
                    $c$0 = $20;$neg$0 = $11;
                }
                break;
            }
                default: {
                    $c$0 = $9;$neg$0 = 0;
                }
            }
            $27 = (($c$0) + -48)|0;
            $28 = ($27>>>0)>(9);
            if ($28) {
                $29 = HEAP32[$2>>2]|0;
                $30 = ($29|0)==(0|0);
                if ($30) {
                    $98 = -2147483648;$99 = 0;
                } else {
                    $31 = HEAP32[$0>>2]|0;
                    $32 = ((($31)) + -1|0);
                    HEAP32[$0>>2] = $32;
                    $98 = -2147483648;$99 = 0;
                }
            } else {
                $c$112 = $c$0;$x$013 = 0;
                while(1) {
                    $33 = ($x$013*10)|0;
                    $34 = (($c$112) + -48)|0;
                    $35 = (($34) + ($33))|0;
                    $36 = HEAP32[$0>>2]|0;
                    $37 = HEAP32[$2>>2]|0;
                    $38 = ($36>>>0)<($37>>>0);
                    if ($38) {
                        $39 = ((($36)) + 1|0);
                        HEAP32[$0>>2] = $39;
                        $40 = HEAP8[$36>>0]|0;
                        $41 = $40&255;
                        $c$1$be = $41;
                    } else {
                        $42 = (___shgetc($f)|0);
                        $c$1$be = $42;
                    }
                    $43 = (($c$1$be) + -48)|0;
                    $44 = ($43>>>0)<(10);
                    $45 = ($35|0)<(214748364);
                    $46 = $44 & $45;
                    if ($46) {
                        $c$112 = $c$1$be;$x$013 = $35;
                    } else {
                        $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
                        break;
                    }
                }
                $47 = ($$lcssa22|0)<(0);
                $48 = $47 << 31 >> 31;
                $49 = (($c$1$be$lcssa) + -48)|0;
                $50 = ($49>>>0)<(10);
                if ($50) {
                    $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
                    while(1) {
                        $55 = (___muldi3(($53|0),($54|0),10,0)|0);
                        $56 = tempRet0;
                        $57 = ($c$27|0)<(0);
                        $58 = $57 << 31 >> 31;
                        $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
                        $60 = tempRet0;
                        $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
                        $62 = tempRet0;
                        $63 = HEAP32[$0>>2]|0;
                        $64 = HEAP32[$2>>2]|0;
                        $65 = ($63>>>0)<($64>>>0);
                        if ($65) {
                            $66 = ((($63)) + 1|0);
                            HEAP32[$0>>2] = $66;
                            $67 = HEAP8[$63>>0]|0;
                            $68 = $67&255;
                            $c$2$be = $68;
                        } else {
                            $69 = (___shgetc($f)|0);
                            $c$2$be = $69;
                        }
                        $70 = (($c$2$be) + -48)|0;
                        $71 = ($70>>>0)<(10);
                        $72 = ($62|0)<(21474836);
                        $73 = ($61>>>0)<(2061584302);
                        $74 = ($62|0)==(21474836);
                        $75 = $74 & $73;
                        $76 = $72 | $75;
                        $77 = $71 & $76;
                        if ($77) {
                            $53 = $61;$54 = $62;$c$27 = $c$2$be;
                        } else {
                            $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
                            break;
                        }
                    }
                } else {
                    $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
                }
                $51 = (($c$2$lcssa) + -48)|0;
                $52 = ($51>>>0)<(10);
                if ($52) {
                    while(1) {
                        $78 = HEAP32[$0>>2]|0;
                        $79 = HEAP32[$2>>2]|0;
                        $80 = ($78>>>0)<($79>>>0);
                        if ($80) {
                            $81 = ((($78)) + 1|0);
                            HEAP32[$0>>2] = $81;
                            $82 = HEAP8[$78>>0]|0;
                            $83 = $82&255;
                            $c$3$be = $83;
                        } else {
                            $84 = (___shgetc($f)|0);
                            $c$3$be = $84;
                        }
                        $85 = (($c$3$be) + -48)|0;
                        $86 = ($85>>>0)<(10);
                        if (!($86)) {
                            break;
                        }
                    }
                }
                $87 = HEAP32[$2>>2]|0;
                $88 = ($87|0)==(0|0);
                if (!($88)) {
                    $89 = HEAP32[$0>>2]|0;
                    $90 = ((($89)) + -1|0);
                    HEAP32[$0>>2] = $90;
                }
                $91 = ($neg$0|0)!=(0);
                $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
                $95 = tempRet0;
                $96 = $91 ? $94 : $92;
                $97 = $91 ? $95 : $93;
                $98 = $97;$99 = $96;
            }
            tempRet0 = ($98);
            return ($99|0);
        }
        function ___fflush_unlocked($f) {
            $f = $f|0;
            var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
            var $9 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 20|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($f)) + 28|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = ($1>>>0)>($3>>>0);
            if ($4) {
                $5 = ((($f)) + 36|0);
                $6 = HEAP32[$5>>2]|0;
                (FUNCTION_TABLE_iiii[$6 & 15]($f,0,0)|0);
                $7 = HEAP32[$0>>2]|0;
                $8 = ($7|0)==(0|0);
                if ($8) {
                    $$0 = -1;
                } else {
                    label = 3;
                }
            } else {
                label = 3;
            }
            if ((label|0) == 3) {
                $9 = ((($f)) + 4|0);
                $10 = HEAP32[$9>>2]|0;
                $11 = ((($f)) + 8|0);
                $12 = HEAP32[$11>>2]|0;
                $13 = ($10>>>0)<($12>>>0);
                if ($13) {
                    $14 = ((($f)) + 40|0);
                    $15 = HEAP32[$14>>2]|0;
                    $16 = $10;
                    $17 = $12;
                    $18 = (($16) - ($17))|0;
                    (FUNCTION_TABLE_iiii[$15 & 15]($f,$18,1)|0);
                }
                $19 = ((($f)) + 16|0);
                HEAP32[$19>>2] = 0;
                HEAP32[$2>>2] = 0;
                HEAP32[$0>>2] = 0;
                HEAP32[$11>>2] = 0;
                HEAP32[$9>>2] = 0;
                $$0 = 0;
            }
            return ($$0|0);
        }
        function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
            $f = $f|0;
            $fmt = $fmt|0;
            $ap = $ap|0;
            $nl_arg = $nl_arg|0;
            $nl_type = $nl_type|0;
            var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
            var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
            var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
            var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
            var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
            var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
            var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
            var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
            var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
            var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
            var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
            var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
            var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
            var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
            var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
            var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
            var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
            var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
            var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
            var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
            var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
            var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
            var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
            var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
            var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
            var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
            var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
            var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
            var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
            var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
            var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
            var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
            var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
            var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
            var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
            var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
            var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
            var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
            var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
            var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
            var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
            var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
            var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
            var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
            var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
            var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
            var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
            var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
            var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
            var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
            var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
            var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
            var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
            var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 624|0;
            $big$i = sp + 24|0;
            $e2$i = sp + 16|0;
            $buf$i = sp + 588|0;
            $ebuf0$i = sp + 576|0;
            $arg = sp;
            $buf = sp + 536|0;
            $wc = sp + 8|0;
            $mb = sp + 528|0;
            $0 = ($f|0)!=(0|0);
            $1 = ((($buf)) + 40|0);
            $2 = $1;
            $3 = ((($buf)) + 39|0);
            $4 = ((($wc)) + 4|0);
            $5 = ((($ebuf0$i)) + 12|0);
            $6 = ((($ebuf0$i)) + 11|0);
            $7 = $buf$i;
            $8 = $5;
            $9 = (($8) - ($7))|0;
            $10 = (-2 - ($7))|0;
            $11 = (($8) + 2)|0;
            $12 = ((($big$i)) + 288|0);
            $13 = ((($buf$i)) + 9|0);
            $14 = $13;
            $15 = ((($buf$i)) + 8|0);
            $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
            L1: while(1) {
                $16 = ($cnt$0|0)>(-1);
                do {
                    if ($16) {
                        $17 = (2147483647 - ($cnt$0))|0;
                        $18 = ($l$0|0)>($17|0);
                        if ($18) {
                            $19 = (___errno_location()|0);
                            HEAP32[$19>>2] = 75;
                            $cnt$1 = -1;
                            break;
                        } else {
                            $20 = (($l$0) + ($cnt$0))|0;
                            $cnt$1 = $20;
                            break;
                        }
                    } else {
                        $cnt$1 = $cnt$0;
                    }
                } while(0);
                $21 = HEAP8[$fmt41>>0]|0;
                $22 = ($21<<24>>24)==(0);
                if ($22) {
                    $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
                    label = 245;
                    break;
                } else {
                    $23 = $21;$fmt40 = $fmt41;
                }
                L9: while(1) {
                    switch ($23<<24>>24) {
                        case 37:  {
                            $fmt39101 = $fmt40;$z$0102 = $fmt40;
                            label = 9;
                            break L9;
                            break;
                        }
                        case 0:  {
                            $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
                            break L9;
                            break;
                        }
                        default: {
                        }
                    }
                    $24 = ((($fmt40)) + 1|0);
                    $$pre = HEAP8[$24>>0]|0;
                    $23 = $$pre;$fmt40 = $24;
                }
                L12: do {
                    if ((label|0) == 9) {
                        while(1) {
                            label = 0;
                            $25 = ((($fmt39101)) + 1|0);
                            $26 = HEAP8[$25>>0]|0;
                            $27 = ($26<<24>>24)==(37);
                            if (!($27)) {
                                $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
                                break L12;
                            }
                            $28 = ((($z$0102)) + 1|0);
                            $29 = ((($fmt39101)) + 2|0);
                            $30 = HEAP8[$29>>0]|0;
                            $31 = ($30<<24>>24)==(37);
                            if ($31) {
                                $fmt39101 = $29;$z$0102 = $28;
                                label = 9;
                            } else {
                                $fmt39$lcssa = $29;$z$0$lcssa = $28;
                                break;
                            }
                        }
                    }
                } while(0);
                $32 = $z$0$lcssa;
                $33 = $fmt41;
                $34 = (($32) - ($33))|0;
                if ($0) {
                    $35 = HEAP32[$f>>2]|0;
                    $36 = $35 & 32;
                    $37 = ($36|0)==(0);
                    if ($37) {
                        (___fwritex($fmt41,$34,$f)|0);
                    }
                }
                $38 = ($z$0$lcssa|0)==($fmt41|0);
                if (!($38)) {
                    $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
                    continue;
                }
                $39 = ((($fmt39$lcssa)) + 1|0);
                $40 = HEAP8[$39>>0]|0;
                $41 = $40 << 24 >> 24;
                $isdigittmp = (($41) + -48)|0;
                $isdigit = ($isdigittmp>>>0)<(10);
                if ($isdigit) {
                    $42 = ((($fmt39$lcssa)) + 2|0);
                    $43 = HEAP8[$42>>0]|0;
                    $44 = ($43<<24>>24)==(36);
                    $45 = ((($fmt39$lcssa)) + 3|0);
                    $$51 = $44 ? $45 : $39;
                    $$l10n$0 = $44 ? 1 : $l10n$0;
                    $isdigittmp$ = $44 ? $isdigittmp : -1;
                    $$pre193 = HEAP8[$$51>>0]|0;
                    $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
                } else {
                    $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
                }
                $46 = $47 << 24 >> 24;
                $48 = $46 & -32;
                $49 = ($48|0)==(32);
                L25: do {
                    if ($49) {
                        $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
                        while(1) {
                            $50 = (($51) + -32)|0;
                            $52 = 1 << $50;
                            $53 = $52 & 75913;
                            $54 = ($53|0)==(0);
                            if ($54) {
                                $65 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
                                break L25;
                            }
                            $55 = $56 << 24 >> 24;
                            $57 = (($55) + -32)|0;
                            $58 = 1 << $57;
                            $59 = $58 | $fl$0109;
                            $60 = ((($storemerge8108)) + 1|0);
                            $61 = HEAP8[$60>>0]|0;
                            $62 = $61 << 24 >> 24;
                            $63 = $62 & -32;
                            $64 = ($63|0)==(32);
                            if ($64) {
                                $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
                            } else {
                                $65 = $61;$fl$062 = $59;$storemerge860 = $60;
                                break;
                            }
                        }
                    } else {
                        $65 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
                    }
                } while(0);
                $66 = ($65<<24>>24)==(42);
                do {
                    if ($66) {
                        $67 = ((($storemerge860)) + 1|0);
                        $68 = HEAP8[$67>>0]|0;
                        $69 = $68 << 24 >> 24;
                        $isdigittmp11 = (($69) + -48)|0;
                        $isdigit12 = ($isdigittmp11>>>0)<(10);
                        if ($isdigit12) {
                            $70 = ((($storemerge860)) + 2|0);
                            $71 = HEAP8[$70>>0]|0;
                            $72 = ($71<<24>>24)==(36);
                            if ($72) {
                                $73 = (($nl_type) + ($isdigittmp11<<2)|0);
                                HEAP32[$73>>2] = 10;
                                $74 = HEAP8[$67>>0]|0;
                                $75 = $74 << 24 >> 24;
                                $76 = (($75) + -48)|0;
                                $77 = (($nl_arg) + ($76<<3)|0);
                                $78 = $77;
                                $79 = $78;
                                $80 = HEAP32[$79>>2]|0;
                                $81 = (($78) + 4)|0;
                                $82 = $81;
                                $83 = HEAP32[$82>>2]|0;
                                $84 = ((($storemerge860)) + 3|0);
                                $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
                            } else {
                                label = 24;
                            }
                        } else {
                            label = 24;
                        }
                        if ((label|0) == 24) {
                            label = 0;
                            $85 = ($l10n$1|0)==(0);
                            if (!($85)) {
                                $$0 = -1;
                                break L1;
                            }
                            if (!($0)) {
                                $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
                                break;
                            }
                            $arglist_current = HEAP32[$ap>>2]|0;
                            $86 = $arglist_current;
                            $87 = ((0) + 4|0);
                            $expanded4 = $87;
                            $expanded = (($expanded4) - 1)|0;
                            $88 = (($86) + ($expanded))|0;
                            $89 = ((0) + 4|0);
                            $expanded8 = $89;
                            $expanded7 = (($expanded8) - 1)|0;
                            $expanded6 = $expanded7 ^ -1;
                            $90 = $88 & $expanded6;
                            $91 = $90;
                            $92 = HEAP32[$91>>2]|0;
                            $arglist_next = ((($91)) + 4|0);
                            HEAP32[$ap>>2] = $arglist_next;
                            $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
                        }
                        $93 = ($w$0|0)<(0);
                        if ($93) {
                            $94 = $fl$062 | 8192;
                            $95 = (0 - ($w$0))|0;
                            $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
                        } else {
                            $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
                        }
                    } else {
                        $96 = $65 << 24 >> 24;
                        $isdigittmp1$i = (($96) + -48)|0;
                        $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
                        if ($isdigit2$i) {
                            $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
                            while(1) {
                                $97 = ($i$03$i*10)|0;
                                $98 = (($97) + ($isdigittmp4$i))|0;
                                $99 = ((($100)) + 1|0);
                                $101 = HEAP8[$99>>0]|0;
                                $102 = $101 << 24 >> 24;
                                $isdigittmp$i = (($102) + -48)|0;
                                $isdigit$i = ($isdigittmp$i>>>0)<(10);
                                if ($isdigit$i) {
                                    $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
                                } else {
                                    $$lcssa = $98;$$lcssa318 = $99;
                                    break;
                                }
                            }
                            $103 = ($$lcssa|0)<(0);
                            if ($103) {
                                $$0 = -1;
                                break L1;
                            } else {
                                $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
                            }
                        } else {
                            $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
                        }
                    }
                } while(0);
                $104 = HEAP8[$fmt42>>0]|0;
                $105 = ($104<<24>>24)==(46);
                L46: do {
                    if ($105) {
                        $106 = ((($fmt42)) + 1|0);
                        $107 = HEAP8[$106>>0]|0;
                        $108 = ($107<<24>>24)==(42);
                        if (!($108)) {
                            $135 = $107 << 24 >> 24;
                            $isdigittmp1$i22 = (($135) + -48)|0;
                            $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
                            if ($isdigit2$i23) {
                                $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
                            } else {
                                $fmt45 = $106;$p$0 = 0;
                                break;
                            }
                            while(1) {
                                $136 = ($i$03$i25*10)|0;
                                $137 = (($136) + ($isdigittmp4$i24))|0;
                                $138 = ((($139)) + 1|0);
                                $140 = HEAP8[$138>>0]|0;
                                $141 = $140 << 24 >> 24;
                                $isdigittmp$i26 = (($141) + -48)|0;
                                $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
                                if ($isdigit$i27) {
                                    $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
                                } else {
                                    $fmt45 = $138;$p$0 = $137;
                                    break L46;
                                }
                            }
                        }
                        $109 = ((($fmt42)) + 2|0);
                        $110 = HEAP8[$109>>0]|0;
                        $111 = $110 << 24 >> 24;
                        $isdigittmp9 = (($111) + -48)|0;
                        $isdigit10 = ($isdigittmp9>>>0)<(10);
                        if ($isdigit10) {
                            $112 = ((($fmt42)) + 3|0);
                            $113 = HEAP8[$112>>0]|0;
                            $114 = ($113<<24>>24)==(36);
                            if ($114) {
                                $115 = (($nl_type) + ($isdigittmp9<<2)|0);
                                HEAP32[$115>>2] = 10;
                                $116 = HEAP8[$109>>0]|0;
                                $117 = $116 << 24 >> 24;
                                $118 = (($117) + -48)|0;
                                $119 = (($nl_arg) + ($118<<3)|0);
                                $120 = $119;
                                $121 = $120;
                                $122 = HEAP32[$121>>2]|0;
                                $123 = (($120) + 4)|0;
                                $124 = $123;
                                $125 = HEAP32[$124>>2]|0;
                                $126 = ((($fmt42)) + 4|0);
                                $fmt45 = $126;$p$0 = $122;
                                break;
                            }
                        }
                        $127 = ($l10n$3|0)==(0);
                        if (!($127)) {
                            $$0 = -1;
                            break L1;
                        }
                        if ($0) {
                            $arglist_current2 = HEAP32[$ap>>2]|0;
                            $128 = $arglist_current2;
                            $129 = ((0) + 4|0);
                            $expanded11 = $129;
                            $expanded10 = (($expanded11) - 1)|0;
                            $130 = (($128) + ($expanded10))|0;
                            $131 = ((0) + 4|0);
                            $expanded15 = $131;
                            $expanded14 = (($expanded15) - 1)|0;
                            $expanded13 = $expanded14 ^ -1;
                            $132 = $130 & $expanded13;
                            $133 = $132;
                            $134 = HEAP32[$133>>2]|0;
                            $arglist_next3 = ((($133)) + 4|0);
                            HEAP32[$ap>>2] = $arglist_next3;
                            $fmt45 = $109;$p$0 = $134;
                        } else {
                            $fmt45 = $109;$p$0 = 0;
                        }
                    } else {
                        $fmt45 = $fmt42;$p$0 = -1;
                    }
                } while(0);
                $fmt44 = $fmt45;$st$0 = 0;
                while(1) {
                    $142 = HEAP8[$fmt44>>0]|0;
                    $143 = $142 << 24 >> 24;
                    $144 = (($143) + -65)|0;
                    $145 = ($144>>>0)>(57);
                    if ($145) {
                        $$0 = -1;
                        break L1;
                    }
                    $146 = ((($fmt44)) + 1|0);
                    $147 = ((28727 + (($st$0*58)|0)|0) + ($144)|0);
                    $148 = HEAP8[$147>>0]|0;
                    $149 = $148&255;
                    $150 = (($149) + -1)|0;
                    $151 = ($150>>>0)<(8);
                    if ($151) {
                        $fmt44 = $146;$st$0 = $149;
                    } else {
                        $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
                        break;
                    }
                }
                $152 = ($$lcssa324<<24>>24)==(0);
                if ($152) {
                    $$0 = -1;
                    break;
                }
                $153 = ($$lcssa324<<24>>24)==(19);
                $154 = ($argpos$0|0)>(-1);
                do {
                    if ($153) {
                        if ($154) {
                            $$0 = -1;
                            break L1;
                        } else {
                            label = 52;
                        }
                    } else {
                        if ($154) {
                            $155 = (($nl_type) + ($argpos$0<<2)|0);
                            HEAP32[$155>>2] = $$lcssa325;
                            $156 = (($nl_arg) + ($argpos$0<<3)|0);
                            $157 = $156;
                            $158 = $157;
                            $159 = HEAP32[$158>>2]|0;
                            $160 = (($157) + 4)|0;
                            $161 = $160;
                            $162 = HEAP32[$161>>2]|0;
                            $163 = $arg;
                            $164 = $163;
                            HEAP32[$164>>2] = $159;
                            $165 = (($163) + 4)|0;
                            $166 = $165;
                            HEAP32[$166>>2] = $162;
                            label = 52;
                            break;
                        }
                        if (!($0)) {
                            $$0 = 0;
                            break L1;
                        }
                        _pop_arg($arg,$$lcssa325,$ap);
                    }
                } while(0);
                if ((label|0) == 52) {
                    label = 0;
                    if (!($0)) {
                        $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
                        continue;
                    }
                }
                $167 = HEAP8[$fmt44$lcssa321>>0]|0;
                $168 = $167 << 24 >> 24;
                $169 = ($st$0$lcssa322|0)!=(0);
                $170 = $168 & 15;
                $171 = ($170|0)==(3);
                $or$cond15 = $169 & $171;
                $172 = $168 & -33;
                $t$0 = $or$cond15 ? $172 : $168;
                $173 = $fl$1 & 8192;
                $174 = ($173|0)==(0);
                $175 = $fl$1 & -65537;
                $fl$1$ = $174 ? $fl$1 : $175;
                L75: do {
                    switch ($t$0|0) {
                        case 110:  {
                            switch ($st$0$lcssa322|0) {
                                case 0:  {
                                    $182 = HEAP32[$arg>>2]|0;
                                    HEAP32[$182>>2] = $cnt$1;
                                    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
                                    continue L1;
                                    break;
                                }
                                case 1:  {
                                    $183 = HEAP32[$arg>>2]|0;
                                    HEAP32[$183>>2] = $cnt$1;
                                    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
                                    continue L1;
                                    break;
                                }
                                case 2:  {
                                    $184 = ($cnt$1|0)<(0);
                                    $185 = $184 << 31 >> 31;
                                    $186 = HEAP32[$arg>>2]|0;
                                    $187 = $186;
                                    $188 = $187;
                                    HEAP32[$188>>2] = $cnt$1;
                                    $189 = (($187) + 4)|0;
                                    $190 = $189;
                                    HEAP32[$190>>2] = $185;
                                    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
                                    continue L1;
                                    break;
                                }
                                case 3:  {
                                    $191 = $cnt$1&65535;
                                    $192 = HEAP32[$arg>>2]|0;
                                    HEAP16[$192>>1] = $191;
                                    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
                                    continue L1;
                                    break;
                                }
                                case 4:  {
                                    $193 = $cnt$1&255;
                                    $194 = HEAP32[$arg>>2]|0;
                                    HEAP8[$194>>0] = $193;
                                    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
                                    continue L1;
                                    break;
                                }
                                case 6:  {
                                    $195 = HEAP32[$arg>>2]|0;
                                    HEAP32[$195>>2] = $cnt$1;
                                    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
                                    continue L1;
                                    break;
                                }
                                case 7:  {
                                    $196 = ($cnt$1|0)<(0);
                                    $197 = $196 << 31 >> 31;
                                    $198 = HEAP32[$arg>>2]|0;
                                    $199 = $198;
                                    $200 = $199;
                                    HEAP32[$200>>2] = $cnt$1;
                                    $201 = (($199) + 4)|0;
                                    $202 = $201;
                                    HEAP32[$202>>2] = $197;
                                    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
                                    continue L1;
                                    break;
                                }
                                default: {
                                    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
                                    continue L1;
                                }
                            }
                            break;
                        }
                        case 112:  {
                            $203 = ($p$0>>>0)>(8);
                            $204 = $203 ? $p$0 : 8;
                            $205 = $fl$1$ | 8;
                            $fl$3 = $205;$p$1 = $204;$t$1 = 120;
                            label = 64;
                            break;
                        }
                        case 88: case 120:  {
                        $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
                        label = 64;
                        break;
                    }
                        case 111:  {
                            $243 = $arg;
                            $244 = $243;
                            $245 = HEAP32[$244>>2]|0;
                            $246 = (($243) + 4)|0;
                            $247 = $246;
                            $248 = HEAP32[$247>>2]|0;
                            $249 = ($245|0)==(0);
                            $250 = ($248|0)==(0);
                            $251 = $249 & $250;
                            if ($251) {
                                $$0$lcssa$i = $1;
                            } else {
                                $$03$i33 = $1;$253 = $245;$257 = $248;
                                while(1) {
                                    $252 = $253 & 7;
                                    $254 = $252 | 48;
                                    $255 = $254&255;
                                    $256 = ((($$03$i33)) + -1|0);
                                    HEAP8[$256>>0] = $255;
                                    $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
                                    $259 = tempRet0;
                                    $260 = ($258|0)==(0);
                                    $261 = ($259|0)==(0);
                                    $262 = $260 & $261;
                                    if ($262) {
                                        $$0$lcssa$i = $256;
                                        break;
                                    } else {
                                        $$03$i33 = $256;$253 = $258;$257 = $259;
                                    }
                                }
                            }
                            $263 = $fl$1$ & 8;
                            $264 = ($263|0)==(0);
                            if ($264) {
                                $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 29207;
                                label = 77;
                            } else {
                                $265 = $$0$lcssa$i;
                                $266 = (($2) - ($265))|0;
                                $267 = (($266) + 1)|0;
                                $268 = ($p$0|0)<($267|0);
                                $$p$0 = $268 ? $267 : $p$0;
                                $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 29207;
                                label = 77;
                            }
                            break;
                        }
                        case 105: case 100:  {
                        $269 = $arg;
                        $270 = $269;
                        $271 = HEAP32[$270>>2]|0;
                        $272 = (($269) + 4)|0;
                        $273 = $272;
                        $274 = HEAP32[$273>>2]|0;
                        $275 = ($274|0)<(0);
                        if ($275) {
                            $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
                            $277 = tempRet0;
                            $278 = $arg;
                            $279 = $278;
                            HEAP32[$279>>2] = $276;
                            $280 = (($278) + 4)|0;
                            $281 = $280;
                            HEAP32[$281>>2] = $277;
                            $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 29207;
                            label = 76;
                            break L75;
                        }
                        $282 = $fl$1$ & 2048;
                        $283 = ($282|0)==(0);
                        if ($283) {
                            $284 = $fl$1$ & 1;
                            $285 = ($284|0)==(0);
                            $$ = $285 ? 29207 : (29209);
                            $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
                            label = 76;
                        } else {
                            $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (29208);
                            label = 76;
                        }
                        break;
                    }
                        case 117:  {
                            $176 = $arg;
                            $177 = $176;
                            $178 = HEAP32[$177>>2]|0;
                            $179 = (($176) + 4)|0;
                            $180 = $179;
                            $181 = HEAP32[$180>>2]|0;
                            $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 29207;
                            label = 76;
                            break;
                        }
                        case 99:  {
                            $307 = $arg;
                            $308 = $307;
                            $309 = HEAP32[$308>>2]|0;
                            $310 = (($307) + 4)|0;
                            $311 = $310;
                            $312 = HEAP32[$311>>2]|0;
                            $313 = $309&255;
                            HEAP8[$3>>0] = $313;
                            $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 29207;$z$2 = $1;
                            break;
                        }
                        case 109:  {
                            $314 = (___errno_location()|0);
                            $315 = HEAP32[$314>>2]|0;
                            $316 = (_strerror($315)|0);
                            $a$1 = $316;
                            label = 82;
                            break;
                        }
                        case 115:  {
                            $317 = HEAP32[$arg>>2]|0;
                            $318 = ($317|0)!=(0|0);
                            $319 = $318 ? $317 : 29217;
                            $a$1 = $319;
                            label = 82;
                            break;
                        }
                        case 67:  {
                            $326 = $arg;
                            $327 = $326;
                            $328 = HEAP32[$327>>2]|0;
                            $329 = (($326) + 4)|0;
                            $330 = $329;
                            $331 = HEAP32[$330>>2]|0;
                            HEAP32[$wc>>2] = $328;
                            HEAP32[$4>>2] = 0;
                            HEAP32[$arg>>2] = $wc;
                            $p$4198 = -1;
                            label = 86;
                            break;
                        }
                        case 83:  {
                            $332 = ($p$0|0)==(0);
                            if ($332) {
                                _pad($f,32,$w$1,0,$fl$1$);
                                $i$0$lcssa200 = 0;
                                label = 98;
                            } else {
                                $p$4198 = $p$0;
                                label = 86;
                            }
                            break;
                        }
                        case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
                        $359 = +HEAPF64[$arg>>3];
                        HEAP32[$e2$i>>2] = 0;
                        HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
                        $361 = HEAP32[tempDoublePtr+4>>2]|0;
                        $362 = ($361|0)<(0);
                        if ($362) {
                            $363 = -$359;
                            $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 29224;
                        } else {
                            $364 = $fl$1$ & 2048;
                            $365 = ($364|0)==(0);
                            if ($365) {
                                $366 = $fl$1$ & 1;
                                $367 = ($366|0)==(0);
                                $$$i = $367 ? (29225) : (29230);
                                $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
                            } else {
                                $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (29227);
                            }
                        }
                        HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
                        $369 = HEAP32[tempDoublePtr+4>>2]|0;
                        $370 = $369 & 2146435072;
                        $371 = ($370>>>0)<(2146435072);
                        $372 = (0)<(0);
                        $373 = ($370|0)==(2146435072);
                        $374 = $373 & $372;
                        $375 = $371 | $374;
                        do {
                            if ($375) {
                                $391 = (+_frexpl($$07$i,$e2$i));
                                $392 = $391 * 2.0;
                                $393 = $392 != 0.0;
                                if ($393) {
                                    $394 = HEAP32[$e2$i>>2]|0;
                                    $395 = (($394) + -1)|0;
                                    HEAP32[$e2$i>>2] = $395;
                                }
                                $396 = $t$0 | 32;
                                $397 = ($396|0)==(97);
                                if ($397) {
                                    $398 = $t$0 & 32;
                                    $399 = ($398|0)==(0);
                                    $400 = ((($prefix$0$i)) + 9|0);
                                    $prefix$0$$i = $399 ? $prefix$0$i : $400;
                                    $401 = $pl$0$i | 2;
                                    $402 = ($p$0>>>0)>(11);
                                    $403 = (12 - ($p$0))|0;
                                    $404 = ($403|0)==(0);
                                    $405 = $402 | $404;
                                    do {
                                        if ($405) {
                                            $$1$i = $392;
                                        } else {
                                            $re$169$i = $403;$round$068$i = 8.0;
                                            while(1) {
                                                $406 = (($re$169$i) + -1)|0;
                                                $407 = $round$068$i * 16.0;
                                                $408 = ($406|0)==(0);
                                                if ($408) {
                                                    $$lcssa342 = $407;
                                                    break;
                                                } else {
                                                    $re$169$i = $406;$round$068$i = $407;
                                                }
                                            }
                                            $409 = HEAP8[$prefix$0$$i>>0]|0;
                                            $410 = ($409<<24>>24)==(45);
                                            if ($410) {
                                                $411 = -$392;
                                                $412 = $411 - $$lcssa342;
                                                $413 = $$lcssa342 + $412;
                                                $414 = -$413;
                                                $$1$i = $414;
                                                break;
                                            } else {
                                                $415 = $392 + $$lcssa342;
                                                $416 = $415 - $$lcssa342;
                                                $$1$i = $416;
                                                break;
                                            }
                                        }
                                    } while(0);
                                    $417 = HEAP32[$e2$i>>2]|0;
                                    $418 = ($417|0)<(0);
                                    $419 = (0 - ($417))|0;
                                    $420 = $418 ? $419 : $417;
                                    $421 = ($420|0)<(0);
                                    $422 = $421 << 31 >> 31;
                                    $423 = (_fmt_u($420,$422,$5)|0);
                                    $424 = ($423|0)==($5|0);
                                    if ($424) {
                                        HEAP8[$6>>0] = 48;
                                        $estr$0$i = $6;
                                    } else {
                                        $estr$0$i = $423;
                                    }
                                    $425 = $417 >> 31;
                                    $426 = $425 & 2;
                                    $427 = (($426) + 43)|0;
                                    $428 = $427&255;
                                    $429 = ((($estr$0$i)) + -1|0);
                                    HEAP8[$429>>0] = $428;
                                    $430 = (($t$0) + 15)|0;
                                    $431 = $430&255;
                                    $432 = ((($estr$0$i)) + -2|0);
                                    HEAP8[$432>>0] = $431;
                                    $notrhs$i = ($p$0|0)<(1);
                                    $433 = $fl$1$ & 8;
                                    $434 = ($433|0)==(0);
                                    $$2$i = $$1$i;$s$0$i = $buf$i;
                                    while(1) {
                                        $435 = (~~(($$2$i)));
                                        $436 = (29191 + ($435)|0);
                                        $437 = HEAP8[$436>>0]|0;
                                        $438 = $437&255;
                                        $439 = $438 | $398;
                                        $440 = $439&255;
                                        $441 = ((($s$0$i)) + 1|0);
                                        HEAP8[$s$0$i>>0] = $440;
                                        $442 = (+($435|0));
                                        $443 = $$2$i - $442;
                                        $444 = $443 * 16.0;
                                        $445 = $441;
                                        $446 = (($445) - ($7))|0;
                                        $447 = ($446|0)==(1);
                                        do {
                                            if ($447) {
                                                $notlhs$i = $444 == 0.0;
                                                $or$cond3$not$i = $notrhs$i & $notlhs$i;
                                                $or$cond$i = $434 & $or$cond3$not$i;
                                                if ($or$cond$i) {
                                                    $s$1$i = $441;
                                                    break;
                                                }
                                                $448 = ((($s$0$i)) + 2|0);
                                                HEAP8[$441>>0] = 46;
                                                $s$1$i = $448;
                                            } else {
                                                $s$1$i = $441;
                                            }
                                        } while(0);
                                        $449 = $444 != 0.0;
                                        if ($449) {
                                            $$2$i = $444;$s$0$i = $s$1$i;
                                        } else {
                                            $s$1$i$lcssa = $s$1$i;
                                            break;
                                        }
                                    }
                                    $450 = ($p$0|0)!=(0);
                                    $$pre182$i = $s$1$i$lcssa;
                                    $451 = (($10) + ($$pre182$i))|0;
                                    $452 = ($451|0)<($p$0|0);
                                    $or$cond240 = $450 & $452;
                                    $453 = $432;
                                    $454 = (($11) + ($p$0))|0;
                                    $455 = (($454) - ($453))|0;
                                    $456 = $432;
                                    $457 = (($9) - ($456))|0;
                                    $458 = (($457) + ($$pre182$i))|0;
                                    $l$0$i = $or$cond240 ? $455 : $458;
                                    $459 = (($l$0$i) + ($401))|0;
                                    _pad($f,32,$w$1,$459,$fl$1$);
                                    $460 = HEAP32[$f>>2]|0;
                                    $461 = $460 & 32;
                                    $462 = ($461|0)==(0);
                                    if ($462) {
                                        (___fwritex($prefix$0$$i,$401,$f)|0);
                                    }
                                    $463 = $fl$1$ ^ 65536;
                                    _pad($f,48,$w$1,$459,$463);
                                    $464 = (($$pre182$i) - ($7))|0;
                                    $465 = HEAP32[$f>>2]|0;
                                    $466 = $465 & 32;
                                    $467 = ($466|0)==(0);
                                    if ($467) {
                                        (___fwritex($buf$i,$464,$f)|0);
                                    }
                                    $468 = $432;
                                    $469 = (($8) - ($468))|0;
                                    $sum = (($464) + ($469))|0;
                                    $470 = (($l$0$i) - ($sum))|0;
                                    _pad($f,48,$470,0,0);
                                    $471 = HEAP32[$f>>2]|0;
                                    $472 = $471 & 32;
                                    $473 = ($472|0)==(0);
                                    if ($473) {
                                        (___fwritex($432,$469,$f)|0);
                                    }
                                    $474 = $fl$1$ ^ 8192;
                                    _pad($f,32,$w$1,$459,$474);
                                    $475 = ($459|0)<($w$1|0);
                                    $w$$i = $475 ? $w$1 : $459;
                                    $$0$i = $w$$i;
                                    break;
                                }
                                $476 = ($p$0|0)<(0);
                                $$p$i = $476 ? 6 : $p$0;
                                if ($393) {
                                    $477 = $392 * 268435456.0;
                                    $478 = HEAP32[$e2$i>>2]|0;
                                    $479 = (($478) + -28)|0;
                                    HEAP32[$e2$i>>2] = $479;
                                    $$3$i = $477;$480 = $479;
                                } else {
                                    $$pre179$i = HEAP32[$e2$i>>2]|0;
                                    $$3$i = $392;$480 = $$pre179$i;
                                }
                                $481 = ($480|0)<(0);
                                $$31$i = $481 ? $big$i : $12;
                                $482 = $$31$i;
                                $$4$i = $$3$i;$z$0$i = $$31$i;
                                while(1) {
                                    $483 = (~~(($$4$i))>>>0);
                                    HEAP32[$z$0$i>>2] = $483;
                                    $484 = ((($z$0$i)) + 4|0);
                                    $485 = (+($483>>>0));
                                    $486 = $$4$i - $485;
                                    $487 = $486 * 1.0E+9;
                                    $488 = $487 != 0.0;
                                    if ($488) {
                                        $$4$i = $487;$z$0$i = $484;
                                    } else {
                                        $$lcssa326 = $484;
                                        break;
                                    }
                                }
                                $$pr$i = HEAP32[$e2$i>>2]|0;
                                $489 = ($$pr$i|0)>(0);
                                if ($489) {
                                    $490 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
                                    while(1) {
                                        $491 = ($490|0)>(29);
                                        $492 = $491 ? 29 : $490;
                                        $d$0139$i = ((($z$1146$i)) + -4|0);
                                        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
                                        do {
                                            if ($493) {
                                                $a$2$ph$i = $a$1147$i;
                                            } else {
                                                $carry$0140$i = 0;$d$0141$i = $d$0139$i;
                                                while(1) {
                                                    $494 = HEAP32[$d$0141$i>>2]|0;
                                                    $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
                                                    $496 = tempRet0;
                                                    $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
                                                    $498 = tempRet0;
                                                    $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
                                                    $500 = tempRet0;
                                                    HEAP32[$d$0141$i>>2] = $499;
                                                    $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
                                                    $502 = tempRet0;
                                                    $d$0$i = ((($d$0141$i)) + -4|0);
                                                    $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
                                                    if ($503) {
                                                        $$lcssa327 = $501;
                                                        break;
                                                    } else {
                                                        $carry$0140$i = $501;$d$0141$i = $d$0$i;
                                                    }
                                                }
                                                $504 = ($$lcssa327|0)==(0);
                                                if ($504) {
                                                    $a$2$ph$i = $a$1147$i;
                                                    break;
                                                }
                                                $505 = ((($a$1147$i)) + -4|0);
                                                HEAP32[$505>>2] = $$lcssa327;
                                                $a$2$ph$i = $505;
                                            }
                                        } while(0);
                                        $z$2$i = $z$1146$i;
                                        while(1) {
                                            $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
                                            if (!($506)) {
                                                $z$2$i$lcssa = $z$2$i;
                                                break;
                                            }
                                            $507 = ((($z$2$i)) + -4|0);
                                            $508 = HEAP32[$507>>2]|0;
                                            $509 = ($508|0)==(0);
                                            if ($509) {
                                                $z$2$i = $507;
                                            } else {
                                                $z$2$i$lcssa = $z$2$i;
                                                break;
                                            }
                                        }
                                        $510 = HEAP32[$e2$i>>2]|0;
                                        $511 = (($510) - ($492))|0;
                                        HEAP32[$e2$i>>2] = $511;
                                        $512 = ($511|0)>(0);
                                        if ($512) {
                                            $490 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
                                        } else {
                                            $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
                                            break;
                                        }
                                    }
                                } else {
                                    $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
                                }
                                $513 = ($$pr47$i|0)<(0);
                                if ($513) {
                                    $514 = (($$p$i) + 25)|0;
                                    $515 = (($514|0) / 9)&-1;
                                    $516 = (($515) + 1)|0;
                                    $517 = ($396|0)==(102);
                                    $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
                                    while(1) {
                                        $518 = (0 - ($519))|0;
                                        $520 = ($518|0)>(9);
                                        $521 = $520 ? 9 : $518;
                                        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
                                        do {
                                            if ($522) {
                                                $526 = 1 << $521;
                                                $527 = (($526) + -1)|0;
                                                $528 = 1000000000 >>> $521;
                                                $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
                                                while(1) {
                                                    $529 = HEAP32[$d$1127$i>>2]|0;
                                                    $530 = $529 & $527;
                                                    $531 = $529 >>> $521;
                                                    $532 = (($531) + ($carry3$0128$i))|0;
                                                    HEAP32[$d$1127$i>>2] = $532;
                                                    $533 = Math_imul($530, $528)|0;
                                                    $534 = ((($d$1127$i)) + 4|0);
                                                    $535 = ($534>>>0)<($z$3133$i>>>0);
                                                    if ($535) {
                                                        $carry3$0128$i = $533;$d$1127$i = $534;
                                                    } else {
                                                        $$lcssa329 = $533;
                                                        break;
                                                    }
                                                }
                                                $536 = HEAP32[$a$3134$i>>2]|0;
                                                $537 = ($536|0)==(0);
                                                $538 = ((($a$3134$i)) + 4|0);
                                                $$a$3$i = $537 ? $538 : $a$3134$i;
                                                $539 = ($$lcssa329|0)==(0);
                                                if ($539) {
                                                    $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
                                                    break;
                                                }
                                                $540 = ((($z$3133$i)) + 4|0);
                                                HEAP32[$z$3133$i>>2] = $$lcssa329;
                                                $$a$3186$i = $$a$3$i;$z$4$i = $540;
                                            } else {
                                                $523 = HEAP32[$a$3134$i>>2]|0;
                                                $524 = ($523|0)==(0);
                                                $525 = ((($a$3134$i)) + 4|0);
                                                $$a$3185$i = $524 ? $525 : $a$3134$i;
                                                $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
                                            }
                                        } while(0);
                                        $541 = $517 ? $$31$i : $$a$3186$i;
                                        $542 = $z$4$i;
                                        $543 = $541;
                                        $544 = (($542) - ($543))|0;
                                        $545 = $544 >> 2;
                                        $546 = ($545|0)>($516|0);
                                        $547 = (($541) + ($516<<2)|0);
                                        $$z$4$i = $546 ? $547 : $z$4$i;
                                        $548 = HEAP32[$e2$i>>2]|0;
                                        $549 = (($548) + ($521))|0;
                                        HEAP32[$e2$i>>2] = $549;
                                        $550 = ($549|0)<(0);
                                        if ($550) {
                                            $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
                                        } else {
                                            $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
                                            break;
                                        }
                                    }
                                } else {
                                    $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
                                }
                                $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
                                do {
                                    if ($551) {
                                        $552 = $a$3$lcssa$i;
                                        $553 = (($482) - ($552))|0;
                                        $554 = $553 >> 2;
                                        $555 = ($554*9)|0;
                                        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
                                        $557 = ($556>>>0)<(10);
                                        if ($557) {
                                            $e$1$i = $555;
                                            break;
                                        } else {
                                            $e$0123$i = $555;$i$0122$i = 10;
                                        }
                                        while(1) {
                                            $558 = ($i$0122$i*10)|0;
                                            $559 = (($e$0123$i) + 1)|0;
                                            $560 = ($556>>>0)<($558>>>0);
                                            if ($560) {
                                                $e$1$i = $559;
                                                break;
                                            } else {
                                                $e$0123$i = $559;$i$0122$i = $558;
                                            }
                                        }
                                    } else {
                                        $e$1$i = 0;
                                    }
                                } while(0);
                                $561 = ($396|0)!=(102);
                                $562 = $561 ? $e$1$i : 0;
                                $563 = (($$p$i) - ($562))|0;
                                $564 = ($396|0)==(103);
                                $565 = ($$p$i|0)!=(0);
                                $566 = $565 & $564;
                                $$neg52$i = $566 << 31 >> 31;
                                $567 = (($563) + ($$neg52$i))|0;
                                $568 = $z$3$lcssa$i;
                                $569 = (($568) - ($482))|0;
                                $570 = $569 >> 2;
                                $571 = ($570*9)|0;
                                $572 = (($571) + -9)|0;
                                $573 = ($567|0)<($572|0);
                                if ($573) {
                                    $574 = (($567) + 9216)|0;
                                    $575 = (($574|0) / 9)&-1;
                                    $$sum$i = (($575) + -1023)|0;
                                    $576 = (($$31$i) + ($$sum$i<<2)|0);
                                    $577 = (($574|0) % 9)&-1;
                                    $j$0115$i = (($577) + 1)|0;
                                    $578 = ($j$0115$i|0)<(9);
                                    if ($578) {
                                        $i$1116$i = 10;$j$0117$i = $j$0115$i;
                                        while(1) {
                                            $579 = ($i$1116$i*10)|0;
                                            $j$0$i = (($j$0117$i) + 1)|0;
                                            $exitcond$i = ($j$0$i|0)==(9);
                                            if ($exitcond$i) {
                                                $i$1$lcssa$i = $579;
                                                break;
                                            } else {
                                                $i$1116$i = $579;$j$0117$i = $j$0$i;
                                            }
                                        }
                                    } else {
                                        $i$1$lcssa$i = 10;
                                    }
                                    $580 = HEAP32[$576>>2]|0;
                                    $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
                                    $582 = ($581|0)==(0);
                                    if ($582) {
                                        $$sum15$i = (($575) + -1022)|0;
                                        $583 = (($$31$i) + ($$sum15$i<<2)|0);
                                        $584 = ($583|0)==($z$3$lcssa$i|0);
                                        if ($584) {
                                            $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
                                        } else {
                                            label = 163;
                                        }
                                    } else {
                                        label = 163;
                                    }
                                    do {
                                        if ((label|0) == 163) {
                                            label = 0;
                                            $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
                                            $586 = $585 & 1;
                                            $587 = ($586|0)==(0);
                                            $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
                                            $588 = (($i$1$lcssa$i|0) / 2)&-1;
                                            $589 = ($581>>>0)<($588>>>0);
                                            do {
                                                if ($589) {
                                                    $small$0$i = 0.5;
                                                } else {
                                                    $590 = ($581|0)==($588|0);
                                                    if ($590) {
                                                        $$sum16$i = (($575) + -1022)|0;
                                                        $591 = (($$31$i) + ($$sum16$i<<2)|0);
                                                        $592 = ($591|0)==($z$3$lcssa$i|0);
                                                        if ($592) {
                                                            $small$0$i = 1.0;
                                                            break;
                                                        }
                                                    }
                                                    $small$0$i = 1.5;
                                                }
                                            } while(0);
                                            $593 = ($pl$0$i|0)==(0);
                                            do {
                                                if ($593) {
                                                    $round6$1$i = $$20$i;$small$1$i = $small$0$i;
                                                } else {
                                                    $594 = HEAP8[$prefix$0$i>>0]|0;
                                                    $595 = ($594<<24>>24)==(45);
                                                    if (!($595)) {
                                                        $round6$1$i = $$20$i;$small$1$i = $small$0$i;
                                                        break;
                                                    }
                                                    $596 = -$$20$i;
                                                    $597 = -$small$0$i;
                                                    $round6$1$i = $596;$small$1$i = $597;
                                                }
                                            } while(0);
                                            $598 = (($580) - ($581))|0;
                                            HEAP32[$576>>2] = $598;
                                            $599 = $round6$1$i + $small$1$i;
                                            $600 = $599 != $round6$1$i;
                                            if (!($600)) {
                                                $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
                                                break;
                                            }
                                            $601 = (($598) + ($i$1$lcssa$i))|0;
                                            HEAP32[$576>>2] = $601;
                                            $602 = ($601>>>0)>(999999999);
                                            if ($602) {
                                                $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
                                                while(1) {
                                                    $603 = ((($d$2108$i)) + -4|0);
                                                    HEAP32[$d$2108$i>>2] = 0;
                                                    $604 = ($603>>>0)<($a$5109$i>>>0);
                                                    if ($604) {
                                                        $605 = ((($a$5109$i)) + -4|0);
                                                        HEAP32[$605>>2] = 0;
                                                        $a$6$i = $605;
                                                    } else {
                                                        $a$6$i = $a$5109$i;
                                                    }
                                                    $606 = HEAP32[$603>>2]|0;
                                                    $607 = (($606) + 1)|0;
                                                    HEAP32[$603>>2] = $607;
                                                    $608 = ($607>>>0)>(999999999);
                                                    if ($608) {
                                                        $a$5109$i = $a$6$i;$d$2108$i = $603;
                                                    } else {
                                                        $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
                                                        break;
                                                    }
                                                }
                                            } else {
                                                $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
                                            }
                                            $609 = $a$5$lcssa$i;
                                            $610 = (($482) - ($609))|0;
                                            $611 = $610 >> 2;
                                            $612 = ($611*9)|0;
                                            $613 = HEAP32[$a$5$lcssa$i>>2]|0;
                                            $614 = ($613>>>0)<(10);
                                            if ($614) {
                                                $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
                                                break;
                                            } else {
                                                $e$2104$i = $612;$i$2103$i = 10;
                                            }
                                            while(1) {
                                                $615 = ($i$2103$i*10)|0;
                                                $616 = (($e$2104$i) + 1)|0;
                                                $617 = ($613>>>0)<($615>>>0);
                                                if ($617) {
                                                    $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
                                                    break;
                                                } else {
                                                    $e$2104$i = $616;$i$2103$i = $615;
                                                }
                                            }
                                        }
                                    } while(0);
                                    $618 = ((($d$3$i)) + 4|0);
                                    $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
                                    $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
                                    $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
                                } else {
                                    $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
                                }
                                $620 = (0 - ($e$4$ph$i))|0;
                                $z$6$i = $z$6$ph$i;
                                while(1) {
                                    $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
                                    if (!($621)) {
                                        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
                                        break;
                                    }
                                    $622 = ((($z$6$i)) + -4|0);
                                    $623 = HEAP32[$622>>2]|0;
                                    $624 = ($623|0)==(0);
                                    if ($624) {
                                        $z$6$i = $622;
                                    } else {
                                        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
                                        break;
                                    }
                                }
                                do {
                                    if ($564) {
                                        $625 = $565&1;
                                        $626 = $625 ^ 1;
                                        $$p$$i = (($626) + ($$p$i))|0;
                                        $627 = ($$p$$i|0)>($e$4$ph$i|0);
                                        $628 = ($e$4$ph$i|0)>(-5);
                                        $or$cond6$i = $627 & $628;
                                        if ($or$cond6$i) {
                                            $629 = (($t$0) + -1)|0;
                                            $$neg53$i = (($$p$$i) + -1)|0;
                                            $630 = (($$neg53$i) - ($e$4$ph$i))|0;
                                            $$013$i = $629;$$210$i = $630;
                                        } else {
                                            $631 = (($t$0) + -2)|0;
                                            $632 = (($$p$$i) + -1)|0;
                                            $$013$i = $631;$$210$i = $632;
                                        }
                                        $633 = $fl$1$ & 8;
                                        $634 = ($633|0)==(0);
                                        if (!($634)) {
                                            $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
                                            break;
                                        }
                                        do {
                                            if ($$lcssa159$i) {
                                                $635 = ((($z$6$i$lcssa)) + -4|0);
                                                $636 = HEAP32[$635>>2]|0;
                                                $637 = ($636|0)==(0);
                                                if ($637) {
                                                    $j$2$i = 9;
                                                    break;
                                                }
                                                $638 = (($636>>>0) % 10)&-1;
                                                $639 = ($638|0)==(0);
                                                if ($639) {
                                                    $i$399$i = 10;$j$1100$i = 0;
                                                } else {
                                                    $j$2$i = 0;
                                                    break;
                                                }
                                                while(1) {
                                                    $640 = ($i$399$i*10)|0;
                                                    $641 = (($j$1100$i) + 1)|0;
                                                    $642 = (($636>>>0) % ($640>>>0))&-1;
                                                    $643 = ($642|0)==(0);
                                                    if ($643) {
                                                        $i$399$i = $640;$j$1100$i = $641;
                                                    } else {
                                                        $j$2$i = $641;
                                                        break;
                                                    }
                                                }
                                            } else {
                                                $j$2$i = 9;
                                            }
                                        } while(0);
                                        $644 = $$013$i | 32;
                                        $645 = ($644|0)==(102);
                                        $646 = $z$6$i$lcssa;
                                        $647 = (($646) - ($482))|0;
                                        $648 = $647 >> 2;
                                        $649 = ($648*9)|0;
                                        $650 = (($649) + -9)|0;
                                        if ($645) {
                                            $651 = (($650) - ($j$2$i))|0;
                                            $652 = ($651|0)<(0);
                                            $$21$i = $652 ? 0 : $651;
                                            $653 = ($$210$i|0)<($$21$i|0);
                                            $$210$$22$i = $653 ? $$210$i : $$21$i;
                                            $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
                                            break;
                                        } else {
                                            $654 = (($650) + ($e$4$ph$i))|0;
                                            $655 = (($654) - ($j$2$i))|0;
                                            $656 = ($655|0)<(0);
                                            $$23$i = $656 ? 0 : $655;
                                            $657 = ($$210$i|0)<($$23$i|0);
                                            $$210$$24$i = $657 ? $$210$i : $$23$i;
                                            $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
                                            break;
                                        }
                                    } else {
                                        $$pre183$i = $fl$1$ & 8;
                                        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
                                    }
                                } while(0);
                                $658 = $$311$i | $$pre$phi184$iZ2D;
                                $659 = ($658|0)!=(0);
                                $660 = $659&1;
                                $661 = $$114$i | 32;
                                $662 = ($661|0)==(102);
                                if ($662) {
                                    $663 = ($e$4$ph$i|0)>(0);
                                    $664 = $663 ? $e$4$ph$i : 0;
                                    $$pn$i = $664;$estr$2$i = 0;
                                } else {
                                    $665 = ($e$4$ph$i|0)<(0);
                                    $666 = $665 ? $620 : $e$4$ph$i;
                                    $667 = ($666|0)<(0);
                                    $668 = $667 << 31 >> 31;
                                    $669 = (_fmt_u($666,$668,$5)|0);
                                    $670 = $669;
                                    $671 = (($8) - ($670))|0;
                                    $672 = ($671|0)<(2);
                                    if ($672) {
                                        $estr$193$i = $669;
                                        while(1) {
                                            $673 = ((($estr$193$i)) + -1|0);
                                            HEAP8[$673>>0] = 48;
                                            $674 = $673;
                                            $675 = (($8) - ($674))|0;
                                            $676 = ($675|0)<(2);
                                            if ($676) {
                                                $estr$193$i = $673;
                                            } else {
                                                $estr$1$lcssa$i = $673;
                                                break;
                                            }
                                        }
                                    } else {
                                        $estr$1$lcssa$i = $669;
                                    }
                                    $677 = $e$4$ph$i >> 31;
                                    $678 = $677 & 2;
                                    $679 = (($678) + 43)|0;
                                    $680 = $679&255;
                                    $681 = ((($estr$1$lcssa$i)) + -1|0);
                                    HEAP8[$681>>0] = $680;
                                    $682 = $$114$i&255;
                                    $683 = ((($estr$1$lcssa$i)) + -2|0);
                                    HEAP8[$683>>0] = $682;
                                    $684 = $683;
                                    $685 = (($8) - ($684))|0;
                                    $$pn$i = $685;$estr$2$i = $683;
                                }
                                $686 = (($pl$0$i) + 1)|0;
                                $687 = (($686) + ($$311$i))|0;
                                $l$1$i = (($687) + ($660))|0;
                                $688 = (($l$1$i) + ($$pn$i))|0;
                                _pad($f,32,$w$1,$688,$fl$1$);
                                $689 = HEAP32[$f>>2]|0;
                                $690 = $689 & 32;
                                $691 = ($690|0)==(0);
                                if ($691) {
                                    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
                                }
                                $692 = $fl$1$ ^ 65536;
                                _pad($f,48,$w$1,$688,$692);
                                do {
                                    if ($662) {
                                        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
                                        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
                                        $d$482$i = $r$0$a$8$i;
                                        while(1) {
                                            $694 = HEAP32[$d$482$i>>2]|0;
                                            $695 = (_fmt_u($694,0,$13)|0);
                                            $696 = ($d$482$i|0)==($r$0$a$8$i|0);
                                            do {
                                                if ($696) {
                                                    $700 = ($695|0)==($13|0);
                                                    if (!($700)) {
                                                        $s7$1$i = $695;
                                                        break;
                                                    }
                                                    HEAP8[$15>>0] = 48;
                                                    $s7$1$i = $15;
                                                } else {
                                                    $697 = ($695>>>0)>($buf$i>>>0);
                                                    if ($697) {
                                                        $s7$079$i = $695;
                                                    } else {
                                                        $s7$1$i = $695;
                                                        break;
                                                    }
                                                    while(1) {
                                                        $698 = ((($s7$079$i)) + -1|0);
                                                        HEAP8[$698>>0] = 48;
                                                        $699 = ($698>>>0)>($buf$i>>>0);
                                                        if ($699) {
                                                            $s7$079$i = $698;
                                                        } else {
                                                            $s7$1$i = $698;
                                                            break;
                                                        }
                                                    }
                                                }
                                            } while(0);
                                            $701 = HEAP32[$f>>2]|0;
                                            $702 = $701 & 32;
                                            $703 = ($702|0)==(0);
                                            if ($703) {
                                                $704 = $s7$1$i;
                                                $705 = (($14) - ($704))|0;
                                                (___fwritex($s7$1$i,$705,$f)|0);
                                            }
                                            $706 = ((($d$482$i)) + 4|0);
                                            $707 = ($706>>>0)>($$31$i>>>0);
                                            if ($707) {
                                                $$lcssa339 = $706;
                                                break;
                                            } else {
                                                $d$482$i = $706;
                                            }
                                        }
                                        $708 = ($658|0)==(0);
                                        do {
                                            if (!($708)) {
                                                $709 = HEAP32[$f>>2]|0;
                                                $710 = $709 & 32;
                                                $711 = ($710|0)==(0);
                                                if (!($711)) {
                                                    break;
                                                }
                                                (___fwritex(29259,1,$f)|0);
                                            }
                                        } while(0);
                                        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
                                        $713 = ($$311$i|0)>(0);
                                        $714 = $713 & $712;
                                        if ($714) {
                                            $$41276$i = $$311$i;$d$575$i = $$lcssa339;
                                            while(1) {
                                                $715 = HEAP32[$d$575$i>>2]|0;
                                                $716 = (_fmt_u($715,0,$13)|0);
                                                $717 = ($716>>>0)>($buf$i>>>0);
                                                if ($717) {
                                                    $s8$070$i = $716;
                                                    while(1) {
                                                        $718 = ((($s8$070$i)) + -1|0);
                                                        HEAP8[$718>>0] = 48;
                                                        $719 = ($718>>>0)>($buf$i>>>0);
                                                        if ($719) {
                                                            $s8$070$i = $718;
                                                        } else {
                                                            $s8$0$lcssa$i = $718;
                                                            break;
                                                        }
                                                    }
                                                } else {
                                                    $s8$0$lcssa$i = $716;
                                                }
                                                $720 = HEAP32[$f>>2]|0;
                                                $721 = $720 & 32;
                                                $722 = ($721|0)==(0);
                                                if ($722) {
                                                    $723 = ($$41276$i|0)>(9);
                                                    $724 = $723 ? 9 : $$41276$i;
                                                    (___fwritex($s8$0$lcssa$i,$724,$f)|0);
                                                }
                                                $725 = ((($d$575$i)) + 4|0);
                                                $726 = (($$41276$i) + -9)|0;
                                                $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
                                                $728 = ($$41276$i|0)>(9);
                                                $729 = $728 & $727;
                                                if ($729) {
                                                    $$41276$i = $726;$d$575$i = $725;
                                                } else {
                                                    $$412$lcssa$i = $726;
                                                    break;
                                                }
                                            }
                                        } else {
                                            $$412$lcssa$i = $$311$i;
                                        }
                                        $730 = (($$412$lcssa$i) + 9)|0;
                                        _pad($f,48,$730,9,0);
                                    } else {
                                        $731 = ((($a$8$ph$i)) + 4|0);
                                        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
                                        $732 = ($$311$i|0)>(-1);
                                        if ($732) {
                                            $733 = ($$pre$phi184$iZ2D|0)==(0);
                                            $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
                                            while(1) {
                                                $734 = HEAP32[$d$686$i>>2]|0;
                                                $735 = (_fmt_u($734,0,$13)|0);
                                                $736 = ($735|0)==($13|0);
                                                if ($736) {
                                                    HEAP8[$15>>0] = 48;
                                                    $s9$0$i = $15;
                                                } else {
                                                    $s9$0$i = $735;
                                                }
                                                $737 = ($d$686$i|0)==($a$8$ph$i|0);
                                                do {
                                                    if ($737) {
                                                        $741 = ((($s9$0$i)) + 1|0);
                                                        $742 = HEAP32[$f>>2]|0;
                                                        $743 = $742 & 32;
                                                        $744 = ($743|0)==(0);
                                                        if ($744) {
                                                            (___fwritex($s9$0$i,1,$f)|0);
                                                        }
                                                        $745 = ($$587$i|0)<(1);
                                                        $or$cond29$i = $733 & $745;
                                                        if ($or$cond29$i) {
                                                            $s9$2$i = $741;
                                                            break;
                                                        }
                                                        $746 = HEAP32[$f>>2]|0;
                                                        $747 = $746 & 32;
                                                        $748 = ($747|0)==(0);
                                                        if (!($748)) {
                                                            $s9$2$i = $741;
                                                            break;
                                                        }
                                                        (___fwritex(29259,1,$f)|0);
                                                        $s9$2$i = $741;
                                                    } else {
                                                        $738 = ($s9$0$i>>>0)>($buf$i>>>0);
                                                        if ($738) {
                                                            $s9$183$i = $s9$0$i;
                                                        } else {
                                                            $s9$2$i = $s9$0$i;
                                                            break;
                                                        }
                                                        while(1) {
                                                            $739 = ((($s9$183$i)) + -1|0);
                                                            HEAP8[$739>>0] = 48;
                                                            $740 = ($739>>>0)>($buf$i>>>0);
                                                            if ($740) {
                                                                $s9$183$i = $739;
                                                            } else {
                                                                $s9$2$i = $739;
                                                                break;
                                                            }
                                                        }
                                                    }
                                                } while(0);
                                                $749 = $s9$2$i;
                                                $750 = (($14) - ($749))|0;
                                                $751 = HEAP32[$f>>2]|0;
                                                $752 = $751 & 32;
                                                $753 = ($752|0)==(0);
                                                if ($753) {
                                                    $754 = ($$587$i|0)>($750|0);
                                                    $755 = $754 ? $750 : $$587$i;
                                                    (___fwritex($s9$2$i,$755,$f)|0);
                                                }
                                                $756 = (($$587$i) - ($750))|0;
                                                $757 = ((($d$686$i)) + 4|0);
                                                $758 = ($757>>>0)<($z$6$$i>>>0);
                                                $759 = ($756|0)>(-1);
                                                $760 = $758 & $759;
                                                if ($760) {
                                                    $$587$i = $756;$d$686$i = $757;
                                                } else {
                                                    $$5$lcssa$i = $756;
                                                    break;
                                                }
                                            }
                                        } else {
                                            $$5$lcssa$i = $$311$i;
                                        }
                                        $761 = (($$5$lcssa$i) + 18)|0;
                                        _pad($f,48,$761,18,0);
                                        $762 = HEAP32[$f>>2]|0;
                                        $763 = $762 & 32;
                                        $764 = ($763|0)==(0);
                                        if (!($764)) {
                                            break;
                                        }
                                        $765 = $estr$2$i;
                                        $766 = (($8) - ($765))|0;
                                        (___fwritex($estr$2$i,$766,$f)|0);
                                    }
                                } while(0);
                                $767 = $fl$1$ ^ 8192;
                                _pad($f,32,$w$1,$688,$767);
                                $768 = ($688|0)<($w$1|0);
                                $w$30$i = $768 ? $w$1 : $688;
                                $$0$i = $w$30$i;
                            } else {
                                $376 = $t$0 & 32;
                                $377 = ($376|0)!=(0);
                                $378 = $377 ? 29243 : 29247;
                                $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
                                $380 = $377 ? 29251 : 29255;
                                $pl$1$i = $379 ? 0 : $pl$0$i;
                                $s1$0$i = $379 ? $380 : $378;
                                $381 = (($pl$1$i) + 3)|0;
                                _pad($f,32,$w$1,$381,$175);
                                $382 = HEAP32[$f>>2]|0;
                                $383 = $382 & 32;
                                $384 = ($383|0)==(0);
                                if ($384) {
                                    (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
                                    $$pre$i = HEAP32[$f>>2]|0;
                                    $386 = $$pre$i;
                                } else {
                                    $386 = $382;
                                }
                                $385 = $386 & 32;
                                $387 = ($385|0)==(0);
                                if ($387) {
                                    (___fwritex($s1$0$i,3,$f)|0);
                                }
                                $388 = $fl$1$ ^ 8192;
                                _pad($f,32,$w$1,$381,$388);
                                $389 = ($381|0)<($w$1|0);
                                $390 = $389 ? $w$1 : $381;
                                $$0$i = $390;
                            }
                        } while(0);
                        $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
                        continue L1;
                        break;
                    }
                        default: {
                            $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 29207;$z$2 = $1;
                        }
                    }
                } while(0);
                L313: do {
                    if ((label|0) == 64) {
                        label = 0;
                        $206 = $arg;
                        $207 = $206;
                        $208 = HEAP32[$207>>2]|0;
                        $209 = (($206) + 4)|0;
                        $210 = $209;
                        $211 = HEAP32[$210>>2]|0;
                        $212 = $t$1 & 32;
                        $213 = ($208|0)==(0);
                        $214 = ($211|0)==(0);
                        $215 = $213 & $214;
                        if ($215) {
                            $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 29207;
                            label = 77;
                        } else {
                            $$012$i = $1;$217 = $208;$224 = $211;
                            while(1) {
                                $216 = $217 & 15;
                                $218 = (29191 + ($216)|0);
                                $219 = HEAP8[$218>>0]|0;
                                $220 = $219&255;
                                $221 = $220 | $212;
                                $222 = $221&255;
                                $223 = ((($$012$i)) + -1|0);
                                HEAP8[$223>>0] = $222;
                                $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
                                $226 = tempRet0;
                                $227 = ($225|0)==(0);
                                $228 = ($226|0)==(0);
                                $229 = $227 & $228;
                                if ($229) {
                                    $$lcssa344 = $223;
                                    break;
                                } else {
                                    $$012$i = $223;$217 = $225;$224 = $226;
                                }
                            }
                            $230 = $arg;
                            $231 = $230;
                            $232 = HEAP32[$231>>2]|0;
                            $233 = (($230) + 4)|0;
                            $234 = $233;
                            $235 = HEAP32[$234>>2]|0;
                            $236 = ($232|0)==(0);
                            $237 = ($235|0)==(0);
                            $238 = $236 & $237;
                            $239 = $fl$3 & 8;
                            $240 = ($239|0)==(0);
                            $or$cond17 = $240 | $238;
                            if ($or$cond17) {
                                $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 29207;
                                label = 77;
                            } else {
                                $241 = $t$1 >> 4;
                                $242 = (29207 + ($241)|0);
                                $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
                                label = 77;
                            }
                        }
                    }
                    else if ((label|0) == 76) {
                        label = 0;
                        $288 = (_fmt_u($286,$287,$1)|0);
                        $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
                        label = 77;
                    }
                    else if ((label|0) == 82) {
                        label = 0;
                        $320 = (_memchr($a$1,0,$p$0)|0);
                        $321 = ($320|0)==(0|0);
                        $322 = $320;
                        $323 = $a$1;
                        $324 = (($322) - ($323))|0;
                        $325 = (($a$1) + ($p$0)|0);
                        $z$1 = $321 ? $325 : $320;
                        $p$3 = $321 ? $p$0 : $324;
                        $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 29207;$z$2 = $z$1;
                    }
                    else if ((label|0) == 86) {
                        label = 0;
                        $333 = HEAP32[$arg>>2]|0;
                        $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
                        while(1) {
                            $334 = HEAP32[$ws$0115>>2]|0;
                            $335 = ($334|0)==(0);
                            if ($335) {
                                $i$0$lcssa = $i$0114;$l$2 = $l$1113;
                                break;
                            }
                            $336 = (_wctomb($mb,$334)|0);
                            $337 = ($336|0)<(0);
                            $338 = (($p$4198) - ($i$0114))|0;
                            $339 = ($336>>>0)>($338>>>0);
                            $or$cond20 = $337 | $339;
                            if ($or$cond20) {
                                $i$0$lcssa = $i$0114;$l$2 = $336;
                                break;
                            }
                            $340 = ((($ws$0115)) + 4|0);
                            $341 = (($336) + ($i$0114))|0;
                            $342 = ($p$4198>>>0)>($341>>>0);
                            if ($342) {
                                $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
                            } else {
                                $i$0$lcssa = $341;$l$2 = $336;
                                break;
                            }
                        }
                        $343 = ($l$2|0)<(0);
                        if ($343) {
                            $$0 = -1;
                            break L1;
                        }
                        _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
                        $344 = ($i$0$lcssa|0)==(0);
                        if ($344) {
                            $i$0$lcssa200 = 0;
                            label = 98;
                        } else {
                            $345 = HEAP32[$arg>>2]|0;
                            $i$1125 = 0;$ws$1126 = $345;
                            while(1) {
                                $346 = HEAP32[$ws$1126>>2]|0;
                                $347 = ($346|0)==(0);
                                if ($347) {
                                    $i$0$lcssa200 = $i$0$lcssa;
                                    label = 98;
                                    break L313;
                                }
                                $348 = ((($ws$1126)) + 4|0);
                                $349 = (_wctomb($mb,$346)|0);
                                $350 = (($349) + ($i$1125))|0;
                                $351 = ($350|0)>($i$0$lcssa|0);
                                if ($351) {
                                    $i$0$lcssa200 = $i$0$lcssa;
                                    label = 98;
                                    break L313;
                                }
                                $352 = HEAP32[$f>>2]|0;
                                $353 = $352 & 32;
                                $354 = ($353|0)==(0);
                                if ($354) {
                                    (___fwritex($mb,$349,$f)|0);
                                }
                                $355 = ($350>>>0)<($i$0$lcssa>>>0);
                                if ($355) {
                                    $i$1125 = $350;$ws$1126 = $348;
                                } else {
                                    $i$0$lcssa200 = $i$0$lcssa;
                                    label = 98;
                                    break;
                                }
                            }
                        }
                    }
                } while(0);
                if ((label|0) == 98) {
                    label = 0;
                    $356 = $fl$1$ ^ 8192;
                    _pad($f,32,$w$1,$i$0$lcssa200,$356);
                    $357 = ($w$1|0)>($i$0$lcssa200|0);
                    $358 = $357 ? $w$1 : $i$0$lcssa200;
                    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
                    continue;
                }
                if ((label|0) == 77) {
                    label = 0;
                    $289 = ($p$2|0)>(-1);
                    $290 = $fl$4 & -65537;
                    $$fl$4 = $289 ? $290 : $fl$4;
                    $291 = $arg;
                    $292 = $291;
                    $293 = HEAP32[$292>>2]|0;
                    $294 = (($291) + 4)|0;
                    $295 = $294;
                    $296 = HEAP32[$295>>2]|0;
                    $297 = ($293|0)!=(0);
                    $298 = ($296|0)!=(0);
                    $299 = $297 | $298;
                    $300 = ($p$2|0)!=(0);
                    $or$cond = $300 | $299;
                    if ($or$cond) {
                        $301 = $a$0;
                        $302 = (($2) - ($301))|0;
                        $303 = $299&1;
                        $304 = $303 ^ 1;
                        $305 = (($304) + ($302))|0;
                        $306 = ($p$2|0)>($305|0);
                        $p$2$ = $306 ? $p$2 : $305;
                        $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
                    } else {
                        $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
                    }
                }
                $769 = $z$2;
                $770 = $a$2;
                $771 = (($769) - ($770))|0;
                $772 = ($p$5|0)<($771|0);
                $$p$5 = $772 ? $771 : $p$5;
                $773 = (($pl$2) + ($$p$5))|0;
                $774 = ($w$1|0)<($773|0);
                $w$2 = $774 ? $773 : $w$1;
                _pad($f,32,$w$2,$773,$fl$6);
                $775 = HEAP32[$f>>2]|0;
                $776 = $775 & 32;
                $777 = ($776|0)==(0);
                if ($777) {
                    (___fwritex($prefix$2,$pl$2,$f)|0);
                }
                $778 = $fl$6 ^ 65536;
                _pad($f,48,$w$2,$773,$778);
                _pad($f,48,$$p$5,$771,0);
                $779 = HEAP32[$f>>2]|0;
                $780 = $779 & 32;
                $781 = ($780|0)==(0);
                if ($781) {
                    (___fwritex($a$2,$771,$f)|0);
                }
                $782 = $fl$6 ^ 8192;
                _pad($f,32,$w$2,$773,$782);
                $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
            }
            L348: do {
                if ((label|0) == 245) {
                    $783 = ($f|0)==(0|0);
                    if ($783) {
                        $784 = ($l10n$0$lcssa|0)==(0);
                        if ($784) {
                            $$0 = 0;
                        } else {
                            $i$2100 = 1;
                            while(1) {
                                $785 = (($nl_type) + ($i$2100<<2)|0);
                                $786 = HEAP32[$785>>2]|0;
                                $787 = ($786|0)==(0);
                                if ($787) {
                                    $i$2100$lcssa = $i$2100;
                                    break;
                                }
                                $789 = (($nl_arg) + ($i$2100<<3)|0);
                                _pop_arg($789,$786,$ap);
                                $790 = (($i$2100) + 1)|0;
                                $791 = ($790|0)<(10);
                                if ($791) {
                                    $i$2100 = $790;
                                } else {
                                    $$0 = 1;
                                    break L348;
                                }
                            }
                            $788 = ($i$2100$lcssa|0)<(10);
                            if ($788) {
                                $i$398 = $i$2100$lcssa;
                                while(1) {
                                    $794 = (($nl_type) + ($i$398<<2)|0);
                                    $795 = HEAP32[$794>>2]|0;
                                    $796 = ($795|0)==(0);
                                    $792 = (($i$398) + 1)|0;
                                    if (!($796)) {
                                        $$0 = -1;
                                        break L348;
                                    }
                                    $793 = ($792|0)<(10);
                                    if ($793) {
                                        $i$398 = $792;
                                    } else {
                                        $$0 = 1;
                                        break;
                                    }
                                }
                            } else {
                                $$0 = 1;
                            }
                        }
                    } else {
                        $$0 = $cnt$1$lcssa;
                    }
                }
            } while(0);
            STACKTOP = sp;return ($$0|0);
        }
        function _do_read($f,$buf,$len) {
            $f = $f|0;
            $buf = $buf|0;
            $len = $len|0;
            var $0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (___string_read($f,$buf,$len)|0);
            return ($0|0);
        }
        function _cleanup521($p) {
            $p = $p|0;
            var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($p)) + 68|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0);
            if ($2) {
                ___unlockfile($p);
            }
            return;
        }
        function _cleanup526($p) {
            $p = $p|0;
            var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($p)) + 68|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ($1|0)==(0);
            if ($2) {
                ___unlockfile($p);
            }
            return;
        }
        function _sift($head,$width,$cmp,$pshift,$lp) {
            $head = $head|0;
            $width = $width|0;
            $cmp = $cmp|0;
            $pshift = $pshift|0;
            $lp = $lp|0;
            var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
            var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, $sum = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 240|0;
            $ar = sp;
            HEAP32[$ar>>2] = $head;
            $0 = ($pshift|0)>(1);
            L1: do {
                if ($0) {
                    $1 = (0 - ($width))|0;
                    $$012 = $pshift;$$03 = $head;$7 = $head;$i$04 = 1;
                    while(1) {
                        $2 = (($$03) + ($1)|0);
                        $3 = (($$012) + -2)|0;
                        $4 = (($lp) + ($3<<2)|0);
                        $5 = HEAP32[$4>>2]|0;
                        $sum = (($5) + ($width))|0;
                        $$sum = (0 - ($sum))|0;
                        $6 = (($$03) + ($$sum)|0);
                        $8 = (FUNCTION_TABLE_iii[$cmp & 31]($7,$6)|0);
                        $9 = ($8|0)>(-1);
                        if ($9) {
                            $10 = (FUNCTION_TABLE_iii[$cmp & 31]($7,$2)|0);
                            $11 = ($10|0)>(-1);
                            if ($11) {
                                $i$0$lcssa = $i$04;
                                break L1;
                            }
                        }
                        $12 = (FUNCTION_TABLE_iii[$cmp & 31]($6,$2)|0);
                        $13 = ($12|0)>(-1);
                        $14 = (($i$04) + 1)|0;
                        $15 = (($ar) + ($i$04<<2)|0);
                        if ($13) {
                            HEAP32[$15>>2] = $6;
                            $16 = (($$012) + -1)|0;
                            $$0$be = $6;$$01$be = $16;
                        } else {
                            HEAP32[$15>>2] = $2;
                            $$0$be = $2;$$01$be = $3;
                        }
                        $17 = ($$01$be|0)>(1);
                        if (!($17)) {
                            $i$0$lcssa = $14;
                            break L1;
                        }
                        $$pre = HEAP32[$ar>>2]|0;
                        $$012 = $$01$be;$$03 = $$0$be;$7 = $$pre;$i$04 = $14;
                    }
                } else {
                    $i$0$lcssa = 1;
                }
            } while(0);
            _cycle($width,$ar,$i$0$lcssa);
            STACKTOP = sp;return;
        }
        function _trinkle($head,$width,$cmp,$pp,$pshift,$trusty,$lp) {
            $head = $head|0;
            $width = $width|0;
            $cmp = $cmp|0;
            $pp = $pp|0;
            $pshift = $pshift|0;
            $trusty = $trusty|0;
            $lp = $lp|0;
            var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01162 = 0, $$01162$phi = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02964 = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa75 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
            var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
            var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
            var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
            var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$0$lcssa50 = 0, $i$01063 = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $phitmp = 0, $sum = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 240|0;
            $ar = sp;
            $0 = HEAP32[$pp>>2]|0;
            $1 = ((($pp)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            HEAP32[$ar>>2] = $head;
            $3 = (0 - ($width))|0;
            $4 = ($0|0)!=(1);
            $5 = ($2|0)!=(0);
            $6 = $5 | $4;
            L1: do {
                if ($6) {
                    $7 = (($lp) + ($pshift<<2)|0);
                    $8 = HEAP32[$7>>2]|0;
                    $9 = (0 - ($8))|0;
                    $10 = (($head) + ($9)|0);
                    $11 = (FUNCTION_TABLE_iii[$cmp & 31]($10,$head)|0);
                    $12 = ($11|0)<(1);
                    if ($12) {
                        $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
                        label = 19;
                    } else {
                        $phitmp = ($trusty|0)==(0);
                        $$01162 = $head;$$02964 = $pshift;$$03865 = $phitmp;$18 = $10;$27 = $0;$36 = $2;$i$01063 = 1;
                        while(1) {
                            $13 = ($$02964|0)>(1);
                            $or$cond = $$03865 & $13;
                            if ($or$cond) {
                                $14 = (($$01162) + ($3)|0);
                                $15 = (($$02964) + -2)|0;
                                $16 = (($lp) + ($15<<2)|0);
                                $17 = HEAP32[$16>>2]|0;
                                $19 = (FUNCTION_TABLE_iii[$cmp & 31]($14,$18)|0);
                                $20 = ($19|0)>(-1);
                                if ($20) {
                                    $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
                                    label = 20;
                                    break L1;
                                }
                                $sum = (($17) + ($width))|0;
                                $$sum = (0 - ($sum))|0;
                                $21 = (($$01162) + ($$sum)|0);
                                $22 = (FUNCTION_TABLE_iii[$cmp & 31]($21,$18)|0);
                                $23 = ($22|0)>(-1);
                                if ($23) {
                                    $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
                                    label = 20;
                                    break L1;
                                }
                            }
                            $24 = (($i$01063) + 1)|0;
                            $25 = (($ar) + ($i$01063<<2)|0);
                            HEAP32[$25>>2] = $18;
                            $26 = (($27) + -1)|0;
                            $28 = ($26|0)==(0);
                            do {
                                if ($28) {
                                    $49 = 32;
                                    label = 16;
                                } else {
                                    $29 = $26 & 1;
                                    $30 = ($29|0)==(0);
                                    if ($30) {
                                        $$02$i$i = $26;$nTrailingZeros$03$i$i = 0;
                                        while(1) {
                                            $31 = (($nTrailingZeros$03$i$i) + 1)|0;
                                            $32 = $$02$i$i >>> 1;
                                            $33 = $32 & 1;
                                            $34 = ($33|0)==(0);
                                            if ($34) {
                                                $$02$i$i = $32;$nTrailingZeros$03$i$i = $31;
                                            } else {
                                                $$lcssa = $31;
                                                break;
                                            }
                                        }
                                        $35 = ($$lcssa|0)==(0);
                                        if ($35) {
                                            label = 11;
                                        } else {
                                            $46 = $$lcssa;
                                        }
                                    } else {
                                        label = 11;
                                    }
                                    if ((label|0) == 11) {
                                        label = 0;
                                        $37 = ($36|0)==(0);
                                        if ($37) {
                                            $49 = 64;
                                            label = 16;
                                            break;
                                        }
                                        $38 = $36 & 1;
                                        $39 = ($38|0)==(0);
                                        if ($39) {
                                            $$02$i3$i = $36;$nTrailingZeros$03$i2$i = 0;
                                        } else {
                                            $$0$i = 0;$51 = $27;$54 = $36;$58 = 0;
                                            break;
                                        }
                                        while(1) {
                                            $40 = (($nTrailingZeros$03$i2$i) + 1)|0;
                                            $41 = $$02$i3$i >>> 1;
                                            $42 = $41 & 1;
                                            $43 = ($42|0)==(0);
                                            if ($43) {
                                                $$02$i3$i = $41;$nTrailingZeros$03$i2$i = $40;
                                            } else {
                                                $$lcssa75 = $40;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
                                                break;
                                            }
                                        }
                                        $44 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
                                        $45 = ($$lcssa75|0)==(0);
                                        if ($45) {
                                            $$0$i = 0;$51 = $27;$54 = $36;$58 = 0;
                                            break;
                                        } else {
                                            $46 = $44;
                                        }
                                    }
                                    $47 = ($46>>>0)>(31);
                                    if ($47) {
                                        $49 = $46;
                                        label = 16;
                                    } else {
                                        $$0$i = $46;$51 = $27;$54 = $36;$58 = $46;
                                    }
                                }
                            } while(0);
                            if ((label|0) == 16) {
                                label = 0;
                                $48 = (($49) + -32)|0;
                                $$0$i = $48;$51 = $36;$54 = 0;$58 = $49;
                            }
                            $50 = $51 >>> $$0$i;
                            $52 = (32 - ($$0$i))|0;
                            $53 = $54 << $52;
                            $55 = $53 | $50;
                            $56 = $54 >>> $$0$i;
                            $57 = (($58) + ($$02964))|0;
                            $59 = ($55|0)!=(1);
                            $60 = ($56|0)!=(0);
                            $61 = $60 | $59;
                            if (!($61)) {
                                $$0$lcssa49 = $18;$$02$lcssa51 = $57;$i$0$lcssa50 = $24;
                                label = 20;
                                break L1;
                            }
                            $$pre = HEAP32[$ar>>2]|0;
                            $62 = (($lp) + ($57<<2)|0);
                            $63 = HEAP32[$62>>2]|0;
                            $64 = (0 - ($63))|0;
                            $65 = (($18) + ($64)|0);
                            $66 = (FUNCTION_TABLE_iii[$cmp & 31]($65,$$pre)|0);
                            $67 = ($66|0)<(1);
                            if ($67) {
                                $$0$lcssa = $18;$$02$lcssa = $57;$$03$lcssa = 0;$i$0$lcssa = $24;
                                label = 19;
                                break;
                            } else {
                                $$01162$phi = $18;$$02964 = $57;$$03865 = 1;$18 = $65;$27 = $55;$36 = $56;$i$01063 = $24;$$01162 = $$01162$phi;
                            }
                        }
                    }
                } else {
                    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
                    label = 19;
                }
            } while(0);
            if ((label|0) == 19) {
                $68 = ($$03$lcssa|0)==(0);
                if ($68) {
                    $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
                    label = 20;
                }
            }
            if ((label|0) == 20) {
                _cycle($width,$ar,$i$0$lcssa50);
                _sift($$0$lcssa49,$width,$cmp,$$02$lcssa51,$lp);
            }
            STACKTOP = sp;return;
        }
        function _strtox($s,$p,$prec) {
            $s = $s|0;
            $p = $p|0;
            $prec = $prec|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, dest = 0, label = 0;
            var sp = 0, stop = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 112|0;
            $f = sp;
            dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
            $0 = ((($f)) + 4|0);
            HEAP32[$0>>2] = $s;
            $1 = ((($f)) + 8|0);
            HEAP32[$1>>2] = (-1);
            $2 = ((($f)) + 44|0);
            HEAP32[$2>>2] = $s;
            $3 = ((($f)) + 76|0);
            HEAP32[$3>>2] = -1;
            ___shlim($f,0);
            $4 = (+___floatscan($f,$prec,1));
            $5 = ((($f)) + 108|0);
            $6 = HEAP32[$5>>2]|0;
            $7 = HEAP32[$0>>2]|0;
            $8 = HEAP32[$1>>2]|0;
            $9 = $7;
            $10 = $8;
            $11 = (($9) - ($10))|0;
            $12 = (($11) + ($6))|0;
            $13 = ($p|0)==(0|0);
            if (!($13)) {
                $14 = ($12|0)!=(0);
                $15 = (($s) + ($12)|0);
                $16 = $14 ? $15 : $s;
                HEAP32[$p>>2] = $16;
            }
            STACKTOP = sp;return (+$4);
        }
        function _strtox555($s,$p,$base,$0,$1) {
            $s = $s|0;
            $p = $p|0;
            $base = $base|0;
            $0 = $0|0;
            $1 = $1|0;
            var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0;
            var label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 112|0;
            $f = sp;
            HEAP32[$f>>2] = 0;
            $2 = ((($f)) + 4|0);
            HEAP32[$2>>2] = $s;
            $3 = ((($f)) + 44|0);
            HEAP32[$3>>2] = $s;
            $4 = ($s|0)<(0|0);
            $5 = ((($s)) + 2147483647|0);
            $$sink = $4 ? (-1) : $5;
            $6 = ((($f)) + 8|0);
            HEAP32[$6>>2] = $$sink;
            $7 = ((($f)) + 76|0);
            HEAP32[$7>>2] = -1;
            ___shlim($f,0);
            $8 = (___intscan($f,$base,1,$0,$1)|0);
            $9 = tempRet0;
            $10 = ($p|0)==(0|0);
            if (!($10)) {
                $11 = ((($f)) + 108|0);
                $12 = HEAP32[$11>>2]|0;
                $13 = HEAP32[$2>>2]|0;
                $14 = HEAP32[$6>>2]|0;
                $15 = $13;
                $16 = $14;
                $17 = (($15) + ($12))|0;
                $18 = (($17) - ($16))|0;
                $19 = (($s) + ($18)|0);
                HEAP32[$p>>2] = $19;
            }
            tempRet0 = ($9);
            STACKTOP = sp;return ($8|0);
        }
        function _cycle($width,$ar,$n) {
            $width = $width|0;
            $ar = $ar|0;
            $n = $n|0;
            var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
            var $tmp = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 256|0;
            $tmp = sp;
            $0 = ($n|0)<(2);
            L1: do {
                if (!($0)) {
                    $1 = (($ar) + ($n<<2)|0);
                    HEAP32[$1>>2] = $tmp;
                    $2 = ($width|0)==(0);
                    if (!($2)) {
                        $$02 = $width;$6 = $tmp;
                        while(1) {
                            $3 = ($$02>>>0)>(256);
                            $4 = $3 ? 256 : $$02;
                            $5 = HEAP32[$ar>>2]|0;
                            _memcpy(($6|0),($5|0),($4|0))|0;
                            $i$01 = 0;
                            while(1) {
                                $7 = (($ar) + ($i$01<<2)|0);
                                $8 = HEAP32[$7>>2]|0;
                                $9 = (($i$01) + 1)|0;
                                $10 = (($ar) + ($9<<2)|0);
                                $11 = HEAP32[$10>>2]|0;
                                _memcpy(($8|0),($11|0),($4|0))|0;
                                $12 = HEAP32[$7>>2]|0;
                                $13 = (($12) + ($4)|0);
                                HEAP32[$7>>2] = $13;
                                $exitcond = ($9|0)==($n|0);
                                if ($exitcond) {
                                    break;
                                } else {
                                    $i$01 = $9;
                                }
                            }
                            $14 = ($$02|0)==($4|0);
                            if ($14) {
                                break L1;
                            }
                            $15 = (($$02) - ($4))|0;
                            $$pre = HEAP32[$1>>2]|0;
                            $$02 = $15;$6 = $$pre;
                        }
                    }
                }
            } while(0);
            STACKTOP = sp;return;
        }
        function _sn_write($f,$s,$l) {
            $f = $f|0;
            $s = $s|0;
            $l = $l|0;
            var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($f)) + 16|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = ((($f)) + 20|0);
            $3 = HEAP32[$2>>2]|0;
            $4 = $1;
            $5 = $3;
            $6 = (($4) - ($5))|0;
            $7 = ($6>>>0)>($l>>>0);
            $l$ = $7 ? $l : $6;
            _memcpy(($3|0),($s|0),($l$|0))|0;
            $8 = HEAP32[$2>>2]|0;
            $9 = (($8) + ($l$)|0);
            HEAP32[$2>>2] = $9;
            return ($l|0);
        }
        function _pop_arg($arg,$type,$ap) {
            $arg = $arg|0;
            $type = $type|0;
            $ap = $ap|0;
            var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
            var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
            var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
            var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
            var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
            var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
            var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
            var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
            var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
            var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($type>>>0)>(20);
            L1: do {
                if (!($0)) {
                    do {
                        switch ($type|0) {
                            case 9:  {
                                $arglist_current = HEAP32[$ap>>2]|0;
                                $1 = $arglist_current;
                                $2 = ((0) + 4|0);
                                $expanded28 = $2;
                                $expanded = (($expanded28) - 1)|0;
                                $3 = (($1) + ($expanded))|0;
                                $4 = ((0) + 4|0);
                                $expanded32 = $4;
                                $expanded31 = (($expanded32) - 1)|0;
                                $expanded30 = $expanded31 ^ -1;
                                $5 = $3 & $expanded30;
                                $6 = $5;
                                $7 = HEAP32[$6>>2]|0;
                                $arglist_next = ((($6)) + 4|0);
                                HEAP32[$ap>>2] = $arglist_next;
                                HEAP32[$arg>>2] = $7;
                                break L1;
                                break;
                            }
                            case 10:  {
                                $arglist_current2 = HEAP32[$ap>>2]|0;
                                $8 = $arglist_current2;
                                $9 = ((0) + 4|0);
                                $expanded35 = $9;
                                $expanded34 = (($expanded35) - 1)|0;
                                $10 = (($8) + ($expanded34))|0;
                                $11 = ((0) + 4|0);
                                $expanded39 = $11;
                                $expanded38 = (($expanded39) - 1)|0;
                                $expanded37 = $expanded38 ^ -1;
                                $12 = $10 & $expanded37;
                                $13 = $12;
                                $14 = HEAP32[$13>>2]|0;
                                $arglist_next3 = ((($13)) + 4|0);
                                HEAP32[$ap>>2] = $arglist_next3;
                                $15 = ($14|0)<(0);
                                $16 = $15 << 31 >> 31;
                                $17 = $arg;
                                $18 = $17;
                                HEAP32[$18>>2] = $14;
                                $19 = (($17) + 4)|0;
                                $20 = $19;
                                HEAP32[$20>>2] = $16;
                                break L1;
                                break;
                            }
                            case 11:  {
                                $arglist_current5 = HEAP32[$ap>>2]|0;
                                $21 = $arglist_current5;
                                $22 = ((0) + 4|0);
                                $expanded42 = $22;
                                $expanded41 = (($expanded42) - 1)|0;
                                $23 = (($21) + ($expanded41))|0;
                                $24 = ((0) + 4|0);
                                $expanded46 = $24;
                                $expanded45 = (($expanded46) - 1)|0;
                                $expanded44 = $expanded45 ^ -1;
                                $25 = $23 & $expanded44;
                                $26 = $25;
                                $27 = HEAP32[$26>>2]|0;
                                $arglist_next6 = ((($26)) + 4|0);
                                HEAP32[$ap>>2] = $arglist_next6;
                                $28 = $arg;
                                $29 = $28;
                                HEAP32[$29>>2] = $27;
                                $30 = (($28) + 4)|0;
                                $31 = $30;
                                HEAP32[$31>>2] = 0;
                                break L1;
                                break;
                            }
                            case 12:  {
                                $arglist_current8 = HEAP32[$ap>>2]|0;
                                $32 = $arglist_current8;
                                $33 = ((0) + 8|0);
                                $expanded49 = $33;
                                $expanded48 = (($expanded49) - 1)|0;
                                $34 = (($32) + ($expanded48))|0;
                                $35 = ((0) + 8|0);
                                $expanded53 = $35;
                                $expanded52 = (($expanded53) - 1)|0;
                                $expanded51 = $expanded52 ^ -1;
                                $36 = $34 & $expanded51;
                                $37 = $36;
                                $38 = $37;
                                $39 = $38;
                                $40 = HEAP32[$39>>2]|0;
                                $41 = (($38) + 4)|0;
                                $42 = $41;
                                $43 = HEAP32[$42>>2]|0;
                                $arglist_next9 = ((($37)) + 8|0);
                                HEAP32[$ap>>2] = $arglist_next9;
                                $44 = $arg;
                                $45 = $44;
                                HEAP32[$45>>2] = $40;
                                $46 = (($44) + 4)|0;
                                $47 = $46;
                                HEAP32[$47>>2] = $43;
                                break L1;
                                break;
                            }
                            case 13:  {
                                $arglist_current11 = HEAP32[$ap>>2]|0;
                                $48 = $arglist_current11;
                                $49 = ((0) + 4|0);
                                $expanded56 = $49;
                                $expanded55 = (($expanded56) - 1)|0;
                                $50 = (($48) + ($expanded55))|0;
                                $51 = ((0) + 4|0);
                                $expanded60 = $51;
                                $expanded59 = (($expanded60) - 1)|0;
                                $expanded58 = $expanded59 ^ -1;
                                $52 = $50 & $expanded58;
                                $53 = $52;
                                $54 = HEAP32[$53>>2]|0;
                                $arglist_next12 = ((($53)) + 4|0);
                                HEAP32[$ap>>2] = $arglist_next12;
                                $55 = $54&65535;
                                $56 = $55 << 16 >> 16;
                                $57 = ($56|0)<(0);
                                $58 = $57 << 31 >> 31;
                                $59 = $arg;
                                $60 = $59;
                                HEAP32[$60>>2] = $56;
                                $61 = (($59) + 4)|0;
                                $62 = $61;
                                HEAP32[$62>>2] = $58;
                                break L1;
                                break;
                            }
                            case 14:  {
                                $arglist_current14 = HEAP32[$ap>>2]|0;
                                $63 = $arglist_current14;
                                $64 = ((0) + 4|0);
                                $expanded63 = $64;
                                $expanded62 = (($expanded63) - 1)|0;
                                $65 = (($63) + ($expanded62))|0;
                                $66 = ((0) + 4|0);
                                $expanded67 = $66;
                                $expanded66 = (($expanded67) - 1)|0;
                                $expanded65 = $expanded66 ^ -1;
                                $67 = $65 & $expanded65;
                                $68 = $67;
                                $69 = HEAP32[$68>>2]|0;
                                $arglist_next15 = ((($68)) + 4|0);
                                HEAP32[$ap>>2] = $arglist_next15;
                                $$mask1 = $69 & 65535;
                                $70 = $arg;
                                $71 = $70;
                                HEAP32[$71>>2] = $$mask1;
                                $72 = (($70) + 4)|0;
                                $73 = $72;
                                HEAP32[$73>>2] = 0;
                                break L1;
                                break;
                            }
                            case 15:  {
                                $arglist_current17 = HEAP32[$ap>>2]|0;
                                $74 = $arglist_current17;
                                $75 = ((0) + 4|0);
                                $expanded70 = $75;
                                $expanded69 = (($expanded70) - 1)|0;
                                $76 = (($74) + ($expanded69))|0;
                                $77 = ((0) + 4|0);
                                $expanded74 = $77;
                                $expanded73 = (($expanded74) - 1)|0;
                                $expanded72 = $expanded73 ^ -1;
                                $78 = $76 & $expanded72;
                                $79 = $78;
                                $80 = HEAP32[$79>>2]|0;
                                $arglist_next18 = ((($79)) + 4|0);
                                HEAP32[$ap>>2] = $arglist_next18;
                                $81 = $80&255;
                                $82 = $81 << 24 >> 24;
                                $83 = ($82|0)<(0);
                                $84 = $83 << 31 >> 31;
                                $85 = $arg;
                                $86 = $85;
                                HEAP32[$86>>2] = $82;
                                $87 = (($85) + 4)|0;
                                $88 = $87;
                                HEAP32[$88>>2] = $84;
                                break L1;
                                break;
                            }
                            case 16:  {
                                $arglist_current20 = HEAP32[$ap>>2]|0;
                                $89 = $arglist_current20;
                                $90 = ((0) + 4|0);
                                $expanded77 = $90;
                                $expanded76 = (($expanded77) - 1)|0;
                                $91 = (($89) + ($expanded76))|0;
                                $92 = ((0) + 4|0);
                                $expanded81 = $92;
                                $expanded80 = (($expanded81) - 1)|0;
                                $expanded79 = $expanded80 ^ -1;
                                $93 = $91 & $expanded79;
                                $94 = $93;
                                $95 = HEAP32[$94>>2]|0;
                                $arglist_next21 = ((($94)) + 4|0);
                                HEAP32[$ap>>2] = $arglist_next21;
                                $$mask = $95 & 255;
                                $96 = $arg;
                                $97 = $96;
                                HEAP32[$97>>2] = $$mask;
                                $98 = (($96) + 4)|0;
                                $99 = $98;
                                HEAP32[$99>>2] = 0;
                                break L1;
                                break;
                            }
                            case 17:  {
                                $arglist_current23 = HEAP32[$ap>>2]|0;
                                $100 = $arglist_current23;
                                $101 = ((0) + 8|0);
                                $expanded84 = $101;
                                $expanded83 = (($expanded84) - 1)|0;
                                $102 = (($100) + ($expanded83))|0;
                                $103 = ((0) + 8|0);
                                $expanded88 = $103;
                                $expanded87 = (($expanded88) - 1)|0;
                                $expanded86 = $expanded87 ^ -1;
                                $104 = $102 & $expanded86;
                                $105 = $104;
                                $106 = +HEAPF64[$105>>3];
                                $arglist_next24 = ((($105)) + 8|0);
                                HEAP32[$ap>>2] = $arglist_next24;
                                HEAPF64[$arg>>3] = $106;
                                break L1;
                                break;
                            }
                            case 18:  {
                                $arglist_current26 = HEAP32[$ap>>2]|0;
                                $107 = $arglist_current26;
                                $108 = ((0) + 8|0);
                                $expanded91 = $108;
                                $expanded90 = (($expanded91) - 1)|0;
                                $109 = (($107) + ($expanded90))|0;
                                $110 = ((0) + 8|0);
                                $expanded95 = $110;
                                $expanded94 = (($expanded95) - 1)|0;
                                $expanded93 = $expanded94 ^ -1;
                                $111 = $109 & $expanded93;
                                $112 = $111;
                                $113 = +HEAPF64[$112>>3];
                                $arglist_next27 = ((($112)) + 8|0);
                                HEAP32[$ap>>2] = $arglist_next27;
                                HEAPF64[$arg>>3] = $113;
                                break L1;
                                break;
                            }
                            default: {
                                break L1;
                            }
                        }
                    } while(0);
                }
            } while(0);
            return;
        }
        function _fmt_u($0,$1,$s) {
            $0 = $0|0;
            $1 = $1|0;
            $s = $s|0;
            var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
            var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $2 = ($1>>>0)>(0);
            $3 = ($0>>>0)>(4294967295);
            $4 = ($1|0)==(0);
            $5 = $4 & $3;
            $6 = $2 | $5;
            if ($6) {
                $$05 = $s;$7 = $0;$8 = $1;
                while(1) {
                    $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
                    $10 = tempRet0;
                    $11 = $9 | 48;
                    $12 = $11&255;
                    $13 = ((($$05)) + -1|0);
                    HEAP8[$13>>0] = $12;
                    $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
                    $15 = tempRet0;
                    $16 = ($8>>>0)>(9);
                    $17 = ($7>>>0)>(4294967295);
                    $18 = ($8|0)==(9);
                    $19 = $18 & $17;
                    $20 = $16 | $19;
                    if ($20) {
                        $$05 = $13;$7 = $14;$8 = $15;
                    } else {
                        $$lcssa20 = $13;$28 = $14;$29 = $15;
                        break;
                    }
                }
                $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
            } else {
                $$0$lcssa = $s;$$01$lcssa$off0 = $0;
            }
            $21 = ($$01$lcssa$off0|0)==(0);
            if ($21) {
                $$1$lcssa = $$0$lcssa;
            } else {
                $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
                while(1) {
                    $22 = (($y$03>>>0) % 10)&-1;
                    $23 = $22 | 48;
                    $24 = $23&255;
                    $25 = ((($$12)) + -1|0);
                    HEAP8[$25>>0] = $24;
                    $26 = (($y$03>>>0) / 10)&-1;
                    $27 = ($y$03>>>0)<(10);
                    if ($27) {
                        $$1$lcssa = $25;
                        break;
                    } else {
                        $$12 = $25;$y$03 = $26;
                    }
                }
            }
            return ($$1$lcssa|0);
        }
        function _pad($f,$c,$w,$l,$fl) {
            $f = $f|0;
            $c = $c|0;
            $w = $w|0;
            $l = $l|0;
            $fl = $fl|0;
            var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
            var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
            sp = STACKTOP;
            STACKTOP = STACKTOP + 256|0;
            $pad = sp;
            $0 = $fl & 73728;
            $1 = ($0|0)==(0);
            $2 = ($w|0)>($l|0);
            $or$cond = $2 & $1;
            do {
                if ($or$cond) {
                    $3 = (($w) - ($l))|0;
                    $4 = ($3>>>0)>(256);
                    $5 = $4 ? 256 : $3;
                    _memset(($pad|0),($c|0),($5|0))|0;
                    $6 = ($3>>>0)>(255);
                    $7 = HEAP32[$f>>2]|0;
                    $8 = $7 & 32;
                    $9 = ($8|0)==(0);
                    if ($6) {
                        $10 = (($w) - ($l))|0;
                        $$02 = $3;$17 = $7;$18 = $9;
                        while(1) {
                            if ($18) {
                                (___fwritex($pad,256,$f)|0);
                                $$pre = HEAP32[$f>>2]|0;
                                $14 = $$pre;
                            } else {
                                $14 = $17;
                            }
                            $11 = (($$02) + -256)|0;
                            $12 = ($11>>>0)>(255);
                            $13 = $14 & 32;
                            $15 = ($13|0)==(0);
                            if ($12) {
                                $$02 = $11;$17 = $14;$18 = $15;
                            } else {
                                break;
                            }
                        }
                        $16 = $10 & 255;
                        if ($15) {
                            $$0$lcssa6 = $16;
                        } else {
                            break;
                        }
                    } else {
                        if ($9) {
                            $$0$lcssa6 = $3;
                        } else {
                            break;
                        }
                    }
                    (___fwritex($pad,$$0$lcssa6,$f)|0);
                }
            } while(0);
            STACKTOP = sp;return;
        }
        function _malloc($bytes) {
            $bytes = $bytes|0;
            var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
            var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
            var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
            var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
            var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
            var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
            var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
            var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
            var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
            var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
            var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
            var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
            var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
            var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
            var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
            var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
            var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
            var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
            var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
            var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
            var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
            var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
            var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
            var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
            var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
            var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
            var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
            var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
            var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
            var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
            var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
            var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
            var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
            var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
            var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
            var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
            var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
            var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
            var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
            var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
            var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
            var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
            var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
            var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
            var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
            var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
            var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
            var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
            var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
            var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
            var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
            var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
            var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
            var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
            var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
            var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
            var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
            var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
            var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
            var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
            var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
            var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
            var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
            var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
            var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($bytes>>>0)<(245);
            do {
                if ($0) {
                    $1 = ($bytes>>>0)<(11);
                    $2 = (($bytes) + 11)|0;
                    $3 = $2 & -8;
                    $4 = $1 ? 16 : $3;
                    $5 = $4 >>> 3;
                    $6 = HEAP32[3980>>2]|0;
                    $7 = $6 >>> $5;
                    $8 = $7 & 3;
                    $9 = ($8|0)==(0);
                    if (!($9)) {
                        $10 = $7 & 1;
                        $11 = $10 ^ 1;
                        $12 = (($11) + ($5))|0;
                        $13 = $12 << 1;
                        $14 = (4020 + ($13<<2)|0);
                        $$sum10 = (($13) + 2)|0;
                        $15 = (4020 + ($$sum10<<2)|0);
                        $16 = HEAP32[$15>>2]|0;
                        $17 = ((($16)) + 8|0);
                        $18 = HEAP32[$17>>2]|0;
                        $19 = ($14|0)==($18|0);
                        do {
                            if ($19) {
                                $20 = 1 << $12;
                                $21 = $20 ^ -1;
                                $22 = $6 & $21;
                                HEAP32[3980>>2] = $22;
                            } else {
                                $23 = HEAP32[(3996)>>2]|0;
                                $24 = ($18>>>0)<($23>>>0);
                                if ($24) {
                                    _abort();
                                    // unreachable;
                                }
                                $25 = ((($18)) + 12|0);
                                $26 = HEAP32[$25>>2]|0;
                                $27 = ($26|0)==($16|0);
                                if ($27) {
                                    HEAP32[$25>>2] = $14;
                                    HEAP32[$15>>2] = $18;
                                    break;
                                } else {
                                    _abort();
                                    // unreachable;
                                }
                            }
                        } while(0);
                        $28 = $12 << 3;
                        $29 = $28 | 3;
                        $30 = ((($16)) + 4|0);
                        HEAP32[$30>>2] = $29;
                        $$sum1112 = $28 | 4;
                        $31 = (($16) + ($$sum1112)|0);
                        $32 = HEAP32[$31>>2]|0;
                        $33 = $32 | 1;
                        HEAP32[$31>>2] = $33;
                        $mem$0 = $17;
                        return ($mem$0|0);
                    }
                    $34 = HEAP32[(3988)>>2]|0;
                    $35 = ($4>>>0)>($34>>>0);
                    if ($35) {
                        $36 = ($7|0)==(0);
                        if (!($36)) {
                            $37 = $7 << $5;
                            $38 = 2 << $5;
                            $39 = (0 - ($38))|0;
                            $40 = $38 | $39;
                            $41 = $37 & $40;
                            $42 = (0 - ($41))|0;
                            $43 = $41 & $42;
                            $44 = (($43) + -1)|0;
                            $45 = $44 >>> 12;
                            $46 = $45 & 16;
                            $47 = $44 >>> $46;
                            $48 = $47 >>> 5;
                            $49 = $48 & 8;
                            $50 = $49 | $46;
                            $51 = $47 >>> $49;
                            $52 = $51 >>> 2;
                            $53 = $52 & 4;
                            $54 = $50 | $53;
                            $55 = $51 >>> $53;
                            $56 = $55 >>> 1;
                            $57 = $56 & 2;
                            $58 = $54 | $57;
                            $59 = $55 >>> $57;
                            $60 = $59 >>> 1;
                            $61 = $60 & 1;
                            $62 = $58 | $61;
                            $63 = $59 >>> $61;
                            $64 = (($62) + ($63))|0;
                            $65 = $64 << 1;
                            $66 = (4020 + ($65<<2)|0);
                            $$sum4 = (($65) + 2)|0;
                            $67 = (4020 + ($$sum4<<2)|0);
                            $68 = HEAP32[$67>>2]|0;
                            $69 = ((($68)) + 8|0);
                            $70 = HEAP32[$69>>2]|0;
                            $71 = ($66|0)==($70|0);
                            do {
                                if ($71) {
                                    $72 = 1 << $64;
                                    $73 = $72 ^ -1;
                                    $74 = $6 & $73;
                                    HEAP32[3980>>2] = $74;
                                    $88 = $34;
                                } else {
                                    $75 = HEAP32[(3996)>>2]|0;
                                    $76 = ($70>>>0)<($75>>>0);
                                    if ($76) {
                                        _abort();
                                        // unreachable;
                                    }
                                    $77 = ((($70)) + 12|0);
                                    $78 = HEAP32[$77>>2]|0;
                                    $79 = ($78|0)==($68|0);
                                    if ($79) {
                                        HEAP32[$77>>2] = $66;
                                        HEAP32[$67>>2] = $70;
                                        $$pre = HEAP32[(3988)>>2]|0;
                                        $88 = $$pre;
                                        break;
                                    } else {
                                        _abort();
                                        // unreachable;
                                    }
                                }
                            } while(0);
                            $80 = $64 << 3;
                            $81 = (($80) - ($4))|0;
                            $82 = $4 | 3;
                            $83 = ((($68)) + 4|0);
                            HEAP32[$83>>2] = $82;
                            $84 = (($68) + ($4)|0);
                            $85 = $81 | 1;
                            $$sum56 = $4 | 4;
                            $86 = (($68) + ($$sum56)|0);
                            HEAP32[$86>>2] = $85;
                            $87 = (($68) + ($80)|0);
                            HEAP32[$87>>2] = $81;
                            $89 = ($88|0)==(0);
                            if (!($89)) {
                                $90 = HEAP32[(4000)>>2]|0;
                                $91 = $88 >>> 3;
                                $92 = $91 << 1;
                                $93 = (4020 + ($92<<2)|0);
                                $94 = HEAP32[3980>>2]|0;
                                $95 = 1 << $91;
                                $96 = $94 & $95;
                                $97 = ($96|0)==(0);
                                if ($97) {
                                    $98 = $94 | $95;
                                    HEAP32[3980>>2] = $98;
                                    $$pre105 = (($92) + 2)|0;
                                    $$pre106 = (4020 + ($$pre105<<2)|0);
                                    $$pre$phiZ2D = $$pre106;$F4$0 = $93;
                                } else {
                                    $$sum9 = (($92) + 2)|0;
                                    $99 = (4020 + ($$sum9<<2)|0);
                                    $100 = HEAP32[$99>>2]|0;
                                    $101 = HEAP32[(3996)>>2]|0;
                                    $102 = ($100>>>0)<($101>>>0);
                                    if ($102) {
                                        _abort();
                                        // unreachable;
                                    } else {
                                        $$pre$phiZ2D = $99;$F4$0 = $100;
                                    }
                                }
                                HEAP32[$$pre$phiZ2D>>2] = $90;
                                $103 = ((($F4$0)) + 12|0);
                                HEAP32[$103>>2] = $90;
                                $104 = ((($90)) + 8|0);
                                HEAP32[$104>>2] = $F4$0;
                                $105 = ((($90)) + 12|0);
                                HEAP32[$105>>2] = $93;
                            }
                            HEAP32[(3988)>>2] = $81;
                            HEAP32[(4000)>>2] = $84;
                            $mem$0 = $69;
                            return ($mem$0|0);
                        }
                        $106 = HEAP32[(3984)>>2]|0;
                        $107 = ($106|0)==(0);
                        if ($107) {
                            $nb$0 = $4;
                        } else {
                            $108 = (0 - ($106))|0;
                            $109 = $106 & $108;
                            $110 = (($109) + -1)|0;
                            $111 = $110 >>> 12;
                            $112 = $111 & 16;
                            $113 = $110 >>> $112;
                            $114 = $113 >>> 5;
                            $115 = $114 & 8;
                            $116 = $115 | $112;
                            $117 = $113 >>> $115;
                            $118 = $117 >>> 2;
                            $119 = $118 & 4;
                            $120 = $116 | $119;
                            $121 = $117 >>> $119;
                            $122 = $121 >>> 1;
                            $123 = $122 & 2;
                            $124 = $120 | $123;
                            $125 = $121 >>> $123;
                            $126 = $125 >>> 1;
                            $127 = $126 & 1;
                            $128 = $124 | $127;
                            $129 = $125 >>> $127;
                            $130 = (($128) + ($129))|0;
                            $131 = (4284 + ($130<<2)|0);
                            $132 = HEAP32[$131>>2]|0;
                            $133 = ((($132)) + 4|0);
                            $134 = HEAP32[$133>>2]|0;
                            $135 = $134 & -8;
                            $136 = (($135) - ($4))|0;
                            $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
                            while(1) {
                                $137 = ((($t$0$i)) + 16|0);
                                $138 = HEAP32[$137>>2]|0;
                                $139 = ($138|0)==(0|0);
                                if ($139) {
                                    $140 = ((($t$0$i)) + 20|0);
                                    $141 = HEAP32[$140>>2]|0;
                                    $142 = ($141|0)==(0|0);
                                    if ($142) {
                                        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
                                        break;
                                    } else {
                                        $144 = $141;
                                    }
                                } else {
                                    $144 = $138;
                                }
                                $143 = ((($144)) + 4|0);
                                $145 = HEAP32[$143>>2]|0;
                                $146 = $145 & -8;
                                $147 = (($146) - ($4))|0;
                                $148 = ($147>>>0)<($rsize$0$i>>>0);
                                $$rsize$0$i = $148 ? $147 : $rsize$0$i;
                                $$v$0$i = $148 ? $144 : $v$0$i;
                                $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
                            }
                            $149 = HEAP32[(3996)>>2]|0;
                            $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
                            if ($150) {
                                _abort();
                                // unreachable;
                            }
                            $151 = (($v$0$i$lcssa) + ($4)|0);
                            $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
                            if (!($152)) {
                                _abort();
                                // unreachable;
                            }
                            $153 = ((($v$0$i$lcssa)) + 24|0);
                            $154 = HEAP32[$153>>2]|0;
                            $155 = ((($v$0$i$lcssa)) + 12|0);
                            $156 = HEAP32[$155>>2]|0;
                            $157 = ($156|0)==($v$0$i$lcssa|0);
                            do {
                                if ($157) {
                                    $167 = ((($v$0$i$lcssa)) + 20|0);
                                    $168 = HEAP32[$167>>2]|0;
                                    $169 = ($168|0)==(0|0);
                                    if ($169) {
                                        $170 = ((($v$0$i$lcssa)) + 16|0);
                                        $171 = HEAP32[$170>>2]|0;
                                        $172 = ($171|0)==(0|0);
                                        if ($172) {
                                            $R$1$i = 0;
                                            break;
                                        } else {
                                            $R$0$i = $171;$RP$0$i = $170;
                                        }
                                    } else {
                                        $R$0$i = $168;$RP$0$i = $167;
                                    }
                                    while(1) {
                                        $173 = ((($R$0$i)) + 20|0);
                                        $174 = HEAP32[$173>>2]|0;
                                        $175 = ($174|0)==(0|0);
                                        if (!($175)) {
                                            $R$0$i = $174;$RP$0$i = $173;
                                            continue;
                                        }
                                        $176 = ((($R$0$i)) + 16|0);
                                        $177 = HEAP32[$176>>2]|0;
                                        $178 = ($177|0)==(0|0);
                                        if ($178) {
                                            $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
                                            break;
                                        } else {
                                            $R$0$i = $177;$RP$0$i = $176;
                                        }
                                    }
                                    $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
                                    if ($179) {
                                        _abort();
                                        // unreachable;
                                    } else {
                                        HEAP32[$RP$0$i$lcssa>>2] = 0;
                                        $R$1$i = $R$0$i$lcssa;
                                        break;
                                    }
                                } else {
                                    $158 = ((($v$0$i$lcssa)) + 8|0);
                                    $159 = HEAP32[$158>>2]|0;
                                    $160 = ($159>>>0)<($149>>>0);
                                    if ($160) {
                                        _abort();
                                        // unreachable;
                                    }
                                    $161 = ((($159)) + 12|0);
                                    $162 = HEAP32[$161>>2]|0;
                                    $163 = ($162|0)==($v$0$i$lcssa|0);
                                    if (!($163)) {
                                        _abort();
                                        // unreachable;
                                    }
                                    $164 = ((($156)) + 8|0);
                                    $165 = HEAP32[$164>>2]|0;
                                    $166 = ($165|0)==($v$0$i$lcssa|0);
                                    if ($166) {
                                        HEAP32[$161>>2] = $156;
                                        HEAP32[$164>>2] = $159;
                                        $R$1$i = $156;
                                        break;
                                    } else {
                                        _abort();
                                        // unreachable;
                                    }
                                }
                            } while(0);
                            $180 = ($154|0)==(0|0);
                            do {
                                if (!($180)) {
                                    $181 = ((($v$0$i$lcssa)) + 28|0);
                                    $182 = HEAP32[$181>>2]|0;
                                    $183 = (4284 + ($182<<2)|0);
                                    $184 = HEAP32[$183>>2]|0;
                                    $185 = ($v$0$i$lcssa|0)==($184|0);
                                    if ($185) {
                                        HEAP32[$183>>2] = $R$1$i;
                                        $cond$i = ($R$1$i|0)==(0|0);
                                        if ($cond$i) {
                                            $186 = 1 << $182;
                                            $187 = $186 ^ -1;
                                            $188 = HEAP32[(3984)>>2]|0;
                                            $189 = $188 & $187;
                                            HEAP32[(3984)>>2] = $189;
                                            break;
                                        }
                                    } else {
                                        $190 = HEAP32[(3996)>>2]|0;
                                        $191 = ($154>>>0)<($190>>>0);
                                        if ($191) {
                                            _abort();
                                            // unreachable;
                                        }
                                        $192 = ((($154)) + 16|0);
                                        $193 = HEAP32[$192>>2]|0;
                                        $194 = ($193|0)==($v$0$i$lcssa|0);
                                        if ($194) {
                                            HEAP32[$192>>2] = $R$1$i;
                                        } else {
                                            $195 = ((($154)) + 20|0);
                                            HEAP32[$195>>2] = $R$1$i;
                                        }
                                        $196 = ($R$1$i|0)==(0|0);
                                        if ($196) {
                                            break;
                                        }
                                    }
                                    $197 = HEAP32[(3996)>>2]|0;
                                    $198 = ($R$1$i>>>0)<($197>>>0);
                                    if ($198) {
                                        _abort();
                                        // unreachable;
                                    }
                                    $199 = ((($R$1$i)) + 24|0);
                                    HEAP32[$199>>2] = $154;
                                    $200 = ((($v$0$i$lcssa)) + 16|0);
                                    $201 = HEAP32[$200>>2]|0;
                                    $202 = ($201|0)==(0|0);
                                    do {
                                        if (!($202)) {
                                            $203 = ($201>>>0)<($197>>>0);
                                            if ($203) {
                                                _abort();
                                                // unreachable;
                                            } else {
                                                $204 = ((($R$1$i)) + 16|0);
                                                HEAP32[$204>>2] = $201;
                                                $205 = ((($201)) + 24|0);
                                                HEAP32[$205>>2] = $R$1$i;
                                                break;
                                            }
                                        }
                                    } while(0);
                                    $206 = ((($v$0$i$lcssa)) + 20|0);
                                    $207 = HEAP32[$206>>2]|0;
                                    $208 = ($207|0)==(0|0);
                                    if (!($208)) {
                                        $209 = HEAP32[(3996)>>2]|0;
                                        $210 = ($207>>>0)<($209>>>0);
                                        if ($210) {
                                            _abort();
                                            // unreachable;
                                        } else {
                                            $211 = ((($R$1$i)) + 20|0);
                                            HEAP32[$211>>2] = $207;
                                            $212 = ((($207)) + 24|0);
                                            HEAP32[$212>>2] = $R$1$i;
                                            break;
                                        }
                                    }
                                }
                            } while(0);
                            $213 = ($rsize$0$i$lcssa>>>0)<(16);
                            if ($213) {
                                $214 = (($rsize$0$i$lcssa) + ($4))|0;
                                $215 = $214 | 3;
                                $216 = ((($v$0$i$lcssa)) + 4|0);
                                HEAP32[$216>>2] = $215;
                                $$sum4$i = (($214) + 4)|0;
                                $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
                                $218 = HEAP32[$217>>2]|0;
                                $219 = $218 | 1;
                                HEAP32[$217>>2] = $219;
                            } else {
                                $220 = $4 | 3;
                                $221 = ((($v$0$i$lcssa)) + 4|0);
                                HEAP32[$221>>2] = $220;
                                $222 = $rsize$0$i$lcssa | 1;
                                $$sum$i35 = $4 | 4;
                                $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
                                HEAP32[$223>>2] = $222;
                                $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
                                $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
                                HEAP32[$224>>2] = $rsize$0$i$lcssa;
                                $225 = HEAP32[(3988)>>2]|0;
                                $226 = ($225|0)==(0);
                                if (!($226)) {
                                    $227 = HEAP32[(4000)>>2]|0;
                                    $228 = $225 >>> 3;
                                    $229 = $228 << 1;
                                    $230 = (4020 + ($229<<2)|0);
                                    $231 = HEAP32[3980>>2]|0;
                                    $232 = 1 << $228;
                                    $233 = $231 & $232;
                                    $234 = ($233|0)==(0);
                                    if ($234) {
                                        $235 = $231 | $232;
                                        HEAP32[3980>>2] = $235;
                                        $$pre$i = (($229) + 2)|0;
                                        $$pre8$i = (4020 + ($$pre$i<<2)|0);
                                        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
                                    } else {
                                        $$sum3$i = (($229) + 2)|0;
                                        $236 = (4020 + ($$sum3$i<<2)|0);
                                        $237 = HEAP32[$236>>2]|0;
                                        $238 = HEAP32[(3996)>>2]|0;
                                        $239 = ($237>>>0)<($238>>>0);
                                        if ($239) {
                                            _abort();
                                            // unreachable;
                                        } else {
                                            $$pre$phi$iZ2D = $236;$F1$0$i = $237;
                                        }
                                    }
                                    HEAP32[$$pre$phi$iZ2D>>2] = $227;
                                    $240 = ((($F1$0$i)) + 12|0);
                                    HEAP32[$240>>2] = $227;
                                    $241 = ((($227)) + 8|0);
                                    HEAP32[$241>>2] = $F1$0$i;
                                    $242 = ((($227)) + 12|0);
                                    HEAP32[$242>>2] = $230;
                                }
                                HEAP32[(3988)>>2] = $rsize$0$i$lcssa;
                                HEAP32[(4000)>>2] = $151;
                            }
                            $243 = ((($v$0$i$lcssa)) + 8|0);
                            $mem$0 = $243;
                            return ($mem$0|0);
                        }
                    } else {
                        $nb$0 = $4;
                    }
                } else {
                    $244 = ($bytes>>>0)>(4294967231);
                    if ($244) {
                        $nb$0 = -1;
                    } else {
                        $245 = (($bytes) + 11)|0;
                        $246 = $245 & -8;
                        $247 = HEAP32[(3984)>>2]|0;
                        $248 = ($247|0)==(0);
                        if ($248) {
                            $nb$0 = $246;
                        } else {
                            $249 = (0 - ($246))|0;
                            $250 = $245 >>> 8;
                            $251 = ($250|0)==(0);
                            if ($251) {
                                $idx$0$i = 0;
                            } else {
                                $252 = ($246>>>0)>(16777215);
                                if ($252) {
                                    $idx$0$i = 31;
                                } else {
                                    $253 = (($250) + 1048320)|0;
                                    $254 = $253 >>> 16;
                                    $255 = $254 & 8;
                                    $256 = $250 << $255;
                                    $257 = (($256) + 520192)|0;
                                    $258 = $257 >>> 16;
                                    $259 = $258 & 4;
                                    $260 = $259 | $255;
                                    $261 = $256 << $259;
                                    $262 = (($261) + 245760)|0;
                                    $263 = $262 >>> 16;
                                    $264 = $263 & 2;
                                    $265 = $260 | $264;
                                    $266 = (14 - ($265))|0;
                                    $267 = $261 << $264;
                                    $268 = $267 >>> 15;
                                    $269 = (($266) + ($268))|0;
                                    $270 = $269 << 1;
                                    $271 = (($269) + 7)|0;
                                    $272 = $246 >>> $271;
                                    $273 = $272 & 1;
                                    $274 = $273 | $270;
                                    $idx$0$i = $274;
                                }
                            }
                            $275 = (4284 + ($idx$0$i<<2)|0);
                            $276 = HEAP32[$275>>2]|0;
                            $277 = ($276|0)==(0|0);
                            L123: do {
                                if ($277) {
                                    $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
                                    label = 86;
                                } else {
                                    $278 = ($idx$0$i|0)==(31);
                                    $279 = $idx$0$i >>> 1;
                                    $280 = (25 - ($279))|0;
                                    $281 = $278 ? 0 : $280;
                                    $282 = $246 << $281;
                                    $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
                                    while(1) {
                                        $283 = ((($t$0$i14)) + 4|0);
                                        $284 = HEAP32[$283>>2]|0;
                                        $285 = $284 & -8;
                                        $286 = (($285) - ($246))|0;
                                        $287 = ($286>>>0)<($rsize$0$i15>>>0);
                                        if ($287) {
                                            $288 = ($285|0)==($246|0);
                                            if ($288) {
                                                $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
                                                label = 90;
                                                break L123;
                                            } else {
                                                $rsize$1$i = $286;$v$1$i = $t$0$i14;
                                            }
                                        } else {
                                            $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
                                        }
                                        $289 = ((($t$0$i14)) + 20|0);
                                        $290 = HEAP32[$289>>2]|0;
                                        $291 = $sizebits$0$i >>> 31;
                                        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
                                        $293 = HEAP32[$292>>2]|0;
                                        $294 = ($290|0)==(0|0);
                                        $295 = ($290|0)==($293|0);
                                        $or$cond19$i = $294 | $295;
                                        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
                                        $296 = ($293|0)==(0|0);
                                        $297 = $sizebits$0$i << 1;
                                        if ($296) {
                                            $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
                                            label = 86;
                                            break;
                                        } else {
                                            $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
                                        }
                                    }
                                }
                            } while(0);
                            if ((label|0) == 86) {
                                $298 = ($t$1$i|0)==(0|0);
                                $299 = ($v$2$i|0)==(0|0);
                                $or$cond$i = $298 & $299;
                                if ($or$cond$i) {
                                    $300 = 2 << $idx$0$i;
                                    $301 = (0 - ($300))|0;
                                    $302 = $300 | $301;
                                    $303 = $247 & $302;
                                    $304 = ($303|0)==(0);
                                    if ($304) {
                                        $nb$0 = $246;
                                        break;
                                    }
                                    $305 = (0 - ($303))|0;
                                    $306 = $303 & $305;
                                    $307 = (($306) + -1)|0;
                                    $308 = $307 >>> 12;
                                    $309 = $308 & 16;
                                    $310 = $307 >>> $309;
                                    $311 = $310 >>> 5;
                                    $312 = $311 & 8;
                                    $313 = $312 | $309;
                                    $314 = $310 >>> $312;
                                    $315 = $314 >>> 2;
                                    $316 = $315 & 4;
                                    $317 = $313 | $316;
                                    $318 = $314 >>> $316;
                                    $319 = $318 >>> 1;
                                    $320 = $319 & 2;
                                    $321 = $317 | $320;
                                    $322 = $318 >>> $320;
                                    $323 = $322 >>> 1;
                                    $324 = $323 & 1;
                                    $325 = $321 | $324;
                                    $326 = $322 >>> $324;
                                    $327 = (($325) + ($326))|0;
                                    $328 = (4284 + ($327<<2)|0);
                                    $329 = HEAP32[$328>>2]|0;
                                    $t$2$ph$i = $329;$v$3$ph$i = 0;
                                } else {
                                    $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
                                }
                                $330 = ($t$2$ph$i|0)==(0|0);
                                if ($330) {
                                    $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
                                } else {
                                    $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
                                    label = 90;
                                }
                            }
                            if ((label|0) == 90) {
                                while(1) {
                                    label = 0;
                                    $331 = ((($t$230$i)) + 4|0);
                                    $332 = HEAP32[$331>>2]|0;
                                    $333 = $332 & -8;
                                    $334 = (($333) - ($246))|0;
                                    $335 = ($334>>>0)<($rsize$331$i>>>0);
                                    $$rsize$3$i = $335 ? $334 : $rsize$331$i;
                                    $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
                                    $336 = ((($t$230$i)) + 16|0);
                                    $337 = HEAP32[$336>>2]|0;
                                    $338 = ($337|0)==(0|0);
                                    if (!($338)) {
                                        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
                                        label = 90;
                                        continue;
                                    }
                                    $339 = ((($t$230$i)) + 20|0);
                                    $340 = HEAP32[$339>>2]|0;
                                    $341 = ($340|0)==(0|0);
                                    if ($341) {
                                        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
                                        break;
                                    } else {
                                        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
                                        label = 90;
                                    }
                                }
                            }
                            $342 = ($v$3$lcssa$i|0)==(0|0);
                            if ($342) {
                                $nb$0 = $246;
                            } else {
                                $343 = HEAP32[(3988)>>2]|0;
                                $344 = (($343) - ($246))|0;
                                $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
                                if ($345) {
                                    $346 = HEAP32[(3996)>>2]|0;
                                    $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
                                    if ($347) {
                                        _abort();
                                        // unreachable;
                                    }
                                    $348 = (($v$3$lcssa$i) + ($246)|0);
                                    $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
                                    if (!($349)) {
                                        _abort();
                                        // unreachable;
                                    }
                                    $350 = ((($v$3$lcssa$i)) + 24|0);
                                    $351 = HEAP32[$350>>2]|0;
                                    $352 = ((($v$3$lcssa$i)) + 12|0);
                                    $353 = HEAP32[$352>>2]|0;
                                    $354 = ($353|0)==($v$3$lcssa$i|0);
                                    do {
                                        if ($354) {
                                            $364 = ((($v$3$lcssa$i)) + 20|0);
                                            $365 = HEAP32[$364>>2]|0;
                                            $366 = ($365|0)==(0|0);
                                            if ($366) {
                                                $367 = ((($v$3$lcssa$i)) + 16|0);
                                                $368 = HEAP32[$367>>2]|0;
                                                $369 = ($368|0)==(0|0);
                                                if ($369) {
                                                    $R$1$i20 = 0;
                                                    break;
                                                } else {
                                                    $R$0$i18 = $368;$RP$0$i17 = $367;
                                                }
                                            } else {
                                                $R$0$i18 = $365;$RP$0$i17 = $364;
                                            }
                                            while(1) {
                                                $370 = ((($R$0$i18)) + 20|0);
                                                $371 = HEAP32[$370>>2]|0;
                                                $372 = ($371|0)==(0|0);
                                                if (!($372)) {
                                                    $R$0$i18 = $371;$RP$0$i17 = $370;
                                                    continue;
                                                }
                                                $373 = ((($R$0$i18)) + 16|0);
                                                $374 = HEAP32[$373>>2]|0;
                                                $375 = ($374|0)==(0|0);
                                                if ($375) {
                                                    $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
                                                    break;
                                                } else {
                                                    $R$0$i18 = $374;$RP$0$i17 = $373;
                                                }
                                            }
                                            $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
                                            if ($376) {
                                                _abort();
                                                // unreachable;
                                            } else {
                                                HEAP32[$RP$0$i17$lcssa>>2] = 0;
                                                $R$1$i20 = $R$0$i18$lcssa;
                                                break;
                                            }
                                        } else {
                                            $355 = ((($v$3$lcssa$i)) + 8|0);
                                            $356 = HEAP32[$355>>2]|0;
                                            $357 = ($356>>>0)<($346>>>0);
                                            if ($357) {
                                                _abort();
                                                // unreachable;
                                            }
                                            $358 = ((($356)) + 12|0);
                                            $359 = HEAP32[$358>>2]|0;
                                            $360 = ($359|0)==($v$3$lcssa$i|0);
                                            if (!($360)) {
                                                _abort();
                                                // unreachable;
                                            }
                                            $361 = ((($353)) + 8|0);
                                            $362 = HEAP32[$361>>2]|0;
                                            $363 = ($362|0)==($v$3$lcssa$i|0);
                                            if ($363) {
                                                HEAP32[$358>>2] = $353;
                                                HEAP32[$361>>2] = $356;
                                                $R$1$i20 = $353;
                                                break;
                                            } else {
                                                _abort();
                                                // unreachable;
                                            }
                                        }
                                    } while(0);
                                    $377 = ($351|0)==(0|0);
                                    do {
                                        if (!($377)) {
                                            $378 = ((($v$3$lcssa$i)) + 28|0);
                                            $379 = HEAP32[$378>>2]|0;
                                            $380 = (4284 + ($379<<2)|0);
                                            $381 = HEAP32[$380>>2]|0;
                                            $382 = ($v$3$lcssa$i|0)==($381|0);
                                            if ($382) {
                                                HEAP32[$380>>2] = $R$1$i20;
                                                $cond$i21 = ($R$1$i20|0)==(0|0);
                                                if ($cond$i21) {
                                                    $383 = 1 << $379;
                                                    $384 = $383 ^ -1;
                                                    $385 = HEAP32[(3984)>>2]|0;
                                                    $386 = $385 & $384;
                                                    HEAP32[(3984)>>2] = $386;
                                                    break;
                                                }
                                            } else {
                                                $387 = HEAP32[(3996)>>2]|0;
                                                $388 = ($351>>>0)<($387>>>0);
                                                if ($388) {
                                                    _abort();
                                                    // unreachable;
                                                }
                                                $389 = ((($351)) + 16|0);
                                                $390 = HEAP32[$389>>2]|0;
                                                $391 = ($390|0)==($v$3$lcssa$i|0);
                                                if ($391) {
                                                    HEAP32[$389>>2] = $R$1$i20;
                                                } else {
                                                    $392 = ((($351)) + 20|0);
                                                    HEAP32[$392>>2] = $R$1$i20;
                                                }
                                                $393 = ($R$1$i20|0)==(0|0);
                                                if ($393) {
                                                    break;
                                                }
                                            }
                                            $394 = HEAP32[(3996)>>2]|0;
                                            $395 = ($R$1$i20>>>0)<($394>>>0);
                                            if ($395) {
                                                _abort();
                                                // unreachable;
                                            }
                                            $396 = ((($R$1$i20)) + 24|0);
                                            HEAP32[$396>>2] = $351;
                                            $397 = ((($v$3$lcssa$i)) + 16|0);
                                            $398 = HEAP32[$397>>2]|0;
                                            $399 = ($398|0)==(0|0);
                                            do {
                                                if (!($399)) {
                                                    $400 = ($398>>>0)<($394>>>0);
                                                    if ($400) {
                                                        _abort();
                                                        // unreachable;
                                                    } else {
                                                        $401 = ((($R$1$i20)) + 16|0);
                                                        HEAP32[$401>>2] = $398;
                                                        $402 = ((($398)) + 24|0);
                                                        HEAP32[$402>>2] = $R$1$i20;
                                                        break;
                                                    }
                                                }
                                            } while(0);
                                            $403 = ((($v$3$lcssa$i)) + 20|0);
                                            $404 = HEAP32[$403>>2]|0;
                                            $405 = ($404|0)==(0|0);
                                            if (!($405)) {
                                                $406 = HEAP32[(3996)>>2]|0;
                                                $407 = ($404>>>0)<($406>>>0);
                                                if ($407) {
                                                    _abort();
                                                    // unreachable;
                                                } else {
                                                    $408 = ((($R$1$i20)) + 20|0);
                                                    HEAP32[$408>>2] = $404;
                                                    $409 = ((($404)) + 24|0);
                                                    HEAP32[$409>>2] = $R$1$i20;
                                                    break;
                                                }
                                            }
                                        }
                                    } while(0);
                                    $410 = ($rsize$3$lcssa$i>>>0)<(16);
                                    L199: do {
                                        if ($410) {
                                            $411 = (($rsize$3$lcssa$i) + ($246))|0;
                                            $412 = $411 | 3;
                                            $413 = ((($v$3$lcssa$i)) + 4|0);
                                            HEAP32[$413>>2] = $412;
                                            $$sum18$i = (($411) + 4)|0;
                                            $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
                                            $415 = HEAP32[$414>>2]|0;
                                            $416 = $415 | 1;
                                            HEAP32[$414>>2] = $416;
                                        } else {
                                            $417 = $246 | 3;
                                            $418 = ((($v$3$lcssa$i)) + 4|0);
                                            HEAP32[$418>>2] = $417;
                                            $419 = $rsize$3$lcssa$i | 1;
                                            $$sum$i2334 = $246 | 4;
                                            $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
                                            HEAP32[$420>>2] = $419;
                                            $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
                                            $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
                                            HEAP32[$421>>2] = $rsize$3$lcssa$i;
                                            $422 = $rsize$3$lcssa$i >>> 3;
                                            $423 = ($rsize$3$lcssa$i>>>0)<(256);
                                            if ($423) {
                                                $424 = $422 << 1;
                                                $425 = (4020 + ($424<<2)|0);
                                                $426 = HEAP32[3980>>2]|0;
                                                $427 = 1 << $422;
                                                $428 = $426 & $427;
                                                $429 = ($428|0)==(0);
                                                if ($429) {
                                                    $430 = $426 | $427;
                                                    HEAP32[3980>>2] = $430;
                                                    $$pre$i25 = (($424) + 2)|0;
                                                    $$pre43$i = (4020 + ($$pre$i25<<2)|0);
                                                    $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
                                                } else {
                                                    $$sum17$i = (($424) + 2)|0;
                                                    $431 = (4020 + ($$sum17$i<<2)|0);
                                                    $432 = HEAP32[$431>>2]|0;
                                                    $433 = HEAP32[(3996)>>2]|0;
                                                    $434 = ($432>>>0)<($433>>>0);
                                                    if ($434) {
                                                        _abort();
                                                        // unreachable;
                                                    } else {
                                                        $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
                                                    }
                                                }
                                                HEAP32[$$pre$phi$i26Z2D>>2] = $348;
                                                $435 = ((($F5$0$i)) + 12|0);
                                                HEAP32[$435>>2] = $348;
                                                $$sum15$i = (($246) + 8)|0;
                                                $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
                                                HEAP32[$436>>2] = $F5$0$i;
                                                $$sum16$i = (($246) + 12)|0;
                                                $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
                                                HEAP32[$437>>2] = $425;
                                                break;
                                            }
                                            $438 = $rsize$3$lcssa$i >>> 8;
                                            $439 = ($438|0)==(0);
                                            if ($439) {
                                                $I7$0$i = 0;
                                            } else {
                                                $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
                                                if ($440) {
                                                    $I7$0$i = 31;
                                                } else {
                                                    $441 = (($438) + 1048320)|0;
                                                    $442 = $441 >>> 16;
                                                    $443 = $442 & 8;
                                                    $444 = $438 << $443;
                                                    $445 = (($444) + 520192)|0;
                                                    $446 = $445 >>> 16;
                                                    $447 = $446 & 4;
                                                    $448 = $447 | $443;
                                                    $449 = $444 << $447;
                                                    $450 = (($449) + 245760)|0;
                                                    $451 = $450 >>> 16;
                                                    $452 = $451 & 2;
                                                    $453 = $448 | $452;
                                                    $454 = (14 - ($453))|0;
                                                    $455 = $449 << $452;
                                                    $456 = $455 >>> 15;
                                                    $457 = (($454) + ($456))|0;
                                                    $458 = $457 << 1;
                                                    $459 = (($457) + 7)|0;
                                                    $460 = $rsize$3$lcssa$i >>> $459;
                                                    $461 = $460 & 1;
                                                    $462 = $461 | $458;
                                                    $I7$0$i = $462;
                                                }
                                            }
                                            $463 = (4284 + ($I7$0$i<<2)|0);
                                            $$sum2$i = (($246) + 28)|0;
                                            $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
                                            HEAP32[$464>>2] = $I7$0$i;
                                            $$sum3$i27 = (($246) + 16)|0;
                                            $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
                                            $$sum4$i28 = (($246) + 20)|0;
                                            $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
                                            HEAP32[$466>>2] = 0;
                                            HEAP32[$465>>2] = 0;
                                            $467 = HEAP32[(3984)>>2]|0;
                                            $468 = 1 << $I7$0$i;
                                            $469 = $467 & $468;
                                            $470 = ($469|0)==(0);
                                            if ($470) {
                                                $471 = $467 | $468;
                                                HEAP32[(3984)>>2] = $471;
                                                HEAP32[$463>>2] = $348;
                                                $$sum5$i = (($246) + 24)|0;
                                                $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
                                                HEAP32[$472>>2] = $463;
                                                $$sum6$i = (($246) + 12)|0;
                                                $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
                                                HEAP32[$473>>2] = $348;
                                                $$sum7$i = (($246) + 8)|0;
                                                $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
                                                HEAP32[$474>>2] = $348;
                                                break;
                                            }
                                            $475 = HEAP32[$463>>2]|0;
                                            $476 = ((($475)) + 4|0);
                                            $477 = HEAP32[$476>>2]|0;
                                            $478 = $477 & -8;
                                            $479 = ($478|0)==($rsize$3$lcssa$i|0);
                                            L217: do {
                                                if ($479) {
                                                    $T$0$lcssa$i = $475;
                                                } else {
                                                    $480 = ($I7$0$i|0)==(31);
                                                    $481 = $I7$0$i >>> 1;
                                                    $482 = (25 - ($481))|0;
                                                    $483 = $480 ? 0 : $482;
                                                    $484 = $rsize$3$lcssa$i << $483;
                                                    $K12$029$i = $484;$T$028$i = $475;
                                                    while(1) {
                                                        $491 = $K12$029$i >>> 31;
                                                        $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
                                                        $487 = HEAP32[$492>>2]|0;
                                                        $493 = ($487|0)==(0|0);
                                                        if ($493) {
                                                            $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
                                                            break;
                                                        }
                                                        $485 = $K12$029$i << 1;
                                                        $486 = ((($487)) + 4|0);
                                                        $488 = HEAP32[$486>>2]|0;
                                                        $489 = $488 & -8;
                                                        $490 = ($489|0)==($rsize$3$lcssa$i|0);
                                                        if ($490) {
                                                            $T$0$lcssa$i = $487;
                                                            break L217;
                                                        } else {
                                                            $K12$029$i = $485;$T$028$i = $487;
                                                        }
                                                    }
                                                    $494 = HEAP32[(3996)>>2]|0;
                                                    $495 = ($$lcssa232>>>0)<($494>>>0);
                                                    if ($495) {
                                                        _abort();
                                                        // unreachable;
                                                    } else {
                                                        HEAP32[$$lcssa232>>2] = $348;
                                                        $$sum11$i = (($246) + 24)|0;
                                                        $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
                                                        HEAP32[$496>>2] = $T$028$i$lcssa;
                                                        $$sum12$i = (($246) + 12)|0;
                                                        $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
                                                        HEAP32[$497>>2] = $348;
                                                        $$sum13$i = (($246) + 8)|0;
                                                        $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
                                                        HEAP32[$498>>2] = $348;
                                                        break L199;
                                                    }
                                                }
                                            } while(0);
                                            $499 = ((($T$0$lcssa$i)) + 8|0);
                                            $500 = HEAP32[$499>>2]|0;
                                            $501 = HEAP32[(3996)>>2]|0;
                                            $502 = ($500>>>0)>=($501>>>0);
                                            $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
                                            $503 = $502 & $not$$i;
                                            if ($503) {
                                                $504 = ((($500)) + 12|0);
                                                HEAP32[$504>>2] = $348;
                                                HEAP32[$499>>2] = $348;
                                                $$sum8$i = (($246) + 8)|0;
                                                $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
                                                HEAP32[$505>>2] = $500;
                                                $$sum9$i = (($246) + 12)|0;
                                                $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
                                                HEAP32[$506>>2] = $T$0$lcssa$i;
                                                $$sum10$i = (($246) + 24)|0;
                                                $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
                                                HEAP32[$507>>2] = 0;
                                                break;
                                            } else {
                                                _abort();
                                                // unreachable;
                                            }
                                        }
                                    } while(0);
                                    $508 = ((($v$3$lcssa$i)) + 8|0);
                                    $mem$0 = $508;
                                    return ($mem$0|0);
                                } else {
                                    $nb$0 = $246;
                                }
                            }
                        }
                    }
                }
            } while(0);
            $509 = HEAP32[(3988)>>2]|0;
            $510 = ($509>>>0)<($nb$0>>>0);
            if (!($510)) {
                $511 = (($509) - ($nb$0))|0;
                $512 = HEAP32[(4000)>>2]|0;
                $513 = ($511>>>0)>(15);
                if ($513) {
                    $514 = (($512) + ($nb$0)|0);
                    HEAP32[(4000)>>2] = $514;
                    HEAP32[(3988)>>2] = $511;
                    $515 = $511 | 1;
                    $$sum2 = (($nb$0) + 4)|0;
                    $516 = (($512) + ($$sum2)|0);
                    HEAP32[$516>>2] = $515;
                    $517 = (($512) + ($509)|0);
                    HEAP32[$517>>2] = $511;
                    $518 = $nb$0 | 3;
                    $519 = ((($512)) + 4|0);
                    HEAP32[$519>>2] = $518;
                } else {
                    HEAP32[(3988)>>2] = 0;
                    HEAP32[(4000)>>2] = 0;
                    $520 = $509 | 3;
                    $521 = ((($512)) + 4|0);
                    HEAP32[$521>>2] = $520;
                    $$sum1 = (($509) + 4)|0;
                    $522 = (($512) + ($$sum1)|0);
                    $523 = HEAP32[$522>>2]|0;
                    $524 = $523 | 1;
                    HEAP32[$522>>2] = $524;
                }
                $525 = ((($512)) + 8|0);
                $mem$0 = $525;
                return ($mem$0|0);
            }
            $526 = HEAP32[(3992)>>2]|0;
            $527 = ($526>>>0)>($nb$0>>>0);
            if ($527) {
                $528 = (($526) - ($nb$0))|0;
                HEAP32[(3992)>>2] = $528;
                $529 = HEAP32[(4004)>>2]|0;
                $530 = (($529) + ($nb$0)|0);
                HEAP32[(4004)>>2] = $530;
                $531 = $528 | 1;
                $$sum = (($nb$0) + 4)|0;
                $532 = (($529) + ($$sum)|0);
                HEAP32[$532>>2] = $531;
                $533 = $nb$0 | 3;
                $534 = ((($529)) + 4|0);
                HEAP32[$534>>2] = $533;
                $535 = ((($529)) + 8|0);
                $mem$0 = $535;
                return ($mem$0|0);
            }
            $536 = HEAP32[4452>>2]|0;
            $537 = ($536|0)==(0);
            do {
                if ($537) {
                    $538 = (_sysconf(30)|0);
                    $539 = (($538) + -1)|0;
                    $540 = $539 & $538;
                    $541 = ($540|0)==(0);
                    if ($541) {
                        HEAP32[(4460)>>2] = $538;
                        HEAP32[(4456)>>2] = $538;
                        HEAP32[(4464)>>2] = -1;
                        HEAP32[(4468)>>2] = -1;
                        HEAP32[(4472)>>2] = 0;
                        HEAP32[(4424)>>2] = 0;
                        $542 = (_time((0|0))|0);
                        $543 = $542 & -16;
                        $544 = $543 ^ 1431655768;
                        HEAP32[4452>>2] = $544;
                        break;
                    } else {
                        _abort();
                        // unreachable;
                    }
                }
            } while(0);
            $545 = (($nb$0) + 48)|0;
            $546 = HEAP32[(4460)>>2]|0;
            $547 = (($nb$0) + 47)|0;
            $548 = (($546) + ($547))|0;
            $549 = (0 - ($546))|0;
            $550 = $548 & $549;
            $551 = ($550>>>0)>($nb$0>>>0);
            if (!($551)) {
                $mem$0 = 0;
                return ($mem$0|0);
            }
            $552 = HEAP32[(4420)>>2]|0;
            $553 = ($552|0)==(0);
            if (!($553)) {
                $554 = HEAP32[(4412)>>2]|0;
                $555 = (($554) + ($550))|0;
                $556 = ($555>>>0)<=($554>>>0);
                $557 = ($555>>>0)>($552>>>0);
                $or$cond1$i = $556 | $557;
                if ($or$cond1$i) {
                    $mem$0 = 0;
                    return ($mem$0|0);
                }
            }
            $558 = HEAP32[(4424)>>2]|0;
            $559 = $558 & 4;
            $560 = ($559|0)==(0);
            L258: do {
                if ($560) {
                    $561 = HEAP32[(4004)>>2]|0;
                    $562 = ($561|0)==(0|0);
                    L260: do {
                        if ($562) {
                            label = 174;
                        } else {
                            $sp$0$i$i = (4428);
                            while(1) {
                                $563 = HEAP32[$sp$0$i$i>>2]|0;
                                $564 = ($563>>>0)>($561>>>0);
                                if (!($564)) {
                                    $565 = ((($sp$0$i$i)) + 4|0);
                                    $566 = HEAP32[$565>>2]|0;
                                    $567 = (($563) + ($566)|0);
                                    $568 = ($567>>>0)>($561>>>0);
                                    if ($568) {
                                        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
                                        break;
                                    }
                                }
                                $569 = ((($sp$0$i$i)) + 8|0);
                                $570 = HEAP32[$569>>2]|0;
                                $571 = ($570|0)==(0|0);
                                if ($571) {
                                    label = 174;
                                    break L260;
                                } else {
                                    $sp$0$i$i = $570;
                                }
                            }
                            $594 = HEAP32[(3992)>>2]|0;
                            $595 = (($548) - ($594))|0;
                            $596 = $595 & $549;
                            $597 = ($596>>>0)<(2147483647);
                            if ($597) {
                                $598 = (_sbrk(($596|0))|0);
                                $599 = HEAP32[$$lcssa228>>2]|0;
                                $600 = HEAP32[$$lcssa230>>2]|0;
                                $601 = (($599) + ($600)|0);
                                $602 = ($598|0)==($601|0);
                                $$3$i = $602 ? $596 : 0;
                                if ($602) {
                                    $603 = ($598|0)==((-1)|0);
                                    if ($603) {
                                        $tsize$0323944$i = $$3$i;
                                    } else {
                                        $tbase$255$i = $598;$tsize$254$i = $$3$i;
                                        label = 194;
                                        break L258;
                                    }
                                } else {
                                    $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
                                    label = 184;
                                }
                            } else {
                                $tsize$0323944$i = 0;
                            }
                        }
                    } while(0);
                    do {
                        if ((label|0) == 174) {
                            $572 = (_sbrk(0)|0);
                            $573 = ($572|0)==((-1)|0);
                            if ($573) {
                                $tsize$0323944$i = 0;
                            } else {
                                $574 = $572;
                                $575 = HEAP32[(4456)>>2]|0;
                                $576 = (($575) + -1)|0;
                                $577 = $576 & $574;
                                $578 = ($577|0)==(0);
                                if ($578) {
                                    $ssize$0$i = $550;
                                } else {
                                    $579 = (($576) + ($574))|0;
                                    $580 = (0 - ($575))|0;
                                    $581 = $579 & $580;
                                    $582 = (($550) - ($574))|0;
                                    $583 = (($582) + ($581))|0;
                                    $ssize$0$i = $583;
                                }
                                $584 = HEAP32[(4412)>>2]|0;
                                $585 = (($584) + ($ssize$0$i))|0;
                                $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
                                $587 = ($ssize$0$i>>>0)<(2147483647);
                                $or$cond$i30 = $586 & $587;
                                if ($or$cond$i30) {
                                    $588 = HEAP32[(4420)>>2]|0;
                                    $589 = ($588|0)==(0);
                                    if (!($589)) {
                                        $590 = ($585>>>0)<=($584>>>0);
                                        $591 = ($585>>>0)>($588>>>0);
                                        $or$cond2$i = $590 | $591;
                                        if ($or$cond2$i) {
                                            $tsize$0323944$i = 0;
                                            break;
                                        }
                                    }
                                    $592 = (_sbrk(($ssize$0$i|0))|0);
                                    $593 = ($592|0)==($572|0);
                                    $ssize$0$$i = $593 ? $ssize$0$i : 0;
                                    if ($593) {
                                        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
                                        label = 194;
                                        break L258;
                                    } else {
                                        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
                                        label = 184;
                                    }
                                } else {
                                    $tsize$0323944$i = 0;
                                }
                            }
                        }
                    } while(0);
                    L280: do {
                        if ((label|0) == 184) {
                            $604 = (0 - ($ssize$1$ph$i))|0;
                            $605 = ($br$0$ph$i|0)!=((-1)|0);
                            $606 = ($ssize$1$ph$i>>>0)<(2147483647);
                            $or$cond5$i = $606 & $605;
                            $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
                            $or$cond6$i = $607 & $or$cond5$i;
                            do {
                                if ($or$cond6$i) {
                                    $608 = HEAP32[(4460)>>2]|0;
                                    $609 = (($547) - ($ssize$1$ph$i))|0;
                                    $610 = (($609) + ($608))|0;
                                    $611 = (0 - ($608))|0;
                                    $612 = $610 & $611;
                                    $613 = ($612>>>0)<(2147483647);
                                    if ($613) {
                                        $614 = (_sbrk(($612|0))|0);
                                        $615 = ($614|0)==((-1)|0);
                                        if ($615) {
                                            (_sbrk(($604|0))|0);
                                            $tsize$0323944$i = $tsize$0$ph$i;
                                            break L280;
                                        } else {
                                            $616 = (($612) + ($ssize$1$ph$i))|0;
                                            $ssize$2$i = $616;
                                            break;
                                        }
                                    } else {
                                        $ssize$2$i = $ssize$1$ph$i;
                                    }
                                } else {
                                    $ssize$2$i = $ssize$1$ph$i;
                                }
                            } while(0);
                            $617 = ($br$0$ph$i|0)==((-1)|0);
                            if ($617) {
                                $tsize$0323944$i = $tsize$0$ph$i;
                            } else {
                                $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
                                label = 194;
                                break L258;
                            }
                        }
                    } while(0);
                    $618 = HEAP32[(4424)>>2]|0;
                    $619 = $618 | 4;
                    HEAP32[(4424)>>2] = $619;
                    $tsize$1$i = $tsize$0323944$i;
                    label = 191;
                } else {
                    $tsize$1$i = 0;
                    label = 191;
                }
            } while(0);
            if ((label|0) == 191) {
                $620 = ($550>>>0)<(2147483647);
                if ($620) {
                    $621 = (_sbrk(($550|0))|0);
                    $622 = (_sbrk(0)|0);
                    $623 = ($621|0)!=((-1)|0);
                    $624 = ($622|0)!=((-1)|0);
                    $or$cond3$i = $623 & $624;
                    $625 = ($621>>>0)<($622>>>0);
                    $or$cond8$i = $625 & $or$cond3$i;
                    if ($or$cond8$i) {
                        $626 = $622;
                        $627 = $621;
                        $628 = (($626) - ($627))|0;
                        $629 = (($nb$0) + 40)|0;
                        $630 = ($628>>>0)>($629>>>0);
                        $$tsize$1$i = $630 ? $628 : $tsize$1$i;
                        if ($630) {
                            $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
                            label = 194;
                        }
                    }
                }
            }
            if ((label|0) == 194) {
                $631 = HEAP32[(4412)>>2]|0;
                $632 = (($631) + ($tsize$254$i))|0;
                HEAP32[(4412)>>2] = $632;
                $633 = HEAP32[(4416)>>2]|0;
                $634 = ($632>>>0)>($633>>>0);
                if ($634) {
                    HEAP32[(4416)>>2] = $632;
                }
                $635 = HEAP32[(4004)>>2]|0;
                $636 = ($635|0)==(0|0);
                L299: do {
                    if ($636) {
                        $637 = HEAP32[(3996)>>2]|0;
                        $638 = ($637|0)==(0|0);
                        $639 = ($tbase$255$i>>>0)<($637>>>0);
                        $or$cond9$i = $638 | $639;
                        if ($or$cond9$i) {
                            HEAP32[(3996)>>2] = $tbase$255$i;
                        }
                        HEAP32[(4428)>>2] = $tbase$255$i;
                        HEAP32[(4432)>>2] = $tsize$254$i;
                        HEAP32[(4440)>>2] = 0;
                        $640 = HEAP32[4452>>2]|0;
                        HEAP32[(4016)>>2] = $640;
                        HEAP32[(4012)>>2] = -1;
                        $i$02$i$i = 0;
                        while(1) {
                            $641 = $i$02$i$i << 1;
                            $642 = (4020 + ($641<<2)|0);
                            $$sum$i$i = (($641) + 3)|0;
                            $643 = (4020 + ($$sum$i$i<<2)|0);
                            HEAP32[$643>>2] = $642;
                            $$sum1$i$i = (($641) + 2)|0;
                            $644 = (4020 + ($$sum1$i$i<<2)|0);
                            HEAP32[$644>>2] = $642;
                            $645 = (($i$02$i$i) + 1)|0;
                            $exitcond$i$i = ($645|0)==(32);
                            if ($exitcond$i$i) {
                                break;
                            } else {
                                $i$02$i$i = $645;
                            }
                        }
                        $646 = (($tsize$254$i) + -40)|0;
                        $647 = ((($tbase$255$i)) + 8|0);
                        $648 = $647;
                        $649 = $648 & 7;
                        $650 = ($649|0)==(0);
                        $651 = (0 - ($648))|0;
                        $652 = $651 & 7;
                        $653 = $650 ? 0 : $652;
                        $654 = (($tbase$255$i) + ($653)|0);
                        $655 = (($646) - ($653))|0;
                        HEAP32[(4004)>>2] = $654;
                        HEAP32[(3992)>>2] = $655;
                        $656 = $655 | 1;
                        $$sum$i13$i = (($653) + 4)|0;
                        $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
                        HEAP32[$657>>2] = $656;
                        $$sum2$i$i = (($tsize$254$i) + -36)|0;
                        $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
                        HEAP32[$658>>2] = 40;
                        $659 = HEAP32[(4468)>>2]|0;
                        HEAP32[(4008)>>2] = $659;
                    } else {
                        $sp$084$i = (4428);
                        while(1) {
                            $660 = HEAP32[$sp$084$i>>2]|0;
                            $661 = ((($sp$084$i)) + 4|0);
                            $662 = HEAP32[$661>>2]|0;
                            $663 = (($660) + ($662)|0);
                            $664 = ($tbase$255$i|0)==($663|0);
                            if ($664) {
                                $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
                                label = 204;
                                break;
                            }
                            $665 = ((($sp$084$i)) + 8|0);
                            $666 = HEAP32[$665>>2]|0;
                            $667 = ($666|0)==(0|0);
                            if ($667) {
                                break;
                            } else {
                                $sp$084$i = $666;
                            }
                        }
                        if ((label|0) == 204) {
                            $668 = ((($sp$084$i$lcssa)) + 12|0);
                            $669 = HEAP32[$668>>2]|0;
                            $670 = $669 & 8;
                            $671 = ($670|0)==(0);
                            if ($671) {
                                $672 = ($635>>>0)>=($$lcssa222>>>0);
                                $673 = ($635>>>0)<($tbase$255$i>>>0);
                                $or$cond57$i = $673 & $672;
                                if ($or$cond57$i) {
                                    $674 = (($$lcssa226) + ($tsize$254$i))|0;
                                    HEAP32[$$lcssa224>>2] = $674;
                                    $675 = HEAP32[(3992)>>2]|0;
                                    $676 = (($675) + ($tsize$254$i))|0;
                                    $677 = ((($635)) + 8|0);
                                    $678 = $677;
                                    $679 = $678 & 7;
                                    $680 = ($679|0)==(0);
                                    $681 = (0 - ($678))|0;
                                    $682 = $681 & 7;
                                    $683 = $680 ? 0 : $682;
                                    $684 = (($635) + ($683)|0);
                                    $685 = (($676) - ($683))|0;
                                    HEAP32[(4004)>>2] = $684;
                                    HEAP32[(3992)>>2] = $685;
                                    $686 = $685 | 1;
                                    $$sum$i17$i = (($683) + 4)|0;
                                    $687 = (($635) + ($$sum$i17$i)|0);
                                    HEAP32[$687>>2] = $686;
                                    $$sum2$i18$i = (($676) + 4)|0;
                                    $688 = (($635) + ($$sum2$i18$i)|0);
                                    HEAP32[$688>>2] = 40;
                                    $689 = HEAP32[(4468)>>2]|0;
                                    HEAP32[(4008)>>2] = $689;
                                    break;
                                }
                            }
                        }
                        $690 = HEAP32[(3996)>>2]|0;
                        $691 = ($tbase$255$i>>>0)<($690>>>0);
                        if ($691) {
                            HEAP32[(3996)>>2] = $tbase$255$i;
                            $755 = $tbase$255$i;
                        } else {
                            $755 = $690;
                        }
                        $692 = (($tbase$255$i) + ($tsize$254$i)|0);
                        $sp$183$i = (4428);
                        while(1) {
                            $693 = HEAP32[$sp$183$i>>2]|0;
                            $694 = ($693|0)==($692|0);
                            if ($694) {
                                $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
                                label = 212;
                                break;
                            }
                            $695 = ((($sp$183$i)) + 8|0);
                            $696 = HEAP32[$695>>2]|0;
                            $697 = ($696|0)==(0|0);
                            if ($697) {
                                $sp$0$i$i$i = (4428);
                                break;
                            } else {
                                $sp$183$i = $696;
                            }
                        }
                        if ((label|0) == 212) {
                            $698 = ((($sp$183$i$lcssa)) + 12|0);
                            $699 = HEAP32[$698>>2]|0;
                            $700 = $699 & 8;
                            $701 = ($700|0)==(0);
                            if ($701) {
                                HEAP32[$$lcssa219>>2] = $tbase$255$i;
                                $702 = ((($sp$183$i$lcssa)) + 4|0);
                                $703 = HEAP32[$702>>2]|0;
                                $704 = (($703) + ($tsize$254$i))|0;
                                HEAP32[$702>>2] = $704;
                                $705 = ((($tbase$255$i)) + 8|0);
                                $706 = $705;
                                $707 = $706 & 7;
                                $708 = ($707|0)==(0);
                                $709 = (0 - ($706))|0;
                                $710 = $709 & 7;
                                $711 = $708 ? 0 : $710;
                                $712 = (($tbase$255$i) + ($711)|0);
                                $$sum112$i = (($tsize$254$i) + 8)|0;
                                $713 = (($tbase$255$i) + ($$sum112$i)|0);
                                $714 = $713;
                                $715 = $714 & 7;
                                $716 = ($715|0)==(0);
                                $717 = (0 - ($714))|0;
                                $718 = $717 & 7;
                                $719 = $716 ? 0 : $718;
                                $$sum113$i = (($719) + ($tsize$254$i))|0;
                                $720 = (($tbase$255$i) + ($$sum113$i)|0);
                                $721 = $720;
                                $722 = $712;
                                $723 = (($721) - ($722))|0;
                                $$sum$i19$i = (($711) + ($nb$0))|0;
                                $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
                                $725 = (($723) - ($nb$0))|0;
                                $726 = $nb$0 | 3;
                                $$sum1$i20$i = (($711) + 4)|0;
                                $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
                                HEAP32[$727>>2] = $726;
                                $728 = ($720|0)==($635|0);
                                L324: do {
                                    if ($728) {
                                        $729 = HEAP32[(3992)>>2]|0;
                                        $730 = (($729) + ($725))|0;
                                        HEAP32[(3992)>>2] = $730;
                                        HEAP32[(4004)>>2] = $724;
                                        $731 = $730 | 1;
                                        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
                                        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
                                        HEAP32[$732>>2] = $731;
                                    } else {
                                        $733 = HEAP32[(4000)>>2]|0;
                                        $734 = ($720|0)==($733|0);
                                        if ($734) {
                                            $735 = HEAP32[(3988)>>2]|0;
                                            $736 = (($735) + ($725))|0;
                                            HEAP32[(3988)>>2] = $736;
                                            HEAP32[(4000)>>2] = $724;
                                            $737 = $736 | 1;
                                            $$sum40$i$i = (($$sum$i19$i) + 4)|0;
                                            $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
                                            HEAP32[$738>>2] = $737;
                                            $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
                                            $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
                                            HEAP32[$739>>2] = $736;
                                            break;
                                        }
                                        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
                                        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
                                        $740 = (($tbase$255$i) + ($$sum114$i)|0);
                                        $741 = HEAP32[$740>>2]|0;
                                        $742 = $741 & 3;
                                        $743 = ($742|0)==(1);
                                        if ($743) {
                                            $744 = $741 & -8;
                                            $745 = $741 >>> 3;
                                            $746 = ($741>>>0)<(256);
                                            L332: do {
                                                if ($746) {
                                                    $$sum3738$i$i = $719 | 8;
                                                    $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
                                                    $747 = (($tbase$255$i) + ($$sum124$i)|0);
                                                    $748 = HEAP32[$747>>2]|0;
                                                    $$sum39$i$i = (($tsize$254$i) + 12)|0;
                                                    $$sum125$i = (($$sum39$i$i) + ($719))|0;
                                                    $749 = (($tbase$255$i) + ($$sum125$i)|0);
                                                    $750 = HEAP32[$749>>2]|0;
                                                    $751 = $745 << 1;
                                                    $752 = (4020 + ($751<<2)|0);
                                                    $753 = ($748|0)==($752|0);
                                                    do {
                                                        if (!($753)) {
                                                            $754 = ($748>>>0)<($755>>>0);
                                                            if ($754) {
                                                                _abort();
                                                                // unreachable;
                                                            }
                                                            $756 = ((($748)) + 12|0);
                                                            $757 = HEAP32[$756>>2]|0;
                                                            $758 = ($757|0)==($720|0);
                                                            if ($758) {
                                                                break;
                                                            }
                                                            _abort();
                                                            // unreachable;
                                                        }
                                                    } while(0);
                                                    $759 = ($750|0)==($748|0);
                                                    if ($759) {
                                                        $760 = 1 << $745;
                                                        $761 = $760 ^ -1;
                                                        $762 = HEAP32[3980>>2]|0;
                                                        $763 = $762 & $761;
                                                        HEAP32[3980>>2] = $763;
                                                        break;
                                                    }
                                                    $764 = ($750|0)==($752|0);
                                                    do {
                                                        if ($764) {
                                                            $$pre57$i$i = ((($750)) + 8|0);
                                                            $$pre$phi58$i$iZ2D = $$pre57$i$i;
                                                        } else {
                                                            $765 = ($750>>>0)<($755>>>0);
                                                            if ($765) {
                                                                _abort();
                                                                // unreachable;
                                                            }
                                                            $766 = ((($750)) + 8|0);
                                                            $767 = HEAP32[$766>>2]|0;
                                                            $768 = ($767|0)==($720|0);
                                                            if ($768) {
                                                                $$pre$phi58$i$iZ2D = $766;
                                                                break;
                                                            }
                                                            _abort();
                                                            // unreachable;
                                                        }
                                                    } while(0);
                                                    $769 = ((($748)) + 12|0);
                                                    HEAP32[$769>>2] = $750;
                                                    HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
                                                } else {
                                                    $$sum34$i$i = $719 | 24;
                                                    $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
                                                    $770 = (($tbase$255$i) + ($$sum115$i)|0);
                                                    $771 = HEAP32[$770>>2]|0;
                                                    $$sum5$i$i = (($tsize$254$i) + 12)|0;
                                                    $$sum116$i = (($$sum5$i$i) + ($719))|0;
                                                    $772 = (($tbase$255$i) + ($$sum116$i)|0);
                                                    $773 = HEAP32[$772>>2]|0;
                                                    $774 = ($773|0)==($720|0);
                                                    do {
                                                        if ($774) {
                                                            $$sum67$i$i = $719 | 16;
                                                            $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
                                                            $784 = (($tbase$255$i) + ($$sum122$i)|0);
                                                            $785 = HEAP32[$784>>2]|0;
                                                            $786 = ($785|0)==(0|0);
                                                            if ($786) {
                                                                $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
                                                                $787 = (($tbase$255$i) + ($$sum123$i)|0);
                                                                $788 = HEAP32[$787>>2]|0;
                                                                $789 = ($788|0)==(0|0);
                                                                if ($789) {
                                                                    $R$1$i$i = 0;
                                                                    break;
                                                                } else {
                                                                    $R$0$i$i = $788;$RP$0$i$i = $787;
                                                                }
                                                            } else {
                                                                $R$0$i$i = $785;$RP$0$i$i = $784;
                                                            }
                                                            while(1) {
                                                                $790 = ((($R$0$i$i)) + 20|0);
                                                                $791 = HEAP32[$790>>2]|0;
                                                                $792 = ($791|0)==(0|0);
                                                                if (!($792)) {
                                                                    $R$0$i$i = $791;$RP$0$i$i = $790;
                                                                    continue;
                                                                }
                                                                $793 = ((($R$0$i$i)) + 16|0);
                                                                $794 = HEAP32[$793>>2]|0;
                                                                $795 = ($794|0)==(0|0);
                                                                if ($795) {
                                                                    $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                                                                    break;
                                                                } else {
                                                                    $R$0$i$i = $794;$RP$0$i$i = $793;
                                                                }
                                                            }
                                                            $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
                                                            if ($796) {
                                                                _abort();
                                                                // unreachable;
                                                            } else {
                                                                HEAP32[$RP$0$i$i$lcssa>>2] = 0;
                                                                $R$1$i$i = $R$0$i$i$lcssa;
                                                                break;
                                                            }
                                                        } else {
                                                            $$sum3536$i$i = $719 | 8;
                                                            $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
                                                            $775 = (($tbase$255$i) + ($$sum117$i)|0);
                                                            $776 = HEAP32[$775>>2]|0;
                                                            $777 = ($776>>>0)<($755>>>0);
                                                            if ($777) {
                                                                _abort();
                                                                // unreachable;
                                                            }
                                                            $778 = ((($776)) + 12|0);
                                                            $779 = HEAP32[$778>>2]|0;
                                                            $780 = ($779|0)==($720|0);
                                                            if (!($780)) {
                                                                _abort();
                                                                // unreachable;
                                                            }
                                                            $781 = ((($773)) + 8|0);
                                                            $782 = HEAP32[$781>>2]|0;
                                                            $783 = ($782|0)==($720|0);
                                                            if ($783) {
                                                                HEAP32[$778>>2] = $773;
                                                                HEAP32[$781>>2] = $776;
                                                                $R$1$i$i = $773;
                                                                break;
                                                            } else {
                                                                _abort();
                                                                // unreachable;
                                                            }
                                                        }
                                                    } while(0);
                                                    $797 = ($771|0)==(0|0);
                                                    if ($797) {
                                                        break;
                                                    }
                                                    $$sum30$i$i = (($tsize$254$i) + 28)|0;
                                                    $$sum118$i = (($$sum30$i$i) + ($719))|0;
                                                    $798 = (($tbase$255$i) + ($$sum118$i)|0);
                                                    $799 = HEAP32[$798>>2]|0;
                                                    $800 = (4284 + ($799<<2)|0);
                                                    $801 = HEAP32[$800>>2]|0;
                                                    $802 = ($720|0)==($801|0);
                                                    do {
                                                        if ($802) {
                                                            HEAP32[$800>>2] = $R$1$i$i;
                                                            $cond$i$i = ($R$1$i$i|0)==(0|0);
                                                            if (!($cond$i$i)) {
                                                                break;
                                                            }
                                                            $803 = 1 << $799;
                                                            $804 = $803 ^ -1;
                                                            $805 = HEAP32[(3984)>>2]|0;
                                                            $806 = $805 & $804;
                                                            HEAP32[(3984)>>2] = $806;
                                                            break L332;
                                                        } else {
                                                            $807 = HEAP32[(3996)>>2]|0;
                                                            $808 = ($771>>>0)<($807>>>0);
                                                            if ($808) {
                                                                _abort();
                                                                // unreachable;
                                                            }
                                                            $809 = ((($771)) + 16|0);
                                                            $810 = HEAP32[$809>>2]|0;
                                                            $811 = ($810|0)==($720|0);
                                                            if ($811) {
                                                                HEAP32[$809>>2] = $R$1$i$i;
                                                            } else {
                                                                $812 = ((($771)) + 20|0);
                                                                HEAP32[$812>>2] = $R$1$i$i;
                                                            }
                                                            $813 = ($R$1$i$i|0)==(0|0);
                                                            if ($813) {
                                                                break L332;
                                                            }
                                                        }
                                                    } while(0);
                                                    $814 = HEAP32[(3996)>>2]|0;
                                                    $815 = ($R$1$i$i>>>0)<($814>>>0);
                                                    if ($815) {
                                                        _abort();
                                                        // unreachable;
                                                    }
                                                    $816 = ((($R$1$i$i)) + 24|0);
                                                    HEAP32[$816>>2] = $771;
                                                    $$sum3132$i$i = $719 | 16;
                                                    $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
                                                    $817 = (($tbase$255$i) + ($$sum119$i)|0);
                                                    $818 = HEAP32[$817>>2]|0;
                                                    $819 = ($818|0)==(0|0);
                                                    do {
                                                        if (!($819)) {
                                                            $820 = ($818>>>0)<($814>>>0);
                                                            if ($820) {
                                                                _abort();
                                                                // unreachable;
                                                            } else {
                                                                $821 = ((($R$1$i$i)) + 16|0);
                                                                HEAP32[$821>>2] = $818;
                                                                $822 = ((($818)) + 24|0);
                                                                HEAP32[$822>>2] = $R$1$i$i;
                                                                break;
                                                            }
                                                        }
                                                    } while(0);
                                                    $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
                                                    $823 = (($tbase$255$i) + ($$sum120$i)|0);
                                                    $824 = HEAP32[$823>>2]|0;
                                                    $825 = ($824|0)==(0|0);
                                                    if ($825) {
                                                        break;
                                                    }
                                                    $826 = HEAP32[(3996)>>2]|0;
                                                    $827 = ($824>>>0)<($826>>>0);
                                                    if ($827) {
                                                        _abort();
                                                        // unreachable;
                                                    } else {
                                                        $828 = ((($R$1$i$i)) + 20|0);
                                                        HEAP32[$828>>2] = $824;
                                                        $829 = ((($824)) + 24|0);
                                                        HEAP32[$829>>2] = $R$1$i$i;
                                                        break;
                                                    }
                                                }
                                            } while(0);
                                            $$sum9$i$i = $744 | $719;
                                            $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
                                            $830 = (($tbase$255$i) + ($$sum121$i)|0);
                                            $831 = (($744) + ($725))|0;
                                            $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
                                        } else {
                                            $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
                                        }
                                        $832 = ((($oldfirst$0$i$i)) + 4|0);
                                        $833 = HEAP32[$832>>2]|0;
                                        $834 = $833 & -2;
                                        HEAP32[$832>>2] = $834;
                                        $835 = $qsize$0$i$i | 1;
                                        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
                                        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
                                        HEAP32[$836>>2] = $835;
                                        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
                                        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
                                        HEAP32[$837>>2] = $qsize$0$i$i;
                                        $838 = $qsize$0$i$i >>> 3;
                                        $839 = ($qsize$0$i$i>>>0)<(256);
                                        if ($839) {
                                            $840 = $838 << 1;
                                            $841 = (4020 + ($840<<2)|0);
                                            $842 = HEAP32[3980>>2]|0;
                                            $843 = 1 << $838;
                                            $844 = $842 & $843;
                                            $845 = ($844|0)==(0);
                                            do {
                                                if ($845) {
                                                    $846 = $842 | $843;
                                                    HEAP32[3980>>2] = $846;
                                                    $$pre$i22$i = (($840) + 2)|0;
                                                    $$pre56$i$i = (4020 + ($$pre$i22$i<<2)|0);
                                                    $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
                                                } else {
                                                    $$sum29$i$i = (($840) + 2)|0;
                                                    $847 = (4020 + ($$sum29$i$i<<2)|0);
                                                    $848 = HEAP32[$847>>2]|0;
                                                    $849 = HEAP32[(3996)>>2]|0;
                                                    $850 = ($848>>>0)<($849>>>0);
                                                    if (!($850)) {
                                                        $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
                                                        break;
                                                    }
                                                    _abort();
                                                    // unreachable;
                                                }
                                            } while(0);
                                            HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
                                            $851 = ((($F4$0$i$i)) + 12|0);
                                            HEAP32[$851>>2] = $724;
                                            $$sum27$i$i = (($$sum$i19$i) + 8)|0;
                                            $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
                                            HEAP32[$852>>2] = $F4$0$i$i;
                                            $$sum28$i$i = (($$sum$i19$i) + 12)|0;
                                            $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
                                            HEAP32[$853>>2] = $841;
                                            break;
                                        }
                                        $854 = $qsize$0$i$i >>> 8;
                                        $855 = ($854|0)==(0);
                                        do {
                                            if ($855) {
                                                $I7$0$i$i = 0;
                                            } else {
                                                $856 = ($qsize$0$i$i>>>0)>(16777215);
                                                if ($856) {
                                                    $I7$0$i$i = 31;
                                                    break;
                                                }
                                                $857 = (($854) + 1048320)|0;
                                                $858 = $857 >>> 16;
                                                $859 = $858 & 8;
                                                $860 = $854 << $859;
                                                $861 = (($860) + 520192)|0;
                                                $862 = $861 >>> 16;
                                                $863 = $862 & 4;
                                                $864 = $863 | $859;
                                                $865 = $860 << $863;
                                                $866 = (($865) + 245760)|0;
                                                $867 = $866 >>> 16;
                                                $868 = $867 & 2;
                                                $869 = $864 | $868;
                                                $870 = (14 - ($869))|0;
                                                $871 = $865 << $868;
                                                $872 = $871 >>> 15;
                                                $873 = (($870) + ($872))|0;
                                                $874 = $873 << 1;
                                                $875 = (($873) + 7)|0;
                                                $876 = $qsize$0$i$i >>> $875;
                                                $877 = $876 & 1;
                                                $878 = $877 | $874;
                                                $I7$0$i$i = $878;
                                            }
                                        } while(0);
                                        $879 = (4284 + ($I7$0$i$i<<2)|0);
                                        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
                                        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
                                        HEAP32[$880>>2] = $I7$0$i$i;
                                        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
                                        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
                                        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
                                        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
                                        HEAP32[$882>>2] = 0;
                                        HEAP32[$881>>2] = 0;
                                        $883 = HEAP32[(3984)>>2]|0;
                                        $884 = 1 << $I7$0$i$i;
                                        $885 = $883 & $884;
                                        $886 = ($885|0)==(0);
                                        if ($886) {
                                            $887 = $883 | $884;
                                            HEAP32[(3984)>>2] = $887;
                                            HEAP32[$879>>2] = $724;
                                            $$sum15$i$i = (($$sum$i19$i) + 24)|0;
                                            $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
                                            HEAP32[$888>>2] = $879;
                                            $$sum16$i$i = (($$sum$i19$i) + 12)|0;
                                            $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
                                            HEAP32[$889>>2] = $724;
                                            $$sum17$i$i = (($$sum$i19$i) + 8)|0;
                                            $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
                                            HEAP32[$890>>2] = $724;
                                            break;
                                        }
                                        $891 = HEAP32[$879>>2]|0;
                                        $892 = ((($891)) + 4|0);
                                        $893 = HEAP32[$892>>2]|0;
                                        $894 = $893 & -8;
                                        $895 = ($894|0)==($qsize$0$i$i|0);
                                        L418: do {
                                            if ($895) {
                                                $T$0$lcssa$i25$i = $891;
                                            } else {
                                                $896 = ($I7$0$i$i|0)==(31);
                                                $897 = $I7$0$i$i >>> 1;
                                                $898 = (25 - ($897))|0;
                                                $899 = $896 ? 0 : $898;
                                                $900 = $qsize$0$i$i << $899;
                                                $K8$051$i$i = $900;$T$050$i$i = $891;
                                                while(1) {
                                                    $907 = $K8$051$i$i >>> 31;
                                                    $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
                                                    $903 = HEAP32[$908>>2]|0;
                                                    $909 = ($903|0)==(0|0);
                                                    if ($909) {
                                                        $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
                                                        break;
                                                    }
                                                    $901 = $K8$051$i$i << 1;
                                                    $902 = ((($903)) + 4|0);
                                                    $904 = HEAP32[$902>>2]|0;
                                                    $905 = $904 & -8;
                                                    $906 = ($905|0)==($qsize$0$i$i|0);
                                                    if ($906) {
                                                        $T$0$lcssa$i25$i = $903;
                                                        break L418;
                                                    } else {
                                                        $K8$051$i$i = $901;$T$050$i$i = $903;
                                                    }
                                                }
                                                $910 = HEAP32[(3996)>>2]|0;
                                                $911 = ($$lcssa>>>0)<($910>>>0);
                                                if ($911) {
                                                    _abort();
                                                    // unreachable;
                                                } else {
                                                    HEAP32[$$lcssa>>2] = $724;
                                                    $$sum23$i$i = (($$sum$i19$i) + 24)|0;
                                                    $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
                                                    HEAP32[$912>>2] = $T$050$i$i$lcssa;
                                                    $$sum24$i$i = (($$sum$i19$i) + 12)|0;
                                                    $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
                                                    HEAP32[$913>>2] = $724;
                                                    $$sum25$i$i = (($$sum$i19$i) + 8)|0;
                                                    $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
                                                    HEAP32[$914>>2] = $724;
                                                    break L324;
                                                }
                                            }
                                        } while(0);
                                        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
                                        $916 = HEAP32[$915>>2]|0;
                                        $917 = HEAP32[(3996)>>2]|0;
                                        $918 = ($916>>>0)>=($917>>>0);
                                        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
                                        $919 = $918 & $not$$i26$i;
                                        if ($919) {
                                            $920 = ((($916)) + 12|0);
                                            HEAP32[$920>>2] = $724;
                                            HEAP32[$915>>2] = $724;
                                            $$sum20$i$i = (($$sum$i19$i) + 8)|0;
                                            $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
                                            HEAP32[$921>>2] = $916;
                                            $$sum21$i$i = (($$sum$i19$i) + 12)|0;
                                            $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
                                            HEAP32[$922>>2] = $T$0$lcssa$i25$i;
                                            $$sum22$i$i = (($$sum$i19$i) + 24)|0;
                                            $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
                                            HEAP32[$923>>2] = 0;
                                            break;
                                        } else {
                                            _abort();
                                            // unreachable;
                                        }
                                    }
                                } while(0);
                                $$sum1819$i$i = $711 | 8;
                                $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
                                $mem$0 = $924;
                                return ($mem$0|0);
                            } else {
                                $sp$0$i$i$i = (4428);
                            }
                        }
                        while(1) {
                            $925 = HEAP32[$sp$0$i$i$i>>2]|0;
                            $926 = ($925>>>0)>($635>>>0);
                            if (!($926)) {
                                $927 = ((($sp$0$i$i$i)) + 4|0);
                                $928 = HEAP32[$927>>2]|0;
                                $929 = (($925) + ($928)|0);
                                $930 = ($929>>>0)>($635>>>0);
                                if ($930) {
                                    $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
                                    break;
                                }
                            }
                            $931 = ((($sp$0$i$i$i)) + 8|0);
                            $932 = HEAP32[$931>>2]|0;
                            $sp$0$i$i$i = $932;
                        }
                        $$sum$i14$i = (($$lcssa216) + -47)|0;
                        $$sum1$i15$i = (($$lcssa216) + -39)|0;
                        $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
                        $934 = $933;
                        $935 = $934 & 7;
                        $936 = ($935|0)==(0);
                        $937 = (0 - ($934))|0;
                        $938 = $937 & 7;
                        $939 = $936 ? 0 : $938;
                        $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
                        $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
                        $941 = ((($635)) + 16|0);
                        $942 = ($940>>>0)<($941>>>0);
                        $943 = $942 ? $635 : $940;
                        $944 = ((($943)) + 8|0);
                        $945 = (($tsize$254$i) + -40)|0;
                        $946 = ((($tbase$255$i)) + 8|0);
                        $947 = $946;
                        $948 = $947 & 7;
                        $949 = ($948|0)==(0);
                        $950 = (0 - ($947))|0;
                        $951 = $950 & 7;
                        $952 = $949 ? 0 : $951;
                        $953 = (($tbase$255$i) + ($952)|0);
                        $954 = (($945) - ($952))|0;
                        HEAP32[(4004)>>2] = $953;
                        HEAP32[(3992)>>2] = $954;
                        $955 = $954 | 1;
                        $$sum$i$i$i = (($952) + 4)|0;
                        $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
                        HEAP32[$956>>2] = $955;
                        $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
                        $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
                        HEAP32[$957>>2] = 40;
                        $958 = HEAP32[(4468)>>2]|0;
                        HEAP32[(4008)>>2] = $958;
                        $959 = ((($943)) + 4|0);
                        HEAP32[$959>>2] = 27;
                        ;HEAP32[$944>>2]=HEAP32[(4428)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(4428)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(4428)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(4428)+12>>2]|0;
                        HEAP32[(4428)>>2] = $tbase$255$i;
                        HEAP32[(4432)>>2] = $tsize$254$i;
                        HEAP32[(4440)>>2] = 0;
                        HEAP32[(4436)>>2] = $944;
                        $960 = ((($943)) + 28|0);
                        HEAP32[$960>>2] = 7;
                        $961 = ((($943)) + 32|0);
                        $962 = ($961>>>0)<($$lcssa217>>>0);
                        if ($962) {
                            $964 = $960;
                            while(1) {
                                $963 = ((($964)) + 4|0);
                                HEAP32[$963>>2] = 7;
                                $965 = ((($964)) + 8|0);
                                $966 = ($965>>>0)<($$lcssa217>>>0);
                                if ($966) {
                                    $964 = $963;
                                } else {
                                    break;
                                }
                            }
                        }
                        $967 = ($943|0)==($635|0);
                        if (!($967)) {
                            $968 = $943;
                            $969 = $635;
                            $970 = (($968) - ($969))|0;
                            $971 = HEAP32[$959>>2]|0;
                            $972 = $971 & -2;
                            HEAP32[$959>>2] = $972;
                            $973 = $970 | 1;
                            $974 = ((($635)) + 4|0);
                            HEAP32[$974>>2] = $973;
                            HEAP32[$943>>2] = $970;
                            $975 = $970 >>> 3;
                            $976 = ($970>>>0)<(256);
                            if ($976) {
                                $977 = $975 << 1;
                                $978 = (4020 + ($977<<2)|0);
                                $979 = HEAP32[3980>>2]|0;
                                $980 = 1 << $975;
                                $981 = $979 & $980;
                                $982 = ($981|0)==(0);
                                if ($982) {
                                    $983 = $979 | $980;
                                    HEAP32[3980>>2] = $983;
                                    $$pre$i$i = (($977) + 2)|0;
                                    $$pre14$i$i = (4020 + ($$pre$i$i<<2)|0);
                                    $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
                                } else {
                                    $$sum4$i$i = (($977) + 2)|0;
                                    $984 = (4020 + ($$sum4$i$i<<2)|0);
                                    $985 = HEAP32[$984>>2]|0;
                                    $986 = HEAP32[(3996)>>2]|0;
                                    $987 = ($985>>>0)<($986>>>0);
                                    if ($987) {
                                        _abort();
                                        // unreachable;
                                    } else {
                                        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
                                    }
                                }
                                HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
                                $988 = ((($F$0$i$i)) + 12|0);
                                HEAP32[$988>>2] = $635;
                                $989 = ((($635)) + 8|0);
                                HEAP32[$989>>2] = $F$0$i$i;
                                $990 = ((($635)) + 12|0);
                                HEAP32[$990>>2] = $978;
                                break;
                            }
                            $991 = $970 >>> 8;
                            $992 = ($991|0)==(0);
                            if ($992) {
                                $I1$0$i$i = 0;
                            } else {
                                $993 = ($970>>>0)>(16777215);
                                if ($993) {
                                    $I1$0$i$i = 31;
                                } else {
                                    $994 = (($991) + 1048320)|0;
                                    $995 = $994 >>> 16;
                                    $996 = $995 & 8;
                                    $997 = $991 << $996;
                                    $998 = (($997) + 520192)|0;
                                    $999 = $998 >>> 16;
                                    $1000 = $999 & 4;
                                    $1001 = $1000 | $996;
                                    $1002 = $997 << $1000;
                                    $1003 = (($1002) + 245760)|0;
                                    $1004 = $1003 >>> 16;
                                    $1005 = $1004 & 2;
                                    $1006 = $1001 | $1005;
                                    $1007 = (14 - ($1006))|0;
                                    $1008 = $1002 << $1005;
                                    $1009 = $1008 >>> 15;
                                    $1010 = (($1007) + ($1009))|0;
                                    $1011 = $1010 << 1;
                                    $1012 = (($1010) + 7)|0;
                                    $1013 = $970 >>> $1012;
                                    $1014 = $1013 & 1;
                                    $1015 = $1014 | $1011;
                                    $I1$0$i$i = $1015;
                                }
                            }
                            $1016 = (4284 + ($I1$0$i$i<<2)|0);
                            $1017 = ((($635)) + 28|0);
                            HEAP32[$1017>>2] = $I1$0$i$i;
                            $1018 = ((($635)) + 20|0);
                            HEAP32[$1018>>2] = 0;
                            HEAP32[$941>>2] = 0;
                            $1019 = HEAP32[(3984)>>2]|0;
                            $1020 = 1 << $I1$0$i$i;
                            $1021 = $1019 & $1020;
                            $1022 = ($1021|0)==(0);
                            if ($1022) {
                                $1023 = $1019 | $1020;
                                HEAP32[(3984)>>2] = $1023;
                                HEAP32[$1016>>2] = $635;
                                $1024 = ((($635)) + 24|0);
                                HEAP32[$1024>>2] = $1016;
                                $1025 = ((($635)) + 12|0);
                                HEAP32[$1025>>2] = $635;
                                $1026 = ((($635)) + 8|0);
                                HEAP32[$1026>>2] = $635;
                                break;
                            }
                            $1027 = HEAP32[$1016>>2]|0;
                            $1028 = ((($1027)) + 4|0);
                            $1029 = HEAP32[$1028>>2]|0;
                            $1030 = $1029 & -8;
                            $1031 = ($1030|0)==($970|0);
                            L459: do {
                                if ($1031) {
                                    $T$0$lcssa$i$i = $1027;
                                } else {
                                    $1032 = ($I1$0$i$i|0)==(31);
                                    $1033 = $I1$0$i$i >>> 1;
                                    $1034 = (25 - ($1033))|0;
                                    $1035 = $1032 ? 0 : $1034;
                                    $1036 = $970 << $1035;
                                    $K2$07$i$i = $1036;$T$06$i$i = $1027;
                                    while(1) {
                                        $1043 = $K2$07$i$i >>> 31;
                                        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
                                        $1039 = HEAP32[$1044>>2]|0;
                                        $1045 = ($1039|0)==(0|0);
                                        if ($1045) {
                                            $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
                                            break;
                                        }
                                        $1037 = $K2$07$i$i << 1;
                                        $1038 = ((($1039)) + 4|0);
                                        $1040 = HEAP32[$1038>>2]|0;
                                        $1041 = $1040 & -8;
                                        $1042 = ($1041|0)==($970|0);
                                        if ($1042) {
                                            $T$0$lcssa$i$i = $1039;
                                            break L459;
                                        } else {
                                            $K2$07$i$i = $1037;$T$06$i$i = $1039;
                                        }
                                    }
                                    $1046 = HEAP32[(3996)>>2]|0;
                                    $1047 = ($$lcssa211>>>0)<($1046>>>0);
                                    if ($1047) {
                                        _abort();
                                        // unreachable;
                                    } else {
                                        HEAP32[$$lcssa211>>2] = $635;
                                        $1048 = ((($635)) + 24|0);
                                        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
                                        $1049 = ((($635)) + 12|0);
                                        HEAP32[$1049>>2] = $635;
                                        $1050 = ((($635)) + 8|0);
                                        HEAP32[$1050>>2] = $635;
                                        break L299;
                                    }
                                }
                            } while(0);
                            $1051 = ((($T$0$lcssa$i$i)) + 8|0);
                            $1052 = HEAP32[$1051>>2]|0;
                            $1053 = HEAP32[(3996)>>2]|0;
                            $1054 = ($1052>>>0)>=($1053>>>0);
                            $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
                            $1055 = $1054 & $not$$i$i;
                            if ($1055) {
                                $1056 = ((($1052)) + 12|0);
                                HEAP32[$1056>>2] = $635;
                                HEAP32[$1051>>2] = $635;
                                $1057 = ((($635)) + 8|0);
                                HEAP32[$1057>>2] = $1052;
                                $1058 = ((($635)) + 12|0);
                                HEAP32[$1058>>2] = $T$0$lcssa$i$i;
                                $1059 = ((($635)) + 24|0);
                                HEAP32[$1059>>2] = 0;
                                break;
                            } else {
                                _abort();
                                // unreachable;
                            }
                        }
                    }
                } while(0);
                $1060 = HEAP32[(3992)>>2]|0;
                $1061 = ($1060>>>0)>($nb$0>>>0);
                if ($1061) {
                    $1062 = (($1060) - ($nb$0))|0;
                    HEAP32[(3992)>>2] = $1062;
                    $1063 = HEAP32[(4004)>>2]|0;
                    $1064 = (($1063) + ($nb$0)|0);
                    HEAP32[(4004)>>2] = $1064;
                    $1065 = $1062 | 1;
                    $$sum$i32 = (($nb$0) + 4)|0;
                    $1066 = (($1063) + ($$sum$i32)|0);
                    HEAP32[$1066>>2] = $1065;
                    $1067 = $nb$0 | 3;
                    $1068 = ((($1063)) + 4|0);
                    HEAP32[$1068>>2] = $1067;
                    $1069 = ((($1063)) + 8|0);
                    $mem$0 = $1069;
                    return ($mem$0|0);
                }
            }
            $1070 = (___errno_location()|0);
            HEAP32[$1070>>2] = 12;
            $mem$0 = 0;
            return ($mem$0|0);
        }
        function _free($mem) {
            $mem = $mem|0;
            var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
            var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
            var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
            var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
            var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
            var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
            var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
            var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
            var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
            var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
            var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
            var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
            var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
            var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
            var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
            var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
            var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
            var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
            var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($mem|0)==(0|0);
            if ($0) {
                return;
            }
            $1 = ((($mem)) + -8|0);
            $2 = HEAP32[(3996)>>2]|0;
            $3 = ($1>>>0)<($2>>>0);
            if ($3) {
                _abort();
                // unreachable;
            }
            $4 = ((($mem)) + -4|0);
            $5 = HEAP32[$4>>2]|0;
            $6 = $5 & 3;
            $7 = ($6|0)==(1);
            if ($7) {
                _abort();
                // unreachable;
            }
            $8 = $5 & -8;
            $$sum = (($8) + -8)|0;
            $9 = (($mem) + ($$sum)|0);
            $10 = $5 & 1;
            $11 = ($10|0)==(0);
            do {
                if ($11) {
                    $12 = HEAP32[$1>>2]|0;
                    $13 = ($6|0)==(0);
                    if ($13) {
                        return;
                    }
                    $$sum2 = (-8 - ($12))|0;
                    $14 = (($mem) + ($$sum2)|0);
                    $15 = (($12) + ($8))|0;
                    $16 = ($14>>>0)<($2>>>0);
                    if ($16) {
                        _abort();
                        // unreachable;
                    }
                    $17 = HEAP32[(4000)>>2]|0;
                    $18 = ($14|0)==($17|0);
                    if ($18) {
                        $$sum3 = (($8) + -4)|0;
                        $103 = (($mem) + ($$sum3)|0);
                        $104 = HEAP32[$103>>2]|0;
                        $105 = $104 & 3;
                        $106 = ($105|0)==(3);
                        if (!($106)) {
                            $p$0 = $14;$psize$0 = $15;
                            break;
                        }
                        HEAP32[(3988)>>2] = $15;
                        $107 = $104 & -2;
                        HEAP32[$103>>2] = $107;
                        $108 = $15 | 1;
                        $$sum20 = (($$sum2) + 4)|0;
                        $109 = (($mem) + ($$sum20)|0);
                        HEAP32[$109>>2] = $108;
                        HEAP32[$9>>2] = $15;
                        return;
                    }
                    $19 = $12 >>> 3;
                    $20 = ($12>>>0)<(256);
                    if ($20) {
                        $$sum30 = (($$sum2) + 8)|0;
                        $21 = (($mem) + ($$sum30)|0);
                        $22 = HEAP32[$21>>2]|0;
                        $$sum31 = (($$sum2) + 12)|0;
                        $23 = (($mem) + ($$sum31)|0);
                        $24 = HEAP32[$23>>2]|0;
                        $25 = $19 << 1;
                        $26 = (4020 + ($25<<2)|0);
                        $27 = ($22|0)==($26|0);
                        if (!($27)) {
                            $28 = ($22>>>0)<($2>>>0);
                            if ($28) {
                                _abort();
                                // unreachable;
                            }
                            $29 = ((($22)) + 12|0);
                            $30 = HEAP32[$29>>2]|0;
                            $31 = ($30|0)==($14|0);
                            if (!($31)) {
                                _abort();
                                // unreachable;
                            }
                        }
                        $32 = ($24|0)==($22|0);
                        if ($32) {
                            $33 = 1 << $19;
                            $34 = $33 ^ -1;
                            $35 = HEAP32[3980>>2]|0;
                            $36 = $35 & $34;
                            HEAP32[3980>>2] = $36;
                            $p$0 = $14;$psize$0 = $15;
                            break;
                        }
                        $37 = ($24|0)==($26|0);
                        if ($37) {
                            $$pre60 = ((($24)) + 8|0);
                            $$pre$phi61Z2D = $$pre60;
                        } else {
                            $38 = ($24>>>0)<($2>>>0);
                            if ($38) {
                                _abort();
                                // unreachable;
                            }
                            $39 = ((($24)) + 8|0);
                            $40 = HEAP32[$39>>2]|0;
                            $41 = ($40|0)==($14|0);
                            if ($41) {
                                $$pre$phi61Z2D = $39;
                            } else {
                                _abort();
                                // unreachable;
                            }
                        }
                        $42 = ((($22)) + 12|0);
                        HEAP32[$42>>2] = $24;
                        HEAP32[$$pre$phi61Z2D>>2] = $22;
                        $p$0 = $14;$psize$0 = $15;
                        break;
                    }
                    $$sum22 = (($$sum2) + 24)|0;
                    $43 = (($mem) + ($$sum22)|0);
                    $44 = HEAP32[$43>>2]|0;
                    $$sum23 = (($$sum2) + 12)|0;
                    $45 = (($mem) + ($$sum23)|0);
                    $46 = HEAP32[$45>>2]|0;
                    $47 = ($46|0)==($14|0);
                    do {
                        if ($47) {
                            $$sum25 = (($$sum2) + 20)|0;
                            $57 = (($mem) + ($$sum25)|0);
                            $58 = HEAP32[$57>>2]|0;
                            $59 = ($58|0)==(0|0);
                            if ($59) {
                                $$sum24 = (($$sum2) + 16)|0;
                                $60 = (($mem) + ($$sum24)|0);
                                $61 = HEAP32[$60>>2]|0;
                                $62 = ($61|0)==(0|0);
                                if ($62) {
                                    $R$1 = 0;
                                    break;
                                } else {
                                    $R$0 = $61;$RP$0 = $60;
                                }
                            } else {
                                $R$0 = $58;$RP$0 = $57;
                            }
                            while(1) {
                                $63 = ((($R$0)) + 20|0);
                                $64 = HEAP32[$63>>2]|0;
                                $65 = ($64|0)==(0|0);
                                if (!($65)) {
                                    $R$0 = $64;$RP$0 = $63;
                                    continue;
                                }
                                $66 = ((($R$0)) + 16|0);
                                $67 = HEAP32[$66>>2]|0;
                                $68 = ($67|0)==(0|0);
                                if ($68) {
                                    $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
                                    break;
                                } else {
                                    $R$0 = $67;$RP$0 = $66;
                                }
                            }
                            $69 = ($RP$0$lcssa>>>0)<($2>>>0);
                            if ($69) {
                                _abort();
                                // unreachable;
                            } else {
                                HEAP32[$RP$0$lcssa>>2] = 0;
                                $R$1 = $R$0$lcssa;
                                break;
                            }
                        } else {
                            $$sum29 = (($$sum2) + 8)|0;
                            $48 = (($mem) + ($$sum29)|0);
                            $49 = HEAP32[$48>>2]|0;
                            $50 = ($49>>>0)<($2>>>0);
                            if ($50) {
                                _abort();
                                // unreachable;
                            }
                            $51 = ((($49)) + 12|0);
                            $52 = HEAP32[$51>>2]|0;
                            $53 = ($52|0)==($14|0);
                            if (!($53)) {
                                _abort();
                                // unreachable;
                            }
                            $54 = ((($46)) + 8|0);
                            $55 = HEAP32[$54>>2]|0;
                            $56 = ($55|0)==($14|0);
                            if ($56) {
                                HEAP32[$51>>2] = $46;
                                HEAP32[$54>>2] = $49;
                                $R$1 = $46;
                                break;
                            } else {
                                _abort();
                                // unreachable;
                            }
                        }
                    } while(0);
                    $70 = ($44|0)==(0|0);
                    if ($70) {
                        $p$0 = $14;$psize$0 = $15;
                    } else {
                        $$sum26 = (($$sum2) + 28)|0;
                        $71 = (($mem) + ($$sum26)|0);
                        $72 = HEAP32[$71>>2]|0;
                        $73 = (4284 + ($72<<2)|0);
                        $74 = HEAP32[$73>>2]|0;
                        $75 = ($14|0)==($74|0);
                        if ($75) {
                            HEAP32[$73>>2] = $R$1;
                            $cond = ($R$1|0)==(0|0);
                            if ($cond) {
                                $76 = 1 << $72;
                                $77 = $76 ^ -1;
                                $78 = HEAP32[(3984)>>2]|0;
                                $79 = $78 & $77;
                                HEAP32[(3984)>>2] = $79;
                                $p$0 = $14;$psize$0 = $15;
                                break;
                            }
                        } else {
                            $80 = HEAP32[(3996)>>2]|0;
                            $81 = ($44>>>0)<($80>>>0);
                            if ($81) {
                                _abort();
                                // unreachable;
                            }
                            $82 = ((($44)) + 16|0);
                            $83 = HEAP32[$82>>2]|0;
                            $84 = ($83|0)==($14|0);
                            if ($84) {
                                HEAP32[$82>>2] = $R$1;
                            } else {
                                $85 = ((($44)) + 20|0);
                                HEAP32[$85>>2] = $R$1;
                            }
                            $86 = ($R$1|0)==(0|0);
                            if ($86) {
                                $p$0 = $14;$psize$0 = $15;
                                break;
                            }
                        }
                        $87 = HEAP32[(3996)>>2]|0;
                        $88 = ($R$1>>>0)<($87>>>0);
                        if ($88) {
                            _abort();
                            // unreachable;
                        }
                        $89 = ((($R$1)) + 24|0);
                        HEAP32[$89>>2] = $44;
                        $$sum27 = (($$sum2) + 16)|0;
                        $90 = (($mem) + ($$sum27)|0);
                        $91 = HEAP32[$90>>2]|0;
                        $92 = ($91|0)==(0|0);
                        do {
                            if (!($92)) {
                                $93 = ($91>>>0)<($87>>>0);
                                if ($93) {
                                    _abort();
                                    // unreachable;
                                } else {
                                    $94 = ((($R$1)) + 16|0);
                                    HEAP32[$94>>2] = $91;
                                    $95 = ((($91)) + 24|0);
                                    HEAP32[$95>>2] = $R$1;
                                    break;
                                }
                            }
                        } while(0);
                        $$sum28 = (($$sum2) + 20)|0;
                        $96 = (($mem) + ($$sum28)|0);
                        $97 = HEAP32[$96>>2]|0;
                        $98 = ($97|0)==(0|0);
                        if ($98) {
                            $p$0 = $14;$psize$0 = $15;
                        } else {
                            $99 = HEAP32[(3996)>>2]|0;
                            $100 = ($97>>>0)<($99>>>0);
                            if ($100) {
                                _abort();
                                // unreachable;
                            } else {
                                $101 = ((($R$1)) + 20|0);
                                HEAP32[$101>>2] = $97;
                                $102 = ((($97)) + 24|0);
                                HEAP32[$102>>2] = $R$1;
                                $p$0 = $14;$psize$0 = $15;
                                break;
                            }
                        }
                    }
                } else {
                    $p$0 = $1;$psize$0 = $8;
                }
            } while(0);
            $110 = ($p$0>>>0)<($9>>>0);
            if (!($110)) {
                _abort();
                // unreachable;
            }
            $$sum19 = (($8) + -4)|0;
            $111 = (($mem) + ($$sum19)|0);
            $112 = HEAP32[$111>>2]|0;
            $113 = $112 & 1;
            $114 = ($113|0)==(0);
            if ($114) {
                _abort();
                // unreachable;
            }
            $115 = $112 & 2;
            $116 = ($115|0)==(0);
            if ($116) {
                $117 = HEAP32[(4004)>>2]|0;
                $118 = ($9|0)==($117|0);
                if ($118) {
                    $119 = HEAP32[(3992)>>2]|0;
                    $120 = (($119) + ($psize$0))|0;
                    HEAP32[(3992)>>2] = $120;
                    HEAP32[(4004)>>2] = $p$0;
                    $121 = $120 | 1;
                    $122 = ((($p$0)) + 4|0);
                    HEAP32[$122>>2] = $121;
                    $123 = HEAP32[(4000)>>2]|0;
                    $124 = ($p$0|0)==($123|0);
                    if (!($124)) {
                        return;
                    }
                    HEAP32[(4000)>>2] = 0;
                    HEAP32[(3988)>>2] = 0;
                    return;
                }
                $125 = HEAP32[(4000)>>2]|0;
                $126 = ($9|0)==($125|0);
                if ($126) {
                    $127 = HEAP32[(3988)>>2]|0;
                    $128 = (($127) + ($psize$0))|0;
                    HEAP32[(3988)>>2] = $128;
                    HEAP32[(4000)>>2] = $p$0;
                    $129 = $128 | 1;
                    $130 = ((($p$0)) + 4|0);
                    HEAP32[$130>>2] = $129;
                    $131 = (($p$0) + ($128)|0);
                    HEAP32[$131>>2] = $128;
                    return;
                }
                $132 = $112 & -8;
                $133 = (($132) + ($psize$0))|0;
                $134 = $112 >>> 3;
                $135 = ($112>>>0)<(256);
                do {
                    if ($135) {
                        $136 = (($mem) + ($8)|0);
                        $137 = HEAP32[$136>>2]|0;
                        $$sum1718 = $8 | 4;
                        $138 = (($mem) + ($$sum1718)|0);
                        $139 = HEAP32[$138>>2]|0;
                        $140 = $134 << 1;
                        $141 = (4020 + ($140<<2)|0);
                        $142 = ($137|0)==($141|0);
                        if (!($142)) {
                            $143 = HEAP32[(3996)>>2]|0;
                            $144 = ($137>>>0)<($143>>>0);
                            if ($144) {
                                _abort();
                                // unreachable;
                            }
                            $145 = ((($137)) + 12|0);
                            $146 = HEAP32[$145>>2]|0;
                            $147 = ($146|0)==($9|0);
                            if (!($147)) {
                                _abort();
                                // unreachable;
                            }
                        }
                        $148 = ($139|0)==($137|0);
                        if ($148) {
                            $149 = 1 << $134;
                            $150 = $149 ^ -1;
                            $151 = HEAP32[3980>>2]|0;
                            $152 = $151 & $150;
                            HEAP32[3980>>2] = $152;
                            break;
                        }
                        $153 = ($139|0)==($141|0);
                        if ($153) {
                            $$pre58 = ((($139)) + 8|0);
                            $$pre$phi59Z2D = $$pre58;
                        } else {
                            $154 = HEAP32[(3996)>>2]|0;
                            $155 = ($139>>>0)<($154>>>0);
                            if ($155) {
                                _abort();
                                // unreachable;
                            }
                            $156 = ((($139)) + 8|0);
                            $157 = HEAP32[$156>>2]|0;
                            $158 = ($157|0)==($9|0);
                            if ($158) {
                                $$pre$phi59Z2D = $156;
                            } else {
                                _abort();
                                // unreachable;
                            }
                        }
                        $159 = ((($137)) + 12|0);
                        HEAP32[$159>>2] = $139;
                        HEAP32[$$pre$phi59Z2D>>2] = $137;
                    } else {
                        $$sum5 = (($8) + 16)|0;
                        $160 = (($mem) + ($$sum5)|0);
                        $161 = HEAP32[$160>>2]|0;
                        $$sum67 = $8 | 4;
                        $162 = (($mem) + ($$sum67)|0);
                        $163 = HEAP32[$162>>2]|0;
                        $164 = ($163|0)==($9|0);
                        do {
                            if ($164) {
                                $$sum9 = (($8) + 12)|0;
                                $175 = (($mem) + ($$sum9)|0);
                                $176 = HEAP32[$175>>2]|0;
                                $177 = ($176|0)==(0|0);
                                if ($177) {
                                    $$sum8 = (($8) + 8)|0;
                                    $178 = (($mem) + ($$sum8)|0);
                                    $179 = HEAP32[$178>>2]|0;
                                    $180 = ($179|0)==(0|0);
                                    if ($180) {
                                        $R7$1 = 0;
                                        break;
                                    } else {
                                        $R7$0 = $179;$RP9$0 = $178;
                                    }
                                } else {
                                    $R7$0 = $176;$RP9$0 = $175;
                                }
                                while(1) {
                                    $181 = ((($R7$0)) + 20|0);
                                    $182 = HEAP32[$181>>2]|0;
                                    $183 = ($182|0)==(0|0);
                                    if (!($183)) {
                                        $R7$0 = $182;$RP9$0 = $181;
                                        continue;
                                    }
                                    $184 = ((($R7$0)) + 16|0);
                                    $185 = HEAP32[$184>>2]|0;
                                    $186 = ($185|0)==(0|0);
                                    if ($186) {
                                        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
                                        break;
                                    } else {
                                        $R7$0 = $185;$RP9$0 = $184;
                                    }
                                }
                                $187 = HEAP32[(3996)>>2]|0;
                                $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
                                if ($188) {
                                    _abort();
                                    // unreachable;
                                } else {
                                    HEAP32[$RP9$0$lcssa>>2] = 0;
                                    $R7$1 = $R7$0$lcssa;
                                    break;
                                }
                            } else {
                                $165 = (($mem) + ($8)|0);
                                $166 = HEAP32[$165>>2]|0;
                                $167 = HEAP32[(3996)>>2]|0;
                                $168 = ($166>>>0)<($167>>>0);
                                if ($168) {
                                    _abort();
                                    // unreachable;
                                }
                                $169 = ((($166)) + 12|0);
                                $170 = HEAP32[$169>>2]|0;
                                $171 = ($170|0)==($9|0);
                                if (!($171)) {
                                    _abort();
                                    // unreachable;
                                }
                                $172 = ((($163)) + 8|0);
                                $173 = HEAP32[$172>>2]|0;
                                $174 = ($173|0)==($9|0);
                                if ($174) {
                                    HEAP32[$169>>2] = $163;
                                    HEAP32[$172>>2] = $166;
                                    $R7$1 = $163;
                                    break;
                                } else {
                                    _abort();
                                    // unreachable;
                                }
                            }
                        } while(0);
                        $189 = ($161|0)==(0|0);
                        if (!($189)) {
                            $$sum12 = (($8) + 20)|0;
                            $190 = (($mem) + ($$sum12)|0);
                            $191 = HEAP32[$190>>2]|0;
                            $192 = (4284 + ($191<<2)|0);
                            $193 = HEAP32[$192>>2]|0;
                            $194 = ($9|0)==($193|0);
                            if ($194) {
                                HEAP32[$192>>2] = $R7$1;
                                $cond47 = ($R7$1|0)==(0|0);
                                if ($cond47) {
                                    $195 = 1 << $191;
                                    $196 = $195 ^ -1;
                                    $197 = HEAP32[(3984)>>2]|0;
                                    $198 = $197 & $196;
                                    HEAP32[(3984)>>2] = $198;
                                    break;
                                }
                            } else {
                                $199 = HEAP32[(3996)>>2]|0;
                                $200 = ($161>>>0)<($199>>>0);
                                if ($200) {
                                    _abort();
                                    // unreachable;
                                }
                                $201 = ((($161)) + 16|0);
                                $202 = HEAP32[$201>>2]|0;
                                $203 = ($202|0)==($9|0);
                                if ($203) {
                                    HEAP32[$201>>2] = $R7$1;
                                } else {
                                    $204 = ((($161)) + 20|0);
                                    HEAP32[$204>>2] = $R7$1;
                                }
                                $205 = ($R7$1|0)==(0|0);
                                if ($205) {
                                    break;
                                }
                            }
                            $206 = HEAP32[(3996)>>2]|0;
                            $207 = ($R7$1>>>0)<($206>>>0);
                            if ($207) {
                                _abort();
                                // unreachable;
                            }
                            $208 = ((($R7$1)) + 24|0);
                            HEAP32[$208>>2] = $161;
                            $$sum13 = (($8) + 8)|0;
                            $209 = (($mem) + ($$sum13)|0);
                            $210 = HEAP32[$209>>2]|0;
                            $211 = ($210|0)==(0|0);
                            do {
                                if (!($211)) {
                                    $212 = ($210>>>0)<($206>>>0);
                                    if ($212) {
                                        _abort();
                                        // unreachable;
                                    } else {
                                        $213 = ((($R7$1)) + 16|0);
                                        HEAP32[$213>>2] = $210;
                                        $214 = ((($210)) + 24|0);
                                        HEAP32[$214>>2] = $R7$1;
                                        break;
                                    }
                                }
                            } while(0);
                            $$sum14 = (($8) + 12)|0;
                            $215 = (($mem) + ($$sum14)|0);
                            $216 = HEAP32[$215>>2]|0;
                            $217 = ($216|0)==(0|0);
                            if (!($217)) {
                                $218 = HEAP32[(3996)>>2]|0;
                                $219 = ($216>>>0)<($218>>>0);
                                if ($219) {
                                    _abort();
                                    // unreachable;
                                } else {
                                    $220 = ((($R7$1)) + 20|0);
                                    HEAP32[$220>>2] = $216;
                                    $221 = ((($216)) + 24|0);
                                    HEAP32[$221>>2] = $R7$1;
                                    break;
                                }
                            }
                        }
                    }
                } while(0);
                $222 = $133 | 1;
                $223 = ((($p$0)) + 4|0);
                HEAP32[$223>>2] = $222;
                $224 = (($p$0) + ($133)|0);
                HEAP32[$224>>2] = $133;
                $225 = HEAP32[(4000)>>2]|0;
                $226 = ($p$0|0)==($225|0);
                if ($226) {
                    HEAP32[(3988)>>2] = $133;
                    return;
                } else {
                    $psize$1 = $133;
                }
            } else {
                $227 = $112 & -2;
                HEAP32[$111>>2] = $227;
                $228 = $psize$0 | 1;
                $229 = ((($p$0)) + 4|0);
                HEAP32[$229>>2] = $228;
                $230 = (($p$0) + ($psize$0)|0);
                HEAP32[$230>>2] = $psize$0;
                $psize$1 = $psize$0;
            }
            $231 = $psize$1 >>> 3;
            $232 = ($psize$1>>>0)<(256);
            if ($232) {
                $233 = $231 << 1;
                $234 = (4020 + ($233<<2)|0);
                $235 = HEAP32[3980>>2]|0;
                $236 = 1 << $231;
                $237 = $235 & $236;
                $238 = ($237|0)==(0);
                if ($238) {
                    $239 = $235 | $236;
                    HEAP32[3980>>2] = $239;
                    $$pre = (($233) + 2)|0;
                    $$pre57 = (4020 + ($$pre<<2)|0);
                    $$pre$phiZ2D = $$pre57;$F16$0 = $234;
                } else {
                    $$sum11 = (($233) + 2)|0;
                    $240 = (4020 + ($$sum11<<2)|0);
                    $241 = HEAP32[$240>>2]|0;
                    $242 = HEAP32[(3996)>>2]|0;
                    $243 = ($241>>>0)<($242>>>0);
                    if ($243) {
                        _abort();
                        // unreachable;
                    } else {
                        $$pre$phiZ2D = $240;$F16$0 = $241;
                    }
                }
                HEAP32[$$pre$phiZ2D>>2] = $p$0;
                $244 = ((($F16$0)) + 12|0);
                HEAP32[$244>>2] = $p$0;
                $245 = ((($p$0)) + 8|0);
                HEAP32[$245>>2] = $F16$0;
                $246 = ((($p$0)) + 12|0);
                HEAP32[$246>>2] = $234;
                return;
            }
            $247 = $psize$1 >>> 8;
            $248 = ($247|0)==(0);
            if ($248) {
                $I18$0 = 0;
            } else {
                $249 = ($psize$1>>>0)>(16777215);
                if ($249) {
                    $I18$0 = 31;
                } else {
                    $250 = (($247) + 1048320)|0;
                    $251 = $250 >>> 16;
                    $252 = $251 & 8;
                    $253 = $247 << $252;
                    $254 = (($253) + 520192)|0;
                    $255 = $254 >>> 16;
                    $256 = $255 & 4;
                    $257 = $256 | $252;
                    $258 = $253 << $256;
                    $259 = (($258) + 245760)|0;
                    $260 = $259 >>> 16;
                    $261 = $260 & 2;
                    $262 = $257 | $261;
                    $263 = (14 - ($262))|0;
                    $264 = $258 << $261;
                    $265 = $264 >>> 15;
                    $266 = (($263) + ($265))|0;
                    $267 = $266 << 1;
                    $268 = (($266) + 7)|0;
                    $269 = $psize$1 >>> $268;
                    $270 = $269 & 1;
                    $271 = $270 | $267;
                    $I18$0 = $271;
                }
            }
            $272 = (4284 + ($I18$0<<2)|0);
            $273 = ((($p$0)) + 28|0);
            HEAP32[$273>>2] = $I18$0;
            $274 = ((($p$0)) + 16|0);
            $275 = ((($p$0)) + 20|0);
            HEAP32[$275>>2] = 0;
            HEAP32[$274>>2] = 0;
            $276 = HEAP32[(3984)>>2]|0;
            $277 = 1 << $I18$0;
            $278 = $276 & $277;
            $279 = ($278|0)==(0);
            L199: do {
                if ($279) {
                    $280 = $276 | $277;
                    HEAP32[(3984)>>2] = $280;
                    HEAP32[$272>>2] = $p$0;
                    $281 = ((($p$0)) + 24|0);
                    HEAP32[$281>>2] = $272;
                    $282 = ((($p$0)) + 12|0);
                    HEAP32[$282>>2] = $p$0;
                    $283 = ((($p$0)) + 8|0);
                    HEAP32[$283>>2] = $p$0;
                } else {
                    $284 = HEAP32[$272>>2]|0;
                    $285 = ((($284)) + 4|0);
                    $286 = HEAP32[$285>>2]|0;
                    $287 = $286 & -8;
                    $288 = ($287|0)==($psize$1|0);
                    L202: do {
                        if ($288) {
                            $T$0$lcssa = $284;
                        } else {
                            $289 = ($I18$0|0)==(31);
                            $290 = $I18$0 >>> 1;
                            $291 = (25 - ($290))|0;
                            $292 = $289 ? 0 : $291;
                            $293 = $psize$1 << $292;
                            $K19$052 = $293;$T$051 = $284;
                            while(1) {
                                $300 = $K19$052 >>> 31;
                                $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
                                $296 = HEAP32[$301>>2]|0;
                                $302 = ($296|0)==(0|0);
                                if ($302) {
                                    $$lcssa = $301;$T$051$lcssa = $T$051;
                                    break;
                                }
                                $294 = $K19$052 << 1;
                                $295 = ((($296)) + 4|0);
                                $297 = HEAP32[$295>>2]|0;
                                $298 = $297 & -8;
                                $299 = ($298|0)==($psize$1|0);
                                if ($299) {
                                    $T$0$lcssa = $296;
                                    break L202;
                                } else {
                                    $K19$052 = $294;$T$051 = $296;
                                }
                            }
                            $303 = HEAP32[(3996)>>2]|0;
                            $304 = ($$lcssa>>>0)<($303>>>0);
                            if ($304) {
                                _abort();
                                // unreachable;
                            } else {
                                HEAP32[$$lcssa>>2] = $p$0;
                                $305 = ((($p$0)) + 24|0);
                                HEAP32[$305>>2] = $T$051$lcssa;
                                $306 = ((($p$0)) + 12|0);
                                HEAP32[$306>>2] = $p$0;
                                $307 = ((($p$0)) + 8|0);
                                HEAP32[$307>>2] = $p$0;
                                break L199;
                            }
                        }
                    } while(0);
                    $308 = ((($T$0$lcssa)) + 8|0);
                    $309 = HEAP32[$308>>2]|0;
                    $310 = HEAP32[(3996)>>2]|0;
                    $311 = ($309>>>0)>=($310>>>0);
                    $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
                    $312 = $311 & $not$;
                    if ($312) {
                        $313 = ((($309)) + 12|0);
                        HEAP32[$313>>2] = $p$0;
                        HEAP32[$308>>2] = $p$0;
                        $314 = ((($p$0)) + 8|0);
                        HEAP32[$314>>2] = $309;
                        $315 = ((($p$0)) + 12|0);
                        HEAP32[$315>>2] = $T$0$lcssa;
                        $316 = ((($p$0)) + 24|0);
                        HEAP32[$316>>2] = 0;
                        break;
                    } else {
                        _abort();
                        // unreachable;
                    }
                }
            } while(0);
            $317 = HEAP32[(4012)>>2]|0;
            $318 = (($317) + -1)|0;
            HEAP32[(4012)>>2] = $318;
            $319 = ($318|0)==(0);
            if ($319) {
                $sp$0$in$i = (4436);
            } else {
                return;
            }
            while(1) {
                $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
                $320 = ($sp$0$i|0)==(0|0);
                $321 = ((($sp$0$i)) + 8|0);
                if ($320) {
                    break;
                } else {
                    $sp$0$in$i = $321;
                }
            }
            HEAP32[(4012)>>2] = -1;
            return;
        }
        function _realloc($oldmem,$bytes) {
            $oldmem = $oldmem|0;
            $bytes = $bytes|0;
            var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
            var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ($oldmem|0)==(0|0);
            if ($0) {
                $1 = (_malloc($bytes)|0);
                $mem$0 = $1;
                return ($mem$0|0);
            }
            $2 = ($bytes>>>0)>(4294967231);
            if ($2) {
                $3 = (___errno_location()|0);
                HEAP32[$3>>2] = 12;
                $mem$0 = 0;
                return ($mem$0|0);
            }
            $4 = ($bytes>>>0)<(11);
            $5 = (($bytes) + 11)|0;
            $6 = $5 & -8;
            $7 = $4 ? 16 : $6;
            $8 = ((($oldmem)) + -8|0);
            $9 = (_try_realloc_chunk($8,$7)|0);
            $10 = ($9|0)==(0|0);
            if (!($10)) {
                $11 = ((($9)) + 8|0);
                $mem$0 = $11;
                return ($mem$0|0);
            }
            $12 = (_malloc($bytes)|0);
            $13 = ($12|0)==(0|0);
            if ($13) {
                $mem$0 = 0;
                return ($mem$0|0);
            }
            $14 = ((($oldmem)) + -4|0);
            $15 = HEAP32[$14>>2]|0;
            $16 = $15 & -8;
            $17 = $15 & 3;
            $18 = ($17|0)==(0);
            $19 = $18 ? 8 : 4;
            $20 = (($16) - ($19))|0;
            $21 = ($20>>>0)<($bytes>>>0);
            $22 = $21 ? $20 : $bytes;
            _memcpy(($12|0),($oldmem|0),($22|0))|0;
            _free($oldmem);
            $mem$0 = $12;
            return ($mem$0|0);
        }
        function _try_realloc_chunk($p,$nb) {
            $p = $p|0;
            $nb = $nb|0;
            var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
            var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
            var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
            var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
            var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
            var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
            var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
            var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
            var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
            var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
            var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = ((($p)) + 4|0);
            $1 = HEAP32[$0>>2]|0;
            $2 = $1 & -8;
            $3 = (($p) + ($2)|0);
            $4 = HEAP32[(3996)>>2]|0;
            $5 = $1 & 3;
            $notlhs = ($p>>>0)>=($4>>>0);
            $notrhs = ($5|0)!=(1);
            $or$cond$not = $notrhs & $notlhs;
            $6 = ($p>>>0)<($3>>>0);
            $or$cond30 = $or$cond$not & $6;
            if (!($or$cond30)) {
                _abort();
                // unreachable;
            }
            $$sum2728 = $2 | 4;
            $7 = (($p) + ($$sum2728)|0);
            $8 = HEAP32[$7>>2]|0;
            $9 = $8 & 1;
            $10 = ($9|0)==(0);
            if ($10) {
                _abort();
                // unreachable;
            }
            $11 = ($5|0)==(0);
            if ($11) {
                $12 = ($nb>>>0)<(256);
                if ($12) {
                    $newp$0 = 0;
                    return ($newp$0|0);
                }
                $13 = (($nb) + 4)|0;
                $14 = ($2>>>0)<($13>>>0);
                if (!($14)) {
                    $15 = (($2) - ($nb))|0;
                    $16 = HEAP32[(4460)>>2]|0;
                    $17 = $16 << 1;
                    $18 = ($15>>>0)>($17>>>0);
                    if (!($18)) {
                        $newp$0 = $p;
                        return ($newp$0|0);
                    }
                }
                $newp$0 = 0;
                return ($newp$0|0);
            }
            $19 = ($2>>>0)<($nb>>>0);
            if (!($19)) {
                $20 = (($2) - ($nb))|0;
                $21 = ($20>>>0)>(15);
                if (!($21)) {
                    $newp$0 = $p;
                    return ($newp$0|0);
                }
                $22 = (($p) + ($nb)|0);
                $23 = $1 & 1;
                $24 = $23 | $nb;
                $25 = $24 | 2;
                HEAP32[$0>>2] = $25;
                $$sum23 = (($nb) + 4)|0;
                $26 = (($p) + ($$sum23)|0);
                $27 = $20 | 3;
                HEAP32[$26>>2] = $27;
                $28 = HEAP32[$7>>2]|0;
                $29 = $28 | 1;
                HEAP32[$7>>2] = $29;
                _dispose_chunk($22,$20);
                $newp$0 = $p;
                return ($newp$0|0);
            }
            $30 = HEAP32[(4004)>>2]|0;
            $31 = ($3|0)==($30|0);
            if ($31) {
                $32 = HEAP32[(3992)>>2]|0;
                $33 = (($32) + ($2))|0;
                $34 = ($33>>>0)>($nb>>>0);
                if (!($34)) {
                    $newp$0 = 0;
                    return ($newp$0|0);
                }
                $35 = (($33) - ($nb))|0;
                $36 = (($p) + ($nb)|0);
                $37 = $1 & 1;
                $38 = $37 | $nb;
                $39 = $38 | 2;
                HEAP32[$0>>2] = $39;
                $$sum22 = (($nb) + 4)|0;
                $40 = (($p) + ($$sum22)|0);
                $41 = $35 | 1;
                HEAP32[$40>>2] = $41;
                HEAP32[(4004)>>2] = $36;
                HEAP32[(3992)>>2] = $35;
                $newp$0 = $p;
                return ($newp$0|0);
            }
            $42 = HEAP32[(4000)>>2]|0;
            $43 = ($3|0)==($42|0);
            if ($43) {
                $44 = HEAP32[(3988)>>2]|0;
                $45 = (($44) + ($2))|0;
                $46 = ($45>>>0)<($nb>>>0);
                if ($46) {
                    $newp$0 = 0;
                    return ($newp$0|0);
                }
                $47 = (($45) - ($nb))|0;
                $48 = ($47>>>0)>(15);
                if ($48) {
                    $49 = (($p) + ($nb)|0);
                    $50 = (($p) + ($45)|0);
                    $51 = $1 & 1;
                    $52 = $51 | $nb;
                    $53 = $52 | 2;
                    HEAP32[$0>>2] = $53;
                    $$sum19 = (($nb) + 4)|0;
                    $54 = (($p) + ($$sum19)|0);
                    $55 = $47 | 1;
                    HEAP32[$54>>2] = $55;
                    HEAP32[$50>>2] = $47;
                    $$sum20 = (($45) + 4)|0;
                    $56 = (($p) + ($$sum20)|0);
                    $57 = HEAP32[$56>>2]|0;
                    $58 = $57 & -2;
                    HEAP32[$56>>2] = $58;
                    $storemerge = $49;$storemerge21 = $47;
                } else {
                    $59 = $1 & 1;
                    $60 = $59 | $45;
                    $61 = $60 | 2;
                    HEAP32[$0>>2] = $61;
                    $$sum17 = (($45) + 4)|0;
                    $62 = (($p) + ($$sum17)|0);
                    $63 = HEAP32[$62>>2]|0;
                    $64 = $63 | 1;
                    HEAP32[$62>>2] = $64;
                    $storemerge = 0;$storemerge21 = 0;
                }
                HEAP32[(3988)>>2] = $storemerge21;
                HEAP32[(4000)>>2] = $storemerge;
                $newp$0 = $p;
                return ($newp$0|0);
            }
            $65 = $8 & 2;
            $66 = ($65|0)==(0);
            if (!($66)) {
                $newp$0 = 0;
                return ($newp$0|0);
            }
            $67 = $8 & -8;
            $68 = (($67) + ($2))|0;
            $69 = ($68>>>0)<($nb>>>0);
            if ($69) {
                $newp$0 = 0;
                return ($newp$0|0);
            }
            $70 = (($68) - ($nb))|0;
            $71 = $8 >>> 3;
            $72 = ($8>>>0)<(256);
            do {
                if ($72) {
                    $$sum15 = (($2) + 8)|0;
                    $73 = (($p) + ($$sum15)|0);
                    $74 = HEAP32[$73>>2]|0;
                    $$sum16 = (($2) + 12)|0;
                    $75 = (($p) + ($$sum16)|0);
                    $76 = HEAP32[$75>>2]|0;
                    $77 = $71 << 1;
                    $78 = (4020 + ($77<<2)|0);
                    $79 = ($74|0)==($78|0);
                    if (!($79)) {
                        $80 = ($74>>>0)<($4>>>0);
                        if ($80) {
                            _abort();
                            // unreachable;
                        }
                        $81 = ((($74)) + 12|0);
                        $82 = HEAP32[$81>>2]|0;
                        $83 = ($82|0)==($3|0);
                        if (!($83)) {
                            _abort();
                            // unreachable;
                        }
                    }
                    $84 = ($76|0)==($74|0);
                    if ($84) {
                        $85 = 1 << $71;
                        $86 = $85 ^ -1;
                        $87 = HEAP32[3980>>2]|0;
                        $88 = $87 & $86;
                        HEAP32[3980>>2] = $88;
                        break;
                    }
                    $89 = ($76|0)==($78|0);
                    if ($89) {
                        $$pre = ((($76)) + 8|0);
                        $$pre$phiZ2D = $$pre;
                    } else {
                        $90 = ($76>>>0)<($4>>>0);
                        if ($90) {
                            _abort();
                            // unreachable;
                        }
                        $91 = ((($76)) + 8|0);
                        $92 = HEAP32[$91>>2]|0;
                        $93 = ($92|0)==($3|0);
                        if ($93) {
                            $$pre$phiZ2D = $91;
                        } else {
                            _abort();
                            // unreachable;
                        }
                    }
                    $94 = ((($74)) + 12|0);
                    HEAP32[$94>>2] = $76;
                    HEAP32[$$pre$phiZ2D>>2] = $74;
                } else {
                    $$sum = (($2) + 24)|0;
                    $95 = (($p) + ($$sum)|0);
                    $96 = HEAP32[$95>>2]|0;
                    $$sum2 = (($2) + 12)|0;
                    $97 = (($p) + ($$sum2)|0);
                    $98 = HEAP32[$97>>2]|0;
                    $99 = ($98|0)==($3|0);
                    do {
                        if ($99) {
                            $$sum4 = (($2) + 20)|0;
                            $109 = (($p) + ($$sum4)|0);
                            $110 = HEAP32[$109>>2]|0;
                            $111 = ($110|0)==(0|0);
                            if ($111) {
                                $$sum3 = (($2) + 16)|0;
                                $112 = (($p) + ($$sum3)|0);
                                $113 = HEAP32[$112>>2]|0;
                                $114 = ($113|0)==(0|0);
                                if ($114) {
                                    $R$1 = 0;
                                    break;
                                } else {
                                    $R$0 = $113;$RP$0 = $112;
                                }
                            } else {
                                $R$0 = $110;$RP$0 = $109;
                            }
                            while(1) {
                                $115 = ((($R$0)) + 20|0);
                                $116 = HEAP32[$115>>2]|0;
                                $117 = ($116|0)==(0|0);
                                if (!($117)) {
                                    $R$0 = $116;$RP$0 = $115;
                                    continue;
                                }
                                $118 = ((($R$0)) + 16|0);
                                $119 = HEAP32[$118>>2]|0;
                                $120 = ($119|0)==(0|0);
                                if ($120) {
                                    $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
                                    break;
                                } else {
                                    $R$0 = $119;$RP$0 = $118;
                                }
                            }
                            $121 = ($RP$0$lcssa>>>0)<($4>>>0);
                            if ($121) {
                                _abort();
                                // unreachable;
                            } else {
                                HEAP32[$RP$0$lcssa>>2] = 0;
                                $R$1 = $R$0$lcssa;
                                break;
                            }
                        } else {
                            $$sum14 = (($2) + 8)|0;
                            $100 = (($p) + ($$sum14)|0);
                            $101 = HEAP32[$100>>2]|0;
                            $102 = ($101>>>0)<($4>>>0);
                            if ($102) {
                                _abort();
                                // unreachable;
                            }
                            $103 = ((($101)) + 12|0);
                            $104 = HEAP32[$103>>2]|0;
                            $105 = ($104|0)==($3|0);
                            if (!($105)) {
                                _abort();
                                // unreachable;
                            }
                            $106 = ((($98)) + 8|0);
                            $107 = HEAP32[$106>>2]|0;
                            $108 = ($107|0)==($3|0);
                            if ($108) {
                                HEAP32[$103>>2] = $98;
                                HEAP32[$106>>2] = $101;
                                $R$1 = $98;
                                break;
                            } else {
                                _abort();
                                // unreachable;
                            }
                        }
                    } while(0);
                    $122 = ($96|0)==(0|0);
                    if (!($122)) {
                        $$sum11 = (($2) + 28)|0;
                        $123 = (($p) + ($$sum11)|0);
                        $124 = HEAP32[$123>>2]|0;
                        $125 = (4284 + ($124<<2)|0);
                        $126 = HEAP32[$125>>2]|0;
                        $127 = ($3|0)==($126|0);
                        if ($127) {
                            HEAP32[$125>>2] = $R$1;
                            $cond = ($R$1|0)==(0|0);
                            if ($cond) {
                                $128 = 1 << $124;
                                $129 = $128 ^ -1;
                                $130 = HEAP32[(3984)>>2]|0;
                                $131 = $130 & $129;
                                HEAP32[(3984)>>2] = $131;
                                break;
                            }
                        } else {
                            $132 = HEAP32[(3996)>>2]|0;
                            $133 = ($96>>>0)<($132>>>0);
                            if ($133) {
                                _abort();
                                // unreachable;
                            }
                            $134 = ((($96)) + 16|0);
                            $135 = HEAP32[$134>>2]|0;
                            $136 = ($135|0)==($3|0);
                            if ($136) {
                                HEAP32[$134>>2] = $R$1;
                            } else {
                                $137 = ((($96)) + 20|0);
                                HEAP32[$137>>2] = $R$1;
                            }
                            $138 = ($R$1|0)==(0|0);
                            if ($138) {
                                break;
                            }
                        }
                        $139 = HEAP32[(3996)>>2]|0;
                        $140 = ($R$1>>>0)<($139>>>0);
                        if ($140) {
                            _abort();
                            // unreachable;
                        }
                        $141 = ((($R$1)) + 24|0);
                        HEAP32[$141>>2] = $96;
                        $$sum12 = (($2) + 16)|0;
                        $142 = (($p) + ($$sum12)|0);
                        $143 = HEAP32[$142>>2]|0;
                        $144 = ($143|0)==(0|0);
                        do {
                            if (!($144)) {
                                $145 = ($143>>>0)<($139>>>0);
                                if ($145) {
                                    _abort();
                                    // unreachable;
                                } else {
                                    $146 = ((($R$1)) + 16|0);
                                    HEAP32[$146>>2] = $143;
                                    $147 = ((($143)) + 24|0);
                                    HEAP32[$147>>2] = $R$1;
                                    break;
                                }
                            }
                        } while(0);
                        $$sum13 = (($2) + 20)|0;
                        $148 = (($p) + ($$sum13)|0);
                        $149 = HEAP32[$148>>2]|0;
                        $150 = ($149|0)==(0|0);
                        if (!($150)) {
                            $151 = HEAP32[(3996)>>2]|0;
                            $152 = ($149>>>0)<($151>>>0);
                            if ($152) {
                                _abort();
                                // unreachable;
                            } else {
                                $153 = ((($R$1)) + 20|0);
                                HEAP32[$153>>2] = $149;
                                $154 = ((($149)) + 24|0);
                                HEAP32[$154>>2] = $R$1;
                                break;
                            }
                        }
                    }
                }
            } while(0);
            $155 = ($70>>>0)<(16);
            if ($155) {
                $156 = $1 & 1;
                $157 = $68 | $156;
                $158 = $157 | 2;
                HEAP32[$0>>2] = $158;
                $$sum910 = $68 | 4;
                $159 = (($p) + ($$sum910)|0);
                $160 = HEAP32[$159>>2]|0;
                $161 = $160 | 1;
                HEAP32[$159>>2] = $161;
                $newp$0 = $p;
                return ($newp$0|0);
            } else {
                $162 = (($p) + ($nb)|0);
                $163 = $1 & 1;
                $164 = $163 | $nb;
                $165 = $164 | 2;
                HEAP32[$0>>2] = $165;
                $$sum5 = (($nb) + 4)|0;
                $166 = (($p) + ($$sum5)|0);
                $167 = $70 | 3;
                HEAP32[$166>>2] = $167;
                $$sum78 = $68 | 4;
                $168 = (($p) + ($$sum78)|0);
                $169 = HEAP32[$168>>2]|0;
                $170 = $169 | 1;
                HEAP32[$168>>2] = $170;
                _dispose_chunk($162,$70);
                $newp$0 = $p;
                return ($newp$0|0);
            }
            return (0)|0;
        }
        function _dispose_chunk($p,$psize) {
            $p = $p|0;
            $psize = $psize|0;
            var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
            var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
            var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
            var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
            var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
            var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
            var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
            var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
            var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
            var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
            var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
            var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
            var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
            var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
            var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
            var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
            var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
            var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
            var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
            sp = STACKTOP;
            $0 = (($p) + ($psize)|0);
            $1 = ((($p)) + 4|0);
            $2 = HEAP32[$1>>2]|0;
            $3 = $2 & 1;
            $4 = ($3|0)==(0);
            do {
                if ($4) {
                    $5 = HEAP32[$p>>2]|0;
                    $6 = $2 & 3;
                    $7 = ($6|0)==(0);
                    if ($7) {
                        return;
                    }
                    $8 = (0 - ($5))|0;
                    $9 = (($p) + ($8)|0);
                    $10 = (($5) + ($psize))|0;
                    $11 = HEAP32[(3996)>>2]|0;
                    $12 = ($9>>>0)<($11>>>0);
                    if ($12) {
                        _abort();
                        // unreachable;
                    }
                    $13 = HEAP32[(4000)>>2]|0;
                    $14 = ($9|0)==($13|0);
                    if ($14) {
                        $$sum = (($psize) + 4)|0;
                        $99 = (($p) + ($$sum)|0);
                        $100 = HEAP32[$99>>2]|0;
                        $101 = $100 & 3;
                        $102 = ($101|0)==(3);
                        if (!($102)) {
                            $$0 = $9;$$02 = $10;
                            break;
                        }
                        HEAP32[(3988)>>2] = $10;
                        $103 = $100 & -2;
                        HEAP32[$99>>2] = $103;
                        $104 = $10 | 1;
                        $$sum14 = (4 - ($5))|0;
                        $105 = (($p) + ($$sum14)|0);
                        HEAP32[$105>>2] = $104;
                        HEAP32[$0>>2] = $10;
                        return;
                    }
                    $15 = $5 >>> 3;
                    $16 = ($5>>>0)<(256);
                    if ($16) {
                        $$sum24 = (8 - ($5))|0;
                        $17 = (($p) + ($$sum24)|0);
                        $18 = HEAP32[$17>>2]|0;
                        $$sum25 = (12 - ($5))|0;
                        $19 = (($p) + ($$sum25)|0);
                        $20 = HEAP32[$19>>2]|0;
                        $21 = $15 << 1;
                        $22 = (4020 + ($21<<2)|0);
                        $23 = ($18|0)==($22|0);
                        if (!($23)) {
                            $24 = ($18>>>0)<($11>>>0);
                            if ($24) {
                                _abort();
                                // unreachable;
                            }
                            $25 = ((($18)) + 12|0);
                            $26 = HEAP32[$25>>2]|0;
                            $27 = ($26|0)==($9|0);
                            if (!($27)) {
                                _abort();
                                // unreachable;
                            }
                        }
                        $28 = ($20|0)==($18|0);
                        if ($28) {
                            $29 = 1 << $15;
                            $30 = $29 ^ -1;
                            $31 = HEAP32[3980>>2]|0;
                            $32 = $31 & $30;
                            HEAP32[3980>>2] = $32;
                            $$0 = $9;$$02 = $10;
                            break;
                        }
                        $33 = ($20|0)==($22|0);
                        if ($33) {
                            $$pre51 = ((($20)) + 8|0);
                            $$pre$phi52Z2D = $$pre51;
                        } else {
                            $34 = ($20>>>0)<($11>>>0);
                            if ($34) {
                                _abort();
                                // unreachable;
                            }
                            $35 = ((($20)) + 8|0);
                            $36 = HEAP32[$35>>2]|0;
                            $37 = ($36|0)==($9|0);
                            if ($37) {
                                $$pre$phi52Z2D = $35;
                            } else {
                                _abort();
                                // unreachable;
                            }
                        }
                        $38 = ((($18)) + 12|0);
                        HEAP32[$38>>2] = $20;
                        HEAP32[$$pre$phi52Z2D>>2] = $18;
                        $$0 = $9;$$02 = $10;
                        break;
                    }
                    $$sum16 = (24 - ($5))|0;
                    $39 = (($p) + ($$sum16)|0);
                    $40 = HEAP32[$39>>2]|0;
                    $$sum17 = (12 - ($5))|0;
                    $41 = (($p) + ($$sum17)|0);
                    $42 = HEAP32[$41>>2]|0;
                    $43 = ($42|0)==($9|0);
                    do {
                        if ($43) {
                            $$sum18 = (16 - ($5))|0;
                            $$sum19 = (($$sum18) + 4)|0;
                            $53 = (($p) + ($$sum19)|0);
                            $54 = HEAP32[$53>>2]|0;
                            $55 = ($54|0)==(0|0);
                            if ($55) {
                                $56 = (($p) + ($$sum18)|0);
                                $57 = HEAP32[$56>>2]|0;
                                $58 = ($57|0)==(0|0);
                                if ($58) {
                                    $R$1 = 0;
                                    break;
                                } else {
                                    $R$0 = $57;$RP$0 = $56;
                                }
                            } else {
                                $R$0 = $54;$RP$0 = $53;
                            }
                            while(1) {
                                $59 = ((($R$0)) + 20|0);
                                $60 = HEAP32[$59>>2]|0;
                                $61 = ($60|0)==(0|0);
                                if (!($61)) {
                                    $R$0 = $60;$RP$0 = $59;
                                    continue;
                                }
                                $62 = ((($R$0)) + 16|0);
                                $63 = HEAP32[$62>>2]|0;
                                $64 = ($63|0)==(0|0);
                                if ($64) {
                                    $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
                                    break;
                                } else {
                                    $R$0 = $63;$RP$0 = $62;
                                }
                            }
                            $65 = ($RP$0$lcssa>>>0)<($11>>>0);
                            if ($65) {
                                _abort();
                                // unreachable;
                            } else {
                                HEAP32[$RP$0$lcssa>>2] = 0;
                                $R$1 = $R$0$lcssa;
                                break;
                            }
                        } else {
                            $$sum23 = (8 - ($5))|0;
                            $44 = (($p) + ($$sum23)|0);
                            $45 = HEAP32[$44>>2]|0;
                            $46 = ($45>>>0)<($11>>>0);
                            if ($46) {
                                _abort();
                                // unreachable;
                            }
                            $47 = ((($45)) + 12|0);
                            $48 = HEAP32[$47>>2]|0;
                            $49 = ($48|0)==($9|0);
                            if (!($49)) {
                                _abort();
                                // unreachable;
                            }
                            $50 = ((($42)) + 8|0);
                            $51 = HEAP32[$50>>2]|0;
                            $52 = ($51|0)==($9|0);
                            if ($52) {
                                HEAP32[$47>>2] = $42;
                                HEAP32[$50>>2] = $45;
                                $R$1 = $42;
                                break;
                            } else {
                                _abort();
                                // unreachable;
                            }
                        }
                    } while(0);
                    $66 = ($40|0)==(0|0);
                    if ($66) {
                        $$0 = $9;$$02 = $10;
                    } else {
                        $$sum20 = (28 - ($5))|0;
                        $67 = (($p) + ($$sum20)|0);
                        $68 = HEAP32[$67>>2]|0;
                        $69 = (4284 + ($68<<2)|0);
                        $70 = HEAP32[$69>>2]|0;
                        $71 = ($9|0)==($70|0);
                        if ($71) {
                            HEAP32[$69>>2] = $R$1;
                            $cond = ($R$1|0)==(0|0);
                            if ($cond) {
                                $72 = 1 << $68;
                                $73 = $72 ^ -1;
                                $74 = HEAP32[(3984)>>2]|0;
                                $75 = $74 & $73;
                                HEAP32[(3984)>>2] = $75;
                                $$0 = $9;$$02 = $10;
                                break;
                            }
                        } else {
                            $76 = HEAP32[(3996)>>2]|0;
                            $77 = ($40>>>0)<($76>>>0);
                            if ($77) {
                                _abort();
                                // unreachable;
                            }
                            $78 = ((($40)) + 16|0);
                            $79 = HEAP32[$78>>2]|0;
                            $80 = ($79|0)==($9|0);
                            if ($80) {
                                HEAP32[$78>>2] = $R$1;
                            } else {
                                $81 = ((($40)) + 20|0);
                                HEAP32[$81>>2] = $R$1;
                            }
                            $82 = ($R$1|0)==(0|0);
                            if ($82) {
                                $$0 = $9;$$02 = $10;
                                break;
                            }
                        }
                        $83 = HEAP32[(3996)>>2]|0;
                        $84 = ($R$1>>>0)<($83>>>0);
                        if ($84) {
                            _abort();
                            // unreachable;
                        }
                        $85 = ((($R$1)) + 24|0);
                        HEAP32[$85>>2] = $40;
                        $$sum21 = (16 - ($5))|0;
                        $86 = (($p) + ($$sum21)|0);
                        $87 = HEAP32[$86>>2]|0;
                        $88 = ($87|0)==(0|0);
                        do {
                            if (!($88)) {
                                $89 = ($87>>>0)<($83>>>0);
                                if ($89) {
                                    _abort();
                                    // unreachable;
                                } else {
                                    $90 = ((($R$1)) + 16|0);
                                    HEAP32[$90>>2] = $87;
                                    $91 = ((($87)) + 24|0);
                                    HEAP32[$91>>2] = $R$1;
                                    break;
                                }
                            }
                        } while(0);
                        $$sum22 = (($$sum21) + 4)|0;
                        $92 = (($p) + ($$sum22)|0);
                        $93 = HEAP32[$92>>2]|0;
                        $94 = ($93|0)==(0|0);
                        if ($94) {
                            $$0 = $9;$$02 = $10;
                        } else {
                            $95 = HEAP32[(3996)>>2]|0;
                            $96 = ($93>>>0)<($95>>>0);
                            if ($96) {
                                _abort();
                                // unreachable;
                            } else {
                                $97 = ((($R$1)) + 20|0);
                                HEAP32[$97>>2] = $93;
                                $98 = ((($93)) + 24|0);
                                HEAP32[$98>>2] = $R$1;
                                $$0 = $9;$$02 = $10;
                                break;
                            }
                        }
                    }
                } else {
                    $$0 = $p;$$02 = $psize;
                }
            } while(0);
            $106 = HEAP32[(3996)>>2]|0;
            $107 = ($0>>>0)<($106>>>0);
            if ($107) {
                _abort();
                // unreachable;
            }
            $$sum1 = (($psize) + 4)|0;
            $108 = (($p) + ($$sum1)|0);
            $109 = HEAP32[$108>>2]|0;
            $110 = $109 & 2;
            $111 = ($110|0)==(0);
            if ($111) {
                $112 = HEAP32[(4004)>>2]|0;
                $113 = ($0|0)==($112|0);
                if ($113) {
                    $114 = HEAP32[(3992)>>2]|0;
                    $115 = (($114) + ($$02))|0;
                    HEAP32[(3992)>>2] = $115;
                    HEAP32[(4004)>>2] = $$0;
                    $116 = $115 | 1;
                    $117 = ((($$0)) + 4|0);
                    HEAP32[$117>>2] = $116;
                    $118 = HEAP32[(4000)>>2]|0;
                    $119 = ($$0|0)==($118|0);
                    if (!($119)) {
                        return;
                    }
                    HEAP32[(4000)>>2] = 0;
                    HEAP32[(3988)>>2] = 0;
                    return;
                }
                $120 = HEAP32[(4000)>>2]|0;
                $121 = ($0|0)==($120|0);
                if ($121) {
                    $122 = HEAP32[(3988)>>2]|0;
                    $123 = (($122) + ($$02))|0;
                    HEAP32[(3988)>>2] = $123;
                    HEAP32[(4000)>>2] = $$0;
                    $124 = $123 | 1;
                    $125 = ((($$0)) + 4|0);
                    HEAP32[$125>>2] = $124;
                    $126 = (($$0) + ($123)|0);
                    HEAP32[$126>>2] = $123;
                    return;
                }
                $127 = $109 & -8;
                $128 = (($127) + ($$02))|0;
                $129 = $109 >>> 3;
                $130 = ($109>>>0)<(256);
                do {
                    if ($130) {
                        $$sum12 = (($psize) + 8)|0;
                        $131 = (($p) + ($$sum12)|0);
                        $132 = HEAP32[$131>>2]|0;
                        $$sum13 = (($psize) + 12)|0;
                        $133 = (($p) + ($$sum13)|0);
                        $134 = HEAP32[$133>>2]|0;
                        $135 = $129 << 1;
                        $136 = (4020 + ($135<<2)|0);
                        $137 = ($132|0)==($136|0);
                        if (!($137)) {
                            $138 = ($132>>>0)<($106>>>0);
                            if ($138) {
                                _abort();
                                // unreachable;
                            }
                            $139 = ((($132)) + 12|0);
                            $140 = HEAP32[$139>>2]|0;
                            $141 = ($140|0)==($0|0);
                            if (!($141)) {
                                _abort();
                                // unreachable;
                            }
                        }
                        $142 = ($134|0)==($132|0);
                        if ($142) {
                            $143 = 1 << $129;
                            $144 = $143 ^ -1;
                            $145 = HEAP32[3980>>2]|0;
                            $146 = $145 & $144;
                            HEAP32[3980>>2] = $146;
                            break;
                        }
                        $147 = ($134|0)==($136|0);
                        if ($147) {
                            $$pre49 = ((($134)) + 8|0);
                            $$pre$phi50Z2D = $$pre49;
                        } else {
                            $148 = ($134>>>0)<($106>>>0);
                            if ($148) {
                                _abort();
                                // unreachable;
                            }
                            $149 = ((($134)) + 8|0);
                            $150 = HEAP32[$149>>2]|0;
                            $151 = ($150|0)==($0|0);
                            if ($151) {
                                $$pre$phi50Z2D = $149;
                            } else {
                                _abort();
                                // unreachable;
                            }
                        }
                        $152 = ((($132)) + 12|0);
                        HEAP32[$152>>2] = $134;
                        HEAP32[$$pre$phi50Z2D>>2] = $132;
                    } else {
                        $$sum2 = (($psize) + 24)|0;
                        $153 = (($p) + ($$sum2)|0);
                        $154 = HEAP32[$153>>2]|0;
                        $$sum3 = (($psize) + 12)|0;
                        $155 = (($p) + ($$sum3)|0);
                        $156 = HEAP32[$155>>2]|0;
                        $157 = ($156|0)==($0|0);
                        do {
                            if ($157) {
                                $$sum5 = (($psize) + 20)|0;
                                $167 = (($p) + ($$sum5)|0);
                                $168 = HEAP32[$167>>2]|0;
                                $169 = ($168|0)==(0|0);
                                if ($169) {
                                    $$sum4 = (($psize) + 16)|0;
                                    $170 = (($p) + ($$sum4)|0);
                                    $171 = HEAP32[$170>>2]|0;
                                    $172 = ($171|0)==(0|0);
                                    if ($172) {
                                        $R7$1 = 0;
                                        break;
                                    } else {
                                        $R7$0 = $171;$RP9$0 = $170;
                                    }
                                } else {
                                    $R7$0 = $168;$RP9$0 = $167;
                                }
                                while(1) {
                                    $173 = ((($R7$0)) + 20|0);
                                    $174 = HEAP32[$173>>2]|0;
                                    $175 = ($174|0)==(0|0);
                                    if (!($175)) {
                                        $R7$0 = $174;$RP9$0 = $173;
                                        continue;
                                    }
                                    $176 = ((($R7$0)) + 16|0);
                                    $177 = HEAP32[$176>>2]|0;
                                    $178 = ($177|0)==(0|0);
                                    if ($178) {
                                        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
                                        break;
                                    } else {
                                        $R7$0 = $177;$RP9$0 = $176;
                                    }
                                }
                                $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
                                if ($179) {
                                    _abort();
                                    // unreachable;
                                } else {
                                    HEAP32[$RP9$0$lcssa>>2] = 0;
                                    $R7$1 = $R7$0$lcssa;
                                    break;
                                }
                            } else {
                                $$sum11 = (($psize) + 8)|0;
                                $158 = (($p) + ($$sum11)|0);
                                $159 = HEAP32[$158>>2]|0;
                                $160 = ($159>>>0)<($106>>>0);
                                if ($160) {
                                    _abort();
                                    // unreachable;
                                }
                                $161 = ((($159)) + 12|0);
                                $162 = HEAP32[$161>>2]|0;
                                $163 = ($162|0)==($0|0);
                                if (!($163)) {
                                    _abort();
                                    // unreachable;
                                }
                                $164 = ((($156)) + 8|0);
                                $165 = HEAP32[$164>>2]|0;
                                $166 = ($165|0)==($0|0);
                                if ($166) {
                                    HEAP32[$161>>2] = $156;
                                    HEAP32[$164>>2] = $159;
                                    $R7$1 = $156;
                                    break;
                                } else {
                                    _abort();
                                    // unreachable;
                                }
                            }
                        } while(0);
                        $180 = ($154|0)==(0|0);
                        if (!($180)) {
                            $$sum8 = (($psize) + 28)|0;
                            $181 = (($p) + ($$sum8)|0);
                            $182 = HEAP32[$181>>2]|0;
                            $183 = (4284 + ($182<<2)|0);
                            $184 = HEAP32[$183>>2]|0;
                            $185 = ($0|0)==($184|0);
                            if ($185) {
                                HEAP32[$183>>2] = $R7$1;
                                $cond39 = ($R7$1|0)==(0|0);
                                if ($cond39) {
                                    $186 = 1 << $182;
                                    $187 = $186 ^ -1;
                                    $188 = HEAP32[(3984)>>2]|0;
                                    $189 = $188 & $187;
                                    HEAP32[(3984)>>2] = $189;
                                    break;
                                }
                            } else {
                                $190 = HEAP32[(3996)>>2]|0;
                                $191 = ($154>>>0)<($190>>>0);
                                if ($191) {
                                    _abort();
                                    // unreachable;
                                }
                                $192 = ((($154)) + 16|0);
                                $193 = HEAP32[$192>>2]|0;
                                $194 = ($193|0)==($0|0);
                                if ($194) {
                                    HEAP32[$192>>2] = $R7$1;
                                } else {
                                    $195 = ((($154)) + 20|0);
                                    HEAP32[$195>>2] = $R7$1;
                                }
                                $196 = ($R7$1|0)==(0|0);
                                if ($196) {
                                    break;
                                }
                            }
                            $197 = HEAP32[(3996)>>2]|0;
                            $198 = ($R7$1>>>0)<($197>>>0);
                            if ($198) {
                                _abort();
                                // unreachable;
                            }
                            $199 = ((($R7$1)) + 24|0);
                            HEAP32[$199>>2] = $154;
                            $$sum9 = (($psize) + 16)|0;
                            $200 = (($p) + ($$sum9)|0);
                            $201 = HEAP32[$200>>2]|0;
                            $202 = ($201|0)==(0|0);
                            do {
                                if (!($202)) {
                                    $203 = ($201>>>0)<($197>>>0);
                                    if ($203) {
                                        _abort();
                                        // unreachable;
                                    } else {
                                        $204 = ((($R7$1)) + 16|0);
                                        HEAP32[$204>>2] = $201;
                                        $205 = ((($201)) + 24|0);
                                        HEAP32[$205>>2] = $R7$1;
                                        break;
                                    }
                                }
                            } while(0);
                            $$sum10 = (($psize) + 20)|0;
                            $206 = (($p) + ($$sum10)|0);
                            $207 = HEAP32[$206>>2]|0;
                            $208 = ($207|0)==(0|0);
                            if (!($208)) {
                                $209 = HEAP32[(3996)>>2]|0;
                                $210 = ($207>>>0)<($209>>>0);
                                if ($210) {
                                    _abort();
                                    // unreachable;
                                } else {
                                    $211 = ((($R7$1)) + 20|0);
                                    HEAP32[$211>>2] = $207;
                                    $212 = ((($207)) + 24|0);
                                    HEAP32[$212>>2] = $R7$1;
                                    break;
                                }
                            }
                        }
                    }
                } while(0);
                $213 = $128 | 1;
                $214 = ((($$0)) + 4|0);
                HEAP32[$214>>2] = $213;
                $215 = (($$0) + ($128)|0);
                HEAP32[$215>>2] = $128;
                $216 = HEAP32[(4000)>>2]|0;
                $217 = ($$0|0)==($216|0);
                if ($217) {
                    HEAP32[(3988)>>2] = $128;
                    return;
                } else {
                    $$1 = $128;
                }
            } else {
                $218 = $109 & -2;
                HEAP32[$108>>2] = $218;
                $219 = $$02 | 1;
                $220 = ((($$0)) + 4|0);
                HEAP32[$220>>2] = $219;
                $221 = (($$0) + ($$02)|0);
                HEAP32[$221>>2] = $$02;
                $$1 = $$02;
            }
            $222 = $$1 >>> 3;
            $223 = ($$1>>>0)<(256);
            if ($223) {
                $224 = $222 << 1;
                $225 = (4020 + ($224<<2)|0);
                $226 = HEAP32[3980>>2]|0;
                $227 = 1 << $222;
                $228 = $226 & $227;
                $229 = ($228|0)==(0);
                if ($229) {
                    $230 = $226 | $227;
                    HEAP32[3980>>2] = $230;
                    $$pre = (($224) + 2)|0;
                    $$pre48 = (4020 + ($$pre<<2)|0);
                    $$pre$phiZ2D = $$pre48;$F16$0 = $225;
                } else {
                    $$sum7 = (($224) + 2)|0;
                    $231 = (4020 + ($$sum7<<2)|0);
                    $232 = HEAP32[$231>>2]|0;
                    $233 = HEAP32[(3996)>>2]|0;
                    $234 = ($232>>>0)<($233>>>0);
                    if ($234) {
                        _abort();
                        // unreachable;
                    } else {
                        $$pre$phiZ2D = $231;$F16$0 = $232;
                    }
                }
                HEAP32[$$pre$phiZ2D>>2] = $$0;
                $235 = ((($F16$0)) + 12|0);
                HEAP32[$235>>2] = $$0;
                $236 = ((($$0)) + 8|0);
                HEAP32[$236>>2] = $F16$0;
                $237 = ((($$0)) + 12|0);
                HEAP32[$237>>2] = $225;
                return;
            }
            $238 = $$1 >>> 8;
            $239 = ($238|0)==(0);
            if ($239) {
                $I19$0 = 0;
            } else {
                $240 = ($$1>>>0)>(16777215);
                if ($240) {
                    $I19$0 = 31;
                } else {
                    $241 = (($238) + 1048320)|0;
                    $242 = $241 >>> 16;
                    $243 = $242 & 8;
                    $244 = $238 << $243;
                    $245 = (($244) + 520192)|0;
                    $246 = $245 >>> 16;
                    $247 = $246 & 4;
                    $248 = $247 | $243;
                    $249 = $244 << $247;
                    $250 = (($249) + 245760)|0;
                    $251 = $250 >>> 16;
                    $252 = $251 & 2;
                    $253 = $248 | $252;
                    $254 = (14 - ($253))|0;
                    $255 = $249 << $252;
                    $256 = $255 >>> 15;
                    $257 = (($254) + ($256))|0;
                    $258 = $257 << 1;
                    $259 = (($257) + 7)|0;
                    $260 = $$1 >>> $259;
                    $261 = $260 & 1;
                    $262 = $261 | $258;
                    $I19$0 = $262;
                }
            }
            $263 = (4284 + ($I19$0<<2)|0);
            $264 = ((($$0)) + 28|0);
            HEAP32[$264>>2] = $I19$0;
            $265 = ((($$0)) + 16|0);
            $266 = ((($$0)) + 20|0);
            HEAP32[$266>>2] = 0;
            HEAP32[$265>>2] = 0;
            $267 = HEAP32[(3984)>>2]|0;
            $268 = 1 << $I19$0;
            $269 = $267 & $268;
            $270 = ($269|0)==(0);
            if ($270) {
                $271 = $267 | $268;
                HEAP32[(3984)>>2] = $271;
                HEAP32[$263>>2] = $$0;
                $272 = ((($$0)) + 24|0);
                HEAP32[$272>>2] = $263;
                $273 = ((($$0)) + 12|0);
                HEAP32[$273>>2] = $$0;
                $274 = ((($$0)) + 8|0);
                HEAP32[$274>>2] = $$0;
                return;
            }
            $275 = HEAP32[$263>>2]|0;
            $276 = ((($275)) + 4|0);
            $277 = HEAP32[$276>>2]|0;
            $278 = $277 & -8;
            $279 = ($278|0)==($$1|0);
            L191: do {
                if ($279) {
                    $T$0$lcssa = $275;
                } else {
                    $280 = ($I19$0|0)==(31);
                    $281 = $I19$0 >>> 1;
                    $282 = (25 - ($281))|0;
                    $283 = $280 ? 0 : $282;
                    $284 = $$1 << $283;
                    $K20$043 = $284;$T$042 = $275;
                    while(1) {
                        $291 = $K20$043 >>> 31;
                        $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
                        $287 = HEAP32[$292>>2]|0;
                        $293 = ($287|0)==(0|0);
                        if ($293) {
                            $$lcssa = $292;$T$042$lcssa = $T$042;
                            break;
                        }
                        $285 = $K20$043 << 1;
                        $286 = ((($287)) + 4|0);
                        $288 = HEAP32[$286>>2]|0;
                        $289 = $288 & -8;
                        $290 = ($289|0)==($$1|0);
                        if ($290) {
                            $T$0$lcssa = $287;
                            break L191;
                        } else {
                            $K20$043 = $285;$T$042 = $287;
                        }
                    }
                    $294 = HEAP32[(3996)>>2]|0;
                    $295 = ($$lcssa>>>0)<($294>>>0);
                    if ($295) {
                        _abort();
                        // unreachable;
                    }
                    HEAP32[$$lcssa>>2] = $$0;
                    $296 = ((($$0)) + 24|0);
                    HEAP32[$296>>2] = $T$042$lcssa;
                    $297 = ((($$0)) + 12|0);
                    HEAP32[$297>>2] = $$0;
                    $298 = ((($$0)) + 8|0);
                    HEAP32[$298>>2] = $$0;
                    return;
                }
            } while(0);
            $299 = ((($T$0$lcssa)) + 8|0);
            $300 = HEAP32[$299>>2]|0;
            $301 = HEAP32[(3996)>>2]|0;
            $302 = ($300>>>0)>=($301>>>0);
            $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
            $303 = $302 & $not$;
            if (!($303)) {
                _abort();
                // unreachable;
            }
            $304 = ((($300)) + 12|0);
            HEAP32[$304>>2] = $$0;
            HEAP32[$299>>2] = $$0;
            $305 = ((($$0)) + 8|0);
            HEAP32[$305>>2] = $300;
            $306 = ((($$0)) + 12|0);
            HEAP32[$306>>2] = $T$0$lcssa;
            $307 = ((($$0)) + 24|0);
            HEAP32[$307>>2] = 0;
            return;
        }
        function runPostSets() {
        }
        function _i64Subtract(a, b, c, d) {
            a = a|0; b = b|0; c = c|0; d = d|0;
            var l = 0, h = 0;
            l = (a - c)>>>0;
            h = (b - d)>>>0;
            h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
            return ((tempRet0 = h,l|0)|0);
        }
        function _memset(ptr, value, num) {
            ptr = ptr|0; value = value|0; num = num|0;
            var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
            stop = (ptr + num)|0;
            if ((num|0) >= 20) {
                // This is unaligned, but quite large, so work hard to get to aligned settings
                value = value & 0xff;
                unaligned = ptr & 3;
                value4 = value | (value << 8) | (value << 16) | (value << 24);
                stop4 = stop & ~3;
                if (unaligned) {
                    unaligned = (ptr + 4 - unaligned)|0;
                    while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
                        HEAP8[((ptr)>>0)]=value;
                        ptr = (ptr+1)|0;
                    }
                }
                while ((ptr|0) < (stop4|0)) {
                    HEAP32[((ptr)>>2)]=value4;
                    ptr = (ptr+4)|0;
                }
            }
            while ((ptr|0) < (stop|0)) {
                HEAP8[((ptr)>>0)]=value;
                ptr = (ptr+1)|0;
            }
            return (ptr-num)|0;
        }
        function _bitshift64Shl(low, high, bits) {
            low = low|0; high = high|0; bits = bits|0;
            var ander = 0;
            if ((bits|0) < 32) {
                ander = ((1 << bits) - 1)|0;
                tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
                return low << bits;
            }
            tempRet0 = low << (bits - 32);
            return 0;
        }
        function _i64Add(a, b, c, d) {
            /*
             x = a + b*2^32
             y = c + d*2^32
             result = l + h*2^32
             */
            a = a|0; b = b|0; c = c|0; d = d|0;
            var l = 0, h = 0;
            l = (a + c)>>>0;
            h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
            return ((tempRet0 = h,l|0)|0);
        }
        function _bitshift64Lshr(low, high, bits) {
            low = low|0; high = high|0; bits = bits|0;
            var ander = 0;
            if ((bits|0) < 32) {
                ander = ((1 << bits) - 1)|0;
                tempRet0 = high >>> bits;
                return (low >>> bits) | ((high&ander) << (32 - bits));
            }
            tempRet0 = 0;
            return (high >>> (bits - 32))|0;
        }
        function _memcpy(dest, src, num) {
            dest = dest|0; src = src|0; num = num|0;
            var ret = 0;
            if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
            ret = dest|0;
            if ((dest&3) == (src&3)) {
                while (dest & 3) {
                    if ((num|0) == 0) return ret|0;
                    HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
                    dest = (dest+1)|0;
                    src = (src+1)|0;
                    num = (num-1)|0;
                }
                while ((num|0) >= 4) {
                    HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
                    dest = (dest+4)|0;
                    src = (src+4)|0;
                    num = (num-4)|0;
                }
            }
            while ((num|0) > 0) {
                HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
                dest = (dest+1)|0;
                src = (src+1)|0;
                num = (num-1)|0;
            }
            return ret|0;
        }
        function _memmove(dest, src, num) {
            dest = dest|0; src = src|0; num = num|0;
            var ret = 0;
            if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
                // Unlikely case: Copy backwards in a safe manner
                ret = dest;
                src = (src + num)|0;
                dest = (dest + num)|0;
                while ((num|0) > 0) {
                    dest = (dest - 1)|0;
                    src = (src - 1)|0;
                    num = (num - 1)|0;
                    HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
                }
                dest = ret;
            } else {
                _memcpy(dest, src, num) | 0;
            }
            return dest | 0;
        }
        function _bitshift64Ashr(low, high, bits) {
            low = low|0; high = high|0; bits = bits|0;
            var ander = 0;
            if ((bits|0) < 32) {
                ander = ((1 << bits) - 1)|0;
                tempRet0 = high >> bits;
                return (low >>> bits) | ((high&ander) << (32 - bits));
            }
            tempRet0 = (high|0) < 0 ? -1 : 0;
            return (high >> (bits - 32))|0;
        }
        function _llvm_cttz_i32(x) {
            x = x|0;
            var ret = 0;
            ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
            if ((ret|0) < 8) return ret|0;
            ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
            if ((ret|0) < 8) return (ret + 8)|0;
            ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
            if ((ret|0) < 8) return (ret + 16)|0;
            return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
        }

// ======== compiled code from system/lib/compiler-rt , see readme therein
        function ___muldsi3($a, $b) {
            $a = $a | 0;
            $b = $b | 0;
            var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
            $1 = $a & 65535;
            $2 = $b & 65535;
            $3 = Math_imul($2, $1) | 0;
            $6 = $a >>> 16;
            $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
            $11 = $b >>> 16;
            $12 = Math_imul($11, $1) | 0;
            return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
        }
        function ___divdi3($a$0, $a$1, $b$0, $b$1) {
            $a$0 = $a$0 | 0;
            $a$1 = $a$1 | 0;
            $b$0 = $b$0 | 0;
            $b$1 = $b$1 | 0;
            var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
            $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
            $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
            $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
            $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
            $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
            $4$1 = tempRet0;
            $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
            $7$0 = $2$0 ^ $1$0;
            $7$1 = $2$1 ^ $1$1;
            $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
            $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
            return $10$0 | 0;
        }
        function ___remdi3($a$0, $a$1, $b$0, $b$1) {
            $a$0 = $a$0 | 0;
            $a$1 = $a$1 | 0;
            $b$0 = $b$0 | 0;
            $b$1 = $b$1 | 0;
            var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
            __stackBase__ = STACKTOP;
            STACKTOP = STACKTOP + 16 | 0;
            $rem = __stackBase__ | 0;
            $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
            $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
            $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
            $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
            $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
            $4$1 = tempRet0;
            $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
            ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
            $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
            $10$1 = tempRet0;
            STACKTOP = __stackBase__;
            return (tempRet0 = $10$1, $10$0) | 0;
        }
        function ___muldi3($a$0, $a$1, $b$0, $b$1) {
            $a$0 = $a$0 | 0;
            $a$1 = $a$1 | 0;
            $b$0 = $b$0 | 0;
            $b$1 = $b$1 | 0;
            var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
            $x_sroa_0_0_extract_trunc = $a$0;
            $y_sroa_0_0_extract_trunc = $b$0;
            $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
            $1$1 = tempRet0;
            $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
            return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
        }
        function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
            $a$0 = $a$0 | 0;
            $a$1 = $a$1 | 0;
            $b$0 = $b$0 | 0;
            $b$1 = $b$1 | 0;
            var $1$0 = 0;
            $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
            return $1$0 | 0;
        }
        function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
            $a$0 = $a$0 | 0;
            $a$1 = $a$1 | 0;
            $b$0 = $b$0 | 0;
            $b$1 = $b$1 | 0;
            var $rem = 0, __stackBase__ = 0;
            __stackBase__ = STACKTOP;
            STACKTOP = STACKTOP + 16 | 0;
            $rem = __stackBase__ | 0;
            ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
            STACKTOP = __stackBase__;
            return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
        }
        function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
            $a$0 = $a$0 | 0;
            $a$1 = $a$1 | 0;
            $b$0 = $b$0 | 0;
            $b$1 = $b$1 | 0;
            $rem = $rem | 0;
            var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
            $n_sroa_0_0_extract_trunc = $a$0;
            $n_sroa_1_4_extract_shift$0 = $a$1;
            $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
            $d_sroa_0_0_extract_trunc = $b$0;
            $d_sroa_1_4_extract_shift$0 = $b$1;
            $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
            if (($n_sroa_1_4_extract_trunc | 0) == 0) {
                $4 = ($rem | 0) != 0;
                if (($d_sroa_1_4_extract_trunc | 0) == 0) {
                    if ($4) {
                        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
                        HEAP32[$rem + 4 >> 2] = 0;
                    }
                    $_0$1 = 0;
                    $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
                    return (tempRet0 = $_0$1, $_0$0) | 0;
                } else {
                    if (!$4) {
                        $_0$1 = 0;
                        $_0$0 = 0;
                        return (tempRet0 = $_0$1, $_0$0) | 0;
                    }
                    HEAP32[$rem >> 2] = $a$0 & -1;
                    HEAP32[$rem + 4 >> 2] = $a$1 & 0;
                    $_0$1 = 0;
                    $_0$0 = 0;
                    return (tempRet0 = $_0$1, $_0$0) | 0;
                }
            }
            $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
            do {
                if (($d_sroa_0_0_extract_trunc | 0) == 0) {
                    if ($17) {
                        if (($rem | 0) != 0) {
                            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
                            HEAP32[$rem + 4 >> 2] = 0;
                        }
                        $_0$1 = 0;
                        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
                        return (tempRet0 = $_0$1, $_0$0) | 0;
                    }
                    if (($n_sroa_0_0_extract_trunc | 0) == 0) {
                        if (($rem | 0) != 0) {
                            HEAP32[$rem >> 2] = 0;
                            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
                        }
                        $_0$1 = 0;
                        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
                        return (tempRet0 = $_0$1, $_0$0) | 0;
                    }
                    $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
                    if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
                        if (($rem | 0) != 0) {
                            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
                            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
                        }
                        $_0$1 = 0;
                        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
                        return (tempRet0 = $_0$1, $_0$0) | 0;
                    }
                    $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
                    $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
                    if ($51 >>> 0 <= 30) {
                        $57 = $51 + 1 | 0;
                        $58 = 31 - $51 | 0;
                        $sr_1_ph = $57;
                        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
                        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
                        $q_sroa_0_1_ph = 0;
                        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
                        break;
                    }
                    if (($rem | 0) == 0) {
                        $_0$1 = 0;
                        $_0$0 = 0;
                        return (tempRet0 = $_0$1, $_0$0) | 0;
                    }
                    HEAP32[$rem >> 2] = 0 | $a$0 & -1;
                    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
                    $_0$1 = 0;
                    $_0$0 = 0;
                    return (tempRet0 = $_0$1, $_0$0) | 0;
                } else {
                    if (!$17) {
                        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
                        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
                        if ($119 >>> 0 <= 31) {
                            $125 = $119 + 1 | 0;
                            $126 = 31 - $119 | 0;
                            $130 = $119 - 31 >> 31;
                            $sr_1_ph = $125;
                            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
                            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
                            $q_sroa_0_1_ph = 0;
                            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
                            break;
                        }
                        if (($rem | 0) == 0) {
                            $_0$1 = 0;
                            $_0$0 = 0;
                            return (tempRet0 = $_0$1, $_0$0) | 0;
                        }
                        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
                        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
                        $_0$1 = 0;
                        $_0$0 = 0;
                        return (tempRet0 = $_0$1, $_0$0) | 0;
                    }
                    $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
                    if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
                        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
                        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
                        $89 = 64 - $88 | 0;
                        $91 = 32 - $88 | 0;
                        $92 = $91 >> 31;
                        $95 = $88 - 32 | 0;
                        $105 = $95 >> 31;
                        $sr_1_ph = $88;
                        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
                        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
                        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
                        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
                        break;
                    }
                    if (($rem | 0) != 0) {
                        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
                        HEAP32[$rem + 4 >> 2] = 0;
                    }
                    if (($d_sroa_0_0_extract_trunc | 0) == 1) {
                        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
                        $_0$0 = 0 | $a$0 & -1;
                        return (tempRet0 = $_0$1, $_0$0) | 0;
                    } else {
                        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
                        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
                        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
                        return (tempRet0 = $_0$1, $_0$0) | 0;
                    }
                }
            } while (0);
            if (($sr_1_ph | 0) == 0) {
                $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
                $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
                $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
                $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
                $carry_0_lcssa$1 = 0;
                $carry_0_lcssa$0 = 0;
            } else {
                $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
                $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
                $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
                $137$1 = tempRet0;
                $q_sroa_1_1198 = $q_sroa_1_1_ph;
                $q_sroa_0_1199 = $q_sroa_0_1_ph;
                $r_sroa_1_1200 = $r_sroa_1_1_ph;
                $r_sroa_0_1201 = $r_sroa_0_1_ph;
                $sr_1202 = $sr_1_ph;
                $carry_0203 = 0;
                while (1) {
                    $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
                    $149 = $carry_0203 | $q_sroa_0_1199 << 1;
                    $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
                    $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
                    _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
                    $150$1 = tempRet0;
                    $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
                    $152 = $151$0 & 1;
                    $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
                    $r_sroa_0_0_extract_trunc = $154$0;
                    $r_sroa_1_4_extract_trunc = tempRet0;
                    $155 = $sr_1202 - 1 | 0;
                    if (($155 | 0) == 0) {
                        break;
                    } else {
                        $q_sroa_1_1198 = $147;
                        $q_sroa_0_1199 = $149;
                        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
                        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
                        $sr_1202 = $155;
                        $carry_0203 = $152;
                    }
                }
                $q_sroa_1_1_lcssa = $147;
                $q_sroa_0_1_lcssa = $149;
                $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
                $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
                $carry_0_lcssa$1 = 0;
                $carry_0_lcssa$0 = $152;
            }
            $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
            $q_sroa_0_0_insert_ext75$1 = 0;
            $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
            if (($rem | 0) != 0) {
                HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
                HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
            }
            $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
            $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
        }
// =======================================================================




        function dynCall_iiii(index,a1,a2,a3) {
            index = index|0;
            a1=a1|0; a2=a2|0; a3=a3|0;
            return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
        }


        function dynCall_vi(index,a1) {
            index = index|0;
            a1=a1|0;
            FUNCTION_TABLE_vi[index&7](a1|0);
        }


        function dynCall_dd(index,a1) {
            index = index|0;
            a1=+a1;
            return +FUNCTION_TABLE_dd[index&7](+a1);
        }


        function dynCall_vii(index,a1,a2) {
            index = index|0;
            a1=a1|0; a2=a2|0;
            FUNCTION_TABLE_vii[index&7](a1|0,a2|0);
        }


        function dynCall_ii(index,a1) {
            index = index|0;
            a1=a1|0;
            return FUNCTION_TABLE_ii[index&7](a1|0)|0;
        }


        function dynCall_viii(index,a1,a2,a3) {
            index = index|0;
            a1=a1|0; a2=a2|0; a3=a3|0;
            FUNCTION_TABLE_viii[index&7](a1|0,a2|0,a3|0);
        }


        function dynCall_iiiii(index,a1,a2,a3,a4) {
            index = index|0;
            a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
            return FUNCTION_TABLE_iiiii[index&15](a1|0,a2|0,a3|0,a4|0)|0;
        }


        function dynCall_iii(index,a1,a2) {
            index = index|0;
            a1=a1|0; a2=a2|0;
            return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
        }


        function dynCall_viiii(index,a1,a2,a3,a4) {
            index = index|0;
            a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
            FUNCTION_TABLE_viiii[index&3](a1|0,a2|0,a3|0,a4|0);
        }

        function b0(p0,p1,p2) {
            p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0;
        }
        function b1(p0) {
            p0 = p0|0; abort(1);
        }
        function b2(p0) {
            p0 = +p0; abort(2);return +0;
        }
        function b3(p0,p1) {
            p0 = p0|0;p1 = p1|0; abort(3);
        }
        function b4(p0) {
            p0 = p0|0; abort(4);return 0;
        }
        function b5(p0,p1,p2) {
            p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(5);
        }
        function b6(p0,p1,p2,p3) {
            p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(6);return 0;
        }
        function b7(p0,p1) {
            p0 = p0|0;p1 = p1|0; abort(7);return 0;
        }
        function b8(p0,p1,p2,p3) {
            p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(8);
        }

// EMSCRIPTEN_END_FUNCS
        var FUNCTION_TABLE_iiii = [b0,_sn_write,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,__Z17file_block_getterPhjP10Gif_Reader,__Z19record_block_getterPhjP10Gif_Reader,_do_read,b0,b0,b0,b0,b0,b0,b0];
        var FUNCTION_TABLE_vi = [b1,_free,__ZL22kc_luminance_transformP6kcolor,_cleanup521,_cleanup526,b1,b1,b1];
        var FUNCTION_TABLE_dd = [b2,__ZL19scale_weight_catromd,__ZL21scale_weight_lanczos2d,__ZL21scale_weight_lanczos3d,__ZL21scale_weight_mitchelld,b2,b2,b2];
        var FUNCTION_TABLE_vii = [b3,__Z24color_change_transformerP12Gif_ColormapPv,__Z17clp_error_handlerP10Clp_ParserPKc,__Z22pipe_color_transformerP12Gif_ColormapPv,__Z16file_byte_putterhP10Gif_Writer,__Z18memory_byte_putterhP10Gif_Writer,b3,b3];
        var FUNCTION_TABLE_ii = [b4,___stdio_close,__Z16file_byte_getterP10Gif_Reader,__Z10file_eoferP10Gif_Reader,__Z18record_byte_getterP10Gif_Reader,__Z12record_eoferP10Gif_Reader,b4,b4];
        var FUNCTION_TABLE_viii = [b5,__Z8lwarningPKcS0_z,__Z6lerrorPKcS0_z,__Z17file_block_putterPKhjP10Gif_Writer,__Z19memory_block_putterPKhjP10Gif_Writer,b5,b5,b5];
        var FUNCTION_TABLE_iiiii = [b6,__Z12parse_stringP10Clp_ParserPKciPv,__Z9parse_intP10Clp_ParserPKciPv,__Z10parse_boolP10Clp_ParserPKciPv,__Z12parse_doubleP10Clp_ParserPKciPv,__Z17parse_string_listP10Clp_ParserPKciPv,__Z16parse_dimensionsP10Clp_ParserPKciPv,__Z14parse_positionP10Clp_ParserPKciPv,__Z18parse_scale_factorP10Clp_ParserPKciPv,__Z16parse_frame_specP10Clp_ParserPKciPv,__Z11parse_colorP10Clp_ParserPKciPv,__Z15parse_rectangleP10Clp_ParserPKciPv,__Z16parse_two_colorsP10Clp_ParserPKciPv,b6,b6,b6];
        var FUNCTION_TABLE_iii = [b7,__ZL17kd3_item_compar_0PKvS0_,__ZL17kd3_item_compar_1PKvS0_,__ZL17kd3_item_compar_2PKvS0_,__ZL31colormap_rgb_permutation_sorterPKvS0_,__ZL23permuting_sorter_down16PKvS0_,__ZL23permuting_sorter_down32PKvS0_,__ZL22red_kchistitem_comparePKvS0_,__ZL24green_kchistitem_comparePKvS0_,__ZL23blue_kchistitem_comparePKvS0_,__ZL29popularity_kchistitem_comparePKvS0_,__ZL19kd3_item_all_comparPKvS0_,__ZL23popularity_sort_comparePKvS0_,__ZL22halftone_pixel_comparePKvS0_,__ZL27ordered_dither_plan_comparePKvS0_,__Z23colormap_flat_diversityP6kchistP13Gt_OutputData,__Z24colormap_blend_diversityP6kchistP13Gt_OutputData,__Z19colormap_median_cutP6kchistP13Gt_OutputData,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
            ,b7,b7,b7];
        var FUNCTION_TABLE_viiii = [b8,__ZL16no_gifread_errorP10Gif_StreamP9Gif_ImageiPKc,__ZL13gifread_errorP10Gif_StreamP9Gif_ImageiPKc,b8];

        return { _i64Subtract: _i64Subtract, _free: _free, _main: _main, _i64Add: _i64Add, _memmove: _memmove, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_dd: dynCall_dd, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
    })
    // EMSCRIPTEN_END_ASM
    (Module.asmGlobalArg, Module.asmLibraryArg, buffer);
    var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
    var _free = Module["_free"] = asm["_free"];
    var _main = Module["_main"] = asm["_main"];
    var _i64Add = Module["_i64Add"] = asm["_i64Add"];
    var _memmove = Module["_memmove"] = asm["_memmove"];
    var _memset = Module["_memset"] = asm["_memset"];
    var runPostSets = Module["runPostSets"] = asm["runPostSets"];
    var _malloc = Module["_malloc"] = asm["_malloc"];
    var _memcpy = Module["_memcpy"] = asm["_memcpy"];
    var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
    var _fflush = Module["_fflush"] = asm["_fflush"];
    var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
    var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
    var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
    var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
    var dynCall_dd = Module["dynCall_dd"] = asm["dynCall_dd"];
    var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
    var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
    var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
    var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
    var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
    var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
    ;

    Runtime.stackAlloc = asm['stackAlloc'];
    Runtime.stackSave = asm['stackSave'];
    Runtime.stackRestore = asm['stackRestore'];
    Runtime.establishStackSpace = asm['establishStackSpace'];

    Runtime.setTempRet0 = asm['setTempRet0'];
    Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


    function ExitStatus(status) {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
    };
    ExitStatus.prototype = new Error();
    ExitStatus.prototype.constructor = ExitStatus;

    var initialStackTop;
    var preloadStartTime = null;
    var calledMain = false;

    dependenciesFulfilled = function runCaller() {
        // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
        if (!Module['calledRun']) run();
        if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
    }

    Module['callMain'] = Module.callMain = function callMain(args) {
        assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
        assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

        args = args || [];

        ensureInitRuntime();

        var argc = args.length+1;
        function pad() {
            for (var i = 0; i < 4-1; i++) {
                argv.push(0);
            }
        }
        var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
        pad();
        for (var i = 0; i < argc-1; i = i + 1) {
            argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
            pad();
        }
        argv.push(0);
        argv = allocate(argv, 'i32', ALLOC_NORMAL);


        try {

            var ret = Module['_main'](argc, argv, 0);


            // if we're not running an evented main loop, it's time to exit
            exit(ret, /* implicit = */ true);
        }
        catch(e) {
            if (e instanceof ExitStatus) {
                // exit() throws this once it's done to make sure execution
                // has been stopped completely
                return;
            } else if (e == 'SimulateInfiniteLoop') {
                // running an evented main loop, don't immediately exit
                Module['noExitRuntime'] = true;
                return;
            } else {
                if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
                throw e;
            }
        } finally {
            calledMain = true;
        }
    }




    function run(args) {
        args = args || Module['arguments'];

        if (preloadStartTime === null) preloadStartTime = Date.now();

        if (runDependencies > 0) {
            return;
        }

        preRun();

        if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
        if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

        function doRun() {
            if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
            Module['calledRun'] = true;

            if (ABORT) return;

            ensureInitRuntime();

            preMain();


            if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

            if (Module['_main'] && shouldRunNow) Module['callMain'](args);

            postRun();
        }

        if (Module['setStatus']) {
            Module['setStatus']('Running...');
            setTimeout(function() {
                setTimeout(function() {
                    Module['setStatus']('');
                }, 1);
                doRun();
            }, 1);
        } else {
            doRun();
        }
    }
    Module['run'] = Module.run = run;

    function exit(status, implicit) {
        if (implicit && Module['noExitRuntime']) {
            return;
        }

        if (Module['noExitRuntime']) {
        } else {

            ABORT = true;
            EXITSTATUS = status;
            STACKTOP = initialStackTop;

            exitRuntime();

            if (Module['onExit']) Module['onExit'](status);
        }

        if (ENVIRONMENT_IS_NODE) {
            // Work around a node.js bug where stdout buffer is not flushed at process exit:
            // Instead of process.exit() directly, wait for stdout flush event.
            // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
            // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
            process['stdout']['once']('drain', function () {
                process['exit'](status);
            });
            console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
            // Work around another node bug where sometimes 'drain' is never fired - make another effort
            // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
            setTimeout(function() {
                process['exit'](status);
            }, 500);
        } else
        if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
            quit(status);
        }
        // if we reach here, we must throw an exception to halt the current execution
        throw new ExitStatus(status);
    }
    Module['exit'] = Module.exit = exit;

    var abortDecorators = [];

    function abort(what) {
        if (what !== undefined) {
            Module.print(what);
            Module.printErr(what);
            what = JSON.stringify(what)
        } else {
            what = '';
        }

        ABORT = true;
        EXITSTATUS = 1;

        var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

        var output = 'abort(' + what + ') at ' + stackTrace() + extra;
        if (abortDecorators) {
            abortDecorators.forEach(function(decorator) {
                output = decorator(output, what);
            });
        }
        throw output;
    }
    Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

    if (Module['preInit']) {
        if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
        while (Module['preInit'].length > 0) {
            Module['preInit'].pop()();
        }
    }

// shouldRunNow refers to calling main(), not run().
    var shouldRunNow = true;
    if (Module['noInitialRun']) {
        shouldRunNow = false;
    }


    run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



    return Module['return'];
}
